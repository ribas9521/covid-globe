/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/covid-globe/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(23);
	module.exports = __webpack_require__(52);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var bind = __webpack_require__(14);
	
	/*global toString:true*/
	
	// utils is a library of generic helper functions non-specific to axios
	
	var toString = Object.prototype.toString;
	
	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */
	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}
	
	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */
	function isUndefined(val) {
	  return typeof val === 'undefined';
	}
	
	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */
	function isBuffer(val) {
	  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
	    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
	}
	
	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */
	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}
	
	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */
	function isFormData(val) {
	  return (typeof FormData !== 'undefined') && (val instanceof FormData);
	}
	
	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */
	function isArrayBufferView(val) {
	  var result;
	  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
	  }
	  return result;
	}
	
	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */
	function isString(val) {
	  return typeof val === 'string';
	}
	
	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */
	function isNumber(val) {
	  return typeof val === 'number';
	}
	
	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */
	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}
	
	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */
	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}
	
	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */
	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}
	
	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */
	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}
	
	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */
	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}
	
	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */
	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}
	
	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */
	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}
	
	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */
	function trim(str) {
	  return str.replace(/^\s*/, '').replace(/\s*$/, '');
	}
	
	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 */
	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
	                                           navigator.product === 'NativeScript' ||
	                                           navigator.product === 'NS')) {
	    return false;
	  }
	  return (
	    typeof window !== 'undefined' &&
	    typeof document !== 'undefined'
	  );
	}
	
	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */
	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  }
	
	  // Force an array if not already something iterable
	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }
	
	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}
	
	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function merge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = merge(result[key], val);
	    } else {
	      result[key] = val;
	    }
	  }
	
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}
	
	/**
	 * Function equal to merge with the difference being that no reference
	 * to original objects is kept.
	 *
	 * @see merge
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */
	function deepMerge(/* obj1, obj2, obj3, ... */) {
	  var result = {};
	  function assignValue(val, key) {
	    if (typeof result[key] === 'object' && typeof val === 'object') {
	      result[key] = deepMerge(result[key], val);
	    } else if (typeof val === 'object') {
	      result[key] = deepMerge({}, val);
	    } else {
	      result[key] = val;
	    }
	  }
	
	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }
	  return result;
	}
	
	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */
	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}
	
	module.exports = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  deepMerge: deepMerge,
	  extend: extend,
	  trim: trim
	};


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	if (true) {
	  module.exports = __webpack_require__(82);
	} else {
	  module.exports = require('./cjs/react.development.js');
	}


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	if (false) {
	  var ReactIs = require('react-is');
	
	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(71)();
	}


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(global = global || self, factory(global.THREE = {}));
	}(this, (function (exports) { 'use strict';
	
		// Polyfills
	
		if ( Number.EPSILON === undefined ) {
	
			Number.EPSILON = Math.pow( 2, - 52 );
	
		}
	
		if ( Number.isInteger === undefined ) {
	
			// Missing in IE
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger
	
			Number.isInteger = function ( value ) {
	
				return typeof value === 'number' && isFinite( value ) && Math.floor( value ) === value;
	
			};
	
		}
	
		//
	
		if ( Math.sign === undefined ) {
	
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
	
			Math.sign = function ( x ) {
	
				return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;
	
			};
	
		}
	
		if ( 'name' in Function.prototype === false ) {
	
			// Missing in IE
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
	
			Object.defineProperty( Function.prototype, 'name', {
	
				get: function () {
	
					return this.toString().match( /^\s*function\s*([^\(\s]*)/ )[ 1 ];
	
				}
	
			} );
	
		}
	
		if ( Object.assign === undefined ) {
	
			// Missing in IE
			// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
	
			Object.assign = function ( target ) {
	
				if ( target === undefined || target === null ) {
	
					throw new TypeError( 'Cannot convert undefined or null to object' );
	
				}
	
				var output = Object( target );
	
				for ( var index = 1; index < arguments.length; index ++ ) {
	
					var source = arguments[ index ];
	
					if ( source !== undefined && source !== null ) {
	
						for ( var nextKey in source ) {
	
							if ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {
	
								output[ nextKey ] = source[ nextKey ];
	
							}
	
						}
	
					}
	
				}
	
				return output;
	
			};
	
		}
	
		var REVISION = '114';
		var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
		var TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
		var CullFaceNone = 0;
		var CullFaceBack = 1;
		var CullFaceFront = 2;
		var CullFaceFrontBack = 3;
		var FrontFaceDirectionCW = 0;
		var FrontFaceDirectionCCW = 1;
		var BasicShadowMap = 0;
		var PCFShadowMap = 1;
		var PCFSoftShadowMap = 2;
		var VSMShadowMap = 3;
		var FrontSide = 0;
		var BackSide = 1;
		var DoubleSide = 2;
		var FlatShading = 1;
		var SmoothShading = 2;
		var NoBlending = 0;
		var NormalBlending = 1;
		var AdditiveBlending = 2;
		var SubtractiveBlending = 3;
		var MultiplyBlending = 4;
		var CustomBlending = 5;
		var AddEquation = 100;
		var SubtractEquation = 101;
		var ReverseSubtractEquation = 102;
		var MinEquation = 103;
		var MaxEquation = 104;
		var ZeroFactor = 200;
		var OneFactor = 201;
		var SrcColorFactor = 202;
		var OneMinusSrcColorFactor = 203;
		var SrcAlphaFactor = 204;
		var OneMinusSrcAlphaFactor = 205;
		var DstAlphaFactor = 206;
		var OneMinusDstAlphaFactor = 207;
		var DstColorFactor = 208;
		var OneMinusDstColorFactor = 209;
		var SrcAlphaSaturateFactor = 210;
		var NeverDepth = 0;
		var AlwaysDepth = 1;
		var LessDepth = 2;
		var LessEqualDepth = 3;
		var EqualDepth = 4;
		var GreaterEqualDepth = 5;
		var GreaterDepth = 6;
		var NotEqualDepth = 7;
		var MultiplyOperation = 0;
		var MixOperation = 1;
		var AddOperation = 2;
		var NoToneMapping = 0;
		var LinearToneMapping = 1;
		var ReinhardToneMapping = 2;
		var Uncharted2ToneMapping = 3;
		var CineonToneMapping = 4;
		var ACESFilmicToneMapping = 5;
	
		var UVMapping = 300;
		var CubeReflectionMapping = 301;
		var CubeRefractionMapping = 302;
		var EquirectangularReflectionMapping = 303;
		var EquirectangularRefractionMapping = 304;
		var SphericalReflectionMapping = 305;
		var CubeUVReflectionMapping = 306;
		var CubeUVRefractionMapping = 307;
		var RepeatWrapping = 1000;
		var ClampToEdgeWrapping = 1001;
		var MirroredRepeatWrapping = 1002;
		var NearestFilter = 1003;
		var NearestMipmapNearestFilter = 1004;
		var NearestMipMapNearestFilter = 1004;
		var NearestMipmapLinearFilter = 1005;
		var NearestMipMapLinearFilter = 1005;
		var LinearFilter = 1006;
		var LinearMipmapNearestFilter = 1007;
		var LinearMipMapNearestFilter = 1007;
		var LinearMipmapLinearFilter = 1008;
		var LinearMipMapLinearFilter = 1008;
		var UnsignedByteType = 1009;
		var ByteType = 1010;
		var ShortType = 1011;
		var UnsignedShortType = 1012;
		var IntType = 1013;
		var UnsignedIntType = 1014;
		var FloatType = 1015;
		var HalfFloatType = 1016;
		var UnsignedShort4444Type = 1017;
		var UnsignedShort5551Type = 1018;
		var UnsignedShort565Type = 1019;
		var UnsignedInt248Type = 1020;
		var AlphaFormat = 1021;
		var RGBFormat = 1022;
		var RGBAFormat = 1023;
		var LuminanceFormat = 1024;
		var LuminanceAlphaFormat = 1025;
		var RGBEFormat = RGBAFormat;
		var DepthFormat = 1026;
		var DepthStencilFormat = 1027;
		var RedFormat = 1028;
		var RedIntegerFormat = 1029;
		var RGFormat = 1030;
		var RGIntegerFormat = 1031;
		var RGBIntegerFormat = 1032;
		var RGBAIntegerFormat = 1033;
	
		var RGB_S3TC_DXT1_Format = 33776;
		var RGBA_S3TC_DXT1_Format = 33777;
		var RGBA_S3TC_DXT3_Format = 33778;
		var RGBA_S3TC_DXT5_Format = 33779;
		var RGB_PVRTC_4BPPV1_Format = 35840;
		var RGB_PVRTC_2BPPV1_Format = 35841;
		var RGBA_PVRTC_4BPPV1_Format = 35842;
		var RGBA_PVRTC_2BPPV1_Format = 35843;
		var RGB_ETC1_Format = 36196;
		var RGB_ETC2_Format = 37492;
		var RGBA_ETC2_EAC_Format = 37496;
		var RGBA_ASTC_4x4_Format = 37808;
		var RGBA_ASTC_5x4_Format = 37809;
		var RGBA_ASTC_5x5_Format = 37810;
		var RGBA_ASTC_6x5_Format = 37811;
		var RGBA_ASTC_6x6_Format = 37812;
		var RGBA_ASTC_8x5_Format = 37813;
		var RGBA_ASTC_8x6_Format = 37814;
		var RGBA_ASTC_8x8_Format = 37815;
		var RGBA_ASTC_10x5_Format = 37816;
		var RGBA_ASTC_10x6_Format = 37817;
		var RGBA_ASTC_10x8_Format = 37818;
		var RGBA_ASTC_10x10_Format = 37819;
		var RGBA_ASTC_12x10_Format = 37820;
		var RGBA_ASTC_12x12_Format = 37821;
		var SRGB8_ALPHA8_ASTC_4x4_Format = 37840;
		var SRGB8_ALPHA8_ASTC_5x4_Format = 37841;
		var SRGB8_ALPHA8_ASTC_5x5_Format = 37842;
		var SRGB8_ALPHA8_ASTC_6x5_Format = 37843;
		var SRGB8_ALPHA8_ASTC_6x6_Format = 37844;
		var SRGB8_ALPHA8_ASTC_8x5_Format = 37845;
		var SRGB8_ALPHA8_ASTC_8x6_Format = 37846;
		var SRGB8_ALPHA8_ASTC_8x8_Format = 37847;
		var SRGB8_ALPHA8_ASTC_10x5_Format = 37848;
		var SRGB8_ALPHA8_ASTC_10x6_Format = 37849;
		var SRGB8_ALPHA8_ASTC_10x8_Format = 37850;
		var SRGB8_ALPHA8_ASTC_10x10_Format = 37851;
		var SRGB8_ALPHA8_ASTC_12x10_Format = 37852;
		var SRGB8_ALPHA8_ASTC_12x12_Format = 37853;
		var LoopOnce = 2200;
		var LoopRepeat = 2201;
		var LoopPingPong = 2202;
		var InterpolateDiscrete = 2300;
		var InterpolateLinear = 2301;
		var InterpolateSmooth = 2302;
		var ZeroCurvatureEnding = 2400;
		var ZeroSlopeEnding = 2401;
		var WrapAroundEnding = 2402;
		var TrianglesDrawMode = 0;
		var TriangleStripDrawMode = 1;
		var TriangleFanDrawMode = 2;
		var LinearEncoding = 3000;
		var sRGBEncoding = 3001;
		var GammaEncoding = 3007;
		var RGBEEncoding = 3002;
		var LogLuvEncoding = 3003;
		var RGBM7Encoding = 3004;
		var RGBM16Encoding = 3005;
		var RGBDEncoding = 3006;
		var BasicDepthPacking = 3200;
		var RGBADepthPacking = 3201;
		var TangentSpaceNormalMap = 0;
		var ObjectSpaceNormalMap = 1;
	
		var ZeroStencilOp = 0;
		var KeepStencilOp = 7680;
		var ReplaceStencilOp = 7681;
		var IncrementStencilOp = 7682;
		var DecrementStencilOp = 7683;
		var IncrementWrapStencilOp = 34055;
		var DecrementWrapStencilOp = 34056;
		var InvertStencilOp = 5386;
	
		var NeverStencilFunc = 512;
		var LessStencilFunc = 513;
		var EqualStencilFunc = 514;
		var LessEqualStencilFunc = 515;
		var GreaterStencilFunc = 516;
		var NotEqualStencilFunc = 517;
		var GreaterEqualStencilFunc = 518;
		var AlwaysStencilFunc = 519;
	
		var StaticDrawUsage = 35044;
		var DynamicDrawUsage = 35048;
		var StreamDrawUsage = 35040;
		var StaticReadUsage = 35045;
		var DynamicReadUsage = 35049;
		var StreamReadUsage = 35041;
		var StaticCopyUsage = 35046;
		var DynamicCopyUsage = 35050;
		var StreamCopyUsage = 35042;
	
		/**
		 * https://github.com/mrdoob/eventdispatcher.js/
		 */
	
		function EventDispatcher() {}
	
		Object.assign( EventDispatcher.prototype, {
	
			addEventListener: function ( type, listener ) {
	
				if ( this._listeners === undefined ) { this._listeners = {}; }
	
				var listeners = this._listeners;
	
				if ( listeners[ type ] === undefined ) {
	
					listeners[ type ] = [];
	
				}
	
				if ( listeners[ type ].indexOf( listener ) === - 1 ) {
	
					listeners[ type ].push( listener );
	
				}
	
			},
	
			hasEventListener: function ( type, listener ) {
	
				if ( this._listeners === undefined ) { return false; }
	
				var listeners = this._listeners;
	
				return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;
	
			},
	
			removeEventListener: function ( type, listener ) {
	
				if ( this._listeners === undefined ) { return; }
	
				var listeners = this._listeners;
				var listenerArray = listeners[ type ];
	
				if ( listenerArray !== undefined ) {
	
					var index = listenerArray.indexOf( listener );
	
					if ( index !== - 1 ) {
	
						listenerArray.splice( index, 1 );
	
					}
	
				}
	
			},
	
			dispatchEvent: function ( event ) {
	
				if ( this._listeners === undefined ) { return; }
	
				var listeners = this._listeners;
				var listenerArray = listeners[ event.type ];
	
				if ( listenerArray !== undefined ) {
	
					event.target = this;
	
					var array = listenerArray.slice( 0 );
	
					for ( var i = 0, l = array.length; i < l; i ++ ) {
	
						array[ i ].call( this, event );
	
					}
	
				}
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author thezwap
		 */
	
		var _lut = [];
	
		for ( var i = 0; i < 256; i ++ ) {
	
			_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );
	
		}
	
		var MathUtils = {
	
			DEG2RAD: Math.PI / 180,
			RAD2DEG: 180 / Math.PI,
	
			generateUUID: function () {
	
				// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
	
				var d0 = Math.random() * 0xffffffff | 0;
				var d1 = Math.random() * 0xffffffff | 0;
				var d2 = Math.random() * 0xffffffff | 0;
				var d3 = Math.random() * 0xffffffff | 0;
				var uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
					_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
					_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
					_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];
	
				// .toUpperCase() here flattens concatenated strings to save heap memory space.
				return uuid.toUpperCase();
	
			},
	
			clamp: function ( value, min, max ) {
	
				return Math.max( min, Math.min( max, value ) );
	
			},
	
			// compute euclidian modulo of m % n
			// https://en.wikipedia.org/wiki/Modulo_operation
	
			euclideanModulo: function ( n, m ) {
	
				return ( ( n % m ) + m ) % m;
	
			},
	
			// Linear mapping from range <a1, a2> to range <b1, b2>
	
			mapLinear: function ( x, a1, a2, b1, b2 ) {
	
				return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
	
			},
	
			// https://en.wikipedia.org/wiki/Linear_interpolation
	
			lerp: function ( x, y, t ) {
	
				return ( 1 - t ) * x + t * y;
	
			},
	
			// http://en.wikipedia.org/wiki/Smoothstep
	
			smoothstep: function ( x, min, max ) {
	
				if ( x <= min ) { return 0; }
				if ( x >= max ) { return 1; }
	
				x = ( x - min ) / ( max - min );
	
				return x * x * ( 3 - 2 * x );
	
			},
	
			smootherstep: function ( x, min, max ) {
	
				if ( x <= min ) { return 0; }
				if ( x >= max ) { return 1; }
	
				x = ( x - min ) / ( max - min );
	
				return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
	
			},
	
			// Random integer from <low, high> interval
	
			randInt: function ( low, high ) {
	
				return low + Math.floor( Math.random() * ( high - low + 1 ) );
	
			},
	
			// Random float from <low, high> interval
	
			randFloat: function ( low, high ) {
	
				return low + Math.random() * ( high - low );
	
			},
	
			// Random float from <-range/2, range/2> interval
	
			randFloatSpread: function ( range ) {
	
				return range * ( 0.5 - Math.random() );
	
			},
	
			degToRad: function ( degrees ) {
	
				return degrees * MathUtils.DEG2RAD;
	
			},
	
			radToDeg: function ( radians ) {
	
				return radians * MathUtils.RAD2DEG;
	
			},
	
			isPowerOfTwo: function ( value ) {
	
				return ( value & ( value - 1 ) ) === 0 && value !== 0;
	
			},
	
			ceilPowerOfTwo: function ( value ) {
	
				return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );
	
			},
	
			floorPowerOfTwo: function ( value ) {
	
				return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );
	
			},
	
			setQuaternionFromProperEuler: function ( q, a, b, c, order ) {
	
				// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles
	
				// rotations are applied to the axes in the order specified by 'order'
				// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
				// angles are in radians
	
				var cos = Math.cos;
				var sin = Math.sin;
	
				var c2 = cos( b / 2 );
				var s2 = sin( b / 2 );
	
				var c13 = cos( ( a + c ) / 2 );
				var s13 = sin( ( a + c ) / 2 );
	
				var c1_3 = cos( ( a - c ) / 2 );
				var s1_3 = sin( ( a - c ) / 2 );
	
				var c3_1 = cos( ( c - a ) / 2 );
				var s3_1 = sin( ( c - a ) / 2 );
	
				if ( order === 'XYX' ) {
	
					q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
	
				} else if ( order === 'YZY' ) {
	
					q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
	
				} else if ( order === 'ZXZ' ) {
	
					q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
	
				} else if ( order === 'XZX' ) {
	
					q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
	
				} else if ( order === 'YXY' ) {
	
					q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
	
				} else if ( order === 'ZYZ' ) {
	
					q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
	
				} else {
	
					console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.' );
	
				}
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author philogb / http://blog.thejit.org/
		 * @author egraether / http://egraether.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */
	
		function Vector2( x, y ) {
	
			this.x = x || 0;
			this.y = y || 0;
	
		}
	
		Object.defineProperties( Vector2.prototype, {
	
			"width": {
	
				get: function () {
	
					return this.x;
	
				},
	
				set: function ( value ) {
	
					this.x = value;
	
				}
	
			},
	
			"height": {
	
				get: function () {
	
					return this.y;
	
				},
	
				set: function ( value ) {
	
					this.y = value;
	
				}
	
			}
	
		} );
	
		Object.assign( Vector2.prototype, {
	
			isVector2: true,
	
			set: function ( x, y ) {
	
				this.x = x;
				this.y = y;
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.x = scalar;
				this.y = scalar;
	
				return this;
	
			},
	
			setX: function ( x ) {
	
				this.x = x;
	
				return this;
	
			},
	
			setY: function ( y ) {
	
				this.y = y;
	
				return this;
	
			},
	
			setComponent: function ( index, value ) {
	
				switch ( index ) {
	
					case 0: this.x = value; break;
					case 1: this.y = value; break;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
				return this;
	
			},
	
			getComponent: function ( index ) {
	
				switch ( index ) {
	
					case 0: return this.x;
					case 1: return this.y;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.x, this.y );
	
			},
	
			copy: function ( v ) {
	
				this.x = v.x;
				this.y = v.y;
	
				return this;
	
			},
	
			add: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );
	
				}
	
				this.x += v.x;
				this.y += v.y;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.x += s;
				this.y += s;
	
				return this;
	
			},
	
			addVectors: function ( a, b ) {
	
				this.x = a.x + b.x;
				this.y = a.y + b.y;
	
				return this;
	
			},
	
			addScaledVector: function ( v, s ) {
	
				this.x += v.x * s;
				this.y += v.y * s;
	
				return this;
	
			},
	
			sub: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );
	
				}
	
				this.x -= v.x;
				this.y -= v.y;
	
				return this;
	
			},
	
			subScalar: function ( s ) {
	
				this.x -= s;
				this.y -= s;
	
				return this;
	
			},
	
			subVectors: function ( a, b ) {
	
				this.x = a.x - b.x;
				this.y = a.y - b.y;
	
				return this;
	
			},
	
			multiply: function ( v ) {
	
				this.x *= v.x;
				this.y *= v.y;
	
				return this;
	
			},
	
			multiplyScalar: function ( scalar ) {
	
				this.x *= scalar;
				this.y *= scalar;
	
				return this;
	
			},
	
			divide: function ( v ) {
	
				this.x /= v.x;
				this.y /= v.y;
	
				return this;
	
			},
	
			divideScalar: function ( scalar ) {
	
				return this.multiplyScalar( 1 / scalar );
	
			},
	
			applyMatrix3: function ( m ) {
	
				var x = this.x, y = this.y;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
				this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];
	
				return this;
	
			},
	
			min: function ( v ) {
	
				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
	
				return this;
	
			},
	
			max: function ( v ) {
	
				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
	
				return this;
	
			},
	
			clamp: function ( min, max ) {
	
				// assumes min < max, componentwise
	
				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
	
				return this;
	
			},
	
			clampScalar: function ( minVal, maxVal ) {
	
				this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
				this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
	
				return this;
	
			},
	
			clampLength: function ( min, max ) {
	
				var length = this.length();
	
				return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
	
			},
	
			floor: function () {
	
				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
	
				return this;
	
			},
	
			ceil: function () {
	
				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
	
				return this;
	
			},
	
			round: function () {
	
				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
	
				return this;
	
			},
	
			roundToZero: function () {
	
				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
	
				return this;
	
			},
	
			negate: function () {
	
				this.x = - this.x;
				this.y = - this.y;
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this.x * v.x + this.y * v.y;
	
			},
	
			cross: function ( v ) {
	
				return this.x * v.y - this.y * v.x;
	
			},
	
			lengthSq: function () {
	
				return this.x * this.x + this.y * this.y;
	
			},
	
			length: function () {
	
				return Math.sqrt( this.x * this.x + this.y * this.y );
	
			},
	
			manhattanLength: function () {
	
				return Math.abs( this.x ) + Math.abs( this.y );
	
			},
	
			normalize: function () {
	
				return this.divideScalar( this.length() || 1 );
	
			},
	
			angle: function () {
	
				// computes the angle in radians with respect to the positive x-axis
	
				var angle = Math.atan2( - this.y, - this.x ) + Math.PI;
	
				return angle;
	
			},
	
			distanceTo: function ( v ) {
	
				return Math.sqrt( this.distanceToSquared( v ) );
	
			},
	
			distanceToSquared: function ( v ) {
	
				var dx = this.x - v.x, dy = this.y - v.y;
				return dx * dx + dy * dy;
	
			},
	
			manhattanDistanceTo: function ( v ) {
	
				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );
	
			},
	
			setLength: function ( length ) {
	
				return this.normalize().multiplyScalar( length );
	
			},
	
			lerp: function ( v, alpha ) {
	
				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
	
				return this;
	
			},
	
			lerpVectors: function ( v1, v2, alpha ) {
	
				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			},
	
			equals: function ( v ) {
	
				return ( ( v.x === this.x ) && ( v.y === this.y ) );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) { array = []; }
				if ( offset === undefined ) { offset = 0; }
	
				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
	
				return array;
	
			},
	
			fromBufferAttribute: function ( attribute, index, offset ) {
	
				if ( offset !== undefined ) {
	
					console.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );
	
				}
	
				this.x = attribute.getX( index );
				this.y = attribute.getY( index );
	
				return this;
	
			},
	
			rotateAround: function ( center, angle ) {
	
				var c = Math.cos( angle ), s = Math.sin( angle );
	
				var x = this.x - center.x;
				var y = this.y - center.y;
	
				this.x = x * c - y * s + center.x;
				this.y = x * s + y * c + center.y;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 * @author tschw
		 */
	
		function Matrix3() {
	
			this.elements = [
	
				1, 0, 0,
				0, 1, 0,
				0, 0, 1
	
			];
	
			if ( arguments.length > 0 ) {
	
				console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );
	
			}
	
		}
	
		Object.assign( Matrix3.prototype, {
	
			isMatrix3: true,
	
			set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
	
				var te = this.elements;
	
				te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
				te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
				te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;
	
				return this;
	
			},
	
			identity: function () {
	
				this.set(
	
					1, 0, 0,
					0, 1, 0,
					0, 0, 1
	
				);
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().fromArray( this.elements );
	
			},
	
			copy: function ( m ) {
	
				var te = this.elements;
				var me = m.elements;
	
				te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
				te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
				te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];
	
				return this;
	
			},
	
			extractBasis: function ( xAxis, yAxis, zAxis ) {
	
				xAxis.setFromMatrix3Column( this, 0 );
				yAxis.setFromMatrix3Column( this, 1 );
				zAxis.setFromMatrix3Column( this, 2 );
	
				return this;
	
			},
	
			setFromMatrix4: function ( m ) {
	
				var me = m.elements;
	
				this.set(
	
					me[ 0 ], me[ 4 ], me[ 8 ],
					me[ 1 ], me[ 5 ], me[ 9 ],
					me[ 2 ], me[ 6 ], me[ 10 ]
	
				);
	
				return this;
	
			},
	
			multiply: function ( m ) {
	
				return this.multiplyMatrices( this, m );
	
			},
	
			premultiply: function ( m ) {
	
				return this.multiplyMatrices( m, this );
	
			},
	
			multiplyMatrices: function ( a, b ) {
	
				var ae = a.elements;
				var be = b.elements;
				var te = this.elements;
	
				var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
				var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
				var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];
	
				var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
				var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
				var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];
	
				te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
				te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
				te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;
	
				te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
				te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
				te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;
	
				te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
				te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
				te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;
	
				return this;
	
			},
	
			multiplyScalar: function ( s ) {
	
				var te = this.elements;
	
				te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
				te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
				te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
	
				return this;
	
			},
	
			determinant: function () {
	
				var te = this.elements;
	
				var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
					d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
					g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
	
				return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
	
			},
	
			getInverse: function ( matrix, throwOnDegenerate ) {
	
				if ( matrix && matrix.isMatrix4 ) {
	
					console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );
	
				}
	
				var me = matrix.elements,
					te = this.elements,
	
					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
					n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
					n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],
	
					t11 = n33 * n22 - n32 * n23,
					t12 = n32 * n13 - n33 * n12,
					t13 = n23 * n12 - n22 * n13,
	
					det = n11 * t11 + n21 * t12 + n31 * t13;
	
				if ( det === 0 ) {
	
					var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
	
					if ( throwOnDegenerate === true ) {
	
						throw new Error( msg );
	
					} else {
	
						console.warn( msg );
	
					}
	
					return this.identity();
	
				}
	
				var detInv = 1 / det;
	
				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
				te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;
	
				te[ 3 ] = t12 * detInv;
				te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
				te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;
	
				te[ 6 ] = t13 * detInv;
				te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
				te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;
	
				return this;
	
			},
	
			transpose: function () {
	
				var tmp, m = this.elements;
	
				tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
				tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
				tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
	
				return this;
	
			},
	
			getNormalMatrix: function ( matrix4 ) {
	
				return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();
	
			},
	
			transposeIntoArray: function ( r ) {
	
				var m = this.elements;
	
				r[ 0 ] = m[ 0 ];
				r[ 1 ] = m[ 3 ];
				r[ 2 ] = m[ 6 ];
				r[ 3 ] = m[ 1 ];
				r[ 4 ] = m[ 4 ];
				r[ 5 ] = m[ 7 ];
				r[ 6 ] = m[ 2 ];
				r[ 7 ] = m[ 5 ];
				r[ 8 ] = m[ 8 ];
	
				return this;
	
			},
	
			setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {
	
				var c = Math.cos( rotation );
				var s = Math.sin( rotation );
	
				this.set(
					sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
					- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
					0, 0, 1
				);
	
			},
	
			scale: function ( sx, sy ) {
	
				var te = this.elements;
	
				te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
				te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;
	
				return this;
	
			},
	
			rotate: function ( theta ) {
	
				var c = Math.cos( theta );
				var s = Math.sin( theta );
	
				var te = this.elements;
	
				var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
				var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];
	
				te[ 0 ] = c * a11 + s * a21;
				te[ 3 ] = c * a12 + s * a22;
				te[ 6 ] = c * a13 + s * a23;
	
				te[ 1 ] = - s * a11 + c * a21;
				te[ 4 ] = - s * a12 + c * a22;
				te[ 7 ] = - s * a13 + c * a23;
	
				return this;
	
			},
	
			translate: function ( tx, ty ) {
	
				var te = this.elements;
	
				te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
				te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];
	
				return this;
	
			},
	
			equals: function ( matrix ) {
	
				var te = this.elements;
				var me = matrix.elements;
	
				for ( var i = 0; i < 9; i ++ ) {
	
					if ( te[ i ] !== me[ i ] ) { return false; }
	
				}
	
				return true;
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				for ( var i = 0; i < 9; i ++ ) {
	
					this.elements[ i ] = array[ i + offset ];
	
				}
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) { array = []; }
				if ( offset === undefined ) { offset = 0; }
	
				var te = this.elements;
	
				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];
	
				array[ offset + 3 ] = te[ 3 ];
				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];
	
				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];
				array[ offset + 8 ] = te[ 8 ];
	
				return array;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 */
	
		var _canvas;
	
		var ImageUtils = {
	
			getDataURL: function ( image ) {
	
				var canvas;
	
				if ( typeof HTMLCanvasElement == 'undefined' ) {
	
					return image.src;
	
				} else if ( image instanceof HTMLCanvasElement ) {
	
					canvas = image;
	
				} else {
	
					if ( _canvas === undefined ) { _canvas = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ); }
	
					_canvas.width = image.width;
					_canvas.height = image.height;
	
					var context = _canvas.getContext( '2d' );
	
					if ( image instanceof ImageData ) {
	
						context.putImageData( image, 0, 0 );
	
					} else {
	
						context.drawImage( image, 0, 0, image.width, image.height );
	
					}
	
					canvas = _canvas;
	
				}
	
				if ( canvas.width > 2048 || canvas.height > 2048 ) {
	
					return canvas.toDataURL( 'image/jpeg', 0.6 );
	
				} else {
	
					return canvas.toDataURL( 'image/png' );
	
				}
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 */
	
		var textureId = 0;
	
		function Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
	
			Object.defineProperty( this, 'id', { value: textureId ++ } );
	
			this.uuid = MathUtils.generateUUID();
	
			this.name = '';
	
			this.image = image !== undefined ? image : Texture.DEFAULT_IMAGE;
			this.mipmaps = [];
	
			this.mapping = mapping !== undefined ? mapping : Texture.DEFAULT_MAPPING;
	
			this.wrapS = wrapS !== undefined ? wrapS : ClampToEdgeWrapping;
			this.wrapT = wrapT !== undefined ? wrapT : ClampToEdgeWrapping;
	
			this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
			this.minFilter = minFilter !== undefined ? minFilter : LinearMipmapLinearFilter;
	
			this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
	
			this.format = format !== undefined ? format : RGBAFormat;
			this.internalFormat = null;
			this.type = type !== undefined ? type : UnsignedByteType;
	
			this.offset = new Vector2( 0, 0 );
			this.repeat = new Vector2( 1, 1 );
			this.center = new Vector2( 0, 0 );
			this.rotation = 0;
	
			this.matrixAutoUpdate = true;
			this.matrix = new Matrix3();
	
			this.generateMipmaps = true;
			this.premultiplyAlpha = false;
			this.flipY = true;
			this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
	
			// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.
			//
			// Also changing the encoding after already used by a Material will not automatically make the Material
			// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.
			this.encoding = encoding !== undefined ? encoding : LinearEncoding;
	
			this.version = 0;
			this.onUpdate = null;
	
		}
	
		Texture.DEFAULT_IMAGE = undefined;
		Texture.DEFAULT_MAPPING = UVMapping;
	
		Texture.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
	
			constructor: Texture,
	
			isTexture: true,
	
			updateMatrix: function () {
	
				this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.name = source.name;
	
				this.image = source.image;
				this.mipmaps = source.mipmaps.slice( 0 );
	
				this.mapping = source.mapping;
	
				this.wrapS = source.wrapS;
				this.wrapT = source.wrapT;
	
				this.magFilter = source.magFilter;
				this.minFilter = source.minFilter;
	
				this.anisotropy = source.anisotropy;
	
				this.format = source.format;
				this.internalFormat = source.internalFormat;
				this.type = source.type;
	
				this.offset.copy( source.offset );
				this.repeat.copy( source.repeat );
				this.center.copy( source.center );
				this.rotation = source.rotation;
	
				this.matrixAutoUpdate = source.matrixAutoUpdate;
				this.matrix.copy( source.matrix );
	
				this.generateMipmaps = source.generateMipmaps;
				this.premultiplyAlpha = source.premultiplyAlpha;
				this.flipY = source.flipY;
				this.unpackAlignment = source.unpackAlignment;
				this.encoding = source.encoding;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var isRootObject = ( meta === undefined || typeof meta === 'string' );
	
				if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {
	
					return meta.textures[ this.uuid ];
	
				}
	
				var output = {
	
					metadata: {
						version: 4.5,
						type: 'Texture',
						generator: 'Texture.toJSON'
					},
	
					uuid: this.uuid,
					name: this.name,
	
					mapping: this.mapping,
	
					repeat: [ this.repeat.x, this.repeat.y ],
					offset: [ this.offset.x, this.offset.y ],
					center: [ this.center.x, this.center.y ],
					rotation: this.rotation,
	
					wrap: [ this.wrapS, this.wrapT ],
	
					format: this.format,
					type: this.type,
					encoding: this.encoding,
	
					minFilter: this.minFilter,
					magFilter: this.magFilter,
					anisotropy: this.anisotropy,
	
					flipY: this.flipY,
	
					premultiplyAlpha: this.premultiplyAlpha,
					unpackAlignment: this.unpackAlignment
	
				};
	
				if ( this.image !== undefined ) {
	
					// TODO: Move to THREE.Image
	
					var image = this.image;
	
					if ( image.uuid === undefined ) {
	
						image.uuid = MathUtils.generateUUID(); // UGH
	
					}
	
					if ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {
	
						var url;
	
						if ( Array.isArray( image ) ) {
	
							// process array of images e.g. CubeTexture
	
							url = [];
	
							for ( var i = 0, l = image.length; i < l; i ++ ) {
	
								url.push( ImageUtils.getDataURL( image[ i ] ) );
	
							}
	
						} else {
	
							// process single image
	
							url = ImageUtils.getDataURL( image );
	
						}
	
						meta.images[ image.uuid ] = {
							uuid: image.uuid,
							url: url
						};
	
					}
	
					output.image = image.uuid;
	
				}
	
				if ( ! isRootObject ) {
	
					meta.textures[ this.uuid ] = output;
	
				}
	
				return output;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			},
	
			transformUv: function ( uv ) {
	
				if ( this.mapping !== UVMapping ) { return uv; }
	
				uv.applyMatrix3( this.matrix );
	
				if ( uv.x < 0 || uv.x > 1 ) {
	
					switch ( this.wrapS ) {
	
						case RepeatWrapping:
	
							uv.x = uv.x - Math.floor( uv.x );
							break;
	
						case ClampToEdgeWrapping:
	
							uv.x = uv.x < 0 ? 0 : 1;
							break;
	
						case MirroredRepeatWrapping:
	
							if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {
	
								uv.x = Math.ceil( uv.x ) - uv.x;
	
							} else {
	
								uv.x = uv.x - Math.floor( uv.x );
	
							}
							break;
	
					}
	
				}
	
				if ( uv.y < 0 || uv.y > 1 ) {
	
					switch ( this.wrapT ) {
	
						case RepeatWrapping:
	
							uv.y = uv.y - Math.floor( uv.y );
							break;
	
						case ClampToEdgeWrapping:
	
							uv.y = uv.y < 0 ? 0 : 1;
							break;
	
						case MirroredRepeatWrapping:
	
							if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {
	
								uv.y = Math.ceil( uv.y ) - uv.y;
	
							} else {
	
								uv.y = uv.y - Math.floor( uv.y );
	
							}
							break;
	
					}
	
				}
	
				if ( this.flipY ) {
	
					uv.y = 1 - uv.y;
	
				}
	
				return uv;
	
			}
	
		} );
	
		Object.defineProperty( Texture.prototype, "needsUpdate", {
	
			set: function ( value ) {
	
				if ( value === true ) { this.version ++; }
	
			}
	
		} );
	
		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Vector4( x, y, z, w ) {
	
			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;
			this.w = ( w !== undefined ) ? w : 1;
	
		}
	
		Object.defineProperties( Vector4.prototype, {
	
			"width": {
	
				get: function () {
	
					return this.z;
	
				},
	
				set: function ( value ) {
	
					this.z = value;
	
				}
	
			},
	
			"height": {
	
				get: function () {
	
					return this.w;
	
				},
	
				set: function ( value ) {
	
					this.w = value;
	
				}
	
			}
	
		} );
	
		Object.assign( Vector4.prototype, {
	
			isVector4: true,
	
			set: function ( x, y, z, w ) {
	
				this.x = x;
				this.y = y;
				this.z = z;
				this.w = w;
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.x = scalar;
				this.y = scalar;
				this.z = scalar;
				this.w = scalar;
	
				return this;
	
			},
	
			setX: function ( x ) {
	
				this.x = x;
	
				return this;
	
			},
	
			setY: function ( y ) {
	
				this.y = y;
	
				return this;
	
			},
	
			setZ: function ( z ) {
	
				this.z = z;
	
				return this;
	
			},
	
			setW: function ( w ) {
	
				this.w = w;
	
				return this;
	
			},
	
			setComponent: function ( index, value ) {
	
				switch ( index ) {
	
					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					case 3: this.w = value; break;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
				return this;
	
			},
	
			getComponent: function ( index ) {
	
				switch ( index ) {
	
					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					case 3: return this.w;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.x, this.y, this.z, this.w );
	
			},
	
			copy: function ( v ) {
	
				this.x = v.x;
				this.y = v.y;
				this.z = v.z;
				this.w = ( v.w !== undefined ) ? v.w : 1;
	
				return this;
	
			},
	
			add: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );
	
				}
	
				this.x += v.x;
				this.y += v.y;
				this.z += v.z;
				this.w += v.w;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.x += s;
				this.y += s;
				this.z += s;
				this.w += s;
	
				return this;
	
			},
	
			addVectors: function ( a, b ) {
	
				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;
				this.w = a.w + b.w;
	
				return this;
	
			},
	
			addScaledVector: function ( v, s ) {
	
				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;
				this.w += v.w * s;
	
				return this;
	
			},
	
			sub: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );
	
				}
	
				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;
				this.w -= v.w;
	
				return this;
	
			},
	
			subScalar: function ( s ) {
	
				this.x -= s;
				this.y -= s;
				this.z -= s;
				this.w -= s;
	
				return this;
	
			},
	
			subVectors: function ( a, b ) {
	
				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;
				this.w = a.w - b.w;
	
				return this;
	
			},
	
			multiplyScalar: function ( scalar ) {
	
				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;
	
				return this;
	
			},
	
			applyMatrix4: function ( m ) {
	
				var x = this.x, y = this.y, z = this.z, w = this.w;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
				this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
	
				return this;
	
			},
	
			divideScalar: function ( scalar ) {
	
				return this.multiplyScalar( 1 / scalar );
	
			},
	
			setAxisAngleFromQuaternion: function ( q ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
	
				// q is assumed to be normalized
	
				this.w = 2 * Math.acos( q.w );
	
				var s = Math.sqrt( 1 - q.w * q.w );
	
				if ( s < 0.0001 ) {
	
					this.x = 1;
					this.y = 0;
					this.z = 0;
	
				} else {
	
					this.x = q.x / s;
					this.y = q.y / s;
					this.z = q.z / s;
	
				}
	
				return this;
	
			},
	
			setAxisAngleFromRotationMatrix: function ( m ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				var angle, x, y, z,		// variables for result
					epsilon = 0.01,		// margin to allow for rounding errors
					epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees
	
					te = m.elements,
	
					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
	
				if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
				     ( Math.abs( m13 - m31 ) < epsilon ) &&
				     ( Math.abs( m23 - m32 ) < epsilon ) ) {
	
					// singularity found
					// first check for identity matrix which must have +1 for all terms
					// in leading diagonal and zero in other terms
	
					if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
					     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
					     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
					     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
	
						// this singularity is identity matrix so angle = 0
	
						this.set( 1, 0, 0, 0 );
	
						return this; // zero angle, arbitrary axis
	
					}
	
					// otherwise this singularity is angle = 180
	
					angle = Math.PI;
	
					var xx = ( m11 + 1 ) / 2;
					var yy = ( m22 + 1 ) / 2;
					var zz = ( m33 + 1 ) / 2;
					var xy = ( m12 + m21 ) / 4;
					var xz = ( m13 + m31 ) / 4;
					var yz = ( m23 + m32 ) / 4;
	
					if ( ( xx > yy ) && ( xx > zz ) ) {
	
						// m11 is the largest diagonal term
	
						if ( xx < epsilon ) {
	
							x = 0;
							y = 0.707106781;
							z = 0.707106781;
	
						} else {
	
							x = Math.sqrt( xx );
							y = xy / x;
							z = xz / x;
	
						}
	
					} else if ( yy > zz ) {
	
						// m22 is the largest diagonal term
	
						if ( yy < epsilon ) {
	
							x = 0.707106781;
							y = 0;
							z = 0.707106781;
	
						} else {
	
							y = Math.sqrt( yy );
							x = xy / y;
							z = yz / y;
	
						}
	
					} else {
	
						// m33 is the largest diagonal term so base result on this
	
						if ( zz < epsilon ) {
	
							x = 0.707106781;
							y = 0.707106781;
							z = 0;
	
						} else {
	
							z = Math.sqrt( zz );
							x = xz / z;
							y = yz / z;
	
						}
	
					}
	
					this.set( x, y, z, angle );
	
					return this; // return 180 deg rotation
	
				}
	
				// as we have reached here there are no singularities so we can handle normally
	
				var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
				                   ( m13 - m31 ) * ( m13 - m31 ) +
				                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize
	
				if ( Math.abs( s ) < 0.001 ) { s = 1; }
	
				// prevent divide by zero, should not happen if matrix is orthogonal and should be
				// caught by singularity test above, but I've left it in just in case
	
				this.x = ( m32 - m23 ) / s;
				this.y = ( m13 - m31 ) / s;
				this.z = ( m21 - m12 ) / s;
				this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
	
				return this;
	
			},
	
			min: function ( v ) {
	
				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );
				this.w = Math.min( this.w, v.w );
	
				return this;
	
			},
	
			max: function ( v ) {
	
				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );
				this.w = Math.max( this.w, v.w );
	
				return this;
	
			},
	
			clamp: function ( min, max ) {
	
				// assumes min < max, componentwise
	
				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );
				this.w = Math.max( min.w, Math.min( max.w, this.w ) );
	
				return this;
	
			},
	
			clampScalar: function ( minVal, maxVal ) {
	
				this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
				this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
				this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
				this.w = Math.max( minVal, Math.min( maxVal, this.w ) );
	
				return this;
	
			},
	
			clampLength: function ( min, max ) {
	
				var length = this.length();
	
				return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
	
			},
	
			floor: function () {
	
				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );
				this.w = Math.floor( this.w );
	
				return this;
	
			},
	
			ceil: function () {
	
				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );
				this.w = Math.ceil( this.w );
	
				return this;
	
			},
	
			round: function () {
	
				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );
				this.w = Math.round( this.w );
	
				return this;
	
			},
	
			roundToZero: function () {
	
				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
				this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
	
				return this;
	
			},
	
			negate: function () {
	
				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;
				this.w = - this.w;
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	
			},
	
			lengthSq: function () {
	
				return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	
			},
	
			length: function () {
	
				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
	
			},
	
			manhattanLength: function () {
	
				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
	
			},
	
			normalize: function () {
	
				return this.divideScalar( this.length() || 1 );
	
			},
	
			setLength: function ( length ) {
	
				return this.normalize().multiplyScalar( length );
	
			},
	
			lerp: function ( v, alpha ) {
	
				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;
				this.w += ( v.w - this.w ) * alpha;
	
				return this;
	
			},
	
			lerpVectors: function ( v1, v2, alpha ) {
	
				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			},
	
			equals: function ( v ) {
	
				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];
				this.w = array[ offset + 3 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) { array = []; }
				if ( offset === undefined ) { offset = 0; }
	
				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;
				array[ offset + 3 ] = this.w;
	
				return array;
	
			},
	
			fromBufferAttribute: function ( attribute, index, offset ) {
	
				if ( offset !== undefined ) {
	
					console.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );
	
				}
	
				this.x = attribute.getX( index );
				this.y = attribute.getY( index );
				this.z = attribute.getZ( index );
				this.w = attribute.getW( index );
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author szimek / https://github.com/szimek/
		 * @author alteredq / http://alteredqualia.com/
		 * @author Marius Kintel / https://github.com/kintel
		 */
	
		/*
		 In options, we can specify:
		 * Texture parameters for an auto-generated target texture
		 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
		*/
		function WebGLRenderTarget( width, height, options ) {
	
			this.width = width;
			this.height = height;
	
			this.scissor = new Vector4( 0, 0, width, height );
			this.scissorTest = false;
	
			this.viewport = new Vector4( 0, 0, width, height );
	
			options = options || {};
	
			this.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );
	
			this.texture.image = {};
			this.texture.image.width = width;
			this.texture.image.height = height;
	
			this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
			this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;
	
			this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
			this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
			this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;
	
		}
	
		WebGLRenderTarget.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
	
			constructor: WebGLRenderTarget,
	
			isWebGLRenderTarget: true,
	
			setSize: function ( width, height ) {
	
				if ( this.width !== width || this.height !== height ) {
	
					this.width = width;
					this.height = height;
	
					this.texture.image.width = width;
					this.texture.image.height = height;
	
					this.dispose();
	
				}
	
				this.viewport.set( 0, 0, width, height );
				this.scissor.set( 0, 0, width, height );
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.width = source.width;
				this.height = source.height;
	
				this.viewport.copy( source.viewport );
	
				this.texture = source.texture.clone();
	
				this.depthBuffer = source.depthBuffer;
				this.stencilBuffer = source.stencilBuffer;
				this.depthTexture = source.depthTexture;
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 * @author Matt DesLauriers / @mattdesl
		 */
	
		function WebGLMultisampleRenderTarget( width, height, options ) {
	
			WebGLRenderTarget.call( this, width, height, options );
	
			this.samples = 4;
	
		}
	
		WebGLMultisampleRenderTarget.prototype = Object.assign( Object.create( WebGLRenderTarget.prototype ), {
	
			constructor: WebGLMultisampleRenderTarget,
	
			isWebGLMultisampleRenderTarget: true,
	
			copy: function ( source ) {
	
				WebGLRenderTarget.prototype.copy.call( this, source );
	
				this.samples = source.samples;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */
	
		function Quaternion( x, y, z, w ) {
	
			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._w = ( w !== undefined ) ? w : 1;
	
		}
	
		Object.assign( Quaternion, {
	
			slerp: function ( qa, qb, qm, t ) {
	
				return qm.copy( qa ).slerp( qb, t );
	
			},
	
			slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {
	
				// fuzz-free, array-based Quaternion SLERP operation
	
				var x0 = src0[ srcOffset0 + 0 ],
					y0 = src0[ srcOffset0 + 1 ],
					z0 = src0[ srcOffset0 + 2 ],
					w0 = src0[ srcOffset0 + 3 ],
	
					x1 = src1[ srcOffset1 + 0 ],
					y1 = src1[ srcOffset1 + 1 ],
					z1 = src1[ srcOffset1 + 2 ],
					w1 = src1[ srcOffset1 + 3 ];
	
				if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {
	
					var s = 1 - t,
	
						cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
	
						dir = ( cos >= 0 ? 1 : - 1 ),
						sqrSin = 1 - cos * cos;
	
					// Skip the Slerp for tiny steps to avoid numeric problems:
					if ( sqrSin > Number.EPSILON ) {
	
						var sin = Math.sqrt( sqrSin ),
							len = Math.atan2( sin, cos * dir );
	
						s = Math.sin( s * len ) / sin;
						t = Math.sin( t * len ) / sin;
	
					}
	
					var tDir = t * dir;
	
					x0 = x0 * s + x1 * tDir;
					y0 = y0 * s + y1 * tDir;
					z0 = z0 * s + z1 * tDir;
					w0 = w0 * s + w1 * tDir;
	
					// Normalize in case we just did a lerp:
					if ( s === 1 - t ) {
	
						var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );
	
						x0 *= f;
						y0 *= f;
						z0 *= f;
						w0 *= f;
	
					}
	
				}
	
				dst[ dstOffset ] = x0;
				dst[ dstOffset + 1 ] = y0;
				dst[ dstOffset + 2 ] = z0;
				dst[ dstOffset + 3 ] = w0;
	
			}
	
		} );
	
		Object.defineProperties( Quaternion.prototype, {
	
			x: {
	
				get: function () {
	
					return this._x;
	
				},
	
				set: function ( value ) {
	
					this._x = value;
					this._onChangeCallback();
	
				}
	
			},
	
			y: {
	
				get: function () {
	
					return this._y;
	
				},
	
				set: function ( value ) {
	
					this._y = value;
					this._onChangeCallback();
	
				}
	
			},
	
			z: {
	
				get: function () {
	
					return this._z;
	
				},
	
				set: function ( value ) {
	
					this._z = value;
					this._onChangeCallback();
	
				}
	
			},
	
			w: {
	
				get: function () {
	
					return this._w;
	
				},
	
				set: function ( value ) {
	
					this._w = value;
					this._onChangeCallback();
	
				}
	
			}
	
		} );
	
		Object.assign( Quaternion.prototype, {
	
			isQuaternion: true,
	
			set: function ( x, y, z, w ) {
	
				this._x = x;
				this._y = y;
				this._z = z;
				this._w = w;
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this._x, this._y, this._z, this._w );
	
			},
	
			copy: function ( quaternion ) {
	
				this._x = quaternion.x;
				this._y = quaternion.y;
				this._z = quaternion.z;
				this._w = quaternion.w;
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			setFromEuler: function ( euler, update ) {
	
				if ( ! ( euler && euler.isEuler ) ) {
	
					throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );
	
				}
	
				var x = euler._x, y = euler._y, z = euler._z, order = euler.order;
	
				// http://www.mathworks.com/matlabcentral/fileexchange/
				// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
				//	content/SpinCalc.m
	
				var cos = Math.cos;
				var sin = Math.sin;
	
				var c1 = cos( x / 2 );
				var c2 = cos( y / 2 );
				var c3 = cos( z / 2 );
	
				var s1 = sin( x / 2 );
				var s2 = sin( y / 2 );
				var s3 = sin( z / 2 );
	
				if ( order === 'XYZ' ) {
	
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
				} else if ( order === 'YXZ' ) {
	
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
				} else if ( order === 'ZXY' ) {
	
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
				} else if ( order === 'ZYX' ) {
	
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
				} else if ( order === 'YZX' ) {
	
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
				} else if ( order === 'XZY' ) {
	
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
				}
	
				if ( update !== false ) { this._onChangeCallback(); }
	
				return this;
	
			},
	
			setFromAxisAngle: function ( axis, angle ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
	
				// assumes axis is normalized
	
				var halfAngle = angle / 2, s = Math.sin( halfAngle );
	
				this._x = axis.x * s;
				this._y = axis.y * s;
				this._z = axis.z * s;
				this._w = Math.cos( halfAngle );
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			setFromRotationMatrix: function ( m ) {
	
				// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				var te = m.elements,
	
					m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
					m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
					m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
	
					trace = m11 + m22 + m33,
					s;
	
				if ( trace > 0 ) {
	
					s = 0.5 / Math.sqrt( trace + 1.0 );
	
					this._w = 0.25 / s;
					this._x = ( m32 - m23 ) * s;
					this._y = ( m13 - m31 ) * s;
					this._z = ( m21 - m12 ) * s;
	
				} else if ( m11 > m22 && m11 > m33 ) {
	
					s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
	
					this._w = ( m32 - m23 ) / s;
					this._x = 0.25 * s;
					this._y = ( m12 + m21 ) / s;
					this._z = ( m13 + m31 ) / s;
	
				} else if ( m22 > m33 ) {
	
					s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
	
					this._w = ( m13 - m31 ) / s;
					this._x = ( m12 + m21 ) / s;
					this._y = 0.25 * s;
					this._z = ( m23 + m32 ) / s;
	
				} else {
	
					s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
	
					this._w = ( m21 - m12 ) / s;
					this._x = ( m13 + m31 ) / s;
					this._y = ( m23 + m32 ) / s;
					this._z = 0.25 * s;
	
				}
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			setFromUnitVectors: function ( vFrom, vTo ) {
	
				// assumes direction vectors vFrom and vTo are normalized
	
				var EPS = 0.000001;
	
				var r = vFrom.dot( vTo ) + 1;
	
				if ( r < EPS ) {
	
					r = 0;
	
					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
	
						this._x = - vFrom.y;
						this._y = vFrom.x;
						this._z = 0;
						this._w = r;
	
					} else {
	
						this._x = 0;
						this._y = - vFrom.z;
						this._z = vFrom.y;
						this._w = r;
	
					}
	
				} else {
	
					// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3
	
					this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
					this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
					this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
					this._w = r;
	
				}
	
				return this.normalize();
	
			},
	
			angleTo: function ( q ) {
	
				return 2 * Math.acos( Math.abs( MathUtils.clamp( this.dot( q ), - 1, 1 ) ) );
	
			},
	
			rotateTowards: function ( q, step ) {
	
				var angle = this.angleTo( q );
	
				if ( angle === 0 ) { return this; }
	
				var t = Math.min( 1, step / angle );
	
				this.slerp( q, t );
	
				return this;
	
			},
	
			inverse: function () {
	
				// quaternion is assumed to have unit length
	
				return this.conjugate();
	
			},
	
			conjugate: function () {
	
				this._x *= - 1;
				this._y *= - 1;
				this._z *= - 1;
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
	
			},
	
			lengthSq: function () {
	
				return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
	
			},
	
			length: function () {
	
				return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
	
			},
	
			normalize: function () {
	
				var l = this.length();
	
				if ( l === 0 ) {
	
					this._x = 0;
					this._y = 0;
					this._z = 0;
					this._w = 1;
	
				} else {
	
					l = 1 / l;
	
					this._x = this._x * l;
					this._y = this._y * l;
					this._z = this._z * l;
					this._w = this._w * l;
	
				}
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			multiply: function ( q, p ) {
	
				if ( p !== undefined ) {
	
					console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
					return this.multiplyQuaternions( q, p );
	
				}
	
				return this.multiplyQuaternions( this, q );
	
			},
	
			premultiply: function ( q ) {
	
				return this.multiplyQuaternions( q, this );
	
			},
	
			multiplyQuaternions: function ( a, b ) {
	
				// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
	
				var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
				var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
	
				this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
				this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
				this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
				this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			slerp: function ( qb, t ) {
	
				if ( t === 0 ) { return this; }
				if ( t === 1 ) { return this.copy( qb ); }
	
				var x = this._x, y = this._y, z = this._z, w = this._w;
	
				// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
	
				var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
	
				if ( cosHalfTheta < 0 ) {
	
					this._w = - qb._w;
					this._x = - qb._x;
					this._y = - qb._y;
					this._z = - qb._z;
	
					cosHalfTheta = - cosHalfTheta;
	
				} else {
	
					this.copy( qb );
	
				}
	
				if ( cosHalfTheta >= 1.0 ) {
	
					this._w = w;
					this._x = x;
					this._y = y;
					this._z = z;
	
					return this;
	
				}
	
				var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;
	
				if ( sqrSinHalfTheta <= Number.EPSILON ) {
	
					var s = 1 - t;
					this._w = s * w + t * this._w;
					this._x = s * x + t * this._x;
					this._y = s * y + t * this._y;
					this._z = s * z + t * this._z;
	
					this.normalize();
					this._onChangeCallback();
	
					return this;
	
				}
	
				var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
				var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
				var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
					ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
	
				this._w = ( w * ratioA + this._w * ratioB );
				this._x = ( x * ratioA + this._x * ratioB );
				this._y = ( y * ratioA + this._y * ratioB );
				this._z = ( z * ratioA + this._z * ratioB );
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			equals: function ( quaternion ) {
	
				return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				this._x = array[ offset ];
				this._y = array[ offset + 1 ];
				this._z = array[ offset + 2 ];
				this._w = array[ offset + 3 ];
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) { array = []; }
				if ( offset === undefined ) { offset = 0; }
	
				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._w;
	
				return array;
	
			},
	
			_onChange: function ( callback ) {
	
				this._onChangeCallback = callback;
	
				return this;
	
			},
	
			_onChangeCallback: function () {}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author kile / http://kile.stravaganza.org/
		 * @author philogb / http://blog.thejit.org/
		 * @author mikael emtinger / http://gomo.se/
		 * @author egraether / http://egraether.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		var _vector = new Vector3();
		var _quaternion = new Quaternion();
	
		function Vector3( x, y, z ) {
	
			this.x = x || 0;
			this.y = y || 0;
			this.z = z || 0;
	
		}
	
		Object.assign( Vector3.prototype, {
	
			isVector3: true,
	
			set: function ( x, y, z ) {
	
				this.x = x;
				this.y = y;
				this.z = z;
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.x = scalar;
				this.y = scalar;
				this.z = scalar;
	
				return this;
	
			},
	
			setX: function ( x ) {
	
				this.x = x;
	
				return this;
	
			},
	
			setY: function ( y ) {
	
				this.y = y;
	
				return this;
	
			},
	
			setZ: function ( z ) {
	
				this.z = z;
	
				return this;
	
			},
	
			setComponent: function ( index, value ) {
	
				switch ( index ) {
	
					case 0: this.x = value; break;
					case 1: this.y = value; break;
					case 2: this.z = value; break;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
				return this;
	
			},
	
			getComponent: function ( index ) {
	
				switch ( index ) {
	
					case 0: return this.x;
					case 1: return this.y;
					case 2: return this.z;
					default: throw new Error( 'index is out of range: ' + index );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.x, this.y, this.z );
	
			},
	
			copy: function ( v ) {
	
				this.x = v.x;
				this.y = v.y;
				this.z = v.z;
	
				return this;
	
			},
	
			add: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
					return this.addVectors( v, w );
	
				}
	
				this.x += v.x;
				this.y += v.y;
				this.z += v.z;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.x += s;
				this.y += s;
				this.z += s;
	
				return this;
	
			},
	
			addVectors: function ( a, b ) {
	
				this.x = a.x + b.x;
				this.y = a.y + b.y;
				this.z = a.z + b.z;
	
				return this;
	
			},
	
			addScaledVector: function ( v, s ) {
	
				this.x += v.x * s;
				this.y += v.y * s;
				this.z += v.z * s;
	
				return this;
	
			},
	
			sub: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
					return this.subVectors( v, w );
	
				}
	
				this.x -= v.x;
				this.y -= v.y;
				this.z -= v.z;
	
				return this;
	
			},
	
			subScalar: function ( s ) {
	
				this.x -= s;
				this.y -= s;
				this.z -= s;
	
				return this;
	
			},
	
			subVectors: function ( a, b ) {
	
				this.x = a.x - b.x;
				this.y = a.y - b.y;
				this.z = a.z - b.z;
	
				return this;
	
			},
	
			multiply: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
					return this.multiplyVectors( v, w );
	
				}
	
				this.x *= v.x;
				this.y *= v.y;
				this.z *= v.z;
	
				return this;
	
			},
	
			multiplyScalar: function ( scalar ) {
	
				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
	
				return this;
	
			},
	
			multiplyVectors: function ( a, b ) {
	
				this.x = a.x * b.x;
				this.y = a.y * b.y;
				this.z = a.z * b.z;
	
				return this;
	
			},
	
			applyEuler: function ( euler ) {
	
				if ( ! ( euler && euler.isEuler ) ) {
	
					console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );
	
				}
	
				return this.applyQuaternion( _quaternion.setFromEuler( euler ) );
	
			},
	
			applyAxisAngle: function ( axis, angle ) {
	
				return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );
	
			},
	
			applyMatrix3: function ( m ) {
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
				this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
				this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
	
				return this;
	
			},
	
			applyNormalMatrix: function ( m ) {
	
				return this.applyMatrix3( m ).normalize();
	
			},
	
			applyMatrix4: function ( m ) {
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
	
				var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );
	
				this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
				this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
				this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;
	
				return this;
	
			},
	
			applyQuaternion: function ( q ) {
	
				var x = this.x, y = this.y, z = this.z;
				var qx = q.x, qy = q.y, qz = q.z, qw = q.w;
	
				// calculate quat * vector
	
				var ix = qw * x + qy * z - qz * y;
				var iy = qw * y + qz * x - qx * z;
				var iz = qw * z + qx * y - qy * x;
				var iw = - qx * x - qy * y - qz * z;
	
				// calculate result * inverse quat
	
				this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
				this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
				this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
	
				return this;
	
			},
	
			project: function ( camera ) {
	
				return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );
	
			},
	
			unproject: function ( camera ) {
	
				return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );
	
			},
	
			transformDirection: function ( m ) {
	
				// input: THREE.Matrix4 affine matrix
				// vector interpreted as a direction
	
				var x = this.x, y = this.y, z = this.z;
				var e = m.elements;
	
				this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
				this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
				this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
	
				return this.normalize();
	
			},
	
			divide: function ( v ) {
	
				this.x /= v.x;
				this.y /= v.y;
				this.z /= v.z;
	
				return this;
	
			},
	
			divideScalar: function ( scalar ) {
	
				return this.multiplyScalar( 1 / scalar );
	
			},
	
			min: function ( v ) {
	
				this.x = Math.min( this.x, v.x );
				this.y = Math.min( this.y, v.y );
				this.z = Math.min( this.z, v.z );
	
				return this;
	
			},
	
			max: function ( v ) {
	
				this.x = Math.max( this.x, v.x );
				this.y = Math.max( this.y, v.y );
				this.z = Math.max( this.z, v.z );
	
				return this;
	
			},
	
			clamp: function ( min, max ) {
	
				// assumes min < max, componentwise
	
				this.x = Math.max( min.x, Math.min( max.x, this.x ) );
				this.y = Math.max( min.y, Math.min( max.y, this.y ) );
				this.z = Math.max( min.z, Math.min( max.z, this.z ) );
	
				return this;
	
			},
	
			clampScalar: function ( minVal, maxVal ) {
	
				this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
				this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
				this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
	
				return this;
	
			},
	
			clampLength: function ( min, max ) {
	
				var length = this.length();
	
				return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );
	
			},
	
			floor: function () {
	
				this.x = Math.floor( this.x );
				this.y = Math.floor( this.y );
				this.z = Math.floor( this.z );
	
				return this;
	
			},
	
			ceil: function () {
	
				this.x = Math.ceil( this.x );
				this.y = Math.ceil( this.y );
				this.z = Math.ceil( this.z );
	
				return this;
	
			},
	
			round: function () {
	
				this.x = Math.round( this.x );
				this.y = Math.round( this.y );
				this.z = Math.round( this.z );
	
				return this;
	
			},
	
			roundToZero: function () {
	
				this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
				this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
				this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
	
				return this;
	
			},
	
			negate: function () {
	
				this.x = - this.x;
				this.y = - this.y;
				this.z = - this.z;
	
				return this;
	
			},
	
			dot: function ( v ) {
	
				return this.x * v.x + this.y * v.y + this.z * v.z;
	
			},
	
			// TODO lengthSquared?
	
			lengthSq: function () {
	
				return this.x * this.x + this.y * this.y + this.z * this.z;
	
			},
	
			length: function () {
	
				return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
	
			},
	
			manhattanLength: function () {
	
				return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
	
			},
	
			normalize: function () {
	
				return this.divideScalar( this.length() || 1 );
	
			},
	
			setLength: function ( length ) {
	
				return this.normalize().multiplyScalar( length );
	
			},
	
			lerp: function ( v, alpha ) {
	
				this.x += ( v.x - this.x ) * alpha;
				this.y += ( v.y - this.y ) * alpha;
				this.z += ( v.z - this.z ) * alpha;
	
				return this;
	
			},
	
			lerpVectors: function ( v1, v2, alpha ) {
	
				return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			},
	
			cross: function ( v, w ) {
	
				if ( w !== undefined ) {
	
					console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
					return this.crossVectors( v, w );
	
				}
	
				return this.crossVectors( this, v );
	
			},
	
			crossVectors: function ( a, b ) {
	
				var ax = a.x, ay = a.y, az = a.z;
				var bx = b.x, by = b.y, bz = b.z;
	
				this.x = ay * bz - az * by;
				this.y = az * bx - ax * bz;
				this.z = ax * by - ay * bx;
	
				return this;
	
			},
	
			projectOnVector: function ( v ) {
	
				var denominator = v.lengthSq();
	
				if ( denominator === 0 ) { return this.set( 0, 0, 0 ); }
	
				var scalar = v.dot( this ) / denominator;
	
				return this.copy( v ).multiplyScalar( scalar );
	
			},
	
			projectOnPlane: function ( planeNormal ) {
	
				_vector.copy( this ).projectOnVector( planeNormal );
	
				return this.sub( _vector );
	
			},
	
			reflect: function ( normal ) {
	
				// reflect incident vector off plane orthogonal to normal
				// normal is assumed to have unit length
	
				return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
	
			},
	
			angleTo: function ( v ) {
	
				var denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );
	
				if ( denominator === 0 ) { return Math.PI / 2; }
	
				var theta = this.dot( v ) / denominator;
	
				// clamp, to handle numerical problems
	
				return Math.acos( MathUtils.clamp( theta, - 1, 1 ) );
	
			},
	
			distanceTo: function ( v ) {
	
				return Math.sqrt( this.distanceToSquared( v ) );
	
			},
	
			distanceToSquared: function ( v ) {
	
				var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;
	
				return dx * dx + dy * dy + dz * dz;
	
			},
	
			manhattanDistanceTo: function ( v ) {
	
				return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );
	
			},
	
			setFromSpherical: function ( s ) {
	
				return this.setFromSphericalCoords( s.radius, s.phi, s.theta );
	
			},
	
			setFromSphericalCoords: function ( radius, phi, theta ) {
	
				var sinPhiRadius = Math.sin( phi ) * radius;
	
				this.x = sinPhiRadius * Math.sin( theta );
				this.y = Math.cos( phi ) * radius;
				this.z = sinPhiRadius * Math.cos( theta );
	
				return this;
	
			},
	
			setFromCylindrical: function ( c ) {
	
				return this.setFromCylindricalCoords( c.radius, c.theta, c.y );
	
			},
	
			setFromCylindricalCoords: function ( radius, theta, y ) {
	
				this.x = radius * Math.sin( theta );
				this.y = y;
				this.z = radius * Math.cos( theta );
	
				return this;
	
			},
	
			setFromMatrixPosition: function ( m ) {
	
				var e = m.elements;
	
				this.x = e[ 12 ];
				this.y = e[ 13 ];
				this.z = e[ 14 ];
	
				return this;
	
			},
	
			setFromMatrixScale: function ( m ) {
	
				var sx = this.setFromMatrixColumn( m, 0 ).length();
				var sy = this.setFromMatrixColumn( m, 1 ).length();
				var sz = this.setFromMatrixColumn( m, 2 ).length();
	
				this.x = sx;
				this.y = sy;
				this.z = sz;
	
				return this;
	
			},
	
			setFromMatrixColumn: function ( m, index ) {
	
				return this.fromArray( m.elements, index * 4 );
	
			},
	
			setFromMatrix3Column: function ( m, index ) {
	
				return this.fromArray( m.elements, index * 3 );
	
			},
	
			equals: function ( v ) {
	
				return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				this.x = array[ offset ];
				this.y = array[ offset + 1 ];
				this.z = array[ offset + 2 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) { array = []; }
				if ( offset === undefined ) { offset = 0; }
	
				array[ offset ] = this.x;
				array[ offset + 1 ] = this.y;
				array[ offset + 2 ] = this.z;
	
				return array;
	
			},
	
			fromBufferAttribute: function ( attribute, index, offset ) {
	
				if ( offset !== undefined ) {
	
					console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );
	
				}
	
				this.x = attribute.getX( index );
				this.y = attribute.getY( index );
				this.z = attribute.getZ( index );
	
				return this;
	
			}
	
		} );
	
		var _v1 = new Vector3();
		var _m1 = new Matrix4();
		var _zero = new Vector3( 0, 0, 0 );
		var _one = new Vector3( 1, 1, 1 );
		var _x = new Vector3();
		var _y = new Vector3();
		var _z = new Vector3();
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author philogb / http://blog.thejit.org/
		 * @author jordi_ros / http://plattsoft.com
		 * @author D1plo1d / http://github.com/D1plo1d
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author timknip / http://www.floorplanner.com/
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Matrix4() {
	
			this.elements = [
	
				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
	
			];
	
			if ( arguments.length > 0 ) {
	
				console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );
	
			}
	
		}
	
		Object.assign( Matrix4.prototype, {
	
			isMatrix4: true,
	
			set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
	
				var te = this.elements;
	
				te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
				te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
				te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
				te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
	
				return this;
	
			},
	
			identity: function () {
	
				this.set(
	
					1, 0, 0, 0,
					0, 1, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			clone: function () {
	
				return new Matrix4().fromArray( this.elements );
	
			},
	
			copy: function ( m ) {
	
				var te = this.elements;
				var me = m.elements;
	
				te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
				te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
				te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
				te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];
	
				return this;
	
			},
	
			copyPosition: function ( m ) {
	
				var te = this.elements, me = m.elements;
	
				te[ 12 ] = me[ 12 ];
				te[ 13 ] = me[ 13 ];
				te[ 14 ] = me[ 14 ];
	
				return this;
	
			},
	
			extractBasis: function ( xAxis, yAxis, zAxis ) {
	
				xAxis.setFromMatrixColumn( this, 0 );
				yAxis.setFromMatrixColumn( this, 1 );
				zAxis.setFromMatrixColumn( this, 2 );
	
				return this;
	
			},
	
			makeBasis: function ( xAxis, yAxis, zAxis ) {
	
				this.set(
					xAxis.x, yAxis.x, zAxis.x, 0,
					xAxis.y, yAxis.y, zAxis.y, 0,
					xAxis.z, yAxis.z, zAxis.z, 0,
					0, 0, 0, 1
				);
	
				return this;
	
			},
	
			extractRotation: function ( m ) {
	
				// this method does not support reflection matrices
	
				var te = this.elements;
				var me = m.elements;
	
				var scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
				var scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
				var scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();
	
				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;
				te[ 3 ] = 0;
	
				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;
				te[ 7 ] = 0;
	
				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;
				te[ 11 ] = 0;
	
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;
	
				return this;
	
			},
	
			makeRotationFromEuler: function ( euler ) {
	
				if ( ! ( euler && euler.isEuler ) ) {
	
					console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
	
				}
	
				var te = this.elements;
	
				var x = euler.x, y = euler.y, z = euler.z;
				var a = Math.cos( x ), b = Math.sin( x );
				var c = Math.cos( y ), d = Math.sin( y );
				var e = Math.cos( z ), f = Math.sin( z );
	
				if ( euler.order === 'XYZ' ) {
	
					var ae = a * e, af = a * f, be = b * e, bf = b * f;
	
					te[ 0 ] = c * e;
					te[ 4 ] = - c * f;
					te[ 8 ] = d;
	
					te[ 1 ] = af + be * d;
					te[ 5 ] = ae - bf * d;
					te[ 9 ] = - b * c;
	
					te[ 2 ] = bf - ae * d;
					te[ 6 ] = be + af * d;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'YXZ' ) {
	
					var ce = c * e, cf = c * f, de = d * e, df = d * f;
	
					te[ 0 ] = ce + df * b;
					te[ 4 ] = de * b - cf;
					te[ 8 ] = a * d;
	
					te[ 1 ] = a * f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b;
	
					te[ 2 ] = cf * b - de;
					te[ 6 ] = df + ce * b;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'ZXY' ) {
	
					var ce = c * e, cf = c * f, de = d * e, df = d * f;
	
					te[ 0 ] = ce - df * b;
					te[ 4 ] = - a * f;
					te[ 8 ] = de + cf * b;
	
					te[ 1 ] = cf + de * b;
					te[ 5 ] = a * e;
					te[ 9 ] = df - ce * b;
	
					te[ 2 ] = - a * d;
					te[ 6 ] = b;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'ZYX' ) {
	
					var ae = a * e, af = a * f, be = b * e, bf = b * f;
	
					te[ 0 ] = c * e;
					te[ 4 ] = be * d - af;
					te[ 8 ] = ae * d + bf;
	
					te[ 1 ] = c * f;
					te[ 5 ] = bf * d + ae;
					te[ 9 ] = af * d - be;
	
					te[ 2 ] = - d;
					te[ 6 ] = b * c;
					te[ 10 ] = a * c;
	
				} else if ( euler.order === 'YZX' ) {
	
					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
	
					te[ 0 ] = c * e;
					te[ 4 ] = bd - ac * f;
					te[ 8 ] = bc * f + ad;
	
					te[ 1 ] = f;
					te[ 5 ] = a * e;
					te[ 9 ] = - b * e;
	
					te[ 2 ] = - d * e;
					te[ 6 ] = ad * f + bc;
					te[ 10 ] = ac - bd * f;
	
				} else if ( euler.order === 'XZY' ) {
	
					var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
	
					te[ 0 ] = c * e;
					te[ 4 ] = - f;
					te[ 8 ] = d * e;
	
					te[ 1 ] = ac * f + bd;
					te[ 5 ] = a * e;
					te[ 9 ] = ad * f - bc;
	
					te[ 2 ] = bc * f - ad;
					te[ 6 ] = b * e;
					te[ 10 ] = bd * f + ac;
	
				}
	
				// bottom row
				te[ 3 ] = 0;
				te[ 7 ] = 0;
				te[ 11 ] = 0;
	
				// last column
				te[ 12 ] = 0;
				te[ 13 ] = 0;
				te[ 14 ] = 0;
				te[ 15 ] = 1;
	
				return this;
	
			},
	
			makeRotationFromQuaternion: function ( q ) {
	
				return this.compose( _zero, q, _one );
	
			},
	
			lookAt: function ( eye, target, up ) {
	
				var te = this.elements;
	
				_z.subVectors( eye, target );
	
				if ( _z.lengthSq() === 0 ) {
	
					// eye and target are in the same position
	
					_z.z = 1;
	
				}
	
				_z.normalize();
				_x.crossVectors( up, _z );
	
				if ( _x.lengthSq() === 0 ) {
	
					// up and z are parallel
	
					if ( Math.abs( up.z ) === 1 ) {
	
						_z.x += 0.0001;
	
					} else {
	
						_z.z += 0.0001;
	
					}
	
					_z.normalize();
					_x.crossVectors( up, _z );
	
				}
	
				_x.normalize();
				_y.crossVectors( _z, _x );
	
				te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
				te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
				te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;
	
				return this;
	
			},
	
			multiply: function ( m, n ) {
	
				if ( n !== undefined ) {
	
					console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
					return this.multiplyMatrices( m, n );
	
				}
	
				return this.multiplyMatrices( this, m );
	
			},
	
			premultiply: function ( m ) {
	
				return this.multiplyMatrices( m, this );
	
			},
	
			multiplyMatrices: function ( a, b ) {
	
				var ae = a.elements;
				var be = b.elements;
				var te = this.elements;
	
				var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
				var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
				var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
				var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
	
				var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
				var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
				var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
				var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
	
				te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
				te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
				te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
				te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
	
				te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
				te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
				te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
				te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
	
				te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
				te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
				te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
				te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
	
				te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
				te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
				te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
				te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	
				return this;
	
			},
	
			multiplyScalar: function ( s ) {
	
				var te = this.elements;
	
				te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
				te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
				te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
				te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
	
				return this;
	
			},
	
			determinant: function () {
	
				var te = this.elements;
	
				var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
				var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
				var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
				var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
	
				//TODO: make this more efficient
				//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
	
				return (
					n41 * (
						+ n14 * n23 * n32
						 - n13 * n24 * n32
						 - n14 * n22 * n33
						 + n12 * n24 * n33
						 + n13 * n22 * n34
						 - n12 * n23 * n34
					) +
					n42 * (
						+ n11 * n23 * n34
						 - n11 * n24 * n33
						 + n14 * n21 * n33
						 - n13 * n21 * n34
						 + n13 * n24 * n31
						 - n14 * n23 * n31
					) +
					n43 * (
						+ n11 * n24 * n32
						 - n11 * n22 * n34
						 - n14 * n21 * n32
						 + n12 * n21 * n34
						 + n14 * n22 * n31
						 - n12 * n24 * n31
					) +
					n44 * (
						- n13 * n22 * n31
						 - n11 * n23 * n32
						 + n11 * n22 * n33
						 + n13 * n21 * n32
						 - n12 * n21 * n33
						 + n12 * n23 * n31
					)
	
				);
	
			},
	
			transpose: function () {
	
				var te = this.elements;
				var tmp;
	
				tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
				tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
				tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
	
				tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
				tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
				tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
	
				return this;
	
			},
	
			setPosition: function ( x, y, z ) {
	
				var te = this.elements;
	
				if ( x.isVector3 ) {
	
					te[ 12 ] = x.x;
					te[ 13 ] = x.y;
					te[ 14 ] = x.z;
	
				} else {
	
					te[ 12 ] = x;
					te[ 13 ] = y;
					te[ 14 ] = z;
	
				}
	
				return this;
	
			},
	
			getInverse: function ( m, throwOnDegenerate ) {
	
				// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
				var te = this.elements,
					me = m.elements,
	
					n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
					n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
					n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
					n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],
	
					t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
					t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
					t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
					t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
	
				var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
	
				if ( det === 0 ) {
	
					var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
	
					if ( throwOnDegenerate === true ) {
	
						throw new Error( msg );
	
					} else {
	
						console.warn( msg );
	
					}
	
					return this.identity();
	
				}
	
				var detInv = 1 / det;
	
				te[ 0 ] = t11 * detInv;
				te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
				te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
				te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;
	
				te[ 4 ] = t12 * detInv;
				te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
				te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
				te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;
	
				te[ 8 ] = t13 * detInv;
				te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
				te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
				te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;
	
				te[ 12 ] = t14 * detInv;
				te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
				te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
				te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;
	
				return this;
	
			},
	
			scale: function ( v ) {
	
				var te = this.elements;
				var x = v.x, y = v.y, z = v.z;
	
				te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
				te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
				te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
				te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
	
				return this;
	
			},
	
			getMaxScaleOnAxis: function () {
	
				var te = this.elements;
	
				var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
				var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
				var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
	
				return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );
	
			},
	
			makeTranslation: function ( x, y, z ) {
	
				this.set(
	
					1, 0, 0, x,
					0, 1, 0, y,
					0, 0, 1, z,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationX: function ( theta ) {
	
				var c = Math.cos( theta ), s = Math.sin( theta );
	
				this.set(
	
					1, 0, 0, 0,
					0, c, - s, 0,
					0, s, c, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationY: function ( theta ) {
	
				var c = Math.cos( theta ), s = Math.sin( theta );
	
				this.set(
	
					 c, 0, s, 0,
					 0, 1, 0, 0,
					- s, 0, c, 0,
					 0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationZ: function ( theta ) {
	
				var c = Math.cos( theta ), s = Math.sin( theta );
	
				this.set(
	
					c, - s, 0, 0,
					s, c, 0, 0,
					0, 0, 1, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeRotationAxis: function ( axis, angle ) {
	
				// Based on http://www.gamedev.net/reference/articles/article1199.asp
	
				var c = Math.cos( angle );
				var s = Math.sin( angle );
				var t = 1 - c;
				var x = axis.x, y = axis.y, z = axis.z;
				var tx = t * x, ty = t * y;
	
				this.set(
	
					tx * x + c, tx * y - s * z, tx * z + s * y, 0,
					tx * y + s * z, ty * y + c, ty * z - s * x, 0,
					tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
					0, 0, 0, 1
	
				);
	
				 return this;
	
			},
	
			makeScale: function ( x, y, z ) {
	
				this.set(
	
					x, 0, 0, 0,
					0, y, 0, 0,
					0, 0, z, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			makeShear: function ( x, y, z ) {
	
				this.set(
	
					1, y, z, 0,
					x, 1, z, 0,
					x, y, 1, 0,
					0, 0, 0, 1
	
				);
	
				return this;
	
			},
	
			compose: function ( position, quaternion, scale ) {
	
				var te = this.elements;
	
				var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
				var x2 = x + x,	y2 = y + y, z2 = z + z;
				var xx = x * x2, xy = x * y2, xz = x * z2;
				var yy = y * y2, yz = y * z2, zz = z * z2;
				var wx = w * x2, wy = w * y2, wz = w * z2;
	
				var sx = scale.x, sy = scale.y, sz = scale.z;
	
				te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
				te[ 1 ] = ( xy + wz ) * sx;
				te[ 2 ] = ( xz - wy ) * sx;
				te[ 3 ] = 0;
	
				te[ 4 ] = ( xy - wz ) * sy;
				te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
				te[ 6 ] = ( yz + wx ) * sy;
				te[ 7 ] = 0;
	
				te[ 8 ] = ( xz + wy ) * sz;
				te[ 9 ] = ( yz - wx ) * sz;
				te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
				te[ 11 ] = 0;
	
				te[ 12 ] = position.x;
				te[ 13 ] = position.y;
				te[ 14 ] = position.z;
				te[ 15 ] = 1;
	
				return this;
	
			},
	
			decompose: function ( position, quaternion, scale ) {
	
				var te = this.elements;
	
				var sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
	
				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) { sx = - sx; }
	
				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];
	
				// scale the rotation part
				_m1.copy( this );
	
				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;
	
				_m1.elements[ 0 ] *= invSX;
				_m1.elements[ 1 ] *= invSX;
				_m1.elements[ 2 ] *= invSX;
	
				_m1.elements[ 4 ] *= invSY;
				_m1.elements[ 5 ] *= invSY;
				_m1.elements[ 6 ] *= invSY;
	
				_m1.elements[ 8 ] *= invSZ;
				_m1.elements[ 9 ] *= invSZ;
				_m1.elements[ 10 ] *= invSZ;
	
				quaternion.setFromRotationMatrix( _m1 );
	
				scale.x = sx;
				scale.y = sy;
				scale.z = sz;
	
				return this;
	
			},
	
			makePerspective: function ( left, right, top, bottom, near, far ) {
	
				if ( far === undefined ) {
	
					console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );
	
				}
	
				var te = this.elements;
				var x = 2 * near / ( right - left );
				var y = 2 * near / ( top - bottom );
	
				var a = ( right + left ) / ( right - left );
				var b = ( top + bottom ) / ( top - bottom );
				var c = - ( far + near ) / ( far - near );
				var d = - 2 * far * near / ( far - near );
	
				te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
				te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
	
				return this;
	
			},
	
			makeOrthographic: function ( left, right, top, bottom, near, far ) {
	
				var te = this.elements;
				var w = 1.0 / ( right - left );
				var h = 1.0 / ( top - bottom );
				var p = 1.0 / ( far - near );
	
				var x = ( right + left ) * w;
				var y = ( top + bottom ) * h;
				var z = ( far + near ) * p;
	
				te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
				te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
				te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
				te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
	
				return this;
	
			},
	
			equals: function ( matrix ) {
	
				var te = this.elements;
				var me = matrix.elements;
	
				for ( var i = 0; i < 16; i ++ ) {
	
					if ( te[ i ] !== me[ i ] ) { return false; }
	
				}
	
				return true;
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				for ( var i = 0; i < 16; i ++ ) {
	
					this.elements[ i ] = array[ i + offset ];
	
				}
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) { array = []; }
				if ( offset === undefined ) { offset = 0; }
	
				var te = this.elements;
	
				array[ offset ] = te[ 0 ];
				array[ offset + 1 ] = te[ 1 ];
				array[ offset + 2 ] = te[ 2 ];
				array[ offset + 3 ] = te[ 3 ];
	
				array[ offset + 4 ] = te[ 4 ];
				array[ offset + 5 ] = te[ 5 ];
				array[ offset + 6 ] = te[ 6 ];
				array[ offset + 7 ] = te[ 7 ];
	
				array[ offset + 8 ] = te[ 8 ];
				array[ offset + 9 ] = te[ 9 ];
				array[ offset + 10 ] = te[ 10 ];
				array[ offset + 11 ] = te[ 11 ];
	
				array[ offset + 12 ] = te[ 12 ];
				array[ offset + 13 ] = te[ 13 ];
				array[ offset + 14 ] = te[ 14 ];
				array[ offset + 15 ] = te[ 15 ];
	
				return array;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author bhouston / http://clara.io
		 */
	
		var _matrix = new Matrix4();
		var _quaternion$1 = new Quaternion();
	
		function Euler( x, y, z, order ) {
	
			this._x = x || 0;
			this._y = y || 0;
			this._z = z || 0;
			this._order = order || Euler.DefaultOrder;
	
		}
	
		Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
	
		Euler.DefaultOrder = 'XYZ';
	
		Object.defineProperties( Euler.prototype, {
	
			x: {
	
				get: function () {
	
					return this._x;
	
				},
	
				set: function ( value ) {
	
					this._x = value;
					this._onChangeCallback();
	
				}
	
			},
	
			y: {
	
				get: function () {
	
					return this._y;
	
				},
	
				set: function ( value ) {
	
					this._y = value;
					this._onChangeCallback();
	
				}
	
			},
	
			z: {
	
				get: function () {
	
					return this._z;
	
				},
	
				set: function ( value ) {
	
					this._z = value;
					this._onChangeCallback();
	
				}
	
			},
	
			order: {
	
				get: function () {
	
					return this._order;
	
				},
	
				set: function ( value ) {
	
					this._order = value;
					this._onChangeCallback();
	
				}
	
			}
	
		} );
	
		Object.assign( Euler.prototype, {
	
			isEuler: true,
	
			set: function ( x, y, z, order ) {
	
				this._x = x;
				this._y = y;
				this._z = z;
				this._order = order || this._order;
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this._x, this._y, this._z, this._order );
	
			},
	
			copy: function ( euler ) {
	
				this._x = euler._x;
				this._y = euler._y;
				this._z = euler._z;
				this._order = euler._order;
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			setFromRotationMatrix: function ( m, order, update ) {
	
				var clamp = MathUtils.clamp;
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				var te = m.elements;
				var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
				var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
				var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
	
				order = order || this._order;
	
				if ( order === 'XYZ' ) {
	
					this._y = Math.asin( clamp( m13, - 1, 1 ) );
	
					if ( Math.abs( m13 ) < 0.9999999 ) {
	
						this._x = Math.atan2( - m23, m33 );
						this._z = Math.atan2( - m12, m11 );
	
					} else {
	
						this._x = Math.atan2( m32, m22 );
						this._z = 0;
	
					}
	
				} else if ( order === 'YXZ' ) {
	
					this._x = Math.asin( - clamp( m23, - 1, 1 ) );
	
					if ( Math.abs( m23 ) < 0.9999999 ) {
	
						this._y = Math.atan2( m13, m33 );
						this._z = Math.atan2( m21, m22 );
	
					} else {
	
						this._y = Math.atan2( - m31, m11 );
						this._z = 0;
	
					}
	
				} else if ( order === 'ZXY' ) {
	
					this._x = Math.asin( clamp( m32, - 1, 1 ) );
	
					if ( Math.abs( m32 ) < 0.9999999 ) {
	
						this._y = Math.atan2( - m31, m33 );
						this._z = Math.atan2( - m12, m22 );
	
					} else {
	
						this._y = 0;
						this._z = Math.atan2( m21, m11 );
	
					}
	
				} else if ( order === 'ZYX' ) {
	
					this._y = Math.asin( - clamp( m31, - 1, 1 ) );
	
					if ( Math.abs( m31 ) < 0.9999999 ) {
	
						this._x = Math.atan2( m32, m33 );
						this._z = Math.atan2( m21, m11 );
	
					} else {
	
						this._x = 0;
						this._z = Math.atan2( - m12, m22 );
	
					}
	
				} else if ( order === 'YZX' ) {
	
					this._z = Math.asin( clamp( m21, - 1, 1 ) );
	
					if ( Math.abs( m21 ) < 0.9999999 ) {
	
						this._x = Math.atan2( - m23, m22 );
						this._y = Math.atan2( - m31, m11 );
	
					} else {
	
						this._x = 0;
						this._y = Math.atan2( m13, m33 );
	
					}
	
				} else if ( order === 'XZY' ) {
	
					this._z = Math.asin( - clamp( m12, - 1, 1 ) );
	
					if ( Math.abs( m12 ) < 0.9999999 ) {
	
						this._x = Math.atan2( m32, m22 );
						this._y = Math.atan2( m13, m11 );
	
					} else {
	
						this._x = Math.atan2( - m23, m33 );
						this._y = 0;
	
					}
	
				} else {
	
					console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );
	
				}
	
				this._order = order;
	
				if ( update !== false ) { this._onChangeCallback(); }
	
				return this;
	
			},
	
			setFromQuaternion: function ( q, order, update ) {
	
				_matrix.makeRotationFromQuaternion( q );
	
				return this.setFromRotationMatrix( _matrix, order, update );
	
			},
	
			setFromVector3: function ( v, order ) {
	
				return this.set( v.x, v.y, v.z, order || this._order );
	
			},
	
			reorder: function ( newOrder ) {
	
				// WARNING: this discards revolution information -bhouston
	
				_quaternion$1.setFromEuler( this );
	
				return this.setFromQuaternion( _quaternion$1, newOrder );
	
			},
	
			equals: function ( euler ) {
	
				return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
	
			},
	
			fromArray: function ( array ) {
	
				this._x = array[ 0 ];
				this._y = array[ 1 ];
				this._z = array[ 2 ];
				if ( array[ 3 ] !== undefined ) { this._order = array[ 3 ]; }
	
				this._onChangeCallback();
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) { array = []; }
				if ( offset === undefined ) { offset = 0; }
	
				array[ offset ] = this._x;
				array[ offset + 1 ] = this._y;
				array[ offset + 2 ] = this._z;
				array[ offset + 3 ] = this._order;
	
				return array;
	
			},
	
			toVector3: function ( optionalResult ) {
	
				if ( optionalResult ) {
	
					return optionalResult.set( this._x, this._y, this._z );
	
				} else {
	
					return new Vector3( this._x, this._y, this._z );
	
				}
	
			},
	
			_onChange: function ( callback ) {
	
				this._onChangeCallback = callback;
	
				return this;
	
			},
	
			_onChangeCallback: function () {}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Layers() {
	
			this.mask = 1 | 0;
	
		}
	
		Object.assign( Layers.prototype, {
	
			set: function ( channel ) {
	
				this.mask = 1 << channel | 0;
	
			},
	
			enable: function ( channel ) {
	
				this.mask |= 1 << channel | 0;
	
			},
	
			enableAll: function () {
	
				this.mask = 0xffffffff | 0;
	
			},
	
			toggle: function ( channel ) {
	
				this.mask ^= 1 << channel | 0;
	
			},
	
			disable: function ( channel ) {
	
				this.mask &= ~ ( 1 << channel | 0 );
	
			},
	
			disableAll: function () {
	
				this.mask = 0;
	
			},
	
			test: function ( layers ) {
	
				return ( this.mask & layers.mask ) !== 0;
	
			}
	
		} );
	
		var _object3DId = 0;
	
		var _v1$1 = new Vector3();
		var _q1 = new Quaternion();
		var _m1$1 = new Matrix4();
		var _target = new Vector3();
	
		var _position = new Vector3();
		var _scale = new Vector3();
		var _quaternion$2 = new Quaternion();
	
		var _xAxis = new Vector3( 1, 0, 0 );
		var _yAxis = new Vector3( 0, 1, 0 );
		var _zAxis = new Vector3( 0, 0, 1 );
	
		var _addedEvent = { type: 'added' };
		var _removedEvent = { type: 'removed' };
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author WestLangley / http://github.com/WestLangley
		 * @author elephantatwork / www.elephantatwork.ch
		 */
	
		function Object3D() {
	
			Object.defineProperty( this, 'id', { value: _object3DId ++ } );
	
			this.uuid = MathUtils.generateUUID();
	
			this.name = '';
			this.type = 'Object3D';
	
			this.parent = null;
			this.children = [];
	
			this.up = Object3D.DefaultUp.clone();
	
			var position = new Vector3();
			var rotation = new Euler();
			var quaternion = new Quaternion();
			var scale = new Vector3( 1, 1, 1 );
	
			function onRotationChange() {
	
				quaternion.setFromEuler( rotation, false );
	
			}
	
			function onQuaternionChange() {
	
				rotation.setFromQuaternion( quaternion, undefined, false );
	
			}
	
			rotation._onChange( onRotationChange );
			quaternion._onChange( onQuaternionChange );
	
			Object.defineProperties( this, {
				position: {
					configurable: true,
					enumerable: true,
					value: position
				},
				rotation: {
					configurable: true,
					enumerable: true,
					value: rotation
				},
				quaternion: {
					configurable: true,
					enumerable: true,
					value: quaternion
				},
				scale: {
					configurable: true,
					enumerable: true,
					value: scale
				},
				modelViewMatrix: {
					value: new Matrix4()
				},
				normalMatrix: {
					value: new Matrix3()
				}
			} );
	
			this.matrix = new Matrix4();
			this.matrixWorld = new Matrix4();
	
			this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
			this.matrixWorldNeedsUpdate = false;
	
			this.layers = new Layers();
			this.visible = true;
	
			this.castShadow = false;
			this.receiveShadow = false;
	
			this.frustumCulled = true;
			this.renderOrder = 0;
	
			this.userData = {};
	
		}
	
		Object3D.DefaultUp = new Vector3( 0, 1, 0 );
		Object3D.DefaultMatrixAutoUpdate = true;
	
		Object3D.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
	
			constructor: Object3D,
	
			isObject3D: true,
	
			onBeforeRender: function () {},
			onAfterRender: function () {},
	
			applyMatrix4: function ( matrix ) {
	
				if ( this.matrixAutoUpdate ) { this.updateMatrix(); }
	
				this.matrix.premultiply( matrix );
	
				this.matrix.decompose( this.position, this.quaternion, this.scale );
	
			},
	
			applyQuaternion: function ( q ) {
	
				this.quaternion.premultiply( q );
	
				return this;
	
			},
	
			setRotationFromAxisAngle: function ( axis, angle ) {
	
				// assumes axis is normalized
	
				this.quaternion.setFromAxisAngle( axis, angle );
	
			},
	
			setRotationFromEuler: function ( euler ) {
	
				this.quaternion.setFromEuler( euler, true );
	
			},
	
			setRotationFromMatrix: function ( m ) {
	
				// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
				this.quaternion.setFromRotationMatrix( m );
	
			},
	
			setRotationFromQuaternion: function ( q ) {
	
				// assumes q is normalized
	
				this.quaternion.copy( q );
	
			},
	
			rotateOnAxis: function ( axis, angle ) {
	
				// rotate object on axis in object space
				// axis is assumed to be normalized
	
				_q1.setFromAxisAngle( axis, angle );
	
				this.quaternion.multiply( _q1 );
	
				return this;
	
			},
	
			rotateOnWorldAxis: function ( axis, angle ) {
	
				// rotate object on axis in world space
				// axis is assumed to be normalized
				// method assumes no rotated parent
	
				_q1.setFromAxisAngle( axis, angle );
	
				this.quaternion.premultiply( _q1 );
	
				return this;
	
			},
	
			rotateX: function ( angle ) {
	
				return this.rotateOnAxis( _xAxis, angle );
	
			},
	
			rotateY: function ( angle ) {
	
				return this.rotateOnAxis( _yAxis, angle );
	
			},
	
			rotateZ: function ( angle ) {
	
				return this.rotateOnAxis( _zAxis, angle );
	
			},
	
			translateOnAxis: function ( axis, distance ) {
	
				// translate object by distance along axis in object space
				// axis is assumed to be normalized
	
				_v1$1.copy( axis ).applyQuaternion( this.quaternion );
	
				this.position.add( _v1$1.multiplyScalar( distance ) );
	
				return this;
	
			},
	
			translateX: function ( distance ) {
	
				return this.translateOnAxis( _xAxis, distance );
	
			},
	
			translateY: function ( distance ) {
	
				return this.translateOnAxis( _yAxis, distance );
	
			},
	
			translateZ: function ( distance ) {
	
				return this.translateOnAxis( _zAxis, distance );
	
			},
	
			localToWorld: function ( vector ) {
	
				return vector.applyMatrix4( this.matrixWorld );
	
			},
	
			worldToLocal: function ( vector ) {
	
				return vector.applyMatrix4( _m1$1.getInverse( this.matrixWorld ) );
	
			},
	
			lookAt: function ( x, y, z ) {
	
				// This method does not support objects having non-uniformly-scaled parent(s)
	
				if ( x.isVector3 ) {
	
					_target.copy( x );
	
				} else {
	
					_target.set( x, y, z );
	
				}
	
				var parent = this.parent;
	
				this.updateWorldMatrix( true, false );
	
				_position.setFromMatrixPosition( this.matrixWorld );
	
				if ( this.isCamera || this.isLight ) {
	
					_m1$1.lookAt( _position, _target, this.up );
	
				} else {
	
					_m1$1.lookAt( _target, _position, this.up );
	
				}
	
				this.quaternion.setFromRotationMatrix( _m1$1 );
	
				if ( parent ) {
	
					_m1$1.extractRotation( parent.matrixWorld );
					_q1.setFromRotationMatrix( _m1$1 );
					this.quaternion.premultiply( _q1.inverse() );
	
				}
	
			},
	
			add: function ( object ) {
	
				if ( arguments.length > 1 ) {
	
					for ( var i = 0; i < arguments.length; i ++ ) {
	
						this.add( arguments[ i ] );
	
					}
	
					return this;
	
				}
	
				if ( object === this ) {
	
					console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
					return this;
	
				}
	
				if ( ( object && object.isObject3D ) ) {
	
					if ( object.parent !== null ) {
	
						object.parent.remove( object );
	
					}
	
					object.parent = this;
					this.children.push( object );
	
					object.dispatchEvent( _addedEvent );
	
				} else {
	
					console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );
	
				}
	
				return this;
	
			},
	
			remove: function ( object ) {
	
				if ( arguments.length > 1 ) {
	
					for ( var i = 0; i < arguments.length; i ++ ) {
	
						this.remove( arguments[ i ] );
	
					}
	
					return this;
	
				}
	
				var index = this.children.indexOf( object );
	
				if ( index !== - 1 ) {
	
					object.parent = null;
					this.children.splice( index, 1 );
	
					object.dispatchEvent( _removedEvent );
	
				}
	
				return this;
	
			},
	
			attach: function ( object ) {
	
				// adds object as a child of this, while maintaining the object's world transform
	
				this.updateWorldMatrix( true, false );
	
				_m1$1.getInverse( this.matrixWorld );
	
				if ( object.parent !== null ) {
	
					object.parent.updateWorldMatrix( true, false );
	
					_m1$1.multiply( object.parent.matrixWorld );
	
				}
	
				object.applyMatrix4( _m1$1 );
	
				object.updateWorldMatrix( false, false );
	
				this.add( object );
	
				return this;
	
			},
	
			getObjectById: function ( id ) {
	
				return this.getObjectByProperty( 'id', id );
	
			},
	
			getObjectByName: function ( name ) {
	
				return this.getObjectByProperty( 'name', name );
	
			},
	
			getObjectByProperty: function ( name, value ) {
	
				if ( this[ name ] === value ) { return this; }
	
				for ( var i = 0, l = this.children.length; i < l; i ++ ) {
	
					var child = this.children[ i ];
					var object = child.getObjectByProperty( name, value );
	
					if ( object !== undefined ) {
	
						return object;
	
					}
	
				}
	
				return undefined;
	
			},
	
			getWorldPosition: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
					target = new Vector3();
	
				}
	
				this.updateMatrixWorld( true );
	
				return target.setFromMatrixPosition( this.matrixWorld );
	
			},
	
			getWorldQuaternion: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
					target = new Quaternion();
	
				}
	
				this.updateMatrixWorld( true );
	
				this.matrixWorld.decompose( _position, target, _scale );
	
				return target;
	
			},
	
			getWorldScale: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
					target = new Vector3();
	
				}
	
				this.updateMatrixWorld( true );
	
				this.matrixWorld.decompose( _position, _quaternion$2, target );
	
				return target;
	
			},
	
			getWorldDirection: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
					target = new Vector3();
	
				}
	
				this.updateMatrixWorld( true );
	
				var e = this.matrixWorld.elements;
	
				return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();
	
			},
	
			raycast: function () {},
	
			traverse: function ( callback ) {
	
				callback( this );
	
				var children = this.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].traverse( callback );
	
				}
	
			},
	
			traverseVisible: function ( callback ) {
	
				if ( this.visible === false ) { return; }
	
				callback( this );
	
				var children = this.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].traverseVisible( callback );
	
				}
	
			},
	
			traverseAncestors: function ( callback ) {
	
				var parent = this.parent;
	
				if ( parent !== null ) {
	
					callback( parent );
	
					parent.traverseAncestors( callback );
	
				}
	
			},
	
			updateMatrix: function () {
	
				this.matrix.compose( this.position, this.quaternion, this.scale );
	
				this.matrixWorldNeedsUpdate = true;
	
			},
	
			updateMatrixWorld: function ( force ) {
	
				if ( this.matrixAutoUpdate ) { this.updateMatrix(); }
	
				if ( this.matrixWorldNeedsUpdate || force ) {
	
					if ( this.parent === null ) {
	
						this.matrixWorld.copy( this.matrix );
	
					} else {
	
						this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
	
					}
	
					this.matrixWorldNeedsUpdate = false;
	
					force = true;
	
				}
	
				// update children
	
				var children = this.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].updateMatrixWorld( force );
	
				}
	
			},
	
			updateWorldMatrix: function ( updateParents, updateChildren ) {
	
				var parent = this.parent;
	
				if ( updateParents === true && parent !== null ) {
	
					parent.updateWorldMatrix( true, false );
	
				}
	
				if ( this.matrixAutoUpdate ) { this.updateMatrix(); }
	
				if ( this.parent === null ) {
	
					this.matrixWorld.copy( this.matrix );
	
				} else {
	
					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
	
				}
	
				// update children
	
				if ( updateChildren === true ) {
	
					var children = this.children;
	
					for ( var i = 0, l = children.length; i < l; i ++ ) {
	
						children[ i ].updateWorldMatrix( false, true );
	
					}
	
				}
	
			},
	
			toJSON: function ( meta ) {
	
				// meta is a string when called from JSON.stringify
				var isRootObject = ( meta === undefined || typeof meta === 'string' );
	
				var output = {};
	
				// meta is a hash used to collect geometries, materials.
				// not providing it implies that this is the root object
				// being serialized.
				if ( isRootObject ) {
	
					// initialize meta obj
					meta = {
						geometries: {},
						materials: {},
						textures: {},
						images: {},
						shapes: {}
					};
	
					output.metadata = {
						version: 4.5,
						type: 'Object',
						generator: 'Object3D.toJSON'
					};
	
				}
	
				// standard Object3D serialization
	
				var object = {};
	
				object.uuid = this.uuid;
				object.type = this.type;
	
				if ( this.name !== '' ) { object.name = this.name; }
				if ( this.castShadow === true ) { object.castShadow = true; }
				if ( this.receiveShadow === true ) { object.receiveShadow = true; }
				if ( this.visible === false ) { object.visible = false; }
				if ( this.frustumCulled === false ) { object.frustumCulled = false; }
				if ( this.renderOrder !== 0 ) { object.renderOrder = this.renderOrder; }
				if ( JSON.stringify( this.userData ) !== '{}' ) { object.userData = this.userData; }
	
				object.layers = this.layers.mask;
				object.matrix = this.matrix.toArray();
	
				if ( this.matrixAutoUpdate === false ) { object.matrixAutoUpdate = false; }
	
				// object specific properties
	
				if ( this.isInstancedMesh ) {
	
					object.type = 'InstancedMesh';
					object.count = this.count;
					object.instanceMatrix = this.instanceMatrix.toJSON();
	
				}
	
				//
	
				function serialize( library, element ) {
	
					if ( library[ element.uuid ] === undefined ) {
	
						library[ element.uuid ] = element.toJSON( meta );
	
					}
	
					return element.uuid;
	
				}
	
				if ( this.isMesh || this.isLine || this.isPoints ) {
	
					object.geometry = serialize( meta.geometries, this.geometry );
	
					var parameters = this.geometry.parameters;
	
					if ( parameters !== undefined && parameters.shapes !== undefined ) {
	
						var shapes = parameters.shapes;
	
						if ( Array.isArray( shapes ) ) {
	
							for ( var i = 0, l = shapes.length; i < l; i ++ ) {
	
								var shape = shapes[ i ];
	
								serialize( meta.shapes, shape );
	
							}
	
						} else {
	
							serialize( meta.shapes, shapes );
	
						}
	
					}
	
				}
	
				if ( this.material !== undefined ) {
	
					if ( Array.isArray( this.material ) ) {
	
						var uuids = [];
	
						for ( var i = 0, l = this.material.length; i < l; i ++ ) {
	
							uuids.push( serialize( meta.materials, this.material[ i ] ) );
	
						}
	
						object.material = uuids;
	
					} else {
	
						object.material = serialize( meta.materials, this.material );
	
					}
	
				}
	
				//
	
				if ( this.children.length > 0 ) {
	
					object.children = [];
	
					for ( var i = 0; i < this.children.length; i ++ ) {
	
						object.children.push( this.children[ i ].toJSON( meta ).object );
	
					}
	
				}
	
				if ( isRootObject ) {
	
					var geometries = extractFromCache( meta.geometries );
					var materials = extractFromCache( meta.materials );
					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );
					var shapes = extractFromCache( meta.shapes );
	
					if ( geometries.length > 0 ) { output.geometries = geometries; }
					if ( materials.length > 0 ) { output.materials = materials; }
					if ( textures.length > 0 ) { output.textures = textures; }
					if ( images.length > 0 ) { output.images = images; }
					if ( shapes.length > 0 ) { output.shapes = shapes; }
	
				}
	
				output.object = object;
	
				return output;
	
				// extract data from the cache hash
				// remove metadata on each item
				// and return as array
				function extractFromCache( cache ) {
	
					var values = [];
					for ( var key in cache ) {
	
						var data = cache[ key ];
						delete data.metadata;
						values.push( data );
	
					}
					return values;
	
				}
	
			},
	
			clone: function ( recursive ) {
	
				return new this.constructor().copy( this, recursive );
	
			},
	
			copy: function ( source, recursive ) {
	
				if ( recursive === undefined ) { recursive = true; }
	
				this.name = source.name;
	
				this.up.copy( source.up );
	
				this.position.copy( source.position );
				this.quaternion.copy( source.quaternion );
				this.scale.copy( source.scale );
	
				this.matrix.copy( source.matrix );
				this.matrixWorld.copy( source.matrixWorld );
	
				this.matrixAutoUpdate = source.matrixAutoUpdate;
				this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
	
				this.layers.mask = source.layers.mask;
				this.visible = source.visible;
	
				this.castShadow = source.castShadow;
				this.receiveShadow = source.receiveShadow;
	
				this.frustumCulled = source.frustumCulled;
				this.renderOrder = source.renderOrder;
	
				this.userData = JSON.parse( JSON.stringify( source.userData ) );
	
				if ( recursive === true ) {
	
					for ( var i = 0; i < source.children.length; i ++ ) {
	
						var child = source.children[ i ];
						this.add( child.clone() );
	
					}
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Scene() {
	
			Object3D.call( this );
	
			this.type = 'Scene';
	
			this.background = null;
			this.environment = null;
			this.fog = null;
	
			this.overrideMaterial = null;
	
			this.autoUpdate = true; // checked by the renderer
	
			if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
	
				__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef
	
			}
	
		}
	
		Scene.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Scene,
	
			isScene: true,
	
			copy: function ( source, recursive ) {
	
				Object3D.prototype.copy.call( this, source, recursive );
	
				if ( source.background !== null ) { this.background = source.background.clone(); }
				if ( source.environment !== null ) { this.environment = source.environment.clone(); }
				if ( source.fog !== null ) { this.fog = source.fog.clone(); }
	
				if ( source.overrideMaterial !== null ) { this.overrideMaterial = source.overrideMaterial.clone(); }
	
				this.autoUpdate = source.autoUpdate;
				this.matrixAutoUpdate = source.matrixAutoUpdate;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				if ( this.background !== null ) { data.object.background = this.background.toJSON( meta ); }
				if ( this.environment !== null ) { data.object.environment = this.environment.toJSON( meta ); }
				if ( this.fog !== null ) { data.object.fog = this.fog.toJSON(); }
	
				return data;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		var _points = [
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3(),
			new Vector3()
		];
	
		var _vector$1 = new Vector3();
	
		var _box = new Box3();
	
		// triangle centered vertices
	
		var _v0 = new Vector3();
		var _v1$2 = new Vector3();
		var _v2 = new Vector3();
	
		// triangle edge vectors
	
		var _f0 = new Vector3();
		var _f1 = new Vector3();
		var _f2 = new Vector3();
	
		var _center = new Vector3();
		var _extents = new Vector3();
		var _triangleNormal = new Vector3();
		var _testAxis = new Vector3();
	
		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Box3( min, max ) {
	
			this.min = ( min !== undefined ) ? min : new Vector3( + Infinity, + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new Vector3( - Infinity, - Infinity, - Infinity );
	
		}
	
	
		Object.assign( Box3.prototype, {
	
			isBox3: true,
	
			set: function ( min, max ) {
	
				this.min.copy( min );
				this.max.copy( max );
	
				return this;
	
			},
	
			setFromArray: function ( array ) {
	
				var minX = + Infinity;
				var minY = + Infinity;
				var minZ = + Infinity;
	
				var maxX = - Infinity;
				var maxY = - Infinity;
				var maxZ = - Infinity;
	
				for ( var i = 0, l = array.length; i < l; i += 3 ) {
	
					var x = array[ i ];
					var y = array[ i + 1 ];
					var z = array[ i + 2 ];
	
					if ( x < minX ) { minX = x; }
					if ( y < minY ) { minY = y; }
					if ( z < minZ ) { minZ = z; }
	
					if ( x > maxX ) { maxX = x; }
					if ( y > maxY ) { maxY = y; }
					if ( z > maxZ ) { maxZ = z; }
	
				}
	
				this.min.set( minX, minY, minZ );
				this.max.set( maxX, maxY, maxZ );
	
				return this;
	
			},
	
			setFromBufferAttribute: function ( attribute ) {
	
				var minX = + Infinity;
				var minY = + Infinity;
				var minZ = + Infinity;
	
				var maxX = - Infinity;
				var maxY = - Infinity;
				var maxZ = - Infinity;
	
				for ( var i = 0, l = attribute.count; i < l; i ++ ) {
	
					var x = attribute.getX( i );
					var y = attribute.getY( i );
					var z = attribute.getZ( i );
	
					if ( x < minX ) { minX = x; }
					if ( y < minY ) { minY = y; }
					if ( z < minZ ) { minZ = z; }
	
					if ( x > maxX ) { maxX = x; }
					if ( y > maxY ) { maxY = y; }
					if ( z > maxZ ) { maxZ = z; }
	
				}
	
				this.min.set( minX, minY, minZ );
				this.max.set( maxX, maxY, maxZ );
	
				return this;
	
			},
	
			setFromPoints: function ( points ) {
	
				this.makeEmpty();
	
				for ( var i = 0, il = points.length; i < il; i ++ ) {
	
					this.expandByPoint( points[ i ] );
	
				}
	
				return this;
	
			},
	
			setFromCenterAndSize: function ( center, size ) {
	
				var halfSize = _vector$1.copy( size ).multiplyScalar( 0.5 );
	
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );
	
				return this;
	
			},
	
			setFromObject: function ( object ) {
	
				this.makeEmpty();
	
				return this.expandByObject( object );
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( box ) {
	
				this.min.copy( box.min );
				this.max.copy( box.max );
	
				return this;
	
			},
	
			makeEmpty: function () {
	
				this.min.x = this.min.y = this.min.z = + Infinity;
				this.max.x = this.max.y = this.max.z = - Infinity;
	
				return this;
	
			},
	
			isEmpty: function () {
	
				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
	
				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
	
			},
	
			getCenter: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Box3: .getCenter() target is now required' );
					target = new Vector3();
	
				}
	
				return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
	
			},
	
			getSize: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Box3: .getSize() target is now required' );
					target = new Vector3();
	
				}
	
				return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );
	
			},
	
			expandByPoint: function ( point ) {
	
				this.min.min( point );
				this.max.max( point );
	
				return this;
	
			},
	
			expandByVector: function ( vector ) {
	
				this.min.sub( vector );
				this.max.add( vector );
	
				return this;
	
			},
	
			expandByScalar: function ( scalar ) {
	
				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );
	
				return this;
	
			},
	
			expandByObject: function ( object ) {
	
				// Computes the world-axis-aligned bounding box of an object (including its children),
				// accounting for both the object's, and children's, world transforms
	
				object.updateWorldMatrix( false, false );
	
				var geometry = object.geometry;
	
				if ( geometry !== undefined ) {
	
					if ( geometry.boundingBox === null ) {
	
						geometry.computeBoundingBox();
	
					}
	
					_box.copy( geometry.boundingBox );
					_box.applyMatrix4( object.matrixWorld );
	
					this.union( _box );
	
				}
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					this.expandByObject( children[ i ] );
	
				}
	
				return this;
	
			},
	
			containsPoint: function ( point ) {
	
				return point.x < this.min.x || point.x > this.max.x ||
					point.y < this.min.y || point.y > this.max.y ||
					point.z < this.min.z || point.z > this.max.z ? false : true;
	
			},
	
			containsBox: function ( box ) {
	
				return this.min.x <= box.min.x && box.max.x <= this.max.x &&
					this.min.y <= box.min.y && box.max.y <= this.max.y &&
					this.min.z <= box.min.z && box.max.z <= this.max.z;
	
			},
	
			getParameter: function ( point, target ) {
	
				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Box3: .getParameter() target is now required' );
					target = new Vector3();
	
				}
	
				return target.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y ),
					( point.z - this.min.z ) / ( this.max.z - this.min.z )
				);
	
			},
	
			intersectsBox: function ( box ) {
	
				// using 6 splitting planes to rule out intersections.
				return box.max.x < this.min.x || box.min.x > this.max.x ||
					box.max.y < this.min.y || box.min.y > this.max.y ||
					box.max.z < this.min.z || box.min.z > this.max.z ? false : true;
	
			},
	
			intersectsSphere: function ( sphere ) {
	
				// Find the point on the AABB closest to the sphere center.
				this.clampPoint( sphere.center, _vector$1 );
	
				// If that point is inside the sphere, the AABB and sphere intersect.
				return _vector$1.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );
	
			},
	
			intersectsPlane: function ( plane ) {
	
				// We compute the minimum and maximum dot product values. If those values
				// are on the same side (back or front) of the plane, then there is no intersection.
	
				var min, max;
	
				if ( plane.normal.x > 0 ) {
	
					min = plane.normal.x * this.min.x;
					max = plane.normal.x * this.max.x;
	
				} else {
	
					min = plane.normal.x * this.max.x;
					max = plane.normal.x * this.min.x;
	
				}
	
				if ( plane.normal.y > 0 ) {
	
					min += plane.normal.y * this.min.y;
					max += plane.normal.y * this.max.y;
	
				} else {
	
					min += plane.normal.y * this.max.y;
					max += plane.normal.y * this.min.y;
	
				}
	
				if ( plane.normal.z > 0 ) {
	
					min += plane.normal.z * this.min.z;
					max += plane.normal.z * this.max.z;
	
				} else {
	
					min += plane.normal.z * this.max.z;
					max += plane.normal.z * this.min.z;
	
				}
	
				return ( min <= - plane.constant && max >= - plane.constant );
	
			},
	
			intersectsTriangle: function ( triangle ) {
	
				if ( this.isEmpty() ) {
	
					return false;
	
				}
	
				// compute box center and extents
				this.getCenter( _center );
				_extents.subVectors( this.max, _center );
	
				// translate triangle to aabb origin
				_v0.subVectors( triangle.a, _center );
				_v1$2.subVectors( triangle.b, _center );
				_v2.subVectors( triangle.c, _center );
	
				// compute edge vectors for triangle
				_f0.subVectors( _v1$2, _v0 );
				_f1.subVectors( _v2, _v1$2 );
				_f2.subVectors( _v0, _v2 );
	
				// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
				// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
				// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
				var axes = [
					0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
					_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
					- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
				];
				if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {
	
					return false;
	
				}
	
				// test 3 face normals from the aabb
				axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
				if ( ! satForAxes( axes, _v0, _v1$2, _v2, _extents ) ) {
	
					return false;
	
				}
	
				// finally testing the face normal of the triangle
				// use already existing triangle edge vectors here
				_triangleNormal.crossVectors( _f0, _f1 );
				axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];
	
				return satForAxes( axes, _v0, _v1$2, _v2, _extents );
	
			},
	
			clampPoint: function ( point, target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Box3: .clampPoint() target is now required' );
					target = new Vector3();
	
				}
	
				return target.copy( point ).clamp( this.min, this.max );
	
			},
	
			distanceToPoint: function ( point ) {
	
				var clampedPoint = _vector$1.copy( point ).clamp( this.min, this.max );
	
				return clampedPoint.sub( point ).length();
	
			},
	
			getBoundingSphere: function ( target ) {
	
				if ( target === undefined ) {
	
					console.error( 'THREE.Box3: .getBoundingSphere() target is now required' );
					//target = new Sphere(); // removed to avoid cyclic dependency
	
				}
	
				this.getCenter( target.center );
	
				target.radius = this.getSize( _vector$1 ).length() * 0.5;
	
				return target;
	
			},
	
			intersect: function ( box ) {
	
				this.min.max( box.min );
				this.max.min( box.max );
	
				// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
				if ( this.isEmpty() ) { this.makeEmpty(); }
	
				return this;
	
			},
	
			union: function ( box ) {
	
				this.min.min( box.min );
				this.max.max( box.max );
	
				return this;
	
			},
	
			applyMatrix4: function ( matrix ) {
	
				// transform of empty box is an empty box.
				if ( this.isEmpty() ) { return this; }
	
				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111
	
				this.setFromPoints( _points );
	
				return this;
	
			},
	
			translate: function ( offset ) {
	
				this.min.add( offset );
				this.max.add( offset );
	
				return this;
	
			},
	
			equals: function ( box ) {
	
				return box.min.equals( this.min ) && box.max.equals( this.max );
	
			}
	
		} );
	
		function satForAxes( axes, v0, v1, v2, extents ) {
	
			var i, j;
	
			for ( i = 0, j = axes.length - 3; i <= j; i += 3 ) {
	
				_testAxis.fromArray( axes, i );
				// project the aabb onto the seperating axis
				var r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
				// project all 3 vertices of the triangle onto the seperating axis
				var p0 = v0.dot( _testAxis );
				var p1 = v1.dot( _testAxis );
				var p2 = v2.dot( _testAxis );
				// actual test, basically see if either of the most extreme of the triangle points intersects r
				if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {
	
					// points of the projected triangle are outside the projected half-length of the aabb
					// the axis is seperating and we can exit
					return false;
	
				}
	
			}
	
			return true;
	
		}
	
		var _box$1 = new Box3();
	
		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Sphere( center, radius ) {
	
			this.center = ( center !== undefined ) ? center : new Vector3();
			this.radius = ( radius !== undefined ) ? radius : 0;
	
		}
	
		Object.assign( Sphere.prototype, {
	
			set: function ( center, radius ) {
	
				this.center.copy( center );
				this.radius = radius;
	
				return this;
	
			},
	
			setFromPoints: function ( points, optionalCenter ) {
	
				var center = this.center;
	
				if ( optionalCenter !== undefined ) {
	
					center.copy( optionalCenter );
	
				} else {
	
					_box$1.setFromPoints( points ).getCenter( center );
	
				}
	
				var maxRadiusSq = 0;
	
				for ( var i = 0, il = points.length; i < il; i ++ ) {
	
					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
	
				}
	
				this.radius = Math.sqrt( maxRadiusSq );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( sphere ) {
	
				this.center.copy( sphere.center );
				this.radius = sphere.radius;
	
				return this;
	
			},
	
			empty: function () {
	
				return ( this.radius <= 0 );
	
			},
	
			containsPoint: function ( point ) {
	
				return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
	
			},
	
			distanceToPoint: function ( point ) {
	
				return ( point.distanceTo( this.center ) - this.radius );
	
			},
	
			intersectsSphere: function ( sphere ) {
	
				var radiusSum = this.radius + sphere.radius;
	
				return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
	
			},
	
			intersectsBox: function ( box ) {
	
				return box.intersectsSphere( this );
	
			},
	
			intersectsPlane: function ( plane ) {
	
				return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;
	
			},
	
			clampPoint: function ( point, target ) {
	
				var deltaLengthSq = this.center.distanceToSquared( point );
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Sphere: .clampPoint() target is now required' );
					target = new Vector3();
	
				}
	
				target.copy( point );
	
				if ( deltaLengthSq > ( this.radius * this.radius ) ) {
	
					target.sub( this.center ).normalize();
					target.multiplyScalar( this.radius ).add( this.center );
	
				}
	
				return target;
	
			},
	
			getBoundingBox: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Sphere: .getBoundingBox() target is now required' );
					target = new Box3();
	
				}
	
				target.set( this.center, this.center );
				target.expandByScalar( this.radius );
	
				return target;
	
			},
	
			applyMatrix4: function ( matrix ) {
	
				this.center.applyMatrix4( matrix );
				this.radius = this.radius * matrix.getMaxScaleOnAxis();
	
				return this;
	
			},
	
			translate: function ( offset ) {
	
				this.center.add( offset );
	
				return this;
	
			},
	
			equals: function ( sphere ) {
	
				return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
	
			}
	
		} );
	
		var _vector$2 = new Vector3();
		var _segCenter = new Vector3();
		var _segDir = new Vector3();
		var _diff = new Vector3();
	
		var _edge1 = new Vector3();
		var _edge2 = new Vector3();
		var _normal = new Vector3();
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		function Ray( origin, direction ) {
	
			this.origin = ( origin !== undefined ) ? origin : new Vector3();
			this.direction = ( direction !== undefined ) ? direction : new Vector3( 0, 0, - 1 );
	
		}
	
		Object.assign( Ray.prototype, {
	
			set: function ( origin, direction ) {
	
				this.origin.copy( origin );
				this.direction.copy( direction );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( ray ) {
	
				this.origin.copy( ray.origin );
				this.direction.copy( ray.direction );
	
				return this;
	
			},
	
			at: function ( t, target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Ray: .at() target is now required' );
					target = new Vector3();
	
				}
	
				return target.copy( this.direction ).multiplyScalar( t ).add( this.origin );
	
			},
	
			lookAt: function ( v ) {
	
				this.direction.copy( v ).sub( this.origin ).normalize();
	
				return this;
	
			},
	
			recast: function ( t ) {
	
				this.origin.copy( this.at( t, _vector$2 ) );
	
				return this;
	
			},
	
			closestPointToPoint: function ( point, target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Ray: .closestPointToPoint() target is now required' );
					target = new Vector3();
	
				}
	
				target.subVectors( point, this.origin );
	
				var directionDistance = target.dot( this.direction );
	
				if ( directionDistance < 0 ) {
	
					return target.copy( this.origin );
	
				}
	
				return target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
	
			},
	
			distanceToPoint: function ( point ) {
	
				return Math.sqrt( this.distanceSqToPoint( point ) );
	
			},
	
			distanceSqToPoint: function ( point ) {
	
				var directionDistance = _vector$2.subVectors( point, this.origin ).dot( this.direction );
	
				// point behind the ray
	
				if ( directionDistance < 0 ) {
	
					return this.origin.distanceToSquared( point );
	
				}
	
				_vector$2.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
	
				return _vector$2.distanceToSquared( point );
	
			},
	
			distanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
	
				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment
	
				_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				_segDir.copy( v1 ).sub( v0 ).normalize();
				_diff.copy( this.origin ).sub( _segCenter );
	
				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( _segDir );
				var b0 = _diff.dot( this.direction );
				var b1 = - _diff.dot( _segDir );
				var c = _diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;
	
				if ( det > 0 ) {
	
					// The ray and segment are not parallel.
	
					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;
	
					if ( s0 >= 0 ) {
	
						if ( s1 >= - extDet ) {
	
							if ( s1 <= extDet ) {
	
								// region 0
								// Minimum at interior points of ray and segment.
	
								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
	
							} else {
	
								// region 1
	
								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
							}
	
						} else {
	
							// region 5
	
							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
						}
	
					} else {
	
						if ( s1 <= - extDet ) {
	
							// region 4
	
							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
						} else if ( s1 <= extDet ) {
	
							// region 3
	
							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;
	
						} else {
	
							// region 2
	
							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
						}
	
					}
	
				} else {
	
					// Ray and segment are parallel.
	
					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
				}
	
				if ( optionalPointOnRay ) {
	
					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );
	
				}
	
				if ( optionalPointOnSegment ) {
	
					optionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );
	
				}
	
				return sqrDist;
	
			},
	
			intersectSphere: function ( sphere, target ) {
	
				_vector$2.subVectors( sphere.center, this.origin );
				var tca = _vector$2.dot( this.direction );
				var d2 = _vector$2.dot( _vector$2 ) - tca * tca;
				var radius2 = sphere.radius * sphere.radius;
	
				if ( d2 > radius2 ) { return null; }
	
				var thc = Math.sqrt( radius2 - d2 );
	
				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;
	
				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;
	
				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) { return null; }
	
				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) { return this.at( t1, target ); }
	
				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, target );
	
			},
	
			intersectsSphere: function ( sphere ) {
	
				return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );
	
			},
	
			distanceToPlane: function ( plane ) {
	
				var denominator = plane.normal.dot( this.direction );
	
				if ( denominator === 0 ) {
	
					// line is coplanar, return origin
					if ( plane.distanceToPoint( this.origin ) === 0 ) {
	
						return 0;
	
					}
	
					// Null is preferable to undefined since undefined means.... it is undefined
	
					return null;
	
				}
	
				var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
	
				// Return if the ray never intersects the plane
	
				return t >= 0 ? t : null;
	
			},
	
			intersectPlane: function ( plane, target ) {
	
				var t = this.distanceToPlane( plane );
	
				if ( t === null ) {
	
					return null;
	
				}
	
				return this.at( t, target );
	
			},
	
			intersectsPlane: function ( plane ) {
	
				// check if the ray lies on the plane first
	
				var distToPoint = plane.distanceToPoint( this.origin );
	
				if ( distToPoint === 0 ) {
	
					return true;
	
				}
	
				var denominator = plane.normal.dot( this.direction );
	
				if ( denominator * distToPoint < 0 ) {
	
					return true;
	
				}
	
				// ray origin is behind the plane (and is pointing behind it)
	
				return false;
	
			},
	
			intersectBox: function ( box, target ) {
	
				var tmin, tmax, tymin, tymax, tzmin, tzmax;
	
				var invdirx = 1 / this.direction.x,
					invdiry = 1 / this.direction.y,
					invdirz = 1 / this.direction.z;
	
				var origin = this.origin;
	
				if ( invdirx >= 0 ) {
	
					tmin = ( box.min.x - origin.x ) * invdirx;
					tmax = ( box.max.x - origin.x ) * invdirx;
	
				} else {
	
					tmin = ( box.max.x - origin.x ) * invdirx;
					tmax = ( box.min.x - origin.x ) * invdirx;
	
				}
	
				if ( invdiry >= 0 ) {
	
					tymin = ( box.min.y - origin.y ) * invdiry;
					tymax = ( box.max.y - origin.y ) * invdiry;
	
				} else {
	
					tymin = ( box.max.y - origin.y ) * invdiry;
					tymax = ( box.min.y - origin.y ) * invdiry;
	
				}
	
				if ( ( tmin > tymax ) || ( tymin > tmax ) ) { return null; }
	
				// These lines also handle the case where tmin or tmax is NaN
				// (result of 0 * Infinity). x !== x returns true if x is NaN
	
				if ( tymin > tmin || tmin !== tmin ) { tmin = tymin; }
	
				if ( tymax < tmax || tmax !== tmax ) { tmax = tymax; }
	
				if ( invdirz >= 0 ) {
	
					tzmin = ( box.min.z - origin.z ) * invdirz;
					tzmax = ( box.max.z - origin.z ) * invdirz;
	
				} else {
	
					tzmin = ( box.max.z - origin.z ) * invdirz;
					tzmax = ( box.min.z - origin.z ) * invdirz;
	
				}
	
				if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) { return null; }
	
				if ( tzmin > tmin || tmin !== tmin ) { tmin = tzmin; }
	
				if ( tzmax < tmax || tmax !== tmax ) { tmax = tzmax; }
	
				//return point closest to the ray (positive side)
	
				if ( tmax < 0 ) { return null; }
	
				return this.at( tmin >= 0 ? tmin : tmax, target );
	
			},
	
			intersectsBox: function ( box ) {
	
				return this.intersectBox( box, _vector$2 ) !== null;
	
			},
	
			intersectTriangle: function ( a, b, c, backfaceCulling, target ) {
	
				// Compute the offset origin, edges, and normal.
	
				// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h
	
				_edge1.subVectors( b, a );
				_edge2.subVectors( c, a );
				_normal.crossVectors( _edge1, _edge2 );
	
				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( _normal );
				var sign;
	
				if ( DdN > 0 ) {
	
					if ( backfaceCulling ) { return null; }
					sign = 1;
	
				} else if ( DdN < 0 ) {
	
					sign = - 1;
					DdN = - DdN;
	
				} else {
	
					return null;
	
				}
	
				_diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );
	
				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {
	
					return null;
	
				}
	
				var DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );
	
				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {
	
					return null;
	
				}
	
				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {
	
					return null;
	
				}
	
				// Line intersects triangle, check if ray does.
				var QdN = - sign * _diff.dot( _normal );
	
				// t < 0, no intersection
				if ( QdN < 0 ) {
	
					return null;
	
				}
	
				// Ray intersects triangle.
				return this.at( QdN / DdN, target );
	
			},
	
			applyMatrix4: function ( matrix4 ) {
	
				this.origin.applyMatrix4( matrix4 );
				this.direction.transformDirection( matrix4 );
	
				return this;
	
			},
	
			equals: function ( ray ) {
	
				return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		var _vector1 = new Vector3();
		var _vector2 = new Vector3();
		var _normalMatrix = new Matrix3();
	
		function Plane( normal, constant ) {
	
			// normal is assumed to be normalized
	
			this.normal = ( normal !== undefined ) ? normal : new Vector3( 1, 0, 0 );
			this.constant = ( constant !== undefined ) ? constant : 0;
	
		}
	
		Object.assign( Plane.prototype, {
	
			isPlane: true,
	
			set: function ( normal, constant ) {
	
				this.normal.copy( normal );
				this.constant = constant;
	
				return this;
	
			},
	
			setComponents: function ( x, y, z, w ) {
	
				this.normal.set( x, y, z );
				this.constant = w;
	
				return this;
	
			},
	
			setFromNormalAndCoplanarPoint: function ( normal, point ) {
	
				this.normal.copy( normal );
				this.constant = - point.dot( this.normal );
	
				return this;
	
			},
	
			setFromCoplanarPoints: function ( a, b, c ) {
	
				var normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();
	
				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
	
				this.setFromNormalAndCoplanarPoint( normal, a );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( plane ) {
	
				this.normal.copy( plane.normal );
				this.constant = plane.constant;
	
				return this;
	
			},
	
			normalize: function () {
	
				// Note: will lead to a divide by zero if the plane is invalid.
	
				var inverseNormalLength = 1.0 / this.normal.length();
				this.normal.multiplyScalar( inverseNormalLength );
				this.constant *= inverseNormalLength;
	
				return this;
	
			},
	
			negate: function () {
	
				this.constant *= - 1;
				this.normal.negate();
	
				return this;
	
			},
	
			distanceToPoint: function ( point ) {
	
				return this.normal.dot( point ) + this.constant;
	
			},
	
			distanceToSphere: function ( sphere ) {
	
				return this.distanceToPoint( sphere.center ) - sphere.radius;
	
			},
	
			projectPoint: function ( point, target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Plane: .projectPoint() target is now required' );
					target = new Vector3();
	
				}
	
				return target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );
	
			},
	
			intersectLine: function ( line, target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Plane: .intersectLine() target is now required' );
					target = new Vector3();
	
				}
	
				var direction = line.delta( _vector1 );
	
				var denominator = this.normal.dot( direction );
	
				if ( denominator === 0 ) {
	
					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {
	
						return target.copy( line.start );
	
					}
	
					// Unsure if this is the correct method to handle this case.
					return undefined;
	
				}
	
				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
	
				if ( t < 0 || t > 1 ) {
	
					return undefined;
	
				}
	
				return target.copy( direction ).multiplyScalar( t ).add( line.start );
	
			},
	
			intersectsLine: function ( line ) {
	
				// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
	
				var startSign = this.distanceToPoint( line.start );
				var endSign = this.distanceToPoint( line.end );
	
				return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
	
			},
	
			intersectsBox: function ( box ) {
	
				return box.intersectsPlane( this );
	
			},
	
			intersectsSphere: function ( sphere ) {
	
				return sphere.intersectsPlane( this );
	
			},
	
			coplanarPoint: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Plane: .coplanarPoint() target is now required' );
					target = new Vector3();
	
				}
	
				return target.copy( this.normal ).multiplyScalar( - this.constant );
	
			},
	
			applyMatrix4: function ( matrix, optionalNormalMatrix ) {
	
				var normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );
	
				var referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );
	
				var normal = this.normal.applyMatrix3( normalMatrix ).normalize();
	
				this.constant = - referencePoint.dot( normal );
	
				return this;
	
			},
	
			translate: function ( offset ) {
	
				this.constant -= offset.dot( this.normal );
	
				return this;
	
			},
	
			equals: function ( plane ) {
	
				return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _v0$1 = new Vector3();
		var _v1$3 = new Vector3();
		var _v2$1 = new Vector3();
		var _v3 = new Vector3();
	
		var _vab = new Vector3();
		var _vac = new Vector3();
		var _vbc = new Vector3();
		var _vap = new Vector3();
		var _vbp = new Vector3();
		var _vcp = new Vector3();
	
		function Triangle( a, b, c ) {
	
			this.a = ( a !== undefined ) ? a : new Vector3();
			this.b = ( b !== undefined ) ? b : new Vector3();
			this.c = ( c !== undefined ) ? c : new Vector3();
	
		}
	
		Object.assign( Triangle, {
	
			getNormal: function ( a, b, c, target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Triangle: .getNormal() target is now required' );
					target = new Vector3();
	
				}
	
				target.subVectors( c, b );
				_v0$1.subVectors( a, b );
				target.cross( _v0$1 );
	
				var targetLengthSq = target.lengthSq();
				if ( targetLengthSq > 0 ) {
	
					return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );
	
				}
	
				return target.set( 0, 0, 0 );
	
			},
	
			// static/instance method to calculate barycentric coordinates
			// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
			getBarycoord: function ( point, a, b, c, target ) {
	
				_v0$1.subVectors( c, a );
				_v1$3.subVectors( b, a );
				_v2$1.subVectors( point, a );
	
				var dot00 = _v0$1.dot( _v0$1 );
				var dot01 = _v0$1.dot( _v1$3 );
				var dot02 = _v0$1.dot( _v2$1 );
				var dot11 = _v1$3.dot( _v1$3 );
				var dot12 = _v1$3.dot( _v2$1 );
	
				var denom = ( dot00 * dot11 - dot01 * dot01 );
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Triangle: .getBarycoord() target is now required' );
					target = new Vector3();
	
				}
	
				// collinear or singular triangle
				if ( denom === 0 ) {
	
					// arbitrary location outside of triangle?
					// not sure if this is the best idea, maybe should be returning undefined
					return target.set( - 2, - 1, - 1 );
	
				}
	
				var invDenom = 1 / denom;
				var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
				var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
	
				// barycentric coordinates must always sum to 1
				return target.set( 1 - u - v, v, u );
	
			},
	
			containsPoint: function ( point, a, b, c ) {
	
				Triangle.getBarycoord( point, a, b, c, _v3 );
	
				return ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );
	
			},
	
			getUV: function ( point, p1, p2, p3, uv1, uv2, uv3, target ) {
	
				this.getBarycoord( point, p1, p2, p3, _v3 );
	
				target.set( 0, 0 );
				target.addScaledVector( uv1, _v3.x );
				target.addScaledVector( uv2, _v3.y );
				target.addScaledVector( uv3, _v3.z );
	
				return target;
	
			},
	
			isFrontFacing: function ( a, b, c, direction ) {
	
				_v0$1.subVectors( c, b );
				_v1$3.subVectors( a, b );
	
				// strictly front facing
				return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;
	
			}
	
		} );
	
		Object.assign( Triangle.prototype, {
	
			set: function ( a, b, c ) {
	
				this.a.copy( a );
				this.b.copy( b );
				this.c.copy( c );
	
				return this;
	
			},
	
			setFromPointsAndIndices: function ( points, i0, i1, i2 ) {
	
				this.a.copy( points[ i0 ] );
				this.b.copy( points[ i1 ] );
				this.c.copy( points[ i2 ] );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( triangle ) {
	
				this.a.copy( triangle.a );
				this.b.copy( triangle.b );
				this.c.copy( triangle.c );
	
				return this;
	
			},
	
			getArea: function () {
	
				_v0$1.subVectors( this.c, this.b );
				_v1$3.subVectors( this.a, this.b );
	
				return _v0$1.cross( _v1$3 ).length() * 0.5;
	
			},
	
			getMidpoint: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Triangle: .getMidpoint() target is now required' );
					target = new Vector3();
	
				}
	
				return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
	
			},
	
			getNormal: function ( target ) {
	
				return Triangle.getNormal( this.a, this.b, this.c, target );
	
			},
	
			getPlane: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Triangle: .getPlane() target is now required' );
					target = new Plane();
	
				}
	
				return target.setFromCoplanarPoints( this.a, this.b, this.c );
	
			},
	
			getBarycoord: function ( point, target ) {
	
				return Triangle.getBarycoord( point, this.a, this.b, this.c, target );
	
			},
	
			getUV: function ( point, uv1, uv2, uv3, target ) {
	
				return Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );
	
			},
	
			containsPoint: function ( point ) {
	
				return Triangle.containsPoint( point, this.a, this.b, this.c );
	
			},
	
			isFrontFacing: function ( direction ) {
	
				return Triangle.isFrontFacing( this.a, this.b, this.c, direction );
	
			},
	
			intersectsBox: function ( box ) {
	
				return box.intersectsTriangle( this );
	
			},
	
			closestPointToPoint: function ( p, target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Triangle: .closestPointToPoint() target is now required' );
					target = new Vector3();
	
				}
	
				var a = this.a, b = this.b, c = this.c;
				var v, w;
	
				// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
				// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
				// under the accompanying license; see chapter 5.1.5 for detailed explanation.
				// basically, we're distinguishing which of the voronoi regions of the triangle
				// the point lies in with the minimum amount of redundant computation.
	
				_vab.subVectors( b, a );
				_vac.subVectors( c, a );
				_vap.subVectors( p, a );
				var d1 = _vab.dot( _vap );
				var d2 = _vac.dot( _vap );
				if ( d1 <= 0 && d2 <= 0 ) {
	
					// vertex region of A; barycentric coords (1, 0, 0)
					return target.copy( a );
	
				}
	
				_vbp.subVectors( p, b );
				var d3 = _vab.dot( _vbp );
				var d4 = _vac.dot( _vbp );
				if ( d3 >= 0 && d4 <= d3 ) {
	
					// vertex region of B; barycentric coords (0, 1, 0)
					return target.copy( b );
	
				}
	
				var vc = d1 * d4 - d3 * d2;
				if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {
	
					v = d1 / ( d1 - d3 );
					// edge region of AB; barycentric coords (1-v, v, 0)
					return target.copy( a ).addScaledVector( _vab, v );
	
				}
	
				_vcp.subVectors( p, c );
				var d5 = _vab.dot( _vcp );
				var d6 = _vac.dot( _vcp );
				if ( d6 >= 0 && d5 <= d6 ) {
	
					// vertex region of C; barycentric coords (0, 0, 1)
					return target.copy( c );
	
				}
	
				var vb = d5 * d2 - d1 * d6;
				if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {
	
					w = d2 / ( d2 - d6 );
					// edge region of AC; barycentric coords (1-w, 0, w)
					return target.copy( a ).addScaledVector( _vac, w );
	
				}
	
				var va = d3 * d6 - d5 * d4;
				if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {
	
					_vbc.subVectors( c, b );
					w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
					// edge region of BC; barycentric coords (0, 1-w, w)
					return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC
	
				}
	
				// face region
				var denom = 1 / ( va + vb + vc );
				// u = va * denom
				v = vb * denom;
				w = vc * denom;
	
				return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );
	
			},
	
			equals: function ( triangle ) {
	
				return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
			'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
			'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
			'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
			'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
			'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
			'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
			'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
			'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
			'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
			'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
			'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
			'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
			'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
			'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
			'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
			'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
			'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
			'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
			'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
			'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
			'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
			'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
			'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
	
		var _hslA = { h: 0, s: 0, l: 0 };
		var _hslB = { h: 0, s: 0, l: 0 };
	
		function Color( r, g, b ) {
	
			if ( g === undefined && b === undefined ) {
	
				// r is THREE.Color, hex or string
				return this.set( r );
	
			}
	
			return this.setRGB( r, g, b );
	
		}
	
		function hue2rgb( p, q, t ) {
	
			if ( t < 0 ) { t += 1; }
			if ( t > 1 ) { t -= 1; }
			if ( t < 1 / 6 ) { return p + ( q - p ) * 6 * t; }
			if ( t < 1 / 2 ) { return q; }
			if ( t < 2 / 3 ) { return p + ( q - p ) * 6 * ( 2 / 3 - t ); }
			return p;
	
		}
	
		function SRGBToLinear( c ) {
	
			return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );
	
		}
	
		function LinearToSRGB( c ) {
	
			return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;
	
		}
	
		Object.assign( Color.prototype, {
	
			isColor: true,
	
			r: 1, g: 1, b: 1,
	
			set: function ( value ) {
	
				if ( value && value.isColor ) {
	
					this.copy( value );
	
				} else if ( typeof value === 'number' ) {
	
					this.setHex( value );
	
				} else if ( typeof value === 'string' ) {
	
					this.setStyle( value );
	
				}
	
				return this;
	
			},
	
			setScalar: function ( scalar ) {
	
				this.r = scalar;
				this.g = scalar;
				this.b = scalar;
	
				return this;
	
			},
	
			setHex: function ( hex ) {
	
				hex = Math.floor( hex );
	
				this.r = ( hex >> 16 & 255 ) / 255;
				this.g = ( hex >> 8 & 255 ) / 255;
				this.b = ( hex & 255 ) / 255;
	
				return this;
	
			},
	
			setRGB: function ( r, g, b ) {
	
				this.r = r;
				this.g = g;
				this.b = b;
	
				return this;
	
			},
	
			setHSL: function ( h, s, l ) {
	
				// h,s,l ranges are in 0.0 - 1.0
				h = MathUtils.euclideanModulo( h, 1 );
				s = MathUtils.clamp( s, 0, 1 );
				l = MathUtils.clamp( l, 0, 1 );
	
				if ( s === 0 ) {
	
					this.r = this.g = this.b = l;
	
				} else {
	
					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;
	
					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );
	
				}
	
				return this;
	
			},
	
			setStyle: function ( style ) {
	
				function handleAlpha( string ) {
	
					if ( string === undefined ) { return; }
	
					if ( parseFloat( string ) < 1 ) {
	
						console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );
	
					}
	
				}
	
	
				var m;
	
				if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {
	
					// rgb / hsl
	
					var color;
					var name = m[ 1 ];
					var components = m[ 2 ];
	
					switch ( name ) {
	
						case 'rgb':
						case 'rgba':
	
							if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
								// rgb(255,0,0) rgba(255,0,0,0.5)
								this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
								this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
								this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
	
								handleAlpha( color[ 5 ] );
	
								return this;
	
							}
	
							if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
								// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
								this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
								this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
								this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
	
								handleAlpha( color[ 5 ] );
	
								return this;
	
							}
	
							break;
	
						case 'hsl':
						case 'hsla':
	
							if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
								// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
								var h = parseFloat( color[ 1 ] ) / 360;
								var s = parseInt( color[ 2 ], 10 ) / 100;
								var l = parseInt( color[ 3 ], 10 ) / 100;
	
								handleAlpha( color[ 5 ] );
	
								return this.setHSL( h, s, l );
	
							}
	
							break;
	
					}
	
				} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {
	
					// hex color
	
					var hex = m[ 1 ];
					var size = hex.length;
	
					if ( size === 3 ) {
	
						// #ff0
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;
	
						return this;
	
					} else if ( size === 6 ) {
	
						// #ff0000
						this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
						this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
						this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;
	
						return this;
	
					}
	
				}
	
				if ( style && style.length > 0 ) {
	
					return this.setColorName( style );
	
				}
	
				return this;
	
			},
	
			setColorName: function ( style ) {
	
				// color keywords
				var hex = _colorKeywords[ style ];
	
				if ( hex !== undefined ) {
	
					// red
					this.setHex( hex );
	
				} else {
	
					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );
	
				}
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this.r, this.g, this.b );
	
			},
	
			copy: function ( color ) {
	
				this.r = color.r;
				this.g = color.g;
				this.b = color.b;
	
				return this;
	
			},
	
			copyGammaToLinear: function ( color, gammaFactor ) {
	
				if ( gammaFactor === undefined ) { gammaFactor = 2.0; }
	
				this.r = Math.pow( color.r, gammaFactor );
				this.g = Math.pow( color.g, gammaFactor );
				this.b = Math.pow( color.b, gammaFactor );
	
				return this;
	
			},
	
			copyLinearToGamma: function ( color, gammaFactor ) {
	
				if ( gammaFactor === undefined ) { gammaFactor = 2.0; }
	
				var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;
	
				this.r = Math.pow( color.r, safeInverse );
				this.g = Math.pow( color.g, safeInverse );
				this.b = Math.pow( color.b, safeInverse );
	
				return this;
	
			},
	
			convertGammaToLinear: function ( gammaFactor ) {
	
				this.copyGammaToLinear( this, gammaFactor );
	
				return this;
	
			},
	
			convertLinearToGamma: function ( gammaFactor ) {
	
				this.copyLinearToGamma( this, gammaFactor );
	
				return this;
	
			},
	
			copySRGBToLinear: function ( color ) {
	
				this.r = SRGBToLinear( color.r );
				this.g = SRGBToLinear( color.g );
				this.b = SRGBToLinear( color.b );
	
				return this;
	
			},
	
			copyLinearToSRGB: function ( color ) {
	
				this.r = LinearToSRGB( color.r );
				this.g = LinearToSRGB( color.g );
				this.b = LinearToSRGB( color.b );
	
				return this;
	
			},
	
			convertSRGBToLinear: function () {
	
				this.copySRGBToLinear( this );
	
				return this;
	
			},
	
			convertLinearToSRGB: function () {
	
				this.copyLinearToSRGB( this );
	
				return this;
	
			},
	
			getHex: function () {
	
				return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;
	
			},
	
			getHexString: function () {
	
				return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );
	
			},
	
			getHSL: function ( target ) {
	
				// h,s,l ranges are in 0.0 - 1.0
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Color: .getHSL() target is now required' );
					target = { h: 0, s: 0, l: 0 };
	
				}
	
				var r = this.r, g = this.g, b = this.b;
	
				var max = Math.max( r, g, b );
				var min = Math.min( r, g, b );
	
				var hue, saturation;
				var lightness = ( min + max ) / 2.0;
	
				if ( min === max ) {
	
					hue = 0;
					saturation = 0;
	
				} else {
	
					var delta = max - min;
	
					saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
	
					switch ( max ) {
	
						case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
						case g: hue = ( b - r ) / delta + 2; break;
						case b: hue = ( r - g ) / delta + 4; break;
	
					}
	
					hue /= 6;
	
				}
	
				target.h = hue;
				target.s = saturation;
				target.l = lightness;
	
				return target;
	
			},
	
			getStyle: function () {
	
				return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';
	
			},
	
			offsetHSL: function ( h, s, l ) {
	
				this.getHSL( _hslA );
	
				_hslA.h += h; _hslA.s += s; _hslA.l += l;
	
				this.setHSL( _hslA.h, _hslA.s, _hslA.l );
	
				return this;
	
			},
	
			add: function ( color ) {
	
				this.r += color.r;
				this.g += color.g;
				this.b += color.b;
	
				return this;
	
			},
	
			addColors: function ( color1, color2 ) {
	
				this.r = color1.r + color2.r;
				this.g = color1.g + color2.g;
				this.b = color1.b + color2.b;
	
				return this;
	
			},
	
			addScalar: function ( s ) {
	
				this.r += s;
				this.g += s;
				this.b += s;
	
				return this;
	
			},
	
			sub: function ( color ) {
	
				this.r = Math.max( 0, this.r - color.r );
				this.g = Math.max( 0, this.g - color.g );
				this.b = Math.max( 0, this.b - color.b );
	
				return this;
	
			},
	
			multiply: function ( color ) {
	
				this.r *= color.r;
				this.g *= color.g;
				this.b *= color.b;
	
				return this;
	
			},
	
			multiplyScalar: function ( s ) {
	
				this.r *= s;
				this.g *= s;
				this.b *= s;
	
				return this;
	
			},
	
			lerp: function ( color, alpha ) {
	
				this.r += ( color.r - this.r ) * alpha;
				this.g += ( color.g - this.g ) * alpha;
				this.b += ( color.b - this.b ) * alpha;
	
				return this;
	
			},
	
			lerpHSL: function ( color, alpha ) {
	
				this.getHSL( _hslA );
				color.getHSL( _hslB );
	
				var h = MathUtils.lerp( _hslA.h, _hslB.h, alpha );
				var s = MathUtils.lerp( _hslA.s, _hslB.s, alpha );
				var l = MathUtils.lerp( _hslA.l, _hslB.l, alpha );
	
				this.setHSL( h, s, l );
	
				return this;
	
			},
	
			equals: function ( c ) {
	
				return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				this.r = array[ offset ];
				this.g = array[ offset + 1 ];
				this.b = array[ offset + 2 ];
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) { array = []; }
				if ( offset === undefined ) { offset = 0; }
	
				array[ offset ] = this.r;
				array[ offset + 1 ] = this.g;
				array[ offset + 2 ] = this.b;
	
				return array;
	
			},
	
			toJSON: function () {
	
				return this.getHex();
	
			}
	
		} );
	
		Color.NAMES = _colorKeywords;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Face3( a, b, c, normal, color, materialIndex ) {
	
			this.a = a;
			this.b = b;
			this.c = c;
	
			this.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();
			this.vertexNormals = Array.isArray( normal ) ? normal : [];
	
			this.color = ( color && color.isColor ) ? color : new Color();
			this.vertexColors = Array.isArray( color ) ? color : [];
	
			this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
	
		}
	
		Object.assign( Face3.prototype, {
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.a = source.a;
				this.b = source.b;
				this.c = source.c;
	
				this.normal.copy( source.normal );
				this.color.copy( source.color );
	
				this.materialIndex = source.materialIndex;
	
				for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {
	
					this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();
	
				}
	
				for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {
	
					this.vertexColors[ i ] = source.vertexColors[ i ].clone();
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		var materialId = 0;
	
		function Material() {
	
			Object.defineProperty( this, 'id', { value: materialId ++ } );
	
			this.uuid = MathUtils.generateUUID();
	
			this.name = '';
			this.type = 'Material';
	
			this.fog = true;
	
			this.blending = NormalBlending;
			this.side = FrontSide;
			this.flatShading = false;
			this.vertexColors = false;
	
			this.opacity = 1;
			this.transparent = false;
	
			this.blendSrc = SrcAlphaFactor;
			this.blendDst = OneMinusSrcAlphaFactor;
			this.blendEquation = AddEquation;
			this.blendSrcAlpha = null;
			this.blendDstAlpha = null;
			this.blendEquationAlpha = null;
	
			this.depthFunc = LessEqualDepth;
			this.depthTest = true;
			this.depthWrite = true;
	
			this.stencilWriteMask = 0xff;
			this.stencilFunc = AlwaysStencilFunc;
			this.stencilRef = 0;
			this.stencilFuncMask = 0xff;
			this.stencilFail = KeepStencilOp;
			this.stencilZFail = KeepStencilOp;
			this.stencilZPass = KeepStencilOp;
			this.stencilWrite = false;
	
			this.clippingPlanes = null;
			this.clipIntersection = false;
			this.clipShadows = false;
	
			this.shadowSide = null;
	
			this.colorWrite = true;
	
			this.precision = null; // override the renderer's default precision for this material
	
			this.polygonOffset = false;
			this.polygonOffsetFactor = 0;
			this.polygonOffsetUnits = 0;
	
			this.dithering = false;
	
			this.alphaTest = 0;
			this.premultipliedAlpha = false;
	
			this.visible = true;
	
			this.toneMapped = true;
	
			this.userData = {};
	
			this.version = 0;
	
		}
	
		Material.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
	
			constructor: Material,
	
			isMaterial: true,
	
			onBeforeCompile: function () {},
	
			setValues: function ( values ) {
	
				if ( values === undefined ) { return; }
	
				for ( var key in values ) {
	
					var newValue = values[ key ];
	
					if ( newValue === undefined ) {
	
						console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
						continue;
	
					}
	
					// for backward compatability if shading is set in the constructor
					if ( key === 'shading' ) {
	
						console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
						this.flatShading = ( newValue === FlatShading ) ? true : false;
						continue;
	
					}
	
					var currentValue = this[ key ];
	
					if ( currentValue === undefined ) {
	
						console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
						continue;
	
					}
	
					if ( currentValue && currentValue.isColor ) {
	
						currentValue.set( newValue );
	
					} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {
	
						currentValue.copy( newValue );
	
					} else {
	
						this[ key ] = newValue;
	
					}
	
				}
	
			},
	
			toJSON: function ( meta ) {
	
				var isRoot = ( meta === undefined || typeof meta === 'string' );
	
				if ( isRoot ) {
	
					meta = {
						textures: {},
						images: {}
					};
	
				}
	
				var data = {
					metadata: {
						version: 4.5,
						type: 'Material',
						generator: 'Material.toJSON'
					}
				};
	
				// standard Material serialization
				data.uuid = this.uuid;
				data.type = this.type;
	
				if ( this.name !== '' ) { data.name = this.name; }
	
				if ( this.color && this.color.isColor ) { data.color = this.color.getHex(); }
	
				if ( this.roughness !== undefined ) { data.roughness = this.roughness; }
				if ( this.metalness !== undefined ) { data.metalness = this.metalness; }
	
				if ( this.sheen && this.sheen.isColor ) { data.sheen = this.sheen.getHex(); }
				if ( this.emissive && this.emissive.isColor ) { data.emissive = this.emissive.getHex(); }
				if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) { data.emissiveIntensity = this.emissiveIntensity; }
	
				if ( this.specular && this.specular.isColor ) { data.specular = this.specular.getHex(); }
				if ( this.shininess !== undefined ) { data.shininess = this.shininess; }
				if ( this.clearcoat !== undefined ) { data.clearcoat = this.clearcoat; }
				if ( this.clearcoatRoughness !== undefined ) { data.clearcoatRoughness = this.clearcoatRoughness; }
	
				if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {
	
					data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
					data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
	
				}
	
				if ( this.map && this.map.isTexture ) { data.map = this.map.toJSON( meta ).uuid; }
				if ( this.matcap && this.matcap.isTexture ) { data.matcap = this.matcap.toJSON( meta ).uuid; }
				if ( this.alphaMap && this.alphaMap.isTexture ) { data.alphaMap = this.alphaMap.toJSON( meta ).uuid; }
				if ( this.lightMap && this.lightMap.isTexture ) { data.lightMap = this.lightMap.toJSON( meta ).uuid; }
	
				if ( this.aoMap && this.aoMap.isTexture ) {
	
					data.aoMap = this.aoMap.toJSON( meta ).uuid;
					data.aoMapIntensity = this.aoMapIntensity;
	
				}
	
				if ( this.bumpMap && this.bumpMap.isTexture ) {
	
					data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
					data.bumpScale = this.bumpScale;
	
				}
	
				if ( this.normalMap && this.normalMap.isTexture ) {
	
					data.normalMap = this.normalMap.toJSON( meta ).uuid;
					data.normalMapType = this.normalMapType;
					data.normalScale = this.normalScale.toArray();
	
				}
	
				if ( this.displacementMap && this.displacementMap.isTexture ) {
	
					data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
					data.displacementScale = this.displacementScale;
					data.displacementBias = this.displacementBias;
	
				}
	
				if ( this.roughnessMap && this.roughnessMap.isTexture ) { data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid; }
				if ( this.metalnessMap && this.metalnessMap.isTexture ) { data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid; }
	
				if ( this.emissiveMap && this.emissiveMap.isTexture ) { data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid; }
				if ( this.specularMap && this.specularMap.isTexture ) { data.specularMap = this.specularMap.toJSON( meta ).uuid; }
	
				if ( this.envMap && this.envMap.isTexture ) {
	
					data.envMap = this.envMap.toJSON( meta ).uuid;
					data.reflectivity = this.reflectivity; // Scale behind envMap
					data.refractionRatio = this.refractionRatio;
	
					if ( this.combine !== undefined ) { data.combine = this.combine; }
					if ( this.envMapIntensity !== undefined ) { data.envMapIntensity = this.envMapIntensity; }
	
				}
	
				if ( this.gradientMap && this.gradientMap.isTexture ) {
	
					data.gradientMap = this.gradientMap.toJSON( meta ).uuid;
	
				}
	
				if ( this.size !== undefined ) { data.size = this.size; }
				if ( this.sizeAttenuation !== undefined ) { data.sizeAttenuation = this.sizeAttenuation; }
	
				if ( this.blending !== NormalBlending ) { data.blending = this.blending; }
				if ( this.flatShading === true ) { data.flatShading = this.flatShading; }
				if ( this.side !== FrontSide ) { data.side = this.side; }
				if ( this.vertexColors ) { data.vertexColors = true; }
	
				if ( this.opacity < 1 ) { data.opacity = this.opacity; }
				if ( this.transparent === true ) { data.transparent = this.transparent; }
	
				data.depthFunc = this.depthFunc;
				data.depthTest = this.depthTest;
				data.depthWrite = this.depthWrite;
	
				data.stencilWrite = this.stencilWrite;
				data.stencilWriteMask = this.stencilWriteMask;
				data.stencilFunc = this.stencilFunc;
				data.stencilRef = this.stencilRef;
				data.stencilFuncMask = this.stencilFuncMask;
				data.stencilFail = this.stencilFail;
				data.stencilZFail = this.stencilZFail;
				data.stencilZPass = this.stencilZPass;
	
				// rotation (SpriteMaterial)
				if ( this.rotation && this.rotation !== 0 ) { data.rotation = this.rotation; }
	
				if ( this.polygonOffset === true ) { data.polygonOffset = true; }
				if ( this.polygonOffsetFactor !== 0 ) { data.polygonOffsetFactor = this.polygonOffsetFactor; }
				if ( this.polygonOffsetUnits !== 0 ) { data.polygonOffsetUnits = this.polygonOffsetUnits; }
	
				if ( this.linewidth && this.linewidth !== 1 ) { data.linewidth = this.linewidth; }
				if ( this.dashSize !== undefined ) { data.dashSize = this.dashSize; }
				if ( this.gapSize !== undefined ) { data.gapSize = this.gapSize; }
				if ( this.scale !== undefined ) { data.scale = this.scale; }
	
				if ( this.dithering === true ) { data.dithering = true; }
	
				if ( this.alphaTest > 0 ) { data.alphaTest = this.alphaTest; }
				if ( this.premultipliedAlpha === true ) { data.premultipliedAlpha = this.premultipliedAlpha; }
	
				if ( this.wireframe === true ) { data.wireframe = this.wireframe; }
				if ( this.wireframeLinewidth > 1 ) { data.wireframeLinewidth = this.wireframeLinewidth; }
				if ( this.wireframeLinecap !== 'round' ) { data.wireframeLinecap = this.wireframeLinecap; }
				if ( this.wireframeLinejoin !== 'round' ) { data.wireframeLinejoin = this.wireframeLinejoin; }
	
				if ( this.morphTargets === true ) { data.morphTargets = true; }
				if ( this.morphNormals === true ) { data.morphNormals = true; }
				if ( this.skinning === true ) { data.skinning = true; }
	
				if ( this.visible === false ) { data.visible = false; }
	
				if ( this.toneMapped === false ) { data.toneMapped = false; }
	
				if ( JSON.stringify( this.userData ) !== '{}' ) { data.userData = this.userData; }
	
				// TODO: Copied from Object3D.toJSON
	
				function extractFromCache( cache ) {
	
					var values = [];
	
					for ( var key in cache ) {
	
						var data = cache[ key ];
						delete data.metadata;
						values.push( data );
	
					}
	
					return values;
	
				}
	
				if ( isRoot ) {
	
					var textures = extractFromCache( meta.textures );
					var images = extractFromCache( meta.images );
	
					if ( textures.length > 0 ) { data.textures = textures; }
					if ( images.length > 0 ) { data.images = images; }
	
				}
	
				return data;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.name = source.name;
	
				this.fog = source.fog;
	
				this.blending = source.blending;
				this.side = source.side;
				this.flatShading = source.flatShading;
				this.vertexColors = source.vertexColors;
	
				this.opacity = source.opacity;
				this.transparent = source.transparent;
	
				this.blendSrc = source.blendSrc;
				this.blendDst = source.blendDst;
				this.blendEquation = source.blendEquation;
				this.blendSrcAlpha = source.blendSrcAlpha;
				this.blendDstAlpha = source.blendDstAlpha;
				this.blendEquationAlpha = source.blendEquationAlpha;
	
				this.depthFunc = source.depthFunc;
				this.depthTest = source.depthTest;
				this.depthWrite = source.depthWrite;
	
				this.stencilWriteMask = source.stencilWriteMask;
				this.stencilFunc = source.stencilFunc;
				this.stencilRef = source.stencilRef;
				this.stencilFuncMask = source.stencilFuncMask;
				this.stencilFail = source.stencilFail;
				this.stencilZFail = source.stencilZFail;
				this.stencilZPass = source.stencilZPass;
				this.stencilWrite = source.stencilWrite;
	
				var srcPlanes = source.clippingPlanes,
					dstPlanes = null;
	
				if ( srcPlanes !== null ) {
	
					var n = srcPlanes.length;
					dstPlanes = new Array( n );
	
					for ( var i = 0; i !== n; ++ i )
						{ dstPlanes[ i ] = srcPlanes[ i ].clone(); }
	
				}
	
				this.clippingPlanes = dstPlanes;
				this.clipIntersection = source.clipIntersection;
				this.clipShadows = source.clipShadows;
	
				this.shadowSide = source.shadowSide;
	
				this.colorWrite = source.colorWrite;
	
				this.precision = source.precision;
	
				this.polygonOffset = source.polygonOffset;
				this.polygonOffsetFactor = source.polygonOffsetFactor;
				this.polygonOffsetUnits = source.polygonOffsetUnits;
	
				this.dithering = source.dithering;
	
				this.alphaTest = source.alphaTest;
				this.premultipliedAlpha = source.premultipliedAlpha;
	
				this.visible = source.visible;
	
				this.toneMapped = source.toneMapped;
	
				this.userData = JSON.parse( JSON.stringify( source.userData ) );
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		Object.defineProperty( Material.prototype, 'needsUpdate', {
	
			set: function ( value ) {
	
				if ( value === true ) { this.version ++; }
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  depthTest: <bool>,
		 *  depthWrite: <bool>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>
		 * }
		 */
	
		function MeshBasicMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshBasicMaterial';
	
			this.color = new Color( 0xffffff ); // emissive
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
	
			this.setValues( parameters );
	
		}
	
		MeshBasicMaterial.prototype = Object.create( Material.prototype );
		MeshBasicMaterial.prototype.constructor = MeshBasicMaterial;
	
		MeshBasicMaterial.prototype.isMeshBasicMaterial = true;
	
		MeshBasicMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _vector$3 = new Vector3();
	
		function BufferAttribute( array, itemSize, normalized ) {
	
			if ( Array.isArray( array ) ) {
	
				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );
	
			}
	
			this.name = '';
	
			this.array = array;
			this.itemSize = itemSize;
			this.count = array !== undefined ? array.length / itemSize : 0;
			this.normalized = normalized === true;
	
			this.usage = StaticDrawUsage;
			this.updateRange = { offset: 0, count: - 1 };
	
			this.version = 0;
	
		}
	
		Object.defineProperty( BufferAttribute.prototype, 'needsUpdate', {
	
			set: function ( value ) {
	
				if ( value === true ) { this.version ++; }
	
			}
	
		} );
	
		Object.assign( BufferAttribute.prototype, {
	
			isBufferAttribute: true,
	
			onUploadCallback: function () {},
	
			setUsage: function ( value ) {
	
				this.usage = value;
	
				return this;
	
			},
	
			copy: function ( source ) {
	
				this.name = source.name;
				this.array = new source.array.constructor( source.array );
				this.itemSize = source.itemSize;
				this.count = source.count;
				this.normalized = source.normalized;
	
				this.usage = source.usage;
	
				return this;
	
			},
	
			copyAt: function ( index1, attribute, index2 ) {
	
				index1 *= this.itemSize;
				index2 *= attribute.itemSize;
	
				for ( var i = 0, l = this.itemSize; i < l; i ++ ) {
	
					this.array[ index1 + i ] = attribute.array[ index2 + i ];
	
				}
	
				return this;
	
			},
	
			copyArray: function ( array ) {
	
				this.array.set( array );
	
				return this;
	
			},
	
			copyColorsArray: function ( colors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = colors.length; i < l; i ++ ) {
	
					var color = colors[ i ];
	
					if ( color === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
						color = new Color();
	
					}
	
					array[ offset ++ ] = color.r;
					array[ offset ++ ] = color.g;
					array[ offset ++ ] = color.b;
	
				}
	
				return this;
	
			},
	
			copyVector2sArray: function ( vectors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
					var vector = vectors[ i ];
	
					if ( vector === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
						vector = new Vector2();
	
					}
	
					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
	
				}
	
				return this;
	
			},
	
			copyVector3sArray: function ( vectors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
					var vector = vectors[ i ];
	
					if ( vector === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
						vector = new Vector3();
	
					}
	
					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;
	
				}
	
				return this;
	
			},
	
			copyVector4sArray: function ( vectors ) {
	
				var array = this.array, offset = 0;
	
				for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
					var vector = vectors[ i ];
	
					if ( vector === undefined ) {
	
						console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
						vector = new Vector4();
	
					}
	
					array[ offset ++ ] = vector.x;
					array[ offset ++ ] = vector.y;
					array[ offset ++ ] = vector.z;
					array[ offset ++ ] = vector.w;
	
				}
	
				return this;
	
			},
	
			applyMatrix3: function ( m ) {
	
				for ( var i = 0, l = this.count; i < l; i ++ ) {
	
					_vector$3.x = this.getX( i );
					_vector$3.y = this.getY( i );
					_vector$3.z = this.getZ( i );
	
					_vector$3.applyMatrix3( m );
	
					this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );
	
				}
	
				return this;
	
			},
	
			applyMatrix4: function ( m ) {
	
				for ( var i = 0, l = this.count; i < l; i ++ ) {
	
					_vector$3.x = this.getX( i );
					_vector$3.y = this.getY( i );
					_vector$3.z = this.getZ( i );
	
					_vector$3.applyMatrix4( m );
	
					this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );
	
				}
	
				return this;
	
			},
	
			applyNormalMatrix: function ( m ) {
	
				for ( var i = 0, l = this.count; i < l; i ++ ) {
	
					_vector$3.x = this.getX( i );
					_vector$3.y = this.getY( i );
					_vector$3.z = this.getZ( i );
	
					_vector$3.applyNormalMatrix( m );
	
					this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );
	
				}
	
				return this;
	
			},
	
			transformDirection: function ( m ) {
	
				for ( var i = 0, l = this.count; i < l; i ++ ) {
	
					_vector$3.x = this.getX( i );
					_vector$3.y = this.getY( i );
					_vector$3.z = this.getZ( i );
	
					_vector$3.transformDirection( m );
	
					this.setXYZ( i, _vector$3.x, _vector$3.y, _vector$3.z );
	
				}
	
				return this;
	
			},
	
			set: function ( value, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				this.array.set( value, offset );
	
				return this;
	
			},
	
			getX: function ( index ) {
	
				return this.array[ index * this.itemSize ];
	
			},
	
			setX: function ( index, x ) {
	
				this.array[ index * this.itemSize ] = x;
	
				return this;
	
			},
	
			getY: function ( index ) {
	
				return this.array[ index * this.itemSize + 1 ];
	
			},
	
			setY: function ( index, y ) {
	
				this.array[ index * this.itemSize + 1 ] = y;
	
				return this;
	
			},
	
			getZ: function ( index ) {
	
				return this.array[ index * this.itemSize + 2 ];
	
			},
	
			setZ: function ( index, z ) {
	
				this.array[ index * this.itemSize + 2 ] = z;
	
				return this;
	
			},
	
			getW: function ( index ) {
	
				return this.array[ index * this.itemSize + 3 ];
	
			},
	
			setW: function ( index, w ) {
	
				this.array[ index * this.itemSize + 3 ] = w;
	
				return this;
	
			},
	
			setXY: function ( index, x, y ) {
	
				index *= this.itemSize;
	
				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
	
				return this;
	
			},
	
			setXYZ: function ( index, x, y, z ) {
	
				index *= this.itemSize;
	
				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;
	
				return this;
	
			},
	
			setXYZW: function ( index, x, y, z, w ) {
	
				index *= this.itemSize;
	
				this.array[ index + 0 ] = x;
				this.array[ index + 1 ] = y;
				this.array[ index + 2 ] = z;
				this.array[ index + 3 ] = w;
	
				return this;
	
			},
	
			onUpload: function ( callback ) {
	
				this.onUploadCallback = callback;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor( this.array, this.itemSize ).copy( this );
	
			},
	
			toJSON: function () {
	
				return {
					itemSize: this.itemSize,
					type: this.array.constructor.name,
					array: Array.prototype.slice.call( this.array ),
					normalized: this.normalized
				};
	
			}
	
		} );
	
		//
	
		function Int8BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Int8Array( array ), itemSize, normalized );
	
		}
	
		Int8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Int8BufferAttribute.prototype.constructor = Int8BufferAttribute;
	
	
		function Uint8BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Uint8Array( array ), itemSize, normalized );
	
		}
	
		Uint8BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;
	
	
		function Uint8ClampedBufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Uint8ClampedArray( array ), itemSize, normalized );
	
		}
	
		Uint8ClampedBufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;
	
	
		function Int16BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Int16Array( array ), itemSize, normalized );
	
		}
	
		Int16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Int16BufferAttribute.prototype.constructor = Int16BufferAttribute;
	
	
		function Uint16BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Uint16Array( array ), itemSize, normalized );
	
		}
	
		Uint16BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;
	
	
		function Int32BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Int32Array( array ), itemSize, normalized );
	
		}
	
		Int32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Int32BufferAttribute.prototype.constructor = Int32BufferAttribute;
	
	
		function Uint32BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Uint32Array( array ), itemSize, normalized );
	
		}
	
		Uint32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Uint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;
	
	
		function Float32BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Float32Array( array ), itemSize, normalized );
	
		}
	
		Float32BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Float32BufferAttribute.prototype.constructor = Float32BufferAttribute;
	
	
		function Float64BufferAttribute( array, itemSize, normalized ) {
	
			BufferAttribute.call( this, new Float64Array( array ), itemSize, normalized );
	
		}
	
		Float64BufferAttribute.prototype = Object.create( BufferAttribute.prototype );
		Float64BufferAttribute.prototype.constructor = Float64BufferAttribute;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function DirectGeometry() {
	
			this.vertices = [];
			this.normals = [];
			this.colors = [];
			this.uvs = [];
			this.uvs2 = [];
	
			this.groups = [];
	
			this.morphTargets = {};
	
			this.skinWeights = [];
			this.skinIndices = [];
	
			// this.lineDistances = [];
	
			this.boundingBox = null;
			this.boundingSphere = null;
	
			// update flags
	
			this.verticesNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.groupsNeedUpdate = false;
	
		}
	
		Object.assign( DirectGeometry.prototype, {
	
			computeGroups: function ( geometry ) {
	
				var group;
				var groups = [];
				var materialIndex = undefined;
	
				var faces = geometry.faces;
	
				for ( var i = 0; i < faces.length; i ++ ) {
	
					var face = faces[ i ];
	
					// materials
	
					if ( face.materialIndex !== materialIndex ) {
	
						materialIndex = face.materialIndex;
	
						if ( group !== undefined ) {
	
							group.count = ( i * 3 ) - group.start;
							groups.push( group );
	
						}
	
						group = {
							start: i * 3,
							materialIndex: materialIndex
						};
	
					}
	
				}
	
				if ( group !== undefined ) {
	
					group.count = ( i * 3 ) - group.start;
					groups.push( group );
	
				}
	
				this.groups = groups;
	
			},
	
			fromGeometry: function ( geometry ) {
	
				var faces = geometry.faces;
				var vertices = geometry.vertices;
				var faceVertexUvs = geometry.faceVertexUvs;
	
				var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
				var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;
	
				// morphs
	
				var morphTargets = geometry.morphTargets;
				var morphTargetsLength = morphTargets.length;
	
				var morphTargetsPosition;
	
				if ( morphTargetsLength > 0 ) {
	
					morphTargetsPosition = [];
	
					for ( var i = 0; i < morphTargetsLength; i ++ ) {
	
						morphTargetsPosition[ i ] = {
							name: morphTargets[ i ].name,
						 	data: []
						};
	
					}
	
					this.morphTargets.position = morphTargetsPosition;
	
				}
	
				var morphNormals = geometry.morphNormals;
				var morphNormalsLength = morphNormals.length;
	
				var morphTargetsNormal;
	
				if ( morphNormalsLength > 0 ) {
	
					morphTargetsNormal = [];
	
					for ( var i = 0; i < morphNormalsLength; i ++ ) {
	
						morphTargetsNormal[ i ] = {
							name: morphNormals[ i ].name,
						 	data: []
						};
	
					}
	
					this.morphTargets.normal = morphTargetsNormal;
	
				}
	
				// skins
	
				var skinIndices = geometry.skinIndices;
				var skinWeights = geometry.skinWeights;
	
				var hasSkinIndices = skinIndices.length === vertices.length;
				var hasSkinWeights = skinWeights.length === vertices.length;
	
				//
	
				if ( vertices.length > 0 && faces.length === 0 ) {
	
					console.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );
	
				}
	
				for ( var i = 0; i < faces.length; i ++ ) {
	
					var face = faces[ i ];
	
					this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );
	
					var vertexNormals = face.vertexNormals;
	
					if ( vertexNormals.length === 3 ) {
	
						this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );
	
					} else {
	
						var normal = face.normal;
	
						this.normals.push( normal, normal, normal );
	
					}
	
					var vertexColors = face.vertexColors;
	
					if ( vertexColors.length === 3 ) {
	
						this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );
	
					} else {
	
						var color = face.color;
	
						this.colors.push( color, color, color );
	
					}
	
					if ( hasFaceVertexUv === true ) {
	
						var vertexUvs = faceVertexUvs[ 0 ][ i ];
	
						if ( vertexUvs !== undefined ) {
	
							this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
	
						} else {
	
							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );
	
							this.uvs.push( new Vector2(), new Vector2(), new Vector2() );
	
						}
	
					}
	
					if ( hasFaceVertexUv2 === true ) {
	
						var vertexUvs = faceVertexUvs[ 1 ][ i ];
	
						if ( vertexUvs !== undefined ) {
	
							this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
	
						} else {
	
							console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );
	
							this.uvs2.push( new Vector2(), new Vector2(), new Vector2() );
	
						}
	
					}
	
					// morphs
	
					for ( var j = 0; j < morphTargetsLength; j ++ ) {
	
						var morphTarget = morphTargets[ j ].vertices;
	
						morphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );
	
					}
	
					for ( var j = 0; j < morphNormalsLength; j ++ ) {
	
						var morphNormal = morphNormals[ j ].vertexNormals[ i ];
	
						morphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );
	
					}
	
					// skins
	
					if ( hasSkinIndices ) {
	
						this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );
	
					}
	
					if ( hasSkinWeights ) {
	
						this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );
	
					}
	
				}
	
				this.computeGroups( geometry );
	
				this.verticesNeedUpdate = geometry.verticesNeedUpdate;
				this.normalsNeedUpdate = geometry.normalsNeedUpdate;
				this.colorsNeedUpdate = geometry.colorsNeedUpdate;
				this.uvsNeedUpdate = geometry.uvsNeedUpdate;
				this.groupsNeedUpdate = geometry.groupsNeedUpdate;
	
				if ( geometry.boundingSphere !== null ) {
	
					this.boundingSphere = geometry.boundingSphere.clone();
	
				}
	
				if ( geometry.boundingBox !== null ) {
	
					this.boundingBox = geometry.boundingBox.clone();
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function arrayMax( array ) {
	
			if ( array.length === 0 ) { return - Infinity; }
	
			var max = array[ 0 ];
	
			for ( var i = 1, l = array.length; i < l; ++ i ) {
	
				if ( array[ i ] > max ) { max = array[ i ]; }
	
			}
	
			return max;
	
		}
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _bufferGeometryId = 1; // BufferGeometry uses odd numbers as Id
	
		var _m1$2 = new Matrix4();
		var _obj = new Object3D();
		var _offset = new Vector3();
		var _box$2 = new Box3();
		var _boxMorphTargets = new Box3();
		var _vector$4 = new Vector3();
	
		function BufferGeometry() {
	
			Object.defineProperty( this, 'id', { value: _bufferGeometryId += 2 } );
	
			this.uuid = MathUtils.generateUUID();
	
			this.name = '';
			this.type = 'BufferGeometry';
	
			this.index = null;
			this.attributes = {};
	
			this.morphAttributes = {};
			this.morphTargetsRelative = false;
	
			this.groups = [];
	
			this.boundingBox = null;
			this.boundingSphere = null;
	
			this.drawRange = { start: 0, count: Infinity };
	
			this.userData = {};
	
		}
	
		BufferGeometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
	
			constructor: BufferGeometry,
	
			isBufferGeometry: true,
	
			getIndex: function () {
	
				return this.index;
	
			},
	
			setIndex: function ( index ) {
	
				if ( Array.isArray( index ) ) {
	
					this.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );
	
				} else {
	
					this.index = index;
	
				}
	
			},
	
			getAttribute: function ( name ) {
	
				return this.attributes[ name ];
	
			},
	
			setAttribute: function ( name, attribute ) {
	
				this.attributes[ name ] = attribute;
	
				return this;
	
			},
	
			deleteAttribute: function ( name ) {
	
				delete this.attributes[ name ];
	
				return this;
	
			},
	
			addGroup: function ( start, count, materialIndex ) {
	
				this.groups.push( {
	
					start: start,
					count: count,
					materialIndex: materialIndex !== undefined ? materialIndex : 0
	
				} );
	
			},
	
			clearGroups: function () {
	
				this.groups = [];
	
			},
	
			setDrawRange: function ( start, count ) {
	
				this.drawRange.start = start;
				this.drawRange.count = count;
	
			},
	
			applyMatrix4: function ( matrix ) {
	
				var position = this.attributes.position;
	
				if ( position !== undefined ) {
	
					position.applyMatrix4( matrix );
	
					position.needsUpdate = true;
	
				}
	
				var normal = this.attributes.normal;
	
				if ( normal !== undefined ) {
	
					var normalMatrix = new Matrix3().getNormalMatrix( matrix );
	
					normal.applyNormalMatrix( normalMatrix );
	
					normal.needsUpdate = true;
	
				}
	
				var tangent = this.attributes.tangent;
	
				if ( tangent !== undefined ) {
	
					tangent.transformDirection( matrix );
	
					tangent.needsUpdate = true;
	
				}
	
				if ( this.boundingBox !== null ) {
	
					this.computeBoundingBox();
	
				}
	
				if ( this.boundingSphere !== null ) {
	
					this.computeBoundingSphere();
	
				}
	
				return this;
	
			},
	
			rotateX: function ( angle ) {
	
				// rotate geometry around world x-axis
	
				_m1$2.makeRotationX( angle );
	
				this.applyMatrix4( _m1$2 );
	
				return this;
	
			},
	
			rotateY: function ( angle ) {
	
				// rotate geometry around world y-axis
	
				_m1$2.makeRotationY( angle );
	
				this.applyMatrix4( _m1$2 );
	
				return this;
	
			},
	
			rotateZ: function ( angle ) {
	
				// rotate geometry around world z-axis
	
				_m1$2.makeRotationZ( angle );
	
				this.applyMatrix4( _m1$2 );
	
				return this;
	
			},
	
			translate: function ( x, y, z ) {
	
				// translate geometry
	
				_m1$2.makeTranslation( x, y, z );
	
				this.applyMatrix4( _m1$2 );
	
				return this;
	
			},
	
			scale: function ( x, y, z ) {
	
				// scale geometry
	
				_m1$2.makeScale( x, y, z );
	
				this.applyMatrix4( _m1$2 );
	
				return this;
	
			},
	
			lookAt: function ( vector ) {
	
				_obj.lookAt( vector );
	
				_obj.updateMatrix();
	
				this.applyMatrix4( _obj.matrix );
	
				return this;
	
			},
	
			center: function () {
	
				this.computeBoundingBox();
	
				this.boundingBox.getCenter( _offset ).negate();
	
				this.translate( _offset.x, _offset.y, _offset.z );
	
				return this;
	
			},
	
			setFromObject: function ( object ) {
	
				// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );
	
				var geometry = object.geometry;
	
				if ( object.isPoints || object.isLine ) {
	
					var positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );
					var colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );
	
					this.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
					this.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );
	
					if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {
	
						var lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );
	
						this.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );
	
					}
	
					if ( geometry.boundingSphere !== null ) {
	
						this.boundingSphere = geometry.boundingSphere.clone();
	
					}
	
					if ( geometry.boundingBox !== null ) {
	
						this.boundingBox = geometry.boundingBox.clone();
	
					}
	
				} else if ( object.isMesh ) {
	
					if ( geometry && geometry.isGeometry ) {
	
						this.fromGeometry( geometry );
	
					}
	
				}
	
				return this;
	
			},
	
			setFromPoints: function ( points ) {
	
				var position = [];
	
				for ( var i = 0, l = points.length; i < l; i ++ ) {
	
					var point = points[ i ];
					position.push( point.x, point.y, point.z || 0 );
	
				}
	
				this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );
	
				return this;
	
			},
	
			updateFromObject: function ( object ) {
	
				var geometry = object.geometry;
	
				if ( object.isMesh ) {
	
					var direct = geometry.__directGeometry;
	
					if ( geometry.elementsNeedUpdate === true ) {
	
						direct = undefined;
						geometry.elementsNeedUpdate = false;
	
					}
	
					if ( direct === undefined ) {
	
						return this.fromGeometry( geometry );
	
					}
	
					direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
					direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
					direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
					direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
					direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
	
					geometry.verticesNeedUpdate = false;
					geometry.normalsNeedUpdate = false;
					geometry.colorsNeedUpdate = false;
					geometry.uvsNeedUpdate = false;
					geometry.groupsNeedUpdate = false;
	
					geometry = direct;
	
				}
	
				var attribute;
	
				if ( geometry.verticesNeedUpdate === true ) {
	
					attribute = this.attributes.position;
	
					if ( attribute !== undefined ) {
	
						attribute.copyVector3sArray( geometry.vertices );
						attribute.needsUpdate = true;
	
					}
	
					geometry.verticesNeedUpdate = false;
	
				}
	
				if ( geometry.normalsNeedUpdate === true ) {
	
					attribute = this.attributes.normal;
	
					if ( attribute !== undefined ) {
	
						attribute.copyVector3sArray( geometry.normals );
						attribute.needsUpdate = true;
	
					}
	
					geometry.normalsNeedUpdate = false;
	
				}
	
				if ( geometry.colorsNeedUpdate === true ) {
	
					attribute = this.attributes.color;
	
					if ( attribute !== undefined ) {
	
						attribute.copyColorsArray( geometry.colors );
						attribute.needsUpdate = true;
	
					}
	
					geometry.colorsNeedUpdate = false;
	
				}
	
				if ( geometry.uvsNeedUpdate ) {
	
					attribute = this.attributes.uv;
	
					if ( attribute !== undefined ) {
	
						attribute.copyVector2sArray( geometry.uvs );
						attribute.needsUpdate = true;
	
					}
	
					geometry.uvsNeedUpdate = false;
	
				}
	
				if ( geometry.lineDistancesNeedUpdate ) {
	
					attribute = this.attributes.lineDistance;
	
					if ( attribute !== undefined ) {
	
						attribute.copyArray( geometry.lineDistances );
						attribute.needsUpdate = true;
	
					}
	
					geometry.lineDistancesNeedUpdate = false;
	
				}
	
				if ( geometry.groupsNeedUpdate ) {
	
					geometry.computeGroups( object.geometry );
					this.groups = geometry.groups;
	
					geometry.groupsNeedUpdate = false;
	
				}
	
				return this;
	
			},
	
			fromGeometry: function ( geometry ) {
	
				geometry.__directGeometry = new DirectGeometry().fromGeometry( geometry );
	
				return this.fromDirectGeometry( geometry.__directGeometry );
	
			},
	
			fromDirectGeometry: function ( geometry ) {
	
				var positions = new Float32Array( geometry.vertices.length * 3 );
				this.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );
	
				if ( geometry.normals.length > 0 ) {
	
					var normals = new Float32Array( geometry.normals.length * 3 );
					this.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );
	
				}
	
				if ( geometry.colors.length > 0 ) {
	
					var colors = new Float32Array( geometry.colors.length * 3 );
					this.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );
	
				}
	
				if ( geometry.uvs.length > 0 ) {
	
					var uvs = new Float32Array( geometry.uvs.length * 2 );
					this.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );
	
				}
	
				if ( geometry.uvs2.length > 0 ) {
	
					var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
					this.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );
	
				}
	
				// groups
	
				this.groups = geometry.groups;
	
				// morphs
	
				for ( var name in geometry.morphTargets ) {
	
					var array = [];
					var morphTargets = geometry.morphTargets[ name ];
	
					for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {
	
						var morphTarget = morphTargets[ i ];
	
						var attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );
						attribute.name = morphTarget.name;
	
						array.push( attribute.copyVector3sArray( morphTarget.data ) );
	
					}
	
					this.morphAttributes[ name ] = array;
	
				}
	
				// skinning
	
				if ( geometry.skinIndices.length > 0 ) {
	
					var skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );
					this.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );
	
				}
	
				if ( geometry.skinWeights.length > 0 ) {
	
					var skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );
					this.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );
	
				}
	
				//
	
				if ( geometry.boundingSphere !== null ) {
	
					this.boundingSphere = geometry.boundingSphere.clone();
	
				}
	
				if ( geometry.boundingBox !== null ) {
	
					this.boundingBox = geometry.boundingBox.clone();
	
				}
	
				return this;
	
			},
	
			computeBoundingBox: function () {
	
				if ( this.boundingBox === null ) {
	
					this.boundingBox = new Box3();
	
				}
	
				var position = this.attributes.position;
				var morphAttributesPosition = this.morphAttributes.position;
	
				if ( position !== undefined ) {
	
					this.boundingBox.setFromBufferAttribute( position );
	
					// process morph attributes if present
	
					if ( morphAttributesPosition ) {
	
						for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
	
							var morphAttribute = morphAttributesPosition[ i ];
							_box$2.setFromBufferAttribute( morphAttribute );
	
							if ( this.morphTargetsRelative ) {
	
								_vector$4.addVectors( this.boundingBox.min, _box$2.min );
								this.boundingBox.expandByPoint( _vector$4 );
	
								_vector$4.addVectors( this.boundingBox.max, _box$2.max );
								this.boundingBox.expandByPoint( _vector$4 );
	
							} else {
	
								this.boundingBox.expandByPoint( _box$2.min );
								this.boundingBox.expandByPoint( _box$2.max );
	
							}
	
						}
	
					}
	
				} else {
	
					this.boundingBox.makeEmpty();
	
				}
	
				if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
	
					console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );
	
				}
	
			},
	
			computeBoundingSphere: function () {
	
				if ( this.boundingSphere === null ) {
	
					this.boundingSphere = new Sphere();
	
				}
	
				var position = this.attributes.position;
				var morphAttributesPosition = this.morphAttributes.position;
	
				if ( position ) {
	
					// first, find the center of the bounding sphere
	
					var center = this.boundingSphere.center;
	
					_box$2.setFromBufferAttribute( position );
	
					// process morph attributes if present
	
					if ( morphAttributesPosition ) {
	
						for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
	
							var morphAttribute = morphAttributesPosition[ i ];
							_boxMorphTargets.setFromBufferAttribute( morphAttribute );
	
							if ( this.morphTargetsRelative ) {
	
								_vector$4.addVectors( _box$2.min, _boxMorphTargets.min );
								_box$2.expandByPoint( _vector$4 );
	
								_vector$4.addVectors( _box$2.max, _boxMorphTargets.max );
								_box$2.expandByPoint( _vector$4 );
	
							} else {
	
								_box$2.expandByPoint( _boxMorphTargets.min );
								_box$2.expandByPoint( _boxMorphTargets.max );
	
							}
	
						}
	
					}
	
					_box$2.getCenter( center );
	
					// second, try to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
	
					var maxRadiusSq = 0;
	
					for ( var i = 0, il = position.count; i < il; i ++ ) {
	
						_vector$4.fromBufferAttribute( position, i );
	
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );
	
					}
	
					// process morph attributes if present
	
					if ( morphAttributesPosition ) {
	
						for ( var i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {
	
							var morphAttribute = morphAttributesPosition[ i ];
							var morphTargetsRelative = this.morphTargetsRelative;
	
							for ( var j = 0, jl = morphAttribute.count; j < jl; j ++ ) {
	
								_vector$4.fromBufferAttribute( morphAttribute, j );
	
								if ( morphTargetsRelative ) {
	
									_offset.fromBufferAttribute( position, j );
									_vector$4.add( _offset );
	
								}
	
								maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$4 ) );
	
							}
	
						}
	
					}
	
					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
	
					if ( isNaN( this.boundingSphere.radius ) ) {
	
						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );
	
					}
	
				}
	
			},
	
			computeFaceNormals: function () {
	
				// backwards compatibility
	
			},
	
			computeVertexNormals: function () {
	
				var index = this.index;
				var attributes = this.attributes;
	
				if ( attributes.position ) {
	
					var positions = attributes.position.array;
	
					if ( attributes.normal === undefined ) {
	
						this.setAttribute( 'normal', new BufferAttribute( new Float32Array( positions.length ), 3 ) );
	
					} else {
	
						// reset existing normals to zero
	
						var array = attributes.normal.array;
	
						for ( var i = 0, il = array.length; i < il; i ++ ) {
	
							array[ i ] = 0;
	
						}
	
					}
	
					var normals = attributes.normal.array;
	
					var vA, vB, vC;
					var pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
					var cb = new Vector3(), ab = new Vector3();
	
					// indexed elements
	
					if ( index ) {
	
						var indices = index.array;
	
						for ( var i = 0, il = index.count; i < il; i += 3 ) {
	
							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;
	
							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );
	
							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );
	
							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;
	
							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;
	
							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;
	
						}
	
					} else {
	
						// non-indexed elements (unconnected triangle soup)
	
						for ( var i = 0, il = positions.length; i < il; i += 9 ) {
	
							pA.fromArray( positions, i );
							pB.fromArray( positions, i + 3 );
							pC.fromArray( positions, i + 6 );
	
							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );
	
							normals[ i ] = cb.x;
							normals[ i + 1 ] = cb.y;
							normals[ i + 2 ] = cb.z;
	
							normals[ i + 3 ] = cb.x;
							normals[ i + 4 ] = cb.y;
							normals[ i + 5 ] = cb.z;
	
							normals[ i + 6 ] = cb.x;
							normals[ i + 7 ] = cb.y;
							normals[ i + 8 ] = cb.z;
	
						}
	
					}
	
					this.normalizeNormals();
	
					attributes.normal.needsUpdate = true;
	
				}
	
			},
	
			merge: function ( geometry, offset ) {
	
				if ( ! ( geometry && geometry.isBufferGeometry ) ) {
	
					console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
					return;
	
				}
	
				if ( offset === undefined ) {
	
					offset = 0;
	
					console.warn(
						'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '
						+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'
					);
	
				}
	
				var attributes = this.attributes;
	
				for ( var key in attributes ) {
	
					if ( geometry.attributes[ key ] === undefined ) { continue; }
	
					var attribute1 = attributes[ key ];
					var attributeArray1 = attribute1.array;
	
					var attribute2 = geometry.attributes[ key ];
					var attributeArray2 = attribute2.array;
	
					var attributeOffset = attribute2.itemSize * offset;
					var length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );
	
					for ( var i = 0, j = attributeOffset; i < length; i ++, j ++ ) {
	
						attributeArray1[ j ] = attributeArray2[ i ];
	
					}
	
				}
	
				return this;
	
			},
	
			normalizeNormals: function () {
	
				var normals = this.attributes.normal;
	
				for ( var i = 0, il = normals.count; i < il; i ++ ) {
	
					_vector$4.x = normals.getX( i );
					_vector$4.y = normals.getY( i );
					_vector$4.z = normals.getZ( i );
	
					_vector$4.normalize();
	
					normals.setXYZ( i, _vector$4.x, _vector$4.y, _vector$4.z );
	
				}
	
			},
	
			toNonIndexed: function () {
	
				function convertBufferAttribute( attribute, indices ) {
	
					var array = attribute.array;
					var itemSize = attribute.itemSize;
	
					var array2 = new array.constructor( indices.length * itemSize );
	
					var index = 0, index2 = 0;
	
					for ( var i = 0, l = indices.length; i < l; i ++ ) {
	
						index = indices[ i ] * itemSize;
	
						for ( var j = 0; j < itemSize; j ++ ) {
	
							array2[ index2 ++ ] = array[ index ++ ];
	
						}
	
					}
	
					return new BufferAttribute( array2, itemSize );
	
				}
	
				//
	
				if ( this.index === null ) {
	
					console.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );
					return this;
	
				}
	
				var geometry2 = new BufferGeometry();
	
				var indices = this.index.array;
				var attributes = this.attributes;
	
				// attributes
	
				for ( var name in attributes ) {
	
					var attribute = attributes[ name ];
	
					var newAttribute = convertBufferAttribute( attribute, indices );
	
					geometry2.setAttribute( name, newAttribute );
	
				}
	
				// morph attributes
	
				var morphAttributes = this.morphAttributes;
	
				for ( name in morphAttributes ) {
	
					var morphArray = [];
					var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
	
					for ( var i = 0, il = morphAttribute.length; i < il; i ++ ) {
	
						var attribute = morphAttribute[ i ];
	
						var newAttribute = convertBufferAttribute( attribute, indices );
	
						morphArray.push( newAttribute );
	
					}
	
					geometry2.morphAttributes[ name ] = morphArray;
	
				}
	
				geometry2.morphTargetsRelative = this.morphTargetsRelative;
	
				// groups
	
				var groups = this.groups;
	
				for ( var i = 0, l = groups.length; i < l; i ++ ) {
	
					var group = groups[ i ];
					geometry2.addGroup( group.start, group.count, group.materialIndex );
	
				}
	
				return geometry2;
	
			},
	
			toJSON: function () {
	
				var data = {
					metadata: {
						version: 4.5,
						type: 'BufferGeometry',
						generator: 'BufferGeometry.toJSON'
					}
				};
	
				// standard BufferGeometry serialization
	
				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) { data.name = this.name; }
				if ( Object.keys( this.userData ).length > 0 ) { data.userData = this.userData; }
	
				if ( this.parameters !== undefined ) {
	
					var parameters = this.parameters;
	
					for ( var key in parameters ) {
	
						if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }
	
					}
	
					return data;
	
				}
	
				data.data = { attributes: {} };
	
				var index = this.index;
	
				if ( index !== null ) {
	
					data.data.index = {
						type: index.array.constructor.name,
						array: Array.prototype.slice.call( index.array )
					};
	
				}
	
				var attributes = this.attributes;
	
				for ( var key in attributes ) {
	
					var attribute = attributes[ key ];
	
					var attributeData = attribute.toJSON();
	
					if ( attribute.name !== '' ) { attributeData.name = attribute.name; }
	
					data.data.attributes[ key ] = attributeData;
	
				}
	
				var morphAttributes = {};
				var hasMorphAttributes = false;
	
				for ( var key in this.morphAttributes ) {
	
					var attributeArray = this.morphAttributes[ key ];
	
					var array = [];
	
					for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {
	
						var attribute = attributeArray[ i ];
	
						var attributeData = attribute.toJSON();
	
						if ( attribute.name !== '' ) { attributeData.name = attribute.name; }
	
						array.push( attributeData );
	
					}
	
					if ( array.length > 0 ) {
	
						morphAttributes[ key ] = array;
	
						hasMorphAttributes = true;
	
					}
	
				}
	
				if ( hasMorphAttributes ) {
	
					data.data.morphAttributes = morphAttributes;
					data.data.morphTargetsRelative = this.morphTargetsRelative;
	
				}
	
				var groups = this.groups;
	
				if ( groups.length > 0 ) {
	
					data.data.groups = JSON.parse( JSON.stringify( groups ) );
	
				}
	
				var boundingSphere = this.boundingSphere;
	
				if ( boundingSphere !== null ) {
	
					data.data.boundingSphere = {
						center: boundingSphere.center.toArray(),
						radius: boundingSphere.radius
					};
	
				}
	
				return data;
	
			},
	
			clone: function () {
	
				/*
				 // Handle primitives
	
				 var parameters = this.parameters;
	
				 if ( parameters !== undefined ) {
	
				 var values = [];
	
				 for ( var key in parameters ) {
	
				 values.push( parameters[ key ] );
	
				 }
	
				 var geometry = Object.create( this.constructor.prototype );
				 this.constructor.apply( geometry, values );
				 return geometry;
	
				 }
	
				 return new this.constructor().copy( this );
				 */
	
				return new BufferGeometry().copy( this );
	
			},
	
			copy: function ( source ) {
	
				var name, i, l;
	
				// reset
	
				this.index = null;
				this.attributes = {};
				this.morphAttributes = {};
				this.groups = [];
				this.boundingBox = null;
				this.boundingSphere = null;
	
				// name
	
				this.name = source.name;
	
				// index
	
				var index = source.index;
	
				if ( index !== null ) {
	
					this.setIndex( index.clone() );
	
				}
	
				// attributes
	
				var attributes = source.attributes;
	
				for ( name in attributes ) {
	
					var attribute = attributes[ name ];
					this.setAttribute( name, attribute.clone() );
	
				}
	
				// morph attributes
	
				var morphAttributes = source.morphAttributes;
	
				for ( name in morphAttributes ) {
	
					var array = [];
					var morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes
	
					for ( i = 0, l = morphAttribute.length; i < l; i ++ ) {
	
						array.push( morphAttribute[ i ].clone() );
	
					}
	
					this.morphAttributes[ name ] = array;
	
				}
	
				this.morphTargetsRelative = source.morphTargetsRelative;
	
				// groups
	
				var groups = source.groups;
	
				for ( i = 0, l = groups.length; i < l; i ++ ) {
	
					var group = groups[ i ];
					this.addGroup( group.start, group.count, group.materialIndex );
	
				}
	
				// bounding box
	
				var boundingBox = source.boundingBox;
	
				if ( boundingBox !== null ) {
	
					this.boundingBox = boundingBox.clone();
	
				}
	
				// bounding sphere
	
				var boundingSphere = source.boundingSphere;
	
				if ( boundingSphere !== null ) {
	
					this.boundingSphere = boundingSphere.clone();
	
				}
	
				// draw range
	
				this.drawRange.start = source.drawRange.start;
				this.drawRange.count = source.drawRange.count;
	
				// user data
	
				this.userData = source.userData;
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author jonobr1 / http://jonobr1.com/
		 */
	
		var _inverseMatrix = new Matrix4();
		var _ray = new Ray();
		var _sphere = new Sphere();
	
		var _vA = new Vector3();
		var _vB = new Vector3();
		var _vC = new Vector3();
	
		var _tempA = new Vector3();
		var _tempB = new Vector3();
		var _tempC = new Vector3();
	
		var _morphA = new Vector3();
		var _morphB = new Vector3();
		var _morphC = new Vector3();
	
		var _uvA = new Vector2();
		var _uvB = new Vector2();
		var _uvC = new Vector2();
	
		var _intersectionPoint = new Vector3();
		var _intersectionPointWorld = new Vector3();
	
		function Mesh( geometry, material ) {
	
			Object3D.call( this );
	
			this.type = 'Mesh';
	
			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new MeshBasicMaterial();
	
			this.updateMorphTargets();
	
		}
	
		Mesh.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Mesh,
	
			isMesh: true,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				if ( source.morphTargetInfluences !== undefined ) {
	
					this.morphTargetInfluences = source.morphTargetInfluences.slice();
	
				}
	
				if ( source.morphTargetDictionary !== undefined ) {
	
					this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );
	
				}
	
				return this;
	
			},
	
			updateMorphTargets: function () {
	
				var geometry = this.geometry;
				var m, ml, name;
	
				if ( geometry.isBufferGeometry ) {
	
					var morphAttributes = geometry.morphAttributes;
					var keys = Object.keys( morphAttributes );
	
					if ( keys.length > 0 ) {
	
						var morphAttribute = morphAttributes[ keys[ 0 ] ];
	
						if ( morphAttribute !== undefined ) {
	
							this.morphTargetInfluences = [];
							this.morphTargetDictionary = {};
	
							for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
	
								name = morphAttribute[ m ].name || String( m );
	
								this.morphTargetInfluences.push( 0 );
								this.morphTargetDictionary[ name ] = m;
	
							}
	
						}
	
					}
	
				} else {
	
					var morphTargets = geometry.morphTargets;
	
					if ( morphTargets !== undefined && morphTargets.length > 0 ) {
	
						console.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );
	
					}
	
				}
	
			},
	
			raycast: function ( raycaster, intersects ) {
	
				var geometry = this.geometry;
				var material = this.material;
				var matrixWorld = this.matrixWorld;
	
				if ( material === undefined ) { return; }
	
				// Checking boundingSphere distance to ray
	
				if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }
	
				_sphere.copy( geometry.boundingSphere );
				_sphere.applyMatrix4( matrixWorld );
	
				if ( raycaster.ray.intersectsSphere( _sphere ) === false ) { return; }
	
				//
	
				_inverseMatrix.getInverse( matrixWorld );
				_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );
	
				// Check boundingBox before continuing
	
				if ( geometry.boundingBox !== null ) {
	
					if ( _ray.intersectsBox( geometry.boundingBox ) === false ) { return; }
	
				}
	
				var intersection;
	
				if ( geometry.isBufferGeometry ) {
	
					var a, b, c;
					var index = geometry.index;
					var position = geometry.attributes.position;
					var morphPosition = geometry.morphAttributes.position;
					var morphTargetsRelative = geometry.morphTargetsRelative;
					var uv = geometry.attributes.uv;
					var uv2 = geometry.attributes.uv2;
					var groups = geometry.groups;
					var drawRange = geometry.drawRange;
					var i, j, il, jl;
					var group, groupMaterial;
					var start, end;
	
					if ( index !== null ) {
	
						// indexed buffer geometry
	
						if ( Array.isArray( material ) ) {
	
							for ( i = 0, il = groups.length; i < il; i ++ ) {
	
								group = groups[ i ];
								groupMaterial = material[ group.materialIndex ];
	
								start = Math.max( group.start, drawRange.start );
								end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );
	
								for ( j = start, jl = end; j < jl; j += 3 ) {
	
									a = index.getX( j );
									b = index.getX( j + 1 );
									c = index.getX( j + 2 );
	
									intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
	
									if ( intersection ) {
	
										intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
										intersection.face.materialIndex = group.materialIndex;
										intersects.push( intersection );
	
									}
	
								}
	
							}
	
						} else {
	
							start = Math.max( 0, drawRange.start );
							end = Math.min( index.count, ( drawRange.start + drawRange.count ) );
	
							for ( i = start, il = end; i < il; i += 3 ) {
	
								a = index.getX( i );
								b = index.getX( i + 1 );
								c = index.getX( i + 2 );
	
								intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
	
								if ( intersection ) {
	
									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
									intersects.push( intersection );
	
								}
	
							}
	
						}
	
					} else if ( position !== undefined ) {
	
						// non-indexed buffer geometry
	
						if ( Array.isArray( material ) ) {
	
							for ( i = 0, il = groups.length; i < il; i ++ ) {
	
								group = groups[ i ];
								groupMaterial = material[ group.materialIndex ];
	
								start = Math.max( group.start, drawRange.start );
								end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );
	
								for ( j = start, jl = end; j < jl; j += 3 ) {
	
									a = j;
									b = j + 1;
									c = j + 2;
	
									intersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
	
									if ( intersection ) {
	
										intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
										intersection.face.materialIndex = group.materialIndex;
										intersects.push( intersection );
	
									}
	
								}
	
							}
	
						} else {
	
							start = Math.max( 0, drawRange.start );
							end = Math.min( position.count, ( drawRange.start + drawRange.count ) );
	
							for ( i = start, il = end; i < il; i += 3 ) {
	
								a = i;
								b = i + 1;
								c = i + 2;
	
								intersection = checkBufferGeometryIntersection( this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );
	
								if ( intersection ) {
	
									intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
									intersects.push( intersection );
	
								}
	
							}
	
						}
	
					}
	
				} else if ( geometry.isGeometry ) {
	
					var fvA, fvB, fvC;
					var isMultiMaterial = Array.isArray( material );
	
					var vertices = geometry.vertices;
					var faces = geometry.faces;
					var uvs;
	
					var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
					if ( faceVertexUvs.length > 0 ) { uvs = faceVertexUvs; }
	
					for ( var f = 0, fl = faces.length; f < fl; f ++ ) {
	
						var face = faces[ f ];
						var faceMaterial = isMultiMaterial ? material[ face.materialIndex ] : material;
	
						if ( faceMaterial === undefined ) { continue; }
	
						fvA = vertices[ face.a ];
						fvB = vertices[ face.b ];
						fvC = vertices[ face.c ];
	
						intersection = checkIntersection( this, faceMaterial, raycaster, _ray, fvA, fvB, fvC, _intersectionPoint );
	
						if ( intersection ) {
	
							if ( uvs && uvs[ f ] ) {
	
								var uvs_f = uvs[ f ];
								_uvA.copy( uvs_f[ 0 ] );
								_uvB.copy( uvs_f[ 1 ] );
								_uvC.copy( uvs_f[ 2 ] );
	
								intersection.uv = Triangle.getUV( _intersectionPoint, fvA, fvB, fvC, _uvA, _uvB, _uvC, new Vector2() );
	
							}
	
							intersection.face = face;
							intersection.faceIndex = f;
							intersects.push( intersection );
	
						}
	
					}
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {
	
			var intersect;
	
			if ( material.side === BackSide ) {
	
				intersect = ray.intersectTriangle( pC, pB, pA, true, point );
	
			} else {
	
				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );
	
			}
	
			if ( intersect === null ) { return null; }
	
			_intersectionPointWorld.copy( point );
			_intersectionPointWorld.applyMatrix4( object.matrixWorld );
	
			var distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );
	
			if ( distance < raycaster.near || distance > raycaster.far ) { return null; }
	
			return {
				distance: distance,
				point: _intersectionPointWorld.clone(),
				object: object
			};
	
		}
	
		function checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {
	
			_vA.fromBufferAttribute( position, a );
			_vB.fromBufferAttribute( position, b );
			_vC.fromBufferAttribute( position, c );
	
			var morphInfluences = object.morphTargetInfluences;
	
			if ( material.morphTargets && morphPosition && morphInfluences ) {
	
				_morphA.set( 0, 0, 0 );
				_morphB.set( 0, 0, 0 );
				_morphC.set( 0, 0, 0 );
	
				for ( var i = 0, il = morphPosition.length; i < il; i ++ ) {
	
					var influence = morphInfluences[ i ];
					var morphAttribute = morphPosition[ i ];
	
					if ( influence === 0 ) { continue; }
	
					_tempA.fromBufferAttribute( morphAttribute, a );
					_tempB.fromBufferAttribute( morphAttribute, b );
					_tempC.fromBufferAttribute( morphAttribute, c );
	
					if ( morphTargetsRelative ) {
	
						_morphA.addScaledVector( _tempA, influence );
						_morphB.addScaledVector( _tempB, influence );
						_morphC.addScaledVector( _tempC, influence );
	
					} else {
	
						_morphA.addScaledVector( _tempA.sub( _vA ), influence );
						_morphB.addScaledVector( _tempB.sub( _vB ), influence );
						_morphC.addScaledVector( _tempC.sub( _vC ), influence );
	
					}
	
				}
	
				_vA.add( _morphA );
				_vB.add( _morphB );
				_vC.add( _morphC );
	
			}
	
			var intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );
	
			if ( intersection ) {
	
				if ( uv ) {
	
					_uvA.fromBufferAttribute( uv, a );
					_uvB.fromBufferAttribute( uv, b );
					_uvC.fromBufferAttribute( uv, c );
	
					intersection.uv = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );
	
				}
	
				if ( uv2 ) {
	
					_uvA.fromBufferAttribute( uv2, a );
					_uvB.fromBufferAttribute( uv2, b );
					_uvC.fromBufferAttribute( uv2, c );
	
					intersection.uv2 = Triangle.getUV( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );
	
				}
	
				var face = new Face3( a, b, c );
				Triangle.getNormal( _vA, _vB, _vC, face.normal );
	
				intersection.face = face;
	
			}
	
			return intersection;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author kile / http://kile.stravaganza.org/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author bhouston / http://clara.io
		 */
	
		var _geometryId = 0; // Geometry uses even numbers as Id
		var _m1$3 = new Matrix4();
		var _obj$1 = new Object3D();
		var _offset$1 = new Vector3();
	
		function Geometry() {
	
			Object.defineProperty( this, 'id', { value: _geometryId += 2 } );
	
			this.uuid = MathUtils.generateUUID();
	
			this.name = '';
			this.type = 'Geometry';
	
			this.vertices = [];
			this.colors = [];
			this.faces = [];
			this.faceVertexUvs = [[]];
	
			this.morphTargets = [];
			this.morphNormals = [];
	
			this.skinWeights = [];
			this.skinIndices = [];
	
			this.lineDistances = [];
	
			this.boundingBox = null;
			this.boundingSphere = null;
	
			// update flags
	
			this.elementsNeedUpdate = false;
			this.verticesNeedUpdate = false;
			this.uvsNeedUpdate = false;
			this.normalsNeedUpdate = false;
			this.colorsNeedUpdate = false;
			this.lineDistancesNeedUpdate = false;
			this.groupsNeedUpdate = false;
	
		}
	
		Geometry.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
	
			constructor: Geometry,
	
			isGeometry: true,
	
			applyMatrix4: function ( matrix ) {
	
				var normalMatrix = new Matrix3().getNormalMatrix( matrix );
	
				for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {
	
					var vertex = this.vertices[ i ];
					vertex.applyMatrix4( matrix );
	
				}
	
				for ( var i = 0, il = this.faces.length; i < il; i ++ ) {
	
					var face = this.faces[ i ];
					face.normal.applyMatrix3( normalMatrix ).normalize();
	
					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
	
						face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();
	
					}
	
				}
	
				if ( this.boundingBox !== null ) {
	
					this.computeBoundingBox();
	
				}
	
				if ( this.boundingSphere !== null ) {
	
					this.computeBoundingSphere();
	
				}
	
				this.verticesNeedUpdate = true;
				this.normalsNeedUpdate = true;
	
				return this;
	
			},
	
			rotateX: function ( angle ) {
	
				// rotate geometry around world x-axis
	
				_m1$3.makeRotationX( angle );
	
				this.applyMatrix4( _m1$3 );
	
				return this;
	
			},
	
			rotateY: function ( angle ) {
	
				// rotate geometry around world y-axis
	
				_m1$3.makeRotationY( angle );
	
				this.applyMatrix4( _m1$3 );
	
				return this;
	
			},
	
			rotateZ: function ( angle ) {
	
				// rotate geometry around world z-axis
	
				_m1$3.makeRotationZ( angle );
	
				this.applyMatrix4( _m1$3 );
	
				return this;
	
			},
	
			translate: function ( x, y, z ) {
	
				// translate geometry
	
				_m1$3.makeTranslation( x, y, z );
	
				this.applyMatrix4( _m1$3 );
	
				return this;
	
			},
	
			scale: function ( x, y, z ) {
	
				// scale geometry
	
				_m1$3.makeScale( x, y, z );
	
				this.applyMatrix4( _m1$3 );
	
				return this;
	
			},
	
			lookAt: function ( vector ) {
	
				_obj$1.lookAt( vector );
	
				_obj$1.updateMatrix();
	
				this.applyMatrix4( _obj$1.matrix );
	
				return this;
	
			},
	
			fromBufferGeometry: function ( geometry ) {
	
				var scope = this;
	
				var indices = geometry.index !== null ? geometry.index.array : undefined;
				var attributes = geometry.attributes;
	
				if ( attributes.position === undefined ) {
	
					console.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );
					return this;
	
				}
	
				var positions = attributes.position.array;
				var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
				var colors = attributes.color !== undefined ? attributes.color.array : undefined;
				var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
				var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;
	
				if ( uvs2 !== undefined ) { this.faceVertexUvs[ 1 ] = []; }
	
				for ( var i = 0; i < positions.length; i += 3 ) {
	
					scope.vertices.push( new Vector3().fromArray( positions, i ) );
	
					if ( colors !== undefined ) {
	
						scope.colors.push( new Color().fromArray( colors, i ) );
	
					}
	
				}
	
				function addFace( a, b, c, materialIndex ) {
	
					var vertexColors = ( colors === undefined ) ? [] : [
						scope.colors[ a ].clone(),
						scope.colors[ b ].clone(),
						scope.colors[ c ].clone() ];
	
					var vertexNormals = ( normals === undefined ) ? [] : [
						new Vector3().fromArray( normals, a * 3 ),
						new Vector3().fromArray( normals, b * 3 ),
						new Vector3().fromArray( normals, c * 3 )
					];
	
					var face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );
	
					scope.faces.push( face );
	
					if ( uvs !== undefined ) {
	
						scope.faceVertexUvs[ 0 ].push( [
							new Vector2().fromArray( uvs, a * 2 ),
							new Vector2().fromArray( uvs, b * 2 ),
							new Vector2().fromArray( uvs, c * 2 )
						] );
	
					}
	
					if ( uvs2 !== undefined ) {
	
						scope.faceVertexUvs[ 1 ].push( [
							new Vector2().fromArray( uvs2, a * 2 ),
							new Vector2().fromArray( uvs2, b * 2 ),
							new Vector2().fromArray( uvs2, c * 2 )
						] );
	
					}
	
				}
	
				var groups = geometry.groups;
	
				if ( groups.length > 0 ) {
	
					for ( var i = 0; i < groups.length; i ++ ) {
	
						var group = groups[ i ];
	
						var start = group.start;
						var count = group.count;
	
						for ( var j = start, jl = start + count; j < jl; j += 3 ) {
	
							if ( indices !== undefined ) {
	
								addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex );
	
							} else {
	
								addFace( j, j + 1, j + 2, group.materialIndex );
	
							}
	
						}
	
					}
	
				} else {
	
					if ( indices !== undefined ) {
	
						for ( var i = 0; i < indices.length; i += 3 ) {
	
							addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );
	
						}
	
					} else {
	
						for ( var i = 0; i < positions.length / 3; i += 3 ) {
	
							addFace( i, i + 1, i + 2 );
	
						}
	
					}
	
				}
	
				this.computeFaceNormals();
	
				if ( geometry.boundingBox !== null ) {
	
					this.boundingBox = geometry.boundingBox.clone();
	
				}
	
				if ( geometry.boundingSphere !== null ) {
	
					this.boundingSphere = geometry.boundingSphere.clone();
	
				}
	
				return this;
	
			},
	
			center: function () {
	
				this.computeBoundingBox();
	
				this.boundingBox.getCenter( _offset$1 ).negate();
	
				this.translate( _offset$1.x, _offset$1.y, _offset$1.z );
	
				return this;
	
			},
	
			normalize: function () {
	
				this.computeBoundingSphere();
	
				var center = this.boundingSphere.center;
				var radius = this.boundingSphere.radius;
	
				var s = radius === 0 ? 1 : 1.0 / radius;
	
				var matrix = new Matrix4();
				matrix.set(
					s, 0, 0, - s * center.x,
					0, s, 0, - s * center.y,
					0, 0, s, - s * center.z,
					0, 0, 0, 1
				);
	
				this.applyMatrix4( matrix );
	
				return this;
	
			},
	
			computeFaceNormals: function () {
	
				var cb = new Vector3(), ab = new Vector3();
	
				for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					var face = this.faces[ f ];
	
					var vA = this.vertices[ face.a ];
					var vB = this.vertices[ face.b ];
					var vC = this.vertices[ face.c ];
	
					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );
	
					cb.normalize();
	
					face.normal.copy( cb );
	
				}
	
			},
	
			computeVertexNormals: function ( areaWeighted ) {
	
				if ( areaWeighted === undefined ) { areaWeighted = true; }
	
				var v, vl, f, fl, face, vertices;
	
				vertices = new Array( this.vertices.length );
	
				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
	
					vertices[ v ] = new Vector3();
	
				}
	
				if ( areaWeighted ) {
	
					// vertex normals weighted by triangle areas
					// http://www.iquilezles.org/www/articles/normals/normals.htm
	
					var vA, vB, vC;
					var cb = new Vector3(), ab = new Vector3();
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						face = this.faces[ f ];
	
						vA = this.vertices[ face.a ];
						vB = this.vertices[ face.b ];
						vC = this.vertices[ face.c ];
	
						cb.subVectors( vC, vB );
						ab.subVectors( vA, vB );
						cb.cross( ab );
	
						vertices[ face.a ].add( cb );
						vertices[ face.b ].add( cb );
						vertices[ face.c ].add( cb );
	
					}
	
				} else {
	
					this.computeFaceNormals();
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						face = this.faces[ f ];
	
						vertices[ face.a ].add( face.normal );
						vertices[ face.b ].add( face.normal );
						vertices[ face.c ].add( face.normal );
	
					}
	
				}
	
				for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
	
					vertices[ v ].normalize();
	
				}
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					var vertexNormals = face.vertexNormals;
	
					if ( vertexNormals.length === 3 ) {
	
						vertexNormals[ 0 ].copy( vertices[ face.a ] );
						vertexNormals[ 1 ].copy( vertices[ face.b ] );
						vertexNormals[ 2 ].copy( vertices[ face.c ] );
	
					} else {
	
						vertexNormals[ 0 ] = vertices[ face.a ].clone();
						vertexNormals[ 1 ] = vertices[ face.b ].clone();
						vertexNormals[ 2 ] = vertices[ face.c ].clone();
	
					}
	
				}
	
				if ( this.faces.length > 0 ) {
	
					this.normalsNeedUpdate = true;
	
				}
	
			},
	
			computeFlatVertexNormals: function () {
	
				var f, fl, face;
	
				this.computeFaceNormals();
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					var vertexNormals = face.vertexNormals;
	
					if ( vertexNormals.length === 3 ) {
	
						vertexNormals[ 0 ].copy( face.normal );
						vertexNormals[ 1 ].copy( face.normal );
						vertexNormals[ 2 ].copy( face.normal );
	
					} else {
	
						vertexNormals[ 0 ] = face.normal.clone();
						vertexNormals[ 1 ] = face.normal.clone();
						vertexNormals[ 2 ] = face.normal.clone();
	
					}
	
				}
	
				if ( this.faces.length > 0 ) {
	
					this.normalsNeedUpdate = true;
	
				}
	
			},
	
			computeMorphNormals: function () {
	
				var i, il, f, fl, face;
	
				// save original normals
				// - create temp variables on first access
				//   otherwise just copy (for faster repeated calls)
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					if ( ! face.__originalFaceNormal ) {
	
						face.__originalFaceNormal = face.normal.clone();
	
					} else {
	
						face.__originalFaceNormal.copy( face.normal );
	
					}
	
					if ( ! face.__originalVertexNormals ) { face.__originalVertexNormals = []; }
	
					for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {
	
						if ( ! face.__originalVertexNormals[ i ] ) {
	
							face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();
	
						} else {
	
							face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );
	
						}
	
					}
	
				}
	
				// use temp geometry to compute face and vertex normals for each morph
	
				var tmpGeo = new Geometry();
				tmpGeo.faces = this.faces;
	
				for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {
	
					// create on first access
	
					if ( ! this.morphNormals[ i ] ) {
	
						this.morphNormals[ i ] = {};
						this.morphNormals[ i ].faceNormals = [];
						this.morphNormals[ i ].vertexNormals = [];
	
						var dstNormalsFace = this.morphNormals[ i ].faceNormals;
						var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;
	
						var faceNormal, vertexNormals;
	
						for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
							faceNormal = new Vector3();
							vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };
	
							dstNormalsFace.push( faceNormal );
							dstNormalsVertex.push( vertexNormals );
	
						}
	
					}
	
					var morphNormals = this.morphNormals[ i ];
	
					// set vertices to morph target
	
					tmpGeo.vertices = this.morphTargets[ i ].vertices;
	
					// compute morph normals
	
					tmpGeo.computeFaceNormals();
					tmpGeo.computeVertexNormals();
	
					// store morph normals
	
					var faceNormal, vertexNormals;
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						face = this.faces[ f ];
	
						faceNormal = morphNormals.faceNormals[ f ];
						vertexNormals = morphNormals.vertexNormals[ f ];
	
						faceNormal.copy( face.normal );
	
						vertexNormals.a.copy( face.vertexNormals[ 0 ] );
						vertexNormals.b.copy( face.vertexNormals[ 1 ] );
						vertexNormals.c.copy( face.vertexNormals[ 2 ] );
	
					}
	
				}
	
				// restore original normals
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					face.normal = face.__originalFaceNormal;
					face.vertexNormals = face.__originalVertexNormals;
	
				}
	
			},
	
			computeBoundingBox: function () {
	
				if ( this.boundingBox === null ) {
	
					this.boundingBox = new Box3();
	
				}
	
				this.boundingBox.setFromPoints( this.vertices );
	
			},
	
			computeBoundingSphere: function () {
	
				if ( this.boundingSphere === null ) {
	
					this.boundingSphere = new Sphere();
	
				}
	
				this.boundingSphere.setFromPoints( this.vertices );
	
			},
	
			merge: function ( geometry, matrix, materialIndexOffset ) {
	
				if ( ! ( geometry && geometry.isGeometry ) ) {
	
					console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
					return;
	
				}
	
				var normalMatrix,
					vertexOffset = this.vertices.length,
					vertices1 = this.vertices,
					vertices2 = geometry.vertices,
					faces1 = this.faces,
					faces2 = geometry.faces,
					colors1 = this.colors,
					colors2 = geometry.colors;
	
				if ( materialIndexOffset === undefined ) { materialIndexOffset = 0; }
	
				if ( matrix !== undefined ) {
	
					normalMatrix = new Matrix3().getNormalMatrix( matrix );
	
				}
	
				// vertices
	
				for ( var i = 0, il = vertices2.length; i < il; i ++ ) {
	
					var vertex = vertices2[ i ];
	
					var vertexCopy = vertex.clone();
	
					if ( matrix !== undefined ) { vertexCopy.applyMatrix4( matrix ); }
	
					vertices1.push( vertexCopy );
	
				}
	
				// colors
	
				for ( var i = 0, il = colors2.length; i < il; i ++ ) {
	
					colors1.push( colors2[ i ].clone() );
	
				}
	
				// faces
	
				for ( i = 0, il = faces2.length; i < il; i ++ ) {
	
					var face = faces2[ i ], faceCopy, normal, color,
						faceVertexNormals = face.vertexNormals,
						faceVertexColors = face.vertexColors;
	
					faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
					faceCopy.normal.copy( face.normal );
	
					if ( normalMatrix !== undefined ) {
	
						faceCopy.normal.applyMatrix3( normalMatrix ).normalize();
	
					}
	
					for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {
	
						normal = faceVertexNormals[ j ].clone();
	
						if ( normalMatrix !== undefined ) {
	
							normal.applyMatrix3( normalMatrix ).normalize();
	
						}
	
						faceCopy.vertexNormals.push( normal );
	
					}
	
					faceCopy.color.copy( face.color );
	
					for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {
	
						color = faceVertexColors[ j ];
						faceCopy.vertexColors.push( color.clone() );
	
					}
	
					faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
	
					faces1.push( faceCopy );
	
				}
	
				// uvs
	
				for ( var i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {
	
					var faceVertexUvs2 = geometry.faceVertexUvs[ i ];
	
					if ( this.faceVertexUvs[ i ] === undefined ) { this.faceVertexUvs[ i ] = []; }
	
					for ( var j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {
	
						var uvs2 = faceVertexUvs2[ j ], uvsCopy = [];
	
						for ( var k = 0, kl = uvs2.length; k < kl; k ++ ) {
	
							uvsCopy.push( uvs2[ k ].clone() );
	
						}
	
						this.faceVertexUvs[ i ].push( uvsCopy );
	
					}
	
				}
	
			},
	
			mergeMesh: function ( mesh ) {
	
				if ( ! ( mesh && mesh.isMesh ) ) {
	
					console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
					return;
	
				}
	
				if ( mesh.matrixAutoUpdate ) { mesh.updateMatrix(); }
	
				this.merge( mesh.geometry, mesh.matrix );
	
			},
	
			/*
			 * Checks for duplicate vertices with hashmap.
			 * Duplicated vertices are removed
			 * and faces' vertices are updated.
			 */
	
			mergeVertices: function () {
	
				var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
				var unique = [], changes = [];
	
				var v, key;
				var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
				var precision = Math.pow( 10, precisionPoints );
				var i, il, face;
				var indices, j, jl;
	
				for ( i = 0, il = this.vertices.length; i < il; i ++ ) {
	
					v = this.vertices[ i ];
					key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );
	
					if ( verticesMap[ key ] === undefined ) {
	
						verticesMap[ key ] = i;
						unique.push( this.vertices[ i ] );
						changes[ i ] = unique.length - 1;
	
					} else {
	
						//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
						changes[ i ] = changes[ verticesMap[ key ] ];
	
					}
	
				}
	
	
				// if faces are completely degenerate after merging vertices, we
				// have to remove them from the geometry.
				var faceIndicesToRemove = [];
	
				for ( i = 0, il = this.faces.length; i < il; i ++ ) {
	
					face = this.faces[ i ];
	
					face.a = changes[ face.a ];
					face.b = changes[ face.b ];
					face.c = changes[ face.c ];
	
					indices = [ face.a, face.b, face.c ];
	
					// if any duplicate vertices are found in a Face3
					// we have to remove the face as nothing can be saved
					for ( var n = 0; n < 3; n ++ ) {
	
						if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {
	
							faceIndicesToRemove.push( i );
							break;
	
						}
	
					}
	
				}
	
				for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
	
					var idx = faceIndicesToRemove[ i ];
	
					this.faces.splice( idx, 1 );
	
					for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {
	
						this.faceVertexUvs[ j ].splice( idx, 1 );
	
					}
	
				}
	
				// Use unique set of vertices
	
				var diff = this.vertices.length - unique.length;
				this.vertices = unique;
				return diff;
	
			},
	
			setFromPoints: function ( points ) {
	
				this.vertices = [];
	
				for ( var i = 0, l = points.length; i < l; i ++ ) {
	
					var point = points[ i ];
					this.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
	
				}
	
				return this;
	
			},
	
			sortFacesByMaterialIndex: function () {
	
				var faces = this.faces;
				var length = faces.length;
	
				// tag faces
	
				for ( var i = 0; i < length; i ++ ) {
	
					faces[ i ]._id = i;
	
				}
	
				// sort faces
	
				function materialIndexSort( a, b ) {
	
					return a.materialIndex - b.materialIndex;
	
				}
	
				faces.sort( materialIndexSort );
	
				// sort uvs
	
				var uvs1 = this.faceVertexUvs[ 0 ];
				var uvs2 = this.faceVertexUvs[ 1 ];
	
				var newUvs1, newUvs2;
	
				if ( uvs1 && uvs1.length === length ) { newUvs1 = []; }
				if ( uvs2 && uvs2.length === length ) { newUvs2 = []; }
	
				for ( var i = 0; i < length; i ++ ) {
	
					var id = faces[ i ]._id;
	
					if ( newUvs1 ) { newUvs1.push( uvs1[ id ] ); }
					if ( newUvs2 ) { newUvs2.push( uvs2[ id ] ); }
	
				}
	
				if ( newUvs1 ) { this.faceVertexUvs[ 0 ] = newUvs1; }
				if ( newUvs2 ) { this.faceVertexUvs[ 1 ] = newUvs2; }
	
			},
	
			toJSON: function () {
	
				var data = {
					metadata: {
						version: 4.5,
						type: 'Geometry',
						generator: 'Geometry.toJSON'
					}
				};
	
				// standard Geometry serialization
	
				data.uuid = this.uuid;
				data.type = this.type;
				if ( this.name !== '' ) { data.name = this.name; }
	
				if ( this.parameters !== undefined ) {
	
					var parameters = this.parameters;
	
					for ( var key in parameters ) {
	
						if ( parameters[ key ] !== undefined ) { data[ key ] = parameters[ key ]; }
	
					}
	
					return data;
	
				}
	
				var vertices = [];
	
				for ( var i = 0; i < this.vertices.length; i ++ ) {
	
					var vertex = this.vertices[ i ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
				var faces = [];
				var normals = [];
				var normalsHash = {};
				var colors = [];
				var colorsHash = {};
				var uvs = [];
				var uvsHash = {};
	
				for ( var i = 0; i < this.faces.length; i ++ ) {
	
					var face = this.faces[ i ];
	
					var hasMaterial = true;
					var hasFaceUv = false; // deprecated
					var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
					var hasFaceNormal = face.normal.length() > 0;
					var hasFaceVertexNormal = face.vertexNormals.length > 0;
					var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
					var hasFaceVertexColor = face.vertexColors.length > 0;
	
					var faceType = 0;
	
					faceType = setBit( faceType, 0, 0 ); // isQuad
					faceType = setBit( faceType, 1, hasMaterial );
					faceType = setBit( faceType, 2, hasFaceUv );
					faceType = setBit( faceType, 3, hasFaceVertexUv );
					faceType = setBit( faceType, 4, hasFaceNormal );
					faceType = setBit( faceType, 5, hasFaceVertexNormal );
					faceType = setBit( faceType, 6, hasFaceColor );
					faceType = setBit( faceType, 7, hasFaceVertexColor );
	
					faces.push( faceType );
					faces.push( face.a, face.b, face.c );
					faces.push( face.materialIndex );
	
					if ( hasFaceVertexUv ) {
	
						var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];
	
						faces.push(
							getUvIndex( faceVertexUvs[ 0 ] ),
							getUvIndex( faceVertexUvs[ 1 ] ),
							getUvIndex( faceVertexUvs[ 2 ] )
						);
	
					}
	
					if ( hasFaceNormal ) {
	
						faces.push( getNormalIndex( face.normal ) );
	
					}
	
					if ( hasFaceVertexNormal ) {
	
						var vertexNormals = face.vertexNormals;
	
						faces.push(
							getNormalIndex( vertexNormals[ 0 ] ),
							getNormalIndex( vertexNormals[ 1 ] ),
							getNormalIndex( vertexNormals[ 2 ] )
						);
	
					}
	
					if ( hasFaceColor ) {
	
						faces.push( getColorIndex( face.color ) );
	
					}
	
					if ( hasFaceVertexColor ) {
	
						var vertexColors = face.vertexColors;
	
						faces.push(
							getColorIndex( vertexColors[ 0 ] ),
							getColorIndex( vertexColors[ 1 ] ),
							getColorIndex( vertexColors[ 2 ] )
						);
	
					}
	
				}
	
				function setBit( value, position, enabled ) {
	
					return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );
	
				}
	
				function getNormalIndex( normal ) {
	
					var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
	
					if ( normalsHash[ hash ] !== undefined ) {
	
						return normalsHash[ hash ];
	
					}
	
					normalsHash[ hash ] = normals.length / 3;
					normals.push( normal.x, normal.y, normal.z );
	
					return normalsHash[ hash ];
	
				}
	
				function getColorIndex( color ) {
	
					var hash = color.r.toString() + color.g.toString() + color.b.toString();
	
					if ( colorsHash[ hash ] !== undefined ) {
	
						return colorsHash[ hash ];
	
					}
	
					colorsHash[ hash ] = colors.length;
					colors.push( color.getHex() );
	
					return colorsHash[ hash ];
	
				}
	
				function getUvIndex( uv ) {
	
					var hash = uv.x.toString() + uv.y.toString();
	
					if ( uvsHash[ hash ] !== undefined ) {
	
						return uvsHash[ hash ];
	
					}
	
					uvsHash[ hash ] = uvs.length / 2;
					uvs.push( uv.x, uv.y );
	
					return uvsHash[ hash ];
	
				}
	
				data.data = {};
	
				data.data.vertices = vertices;
				data.data.normals = normals;
				if ( colors.length > 0 ) { data.data.colors = colors; }
				if ( uvs.length > 0 ) { data.data.uvs = [ uvs ]; } // temporal backward compatibility
				data.data.faces = faces;
	
				return data;
	
			},
	
			clone: function () {
	
				/*
				 // Handle primitives
	
				 var parameters = this.parameters;
	
				 if ( parameters !== undefined ) {
	
				 var values = [];
	
				 for ( var key in parameters ) {
	
				 values.push( parameters[ key ] );
	
				 }
	
				 var geometry = Object.create( this.constructor.prototype );
				 this.constructor.apply( geometry, values );
				 return geometry;
	
				 }
	
				 return new this.constructor().copy( this );
				 */
	
				return new Geometry().copy( this );
	
			},
	
			copy: function ( source ) {
	
				var i, il, j, jl, k, kl;
	
				// reset
	
				this.vertices = [];
				this.colors = [];
				this.faces = [];
				this.faceVertexUvs = [[]];
				this.morphTargets = [];
				this.morphNormals = [];
				this.skinWeights = [];
				this.skinIndices = [];
				this.lineDistances = [];
				this.boundingBox = null;
				this.boundingSphere = null;
	
				// name
	
				this.name = source.name;
	
				// vertices
	
				var vertices = source.vertices;
	
				for ( i = 0, il = vertices.length; i < il; i ++ ) {
	
					this.vertices.push( vertices[ i ].clone() );
	
				}
	
				// colors
	
				var colors = source.colors;
	
				for ( i = 0, il = colors.length; i < il; i ++ ) {
	
					this.colors.push( colors[ i ].clone() );
	
				}
	
				// faces
	
				var faces = source.faces;
	
				for ( i = 0, il = faces.length; i < il; i ++ ) {
	
					this.faces.push( faces[ i ].clone() );
	
				}
	
				// face vertex uvs
	
				for ( i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {
	
					var faceVertexUvs = source.faceVertexUvs[ i ];
	
					if ( this.faceVertexUvs[ i ] === undefined ) {
	
						this.faceVertexUvs[ i ] = [];
	
					}
	
					for ( j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {
	
						var uvs = faceVertexUvs[ j ], uvsCopy = [];
	
						for ( k = 0, kl = uvs.length; k < kl; k ++ ) {
	
							var uv = uvs[ k ];
	
							uvsCopy.push( uv.clone() );
	
						}
	
						this.faceVertexUvs[ i ].push( uvsCopy );
	
					}
	
				}
	
				// morph targets
	
				var morphTargets = source.morphTargets;
	
				for ( i = 0, il = morphTargets.length; i < il; i ++ ) {
	
					var morphTarget = {};
					morphTarget.name = morphTargets[ i ].name;
	
					// vertices
	
					if ( morphTargets[ i ].vertices !== undefined ) {
	
						morphTarget.vertices = [];
	
						for ( j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {
	
							morphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );
	
						}
	
					}
	
					// normals
	
					if ( morphTargets[ i ].normals !== undefined ) {
	
						morphTarget.normals = [];
	
						for ( j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {
	
							morphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );
	
						}
	
					}
	
					this.morphTargets.push( morphTarget );
	
				}
	
				// morph normals
	
				var morphNormals = source.morphNormals;
	
				for ( i = 0, il = morphNormals.length; i < il; i ++ ) {
	
					var morphNormal = {};
	
					// vertex normals
	
					if ( morphNormals[ i ].vertexNormals !== undefined ) {
	
						morphNormal.vertexNormals = [];
	
						for ( j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {
	
							var srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];
							var destVertexNormal = {};
	
							destVertexNormal.a = srcVertexNormal.a.clone();
							destVertexNormal.b = srcVertexNormal.b.clone();
							destVertexNormal.c = srcVertexNormal.c.clone();
	
							morphNormal.vertexNormals.push( destVertexNormal );
	
						}
	
					}
	
					// face normals
	
					if ( morphNormals[ i ].faceNormals !== undefined ) {
	
						morphNormal.faceNormals = [];
	
						for ( j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {
	
							morphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );
	
						}
	
					}
	
					this.morphNormals.push( morphNormal );
	
				}
	
				// skin weights
	
				var skinWeights = source.skinWeights;
	
				for ( i = 0, il = skinWeights.length; i < il; i ++ ) {
	
					this.skinWeights.push( skinWeights[ i ].clone() );
	
				}
	
				// skin indices
	
				var skinIndices = source.skinIndices;
	
				for ( i = 0, il = skinIndices.length; i < il; i ++ ) {
	
					this.skinIndices.push( skinIndices[ i ].clone() );
	
				}
	
				// line distances
	
				var lineDistances = source.lineDistances;
	
				for ( i = 0, il = lineDistances.length; i < il; i ++ ) {
	
					this.lineDistances.push( lineDistances[ i ] );
	
				}
	
				// bounding box
	
				var boundingBox = source.boundingBox;
	
				if ( boundingBox !== null ) {
	
					this.boundingBox = boundingBox.clone();
	
				}
	
				// bounding sphere
	
				var boundingSphere = source.boundingSphere;
	
				if ( boundingSphere !== null ) {
	
					this.boundingSphere = boundingSphere.clone();
	
				}
	
				// update flags
	
				this.elementsNeedUpdate = source.elementsNeedUpdate;
				this.verticesNeedUpdate = source.verticesNeedUpdate;
				this.uvsNeedUpdate = source.uvsNeedUpdate;
				this.normalsNeedUpdate = source.normalsNeedUpdate;
				this.colorsNeedUpdate = source.colorsNeedUpdate;
				this.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;
				this.groupsNeedUpdate = source.groupsNeedUpdate;
	
				return this;
	
			},
	
			dispose: function () {
	
				this.dispatchEvent( { type: 'dispose' } );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// BoxGeometry
	
		var BoxGeometry = /*@__PURE__*/(function (Geometry) {
			function BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
	
				Geometry.call(this);
	
				this.type = 'BoxGeometry';
	
				this.parameters = {
					width: width,
					height: height,
					depth: depth,
					widthSegments: widthSegments,
					heightSegments: heightSegments,
					depthSegments: depthSegments
				};
	
				this.fromBufferGeometry( new BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );
				this.mergeVertices();
	
			}
	
			if ( Geometry ) BoxGeometry.__proto__ = Geometry;
			BoxGeometry.prototype = Object.create( Geometry && Geometry.prototype );
			BoxGeometry.prototype.constructor = BoxGeometry;
	
			return BoxGeometry;
		}(Geometry));
	
		// BoxBufferGeometry
	
		var BoxBufferGeometry = /*@__PURE__*/(function (BufferGeometry) {
			function BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) {
	
				BufferGeometry.call(this);
	
				this.type = 'BoxBufferGeometry';
	
				this.parameters = {
					width: width,
					height: height,
					depth: depth,
					widthSegments: widthSegments,
					heightSegments: heightSegments,
					depthSegments: depthSegments
				};
	
				var scope = this;
	
				width = width || 1;
				height = height || 1;
				depth = depth || 1;
	
				// segments
	
				widthSegments = Math.floor( widthSegments ) || 1;
				heightSegments = Math.floor( heightSegments ) || 1;
				depthSegments = Math.floor( depthSegments ) || 1;
	
				// buffers
	
				var indices = [];
				var vertices = [];
				var normals = [];
				var uvs = [];
	
				// helper variables
	
				var numberOfVertices = 0;
				var groupStart = 0;
	
				// build each side of the box geometry
	
				buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
				buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
				buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
				buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
				buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
				buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz
	
				// build geometry
	
				this.setIndex( indices );
				this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
				this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
				this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
				function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {
	
					var segmentWidth = width / gridX;
					var segmentHeight = height / gridY;
	
					var widthHalf = width / 2;
					var heightHalf = height / 2;
					var depthHalf = depth / 2;
	
					var gridX1 = gridX + 1;
					var gridY1 = gridY + 1;
	
					var vertexCounter = 0;
					var groupCount = 0;
	
					var ix, iy;
	
					var vector = new Vector3();
	
					// generate vertices, normals and uvs
	
					for ( iy = 0; iy < gridY1; iy ++ ) {
	
						var y = iy * segmentHeight - heightHalf;
	
						for ( ix = 0; ix < gridX1; ix ++ ) {
	
							var x = ix * segmentWidth - widthHalf;
	
							// set values to correct vector component
	
							vector[ u ] = x * udir;
							vector[ v ] = y * vdir;
							vector[ w ] = depthHalf;
	
							// now apply vector to vertex buffer
	
							vertices.push( vector.x, vector.y, vector.z );
	
							// set values to correct vector component
	
							vector[ u ] = 0;
							vector[ v ] = 0;
							vector[ w ] = depth > 0 ? 1 : - 1;
	
							// now apply vector to normal buffer
	
							normals.push( vector.x, vector.y, vector.z );
	
							// uvs
	
							uvs.push( ix / gridX );
							uvs.push( 1 - ( iy / gridY ) );
	
							// counters
	
							vertexCounter += 1;
	
						}
	
					}
	
					// indices
	
					// 1. you need three indices to draw a single face
					// 2. a single segment consists of two faces
					// 3. so we need to generate six (2*3) indices per segment
	
					for ( iy = 0; iy < gridY; iy ++ ) {
	
						for ( ix = 0; ix < gridX; ix ++ ) {
	
							var a = numberOfVertices + ix + gridX1 * iy;
							var b = numberOfVertices + ix + gridX1 * ( iy + 1 );
							var c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
							var d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;
	
							// faces
	
							indices.push( a, b, d );
							indices.push( b, c, d );
	
							// increase counter
	
							groupCount += 6;
	
						}
	
					}
	
					// add a group to the geometry. this will ensure multi material support
	
					scope.addGroup( groupStart, groupCount, materialIndex );
	
					// calculate new start value for groups
	
					groupStart += groupCount;
	
					// update total number of vertices
	
					numberOfVertices += vertexCounter;
	
				}
	
			}
	
			if ( BufferGeometry ) BoxBufferGeometry.__proto__ = BufferGeometry;
			BoxBufferGeometry.prototype = Object.create( BufferGeometry && BufferGeometry.prototype );
			BoxBufferGeometry.prototype.constructor = BoxBufferGeometry;
	
			return BoxBufferGeometry;
		}(BufferGeometry));
	
		/**
		 * Uniform Utilities
		 */
	
		function cloneUniforms( src ) {
	
			var dst = {};
	
			for ( var u in src ) {
	
				dst[ u ] = {};
	
				for ( var p in src[ u ] ) {
	
					var property = src[ u ][ p ];
	
					if ( property && ( property.isColor ||
						property.isMatrix3 || property.isMatrix4 ||
						property.isVector2 || property.isVector3 || property.isVector4 ||
						property.isTexture ) ) {
	
						dst[ u ][ p ] = property.clone();
	
					} else if ( Array.isArray( property ) ) {
	
						dst[ u ][ p ] = property.slice();
	
					} else {
	
						dst[ u ][ p ] = property;
	
					}
	
				}
	
			}
	
			return dst;
	
		}
	
		function mergeUniforms( uniforms ) {
	
			var merged = {};
	
			for ( var u = 0; u < uniforms.length; u ++ ) {
	
				var tmp = cloneUniforms( uniforms[ u ] );
	
				for ( var p in tmp ) {
	
					merged[ p ] = tmp[ p ];
	
				}
	
			}
	
			return merged;
	
		}
	
		// Legacy
	
		var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
	
		var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
	
		var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  defines: { "label" : "value" },
		 *  uniforms: { "parameter1": { value: 1.0 }, "parameter2": { value2: 2 } },
		 *
		 *  fragmentShader: <string>,
		 *  vertexShader: <string>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  lights: <bool>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function ShaderMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'ShaderMaterial';
	
			this.defines = {};
			this.uniforms = {};
	
			this.vertexShader = default_vertex;
			this.fragmentShader = default_fragment;
	
			this.linewidth = 1;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
	
			this.fog = false; // set to use scene fog
			this.lights = false; // set to use scene lights
			this.clipping = false; // set to use user-defined clipping planes
	
			this.skinning = false; // set to use skinning attribute streams
			this.morphTargets = false; // set to use morph targets
			this.morphNormals = false; // set to use morph normals
	
			this.extensions = {
				derivatives: false, // set to use derivatives
				fragDepth: false, // set to use fragment depth values
				drawBuffers: false, // set to use draw buffers
				shaderTextureLOD: false // set to use shader texture LOD
			};
	
			// When rendered geometry doesn't include these attributes but the material does,
			// use these default values in WebGL. This avoids errors when buffer data is missing.
			this.defaultAttributeValues = {
				'color': [ 1, 1, 1 ],
				'uv': [ 0, 0 ],
				'uv2': [ 0, 0 ]
			};
	
			this.index0AttributeName = undefined;
			this.uniformsNeedUpdate = false;
	
			if ( parameters !== undefined ) {
	
				if ( parameters.attributes !== undefined ) {
	
					console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );
	
				}
	
				this.setValues( parameters );
	
			}
	
		}
	
		ShaderMaterial.prototype = Object.create( Material.prototype );
		ShaderMaterial.prototype.constructor = ShaderMaterial;
	
		ShaderMaterial.prototype.isShaderMaterial = true;
	
		ShaderMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.fragmentShader = source.fragmentShader;
			this.vertexShader = source.vertexShader;
	
			this.uniforms = cloneUniforms( source.uniforms );
	
			this.defines = Object.assign( {}, source.defines );
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
	
			this.lights = source.lights;
			this.clipping = source.clipping;
	
			this.skinning = source.skinning;
	
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			this.extensions = source.extensions;
	
			return this;
	
		};
	
		ShaderMaterial.prototype.toJSON = function ( meta ) {
	
			var data = Material.prototype.toJSON.call( this, meta );
	
			data.uniforms = {};
	
			for ( var name in this.uniforms ) {
	
				var uniform = this.uniforms[ name ];
				var value = uniform.value;
	
				if ( value && value.isTexture ) {
	
					data.uniforms[ name ] = {
						type: 't',
						value: value.toJSON( meta ).uuid
					};
	
				} else if ( value && value.isColor ) {
	
					data.uniforms[ name ] = {
						type: 'c',
						value: value.getHex()
					};
	
				} else if ( value && value.isVector2 ) {
	
					data.uniforms[ name ] = {
						type: 'v2',
						value: value.toArray()
					};
	
				} else if ( value && value.isVector3 ) {
	
					data.uniforms[ name ] = {
						type: 'v3',
						value: value.toArray()
					};
	
				} else if ( value && value.isVector4 ) {
	
					data.uniforms[ name ] = {
						type: 'v4',
						value: value.toArray()
					};
	
				} else if ( value && value.isMatrix3 ) {
	
					data.uniforms[ name ] = {
						type: 'm3',
						value: value.toArray()
					};
	
				} else if ( value && value.isMatrix4 ) {
	
					data.uniforms[ name ] = {
						type: 'm4',
						value: value.toArray()
					};
	
				} else {
	
					data.uniforms[ name ] = {
						value: value
					};
	
					// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far
	
				}
	
			}
	
			if ( Object.keys( this.defines ).length > 0 ) { data.defines = this.defines; }
	
			data.vertexShader = this.vertexShader;
			data.fragmentShader = this.fragmentShader;
	
			var extensions = {};
	
			for ( var key in this.extensions ) {
	
				if ( this.extensions[ key ] === true ) { extensions[ key ] = true; }
	
			}
	
			if ( Object.keys( extensions ).length > 0 ) { data.extensions = extensions; }
	
			return data;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 * @author WestLangley / http://github.com/WestLangley
		*/
	
		function Camera() {
	
			Object3D.call( this );
	
			this.type = 'Camera';
	
			this.matrixWorldInverse = new Matrix4();
	
			this.projectionMatrix = new Matrix4();
			this.projectionMatrixInverse = new Matrix4();
	
		}
	
		Camera.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Camera,
	
			isCamera: true,
	
			copy: function ( source, recursive ) {
	
				Object3D.prototype.copy.call( this, source, recursive );
	
				this.matrixWorldInverse.copy( source.matrixWorldInverse );
	
				this.projectionMatrix.copy( source.projectionMatrix );
				this.projectionMatrixInverse.copy( source.projectionMatrixInverse );
	
				return this;
	
			},
	
			getWorldDirection: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Camera: .getWorldDirection() target is now required' );
					target = new Vector3();
	
				}
	
				this.updateMatrixWorld( true );
	
				var e = this.matrixWorld.elements;
	
				return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();
	
			},
	
			updateMatrixWorld: function ( force ) {
	
				Object3D.prototype.updateMatrixWorld.call( this, force );
	
				this.matrixWorldInverse.getInverse( this.matrixWorld );
	
			},
	
			updateWorldMatrix: function ( updateParents, updateChildren ) {
	
				Object3D.prototype.updateWorldMatrix.call( this, updateParents, updateChildren );
	
				this.matrixWorldInverse.getInverse( this.matrixWorld );
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author greggman / http://games.greggman.com/
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author tschw
		 */
	
		function PerspectiveCamera( fov, aspect, near, far ) {
	
			Camera.call( this );
	
			this.type = 'PerspectiveCamera';
	
			this.fov = fov !== undefined ? fov : 50;
			this.zoom = 1;
	
			this.near = near !== undefined ? near : 0.1;
			this.far = far !== undefined ? far : 2000;
			this.focus = 10;
	
			this.aspect = aspect !== undefined ? aspect : 1;
			this.view = null;
	
			this.filmGauge = 35;	// width of the film (default in millimeters)
			this.filmOffset = 0;	// horizontal film offset (same unit as gauge)
	
			this.updateProjectionMatrix();
	
		}
	
		PerspectiveCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
	
			constructor: PerspectiveCamera,
	
			isPerspectiveCamera: true,
	
			copy: function ( source, recursive ) {
	
				Camera.prototype.copy.call( this, source, recursive );
	
				this.fov = source.fov;
				this.zoom = source.zoom;
	
				this.near = source.near;
				this.far = source.far;
				this.focus = source.focus;
	
				this.aspect = source.aspect;
				this.view = source.view === null ? null : Object.assign( {}, source.view );
	
				this.filmGauge = source.filmGauge;
				this.filmOffset = source.filmOffset;
	
				return this;
	
			},
	
			/**
			 * Sets the FOV by focal length in respect to the current .filmGauge.
			 *
			 * The default film gauge is 35, so that the focal length can be specified for
			 * a 35mm (full frame) camera.
			 *
			 * Values for focal length and film gauge must have the same unit.
			 */
			setFocalLength: function ( focalLength ) {
	
				// see http://www.bobatkins.com/photography/technical/field_of_view.html
				var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
	
				this.fov = MathUtils.RAD2DEG * 2 * Math.atan( vExtentSlope );
				this.updateProjectionMatrix();
	
			},
	
			/**
			 * Calculates the focal length from the current .fov and .filmGauge.
			 */
			getFocalLength: function () {
	
				var vExtentSlope = Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov );
	
				return 0.5 * this.getFilmHeight() / vExtentSlope;
	
			},
	
			getEffectiveFOV: function () {
	
				return MathUtils.RAD2DEG * 2 * Math.atan(
					Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom );
	
			},
	
			getFilmWidth: function () {
	
				// film not completely covered in portrait format (aspect < 1)
				return this.filmGauge * Math.min( this.aspect, 1 );
	
			},
	
			getFilmHeight: function () {
	
				// film not completely covered in landscape format (aspect > 1)
				return this.filmGauge / Math.max( this.aspect, 1 );
	
			},
	
			/**
			 * Sets an offset in a larger frustum. This is useful for multi-window or
			 * multi-monitor/multi-machine setups.
			 *
			 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
			 * the monitors are in grid like this
			 *
			 *   +---+---+---+
			 *   | A | B | C |
			 *   +---+---+---+
			 *   | D | E | F |
			 *   +---+---+---+
			 *
			 * then for each monitor you would call it like this
			 *
			 *   var w = 1920;
			 *   var h = 1080;
			 *   var fullWidth = w * 3;
			 *   var fullHeight = h * 2;
			 *
			 *   --A--
			 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
			 *   --B--
			 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
			 *   --C--
			 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
			 *   --D--
			 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
			 *   --E--
			 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
			 *   --F--
			 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
			 *
			 *   Note there is no reason monitors have to be the same size or in a grid.
			 */
			setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
	
				this.aspect = fullWidth / fullHeight;
	
				if ( this.view === null ) {
	
					this.view = {
						enabled: true,
						fullWidth: 1,
						fullHeight: 1,
						offsetX: 0,
						offsetY: 0,
						width: 1,
						height: 1
					};
	
				}
	
				this.view.enabled = true;
				this.view.fullWidth = fullWidth;
				this.view.fullHeight = fullHeight;
				this.view.offsetX = x;
				this.view.offsetY = y;
				this.view.width = width;
				this.view.height = height;
	
				this.updateProjectionMatrix();
	
			},
	
			clearViewOffset: function () {
	
				if ( this.view !== null ) {
	
					this.view.enabled = false;
	
				}
	
				this.updateProjectionMatrix();
	
			},
	
			updateProjectionMatrix: function () {
	
				var near = this.near,
					top = near * Math.tan( MathUtils.DEG2RAD * 0.5 * this.fov ) / this.zoom,
					height = 2 * top,
					width = this.aspect * height,
					left = - 0.5 * width,
					view = this.view;
	
				if ( this.view !== null && this.view.enabled ) {
	
					var fullWidth = view.fullWidth,
						fullHeight = view.fullHeight;
	
					left += view.offsetX * width / fullWidth;
					top -= view.offsetY * height / fullHeight;
					width *= view.width / fullWidth;
					height *= view.height / fullHeight;
	
				}
	
				var skew = this.filmOffset;
				if ( skew !== 0 ) { left += near * skew / this.getFilmWidth(); }
	
				this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );
	
				this.projectionMatrixInverse.getInverse( this.projectionMatrix );
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.fov = this.fov;
				data.object.zoom = this.zoom;
	
				data.object.near = this.near;
				data.object.far = this.far;
				data.object.focus = this.focus;
	
				data.object.aspect = this.aspect;
	
				if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }
	
				data.object.filmGauge = this.filmGauge;
				data.object.filmOffset = this.filmOffset;
	
				return data;
	
			}
	
		} );
	
		/**
		 * Camera for rendering cube maps
		 *	- renders scene into axis-aligned cube
		 *
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		var fov = 90, aspect = 1;
	
		function CubeCamera( near, far, cubeResolution, options ) {
	
			Object3D.call( this );
	
			this.type = 'CubeCamera';
	
			var cameraPX = new PerspectiveCamera( fov, aspect, near, far );
			cameraPX.up.set( 0, - 1, 0 );
			cameraPX.lookAt( new Vector3( 1, 0, 0 ) );
			this.add( cameraPX );
	
			var cameraNX = new PerspectiveCamera( fov, aspect, near, far );
			cameraNX.up.set( 0, - 1, 0 );
			cameraNX.lookAt( new Vector3( - 1, 0, 0 ) );
			this.add( cameraNX );
	
			var cameraPY = new PerspectiveCamera( fov, aspect, near, far );
			cameraPY.up.set( 0, 0, 1 );
			cameraPY.lookAt( new Vector3( 0, 1, 0 ) );
			this.add( cameraPY );
	
			var cameraNY = new PerspectiveCamera( fov, aspect, near, far );
			cameraNY.up.set( 0, 0, - 1 );
			cameraNY.lookAt( new Vector3( 0, - 1, 0 ) );
			this.add( cameraNY );
	
			var cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraPZ.up.set( 0, - 1, 0 );
			cameraPZ.lookAt( new Vector3( 0, 0, 1 ) );
			this.add( cameraPZ );
	
			var cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraNZ.up.set( 0, - 1, 0 );
			cameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );
			this.add( cameraNZ );
	
			options = options || { format: RGBFormat, magFilter: LinearFilter, minFilter: LinearFilter };
	
			this.renderTarget = new WebGLCubeRenderTarget( cubeResolution, options );
			this.renderTarget.texture.name = "CubeCamera";
	
			this.update = function ( renderer, scene ) {
	
				if ( this.parent === null ) { this.updateMatrixWorld(); }
	
				var currentRenderTarget = renderer.getRenderTarget();
	
				var renderTarget = this.renderTarget;
				var generateMipmaps = renderTarget.texture.generateMipmaps;
	
				renderTarget.texture.generateMipmaps = false;
	
				renderer.setRenderTarget( renderTarget, 0 );
				renderer.render( scene, cameraPX );
	
				renderer.setRenderTarget( renderTarget, 1 );
				renderer.render( scene, cameraNX );
	
				renderer.setRenderTarget( renderTarget, 2 );
				renderer.render( scene, cameraPY );
	
				renderer.setRenderTarget( renderTarget, 3 );
				renderer.render( scene, cameraNY );
	
				renderer.setRenderTarget( renderTarget, 4 );
				renderer.render( scene, cameraPZ );
	
				renderTarget.texture.generateMipmaps = generateMipmaps;
	
				renderer.setRenderTarget( renderTarget, 5 );
				renderer.render( scene, cameraNZ );
	
				renderer.setRenderTarget( currentRenderTarget );
	
			};
	
			this.clear = function ( renderer, color, depth, stencil ) {
	
				var currentRenderTarget = renderer.getRenderTarget();
	
				var renderTarget = this.renderTarget;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					renderer.setRenderTarget( renderTarget, i );
	
					renderer.clear( color, depth, stencil );
	
				}
	
				renderer.setRenderTarget( currentRenderTarget );
	
			};
	
		}
	
		CubeCamera.prototype = Object.create( Object3D.prototype );
		CubeCamera.prototype.constructor = CubeCamera;
	
		/**
		 * @author alteredq / http://alteredqualia.com
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function WebGLCubeRenderTarget( size, options, dummy ) {
	
			if ( Number.isInteger( options ) ) {
	
				console.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );
	
				options = dummy;
	
			}
	
			WebGLRenderTarget.call( this, size, size, options );
	
		}
	
		WebGLCubeRenderTarget.prototype = Object.create( WebGLRenderTarget.prototype );
		WebGLCubeRenderTarget.prototype.constructor = WebGLCubeRenderTarget;
	
		WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;
	
		WebGLCubeRenderTarget.prototype.fromEquirectangularTexture = function ( renderer, texture ) {
	
			this.texture.type = texture.type;
			this.texture.format = texture.format;
			this.texture.encoding = texture.encoding;
	
			var scene = new Scene();
	
			var shader = {
	
				uniforms: {
					tEquirect: { value: null },
				},
	
				vertexShader: [
	
					"varying vec3 vWorldDirection;",
	
					"vec3 transformDirection( in vec3 dir, in mat4 matrix ) {",
	
					"	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );",
	
					"}",
	
					"void main() {",
	
					"	vWorldDirection = transformDirection( position, modelMatrix );",
	
					"	#include <begin_vertex>",
					"	#include <project_vertex>",
	
					"}"
	
				].join( '\n' ),
	
				fragmentShader: [
	
					"uniform sampler2D tEquirect;",
	
					"varying vec3 vWorldDirection;",
	
					"#define RECIPROCAL_PI 0.31830988618",
					"#define RECIPROCAL_PI2 0.15915494",
	
					"void main() {",
	
					"	vec3 direction = normalize( vWorldDirection );",
	
					"	vec2 sampleUV;",
	
					"	sampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;",
	
					"	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",
	
					"	gl_FragColor = texture2D( tEquirect, sampleUV );",
	
					"}"
	
				].join( '\n' ),
			};
	
			var material = new ShaderMaterial( {
	
				type: 'CubemapFromEquirect',
	
				uniforms: cloneUniforms( shader.uniforms ),
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader,
				side: BackSide,
				blending: NoBlending
	
			} );
	
			material.uniforms.tEquirect.value = texture;
	
			var mesh = new Mesh( new BoxBufferGeometry( 5, 5, 5 ), material );
	
			scene.add( mesh );
	
			var camera = new CubeCamera( 1, 10, 1 );
	
			camera.renderTarget = this;
			camera.renderTarget.texture.name = 'CubeCameraTexture';
	
			camera.update( renderer, scene );
	
			mesh.geometry.dispose();
			mesh.material.dispose();
	
			return this;
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function DataTexture( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
	
			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
	
			this.image = { data: data || null, width: width || 1, height: height || 1 };
	
			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
	
			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;
	
			this.needsUpdate = true;
	
		}
	
		DataTexture.prototype = Object.create( Texture.prototype );
		DataTexture.prototype.constructor = DataTexture;
	
		DataTexture.prototype.isDataTexture = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / http://clara.io
		 */
	
		var _sphere$1 = new Sphere();
		var _vector$5 = new Vector3();
	
		function Frustum( p0, p1, p2, p3, p4, p5 ) {
	
			this.planes = [
	
				( p0 !== undefined ) ? p0 : new Plane(),
				( p1 !== undefined ) ? p1 : new Plane(),
				( p2 !== undefined ) ? p2 : new Plane(),
				( p3 !== undefined ) ? p3 : new Plane(),
				( p4 !== undefined ) ? p4 : new Plane(),
				( p5 !== undefined ) ? p5 : new Plane()
	
			];
	
		}
	
		Object.assign( Frustum.prototype, {
	
			set: function ( p0, p1, p2, p3, p4, p5 ) {
	
				var planes = this.planes;
	
				planes[ 0 ].copy( p0 );
				planes[ 1 ].copy( p1 );
				planes[ 2 ].copy( p2 );
				planes[ 3 ].copy( p3 );
				planes[ 4 ].copy( p4 );
				planes[ 5 ].copy( p5 );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( frustum ) {
	
				var planes = this.planes;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					planes[ i ].copy( frustum.planes[ i ] );
	
				}
	
				return this;
	
			},
	
			setFromProjectionMatrix: function ( m ) {
	
				var planes = this.planes;
				var me = m.elements;
				var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
				var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
				var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
				var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
	
				planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
				planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
				planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
				planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
				planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
				planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
	
				return this;
	
			},
	
			intersectsObject: function ( object ) {
	
				var geometry = object.geometry;
	
				if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }
	
				_sphere$1.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );
	
				return this.intersectsSphere( _sphere$1 );
	
			},
	
			intersectsSprite: function ( sprite ) {
	
				_sphere$1.center.set( 0, 0, 0 );
				_sphere$1.radius = 0.7071067811865476;
				_sphere$1.applyMatrix4( sprite.matrixWorld );
	
				return this.intersectsSphere( _sphere$1 );
	
			},
	
			intersectsSphere: function ( sphere ) {
	
				var planes = this.planes;
				var center = sphere.center;
				var negRadius = - sphere.radius;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					var distance = planes[ i ].distanceToPoint( center );
	
					if ( distance < negRadius ) {
	
						return false;
	
					}
	
				}
	
				return true;
	
			},
	
			intersectsBox: function ( box ) {
	
				var planes = this.planes;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					var plane = planes[ i ];
	
					// corner at max distance
	
					_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;
	
					if ( plane.distanceToPoint( _vector$5 ) < 0 ) {
	
						return false;
	
					}
	
				}
	
				return true;
	
			},
	
			containsPoint: function ( point ) {
	
				var planes = this.planes;
	
				for ( var i = 0; i < 6; i ++ ) {
	
					if ( planes[ i ].distanceToPoint( point ) < 0 ) {
	
						return false;
	
					}
	
				}
	
				return true;
	
			}
	
		} );
	
		/**
		 * Uniforms library for shared webgl shaders
		 */
	
		var UniformsLib = {
	
			common: {
	
				diffuse: { value: new Color( 0xeeeeee ) },
				opacity: { value: 1.0 },
	
				map: { value: null },
				uvTransform: { value: new Matrix3() },
				uv2Transform: { value: new Matrix3() },
	
				alphaMap: { value: null },
	
			},
	
			specularmap: {
	
				specularMap: { value: null },
	
			},
	
			envmap: {
	
				envMap: { value: null },
				flipEnvMap: { value: - 1 },
				reflectivity: { value: 1.0 },
				refractionRatio: { value: 0.98 },
				maxMipLevel: { value: 0 }
	
			},
	
			aomap: {
	
				aoMap: { value: null },
				aoMapIntensity: { value: 1 }
	
			},
	
			lightmap: {
	
				lightMap: { value: null },
				lightMapIntensity: { value: 1 }
	
			},
	
			emissivemap: {
	
				emissiveMap: { value: null }
	
			},
	
			bumpmap: {
	
				bumpMap: { value: null },
				bumpScale: { value: 1 }
	
			},
	
			normalmap: {
	
				normalMap: { value: null },
				normalScale: { value: new Vector2( 1, 1 ) }
	
			},
	
			displacementmap: {
	
				displacementMap: { value: null },
				displacementScale: { value: 1 },
				displacementBias: { value: 0 }
	
			},
	
			roughnessmap: {
	
				roughnessMap: { value: null }
	
			},
	
			metalnessmap: {
	
				metalnessMap: { value: null }
	
			},
	
			gradientmap: {
	
				gradientMap: { value: null }
	
			},
	
			fog: {
	
				fogDensity: { value: 0.00025 },
				fogNear: { value: 1 },
				fogFar: { value: 2000 },
				fogColor: { value: new Color( 0xffffff ) }
	
			},
	
			lights: {
	
				ambientLightColor: { value: [] },
	
				lightProbe: { value: [] },
	
				directionalLights: { value: [], properties: {
					direction: {},
					color: {}
				} },
	
				directionalLightShadows: { value: [], properties: {
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },
	
				directionalShadowMap: { value: [] },
				directionalShadowMatrix: { value: [] },
	
				spotLights: { value: [], properties: {
					color: {},
					position: {},
					direction: {},
					distance: {},
					coneCos: {},
					penumbraCos: {},
					decay: {}
				} },
	
				spotLightShadows: { value: [], properties: {
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {}
				} },
	
				spotShadowMap: { value: [] },
				spotShadowMatrix: { value: [] },
	
				pointLights: { value: [], properties: {
					color: {},
					position: {},
					decay: {},
					distance: {}
				} },
	
				pointLightShadows: { value: [], properties: {
					shadowBias: {},
					shadowRadius: {},
					shadowMapSize: {},
					shadowCameraNear: {},
					shadowCameraFar: {}
				} },
	
				pointShadowMap: { value: [] },
				pointShadowMatrix: { value: [] },
	
				hemisphereLights: { value: [], properties: {
					direction: {},
					skyColor: {},
					groundColor: {}
				} },
	
				// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
				rectAreaLights: { value: [], properties: {
					color: {},
					position: {},
					width: {},
					height: {}
				} }
	
			},
	
			points: {
	
				diffuse: { value: new Color( 0xeeeeee ) },
				opacity: { value: 1.0 },
				size: { value: 1.0 },
				scale: { value: 1.0 },
				map: { value: null },
				alphaMap: { value: null },
				uvTransform: { value: new Matrix3() }
	
			},
	
			sprite: {
	
				diffuse: { value: new Color( 0xeeeeee ) },
				opacity: { value: 1.0 },
				center: { value: new Vector2( 0.5, 0.5 ) },
				rotation: { value: 0.0 },
				map: { value: null },
				alphaMap: { value: null },
				uvTransform: { value: new Matrix3() }
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLAnimation() {
	
			var context = null;
			var isAnimating = false;
			var animationLoop = null;
	
			function onAnimationFrame( time, frame ) {
	
				if ( isAnimating === false ) { return; }
	
				animationLoop( time, frame );
	
				context.requestAnimationFrame( onAnimationFrame );
	
			}
	
			return {
	
				start: function () {
	
					if ( isAnimating === true ) { return; }
					if ( animationLoop === null ) { return; }
	
					context.requestAnimationFrame( onAnimationFrame );
	
					isAnimating = true;
	
				},
	
				stop: function () {
	
					isAnimating = false;
	
				},
	
				setAnimationLoop: function ( callback ) {
	
					animationLoop = callback;
	
				},
	
				setContext: function ( value ) {
	
					context = value;
	
				}
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLAttributes( gl, capabilities ) {
	
			var isWebGL2 = capabilities.isWebGL2;
	
			var buffers = new WeakMap();
	
			function createBuffer( attribute, bufferType ) {
	
				var array = attribute.array;
				var usage = attribute.usage;
	
				var buffer = gl.createBuffer();
	
				gl.bindBuffer( bufferType, buffer );
				gl.bufferData( bufferType, array, usage );
	
				attribute.onUploadCallback();
	
				var type = 5126;
	
				if ( array instanceof Float32Array ) {
	
					type = 5126;
	
				} else if ( array instanceof Float64Array ) {
	
					console.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );
	
				} else if ( array instanceof Uint16Array ) {
	
					type = 5123;
	
				} else if ( array instanceof Int16Array ) {
	
					type = 5122;
	
				} else if ( array instanceof Uint32Array ) {
	
					type = 5125;
	
				} else if ( array instanceof Int32Array ) {
	
					type = 5124;
	
				} else if ( array instanceof Int8Array ) {
	
					type = 5120;
	
				} else if ( array instanceof Uint8Array ) {
	
					type = 5121;
	
				}
	
				return {
					buffer: buffer,
					type: type,
					bytesPerElement: array.BYTES_PER_ELEMENT,
					version: attribute.version
				};
	
			}
	
			function updateBuffer( buffer, attribute, bufferType ) {
	
				var array = attribute.array;
				var updateRange = attribute.updateRange;
	
				gl.bindBuffer( bufferType, buffer );
	
				if ( updateRange.count === - 1 ) {
	
					// Not using update ranges
	
					gl.bufferSubData( bufferType, 0, array );
	
				} else {
	
					if ( isWebGL2 ) {
	
						gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
							array, updateRange.offset, updateRange.count );
	
					} else {
	
						gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
							array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );
	
					}
	
					updateRange.count = - 1; // reset range
	
				}
	
			}
	
			//
	
			function get( attribute ) {
	
				if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }
	
				return buffers.get( attribute );
	
			}
	
			function remove( attribute ) {
	
				if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }
	
				var data = buffers.get( attribute );
	
				if ( data ) {
	
					gl.deleteBuffer( data.buffer );
	
					buffers.delete( attribute );
	
				}
	
			}
	
			function update( attribute, bufferType ) {
	
				if ( attribute.isInterleavedBufferAttribute ) { attribute = attribute.data; }
	
				var data = buffers.get( attribute );
	
				if ( data === undefined ) {
	
					buffers.set( attribute, createBuffer( attribute, bufferType ) );
	
				} else if ( data.version < attribute.version ) {
	
					updateBuffer( data.buffer, attribute, bufferType );
	
					data.version = attribute.version;
	
				}
	
			}
	
			return {
	
				get: get,
				remove: remove,
				update: update
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// PlaneGeometry
	
		function PlaneGeometry( width, height, widthSegments, heightSegments ) {
	
			Geometry.call( this );
	
			this.type = 'PlaneGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};
	
			this.fromBufferGeometry( new PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
			this.mergeVertices();
	
		}
	
		PlaneGeometry.prototype = Object.create( Geometry.prototype );
		PlaneGeometry.prototype.constructor = PlaneGeometry;
	
		// PlaneBufferGeometry
	
		function PlaneBufferGeometry( width, height, widthSegments, heightSegments ) {
	
			BufferGeometry.call( this );
	
			this.type = 'PlaneBufferGeometry';
	
			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};
	
			width = width || 1;
			height = height || 1;
	
			var width_half = width / 2;
			var height_half = height / 2;
	
			var gridX = Math.floor( widthSegments ) || 1;
			var gridY = Math.floor( heightSegments ) || 1;
	
			var gridX1 = gridX + 1;
			var gridY1 = gridY + 1;
	
			var segment_width = width / gridX;
			var segment_height = height / gridY;
	
			var ix, iy;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// generate vertices, normals and uvs
	
			for ( iy = 0; iy < gridY1; iy ++ ) {
	
				var y = iy * segment_height - height_half;
	
				for ( ix = 0; ix < gridX1; ix ++ ) {
	
					var x = ix * segment_width - width_half;
	
					vertices.push( x, - y, 0 );
	
					normals.push( 0, 0, 1 );
	
					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );
	
				}
	
			}
	
			// indices
	
			for ( iy = 0; iy < gridY; iy ++ ) {
	
				for ( ix = 0; ix < gridX; ix ++ ) {
	
					var a = ix + gridX1 * iy;
					var b = ix + gridX1 * ( iy + 1 );
					var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = ( ix + 1 ) + gridX1 * iy;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		PlaneBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		PlaneBufferGeometry.prototype.constructor = PlaneBufferGeometry;
	
		var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";
	
		var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
	
		var alphatest_fragment = "#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif";
	
		var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif";
	
		var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";
	
		var begin_vertex = "vec3 transformed = vec3( position );";
	
		var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";
	
		var bsdfs = "vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif";
	
		var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";
	
		var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";
	
		var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP ) && ! defined( TOON )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
	
		var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP ) && ! defined( TOON )\n\tvarying vec3 vViewPosition;\n#endif";
	
		var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0 && ! defined( STANDARD ) && ! defined( PHONG ) && ! defined( MATCAP ) && ! defined( TOON )\n\tvViewPosition = - mvPosition.xyz;\n#endif";
	
		var color_fragment = "#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif";
	
		var color_pars_fragment = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
	
		var color_pars_vertex = "#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif";
	
		var color_vertex = "#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif";
	
		var common = "#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}";
	
		var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\n    } else if (face == 1.0) {\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\n    } else if (face == 2.0) {\n      uv = direction.xy / abs(direction.z);\n    } else if (face == 3.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\n    } else if (face == 4.0) {\n      uv = direction.xz / abs(direction.y);\n    } else {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\n    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif";
	
		var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";
	
		var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";
	
		var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";
	
		var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
	
		var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";
	
		var encodings_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
	
		var encodings_pars_fragment = "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}";
	
		var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";
	
		var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";
	
		var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";
	
		var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";
	
		var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";
	
		var fog_vertex = "#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif";
	
		var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif";
	
		var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
	
		var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";
	
		var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";
	
		var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif";
	
		var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";
	
		var lights_lambert_vertex = "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif";
	
		var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif";
	
		var envmap_physical_pars_fragment = "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif";
	
		var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
	
		var lights_toon_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";
	
		var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
	
		var lights_phong_pars_fragment = "varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";
	
		var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = saturate( clearcoat );\tmaterial.clearcoatRoughness = max( clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif";
	
		var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
	
		var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
	
		var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif";
	
		var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";
	
		var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
	
		var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";
	
		var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";
	
		var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";
	
		var map_fragment = "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif";
	
		var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";
	
		var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
	
		var map_particle_pars_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";
	
		var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";
	
		var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";
	
		var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif";
	
		var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif";
	
		var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif";
	
		var normal_fragment_begin = "#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";
	
		var normal_fragment_maps = "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif";
	
		var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif";
	
		var clearcoat_normal_fragment_begin = "#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";
	
		var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif";
	
		var clearcoat_normalmap_pars_fragment = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";
	
		var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";
	
		var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";
	
		var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
	
		var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
	
		var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";
	
		var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";
	
		var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";
	
		var shadowmap_pars_fragment = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";
	
		var shadowmap_pars_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";
	
		var shadowmap_vertex = "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif";
	
		var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}";
	
		var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
	
		var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";
	
		var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
	
		var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";
	
		var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";
	
		var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";
	
		var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
	
		var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}";
	
		var uv_pars_fragment = "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";
	
		var uv_pars_vertex = "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";
	
		var uv_vertex = "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";
	
		var uv2_pars_fragment = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";
	
		var uv2_pars_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";
	
		var uv2_vertex = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";
	
		var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";
	
		var background_frag = "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
	
		var background_vert = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
	
		var cube_frag = "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
	
		var cube_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";
	
		var depth_frag = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";
	
		var depth_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";
	
		var distanceRGBA_frag = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";
	
		var distanceRGBA_vert = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";
	
		var equirect_frag = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";
	
		var equirect_vert = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";
	
		var linedashed_frag = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
	
		var linedashed_vert = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
	
		var meshbasic_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
	
		var meshbasic_vert = "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";
	
		var meshlambert_frag = "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
	
		var meshlambert_vert = "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	
		var meshmatcap_frag = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
	
		var meshmatcap_vert = "#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";
	
		var meshtoon_frag = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
	
		var meshtoon_vert = "#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	
		var meshphong_frag = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
	
		var meshphong_vert = "#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	
		var meshphysical_frag = "#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";
	
		var meshphysical_vert = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	
		var normal_frag = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}";
	
		var normal_vert = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";
	
		var points_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";
	
		var points_vert = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";
	
		var shadow_frag = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
	
		var shadow_vert = "#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";
	
		var sprite_frag = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";
	
		var sprite_vert = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";
	
		var ShaderChunk = {
			alphamap_fragment: alphamap_fragment,
			alphamap_pars_fragment: alphamap_pars_fragment,
			alphatest_fragment: alphatest_fragment,
			aomap_fragment: aomap_fragment,
			aomap_pars_fragment: aomap_pars_fragment,
			begin_vertex: begin_vertex,
			beginnormal_vertex: beginnormal_vertex,
			bsdfs: bsdfs,
			bumpmap_pars_fragment: bumpmap_pars_fragment,
			clipping_planes_fragment: clipping_planes_fragment,
			clipping_planes_pars_fragment: clipping_planes_pars_fragment,
			clipping_planes_pars_vertex: clipping_planes_pars_vertex,
			clipping_planes_vertex: clipping_planes_vertex,
			color_fragment: color_fragment,
			color_pars_fragment: color_pars_fragment,
			color_pars_vertex: color_pars_vertex,
			color_vertex: color_vertex,
			common: common,
			cube_uv_reflection_fragment: cube_uv_reflection_fragment,
			defaultnormal_vertex: defaultnormal_vertex,
			displacementmap_pars_vertex: displacementmap_pars_vertex,
			displacementmap_vertex: displacementmap_vertex,
			emissivemap_fragment: emissivemap_fragment,
			emissivemap_pars_fragment: emissivemap_pars_fragment,
			encodings_fragment: encodings_fragment,
			encodings_pars_fragment: encodings_pars_fragment,
			envmap_fragment: envmap_fragment,
			envmap_common_pars_fragment: envmap_common_pars_fragment,
			envmap_pars_fragment: envmap_pars_fragment,
			envmap_pars_vertex: envmap_pars_vertex,
			envmap_physical_pars_fragment: envmap_physical_pars_fragment,
			envmap_vertex: envmap_vertex,
			fog_vertex: fog_vertex,
			fog_pars_vertex: fog_pars_vertex,
			fog_fragment: fog_fragment,
			fog_pars_fragment: fog_pars_fragment,
			gradientmap_pars_fragment: gradientmap_pars_fragment,
			lightmap_fragment: lightmap_fragment,
			lightmap_pars_fragment: lightmap_pars_fragment,
			lights_lambert_vertex: lights_lambert_vertex,
			lights_pars_begin: lights_pars_begin,
			lights_toon_fragment: lights_toon_fragment,
			lights_toon_pars_fragment: lights_toon_pars_fragment,
			lights_phong_fragment: lights_phong_fragment,
			lights_phong_pars_fragment: lights_phong_pars_fragment,
			lights_physical_fragment: lights_physical_fragment,
			lights_physical_pars_fragment: lights_physical_pars_fragment,
			lights_fragment_begin: lights_fragment_begin,
			lights_fragment_maps: lights_fragment_maps,
			lights_fragment_end: lights_fragment_end,
			logdepthbuf_fragment: logdepthbuf_fragment,
			logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
			logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
			logdepthbuf_vertex: logdepthbuf_vertex,
			map_fragment: map_fragment,
			map_pars_fragment: map_pars_fragment,
			map_particle_fragment: map_particle_fragment,
			map_particle_pars_fragment: map_particle_pars_fragment,
			metalnessmap_fragment: metalnessmap_fragment,
			metalnessmap_pars_fragment: metalnessmap_pars_fragment,
			morphnormal_vertex: morphnormal_vertex,
			morphtarget_pars_vertex: morphtarget_pars_vertex,
			morphtarget_vertex: morphtarget_vertex,
			normal_fragment_begin: normal_fragment_begin,
			normal_fragment_maps: normal_fragment_maps,
			normalmap_pars_fragment: normalmap_pars_fragment,
			clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
			clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
			clearcoat_normalmap_pars_fragment: clearcoat_normalmap_pars_fragment,
			packing: packing,
			premultiplied_alpha_fragment: premultiplied_alpha_fragment,
			project_vertex: project_vertex,
			dithering_fragment: dithering_fragment,
			dithering_pars_fragment: dithering_pars_fragment,
			roughnessmap_fragment: roughnessmap_fragment,
			roughnessmap_pars_fragment: roughnessmap_pars_fragment,
			shadowmap_pars_fragment: shadowmap_pars_fragment,
			shadowmap_pars_vertex: shadowmap_pars_vertex,
			shadowmap_vertex: shadowmap_vertex,
			shadowmask_pars_fragment: shadowmask_pars_fragment,
			skinbase_vertex: skinbase_vertex,
			skinning_pars_vertex: skinning_pars_vertex,
			skinning_vertex: skinning_vertex,
			skinnormal_vertex: skinnormal_vertex,
			specularmap_fragment: specularmap_fragment,
			specularmap_pars_fragment: specularmap_pars_fragment,
			tonemapping_fragment: tonemapping_fragment,
			tonemapping_pars_fragment: tonemapping_pars_fragment,
			uv_pars_fragment: uv_pars_fragment,
			uv_pars_vertex: uv_pars_vertex,
			uv_vertex: uv_vertex,
			uv2_pars_fragment: uv2_pars_fragment,
			uv2_pars_vertex: uv2_pars_vertex,
			uv2_vertex: uv2_vertex,
			worldpos_vertex: worldpos_vertex,
	
			background_frag: background_frag,
			background_vert: background_vert,
			cube_frag: cube_frag,
			cube_vert: cube_vert,
			depth_frag: depth_frag,
			depth_vert: depth_vert,
			distanceRGBA_frag: distanceRGBA_frag,
			distanceRGBA_vert: distanceRGBA_vert,
			equirect_frag: equirect_frag,
			equirect_vert: equirect_vert,
			linedashed_frag: linedashed_frag,
			linedashed_vert: linedashed_vert,
			meshbasic_frag: meshbasic_frag,
			meshbasic_vert: meshbasic_vert,
			meshlambert_frag: meshlambert_frag,
			meshlambert_vert: meshlambert_vert,
			meshmatcap_frag: meshmatcap_frag,
			meshmatcap_vert: meshmatcap_vert,
			meshtoon_frag: meshtoon_frag,
			meshtoon_vert: meshtoon_vert,
			meshphong_frag: meshphong_frag,
			meshphong_vert: meshphong_vert,
			meshphysical_frag: meshphysical_frag,
			meshphysical_vert: meshphysical_vert,
			normal_frag: normal_frag,
			normal_vert: normal_vert,
			points_frag: points_frag,
			points_vert: points_vert,
			shadow_frag: shadow_frag,
			shadow_vert: shadow_vert,
			sprite_frag: sprite_frag,
			sprite_vert: sprite_vert
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author mikael emtinger / http://gomo.se/
		 */
	
		var ShaderLib = {
	
			basic: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.specularmap,
					UniformsLib.envmap,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.fog
				] ),
	
				vertexShader: ShaderChunk.meshbasic_vert,
				fragmentShader: ShaderChunk.meshbasic_frag
	
			},
	
			lambert: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.specularmap,
					UniformsLib.envmap,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) }
					}
				] ),
	
				vertexShader: ShaderChunk.meshlambert_vert,
				fragmentShader: ShaderChunk.meshlambert_frag
	
			},
	
			phong: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.specularmap,
					UniformsLib.envmap,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) },
						specular: { value: new Color( 0x111111 ) },
						shininess: { value: 30 }
					}
				] ),
	
				vertexShader: ShaderChunk.meshphong_vert,
				fragmentShader: ShaderChunk.meshphong_frag
	
			},
	
			standard: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.envmap,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.roughnessmap,
					UniformsLib.metalnessmap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) },
						roughness: { value: 0.5 },
						metalness: { value: 0.5 },
						envMapIntensity: { value: 1 } // temporary
					}
				] ),
	
				vertexShader: ShaderChunk.meshphysical_vert,
				fragmentShader: ShaderChunk.meshphysical_frag
	
			},
	
			toon: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.specularmap,
					UniformsLib.aomap,
					UniformsLib.lightmap,
					UniformsLib.emissivemap,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.gradientmap,
					UniformsLib.fog,
					UniformsLib.lights,
					{
						emissive: { value: new Color( 0x000000 ) },
						specular: { value: new Color( 0x111111 ) },
						shininess: { value: 30 }
					}
				] ),
	
				vertexShader: ShaderChunk.meshtoon_vert,
				fragmentShader: ShaderChunk.meshtoon_frag
	
			},
	
			matcap: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					UniformsLib.fog,
					{
						matcap: { value: null }
					}
				] ),
	
				vertexShader: ShaderChunk.meshmatcap_vert,
				fragmentShader: ShaderChunk.meshmatcap_frag
	
			},
	
			points: {
	
				uniforms: mergeUniforms( [
					UniformsLib.points,
					UniformsLib.fog
				] ),
	
				vertexShader: ShaderChunk.points_vert,
				fragmentShader: ShaderChunk.points_frag
	
			},
	
			dashed: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.fog,
					{
						scale: { value: 1 },
						dashSize: { value: 1 },
						totalSize: { value: 2 }
					}
				] ),
	
				vertexShader: ShaderChunk.linedashed_vert,
				fragmentShader: ShaderChunk.linedashed_frag
	
			},
	
			depth: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.displacementmap
				] ),
	
				vertexShader: ShaderChunk.depth_vert,
				fragmentShader: ShaderChunk.depth_frag
	
			},
	
			normal: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.bumpmap,
					UniformsLib.normalmap,
					UniformsLib.displacementmap,
					{
						opacity: { value: 1.0 }
					}
				] ),
	
				vertexShader: ShaderChunk.normal_vert,
				fragmentShader: ShaderChunk.normal_frag
	
			},
	
			sprite: {
	
				uniforms: mergeUniforms( [
					UniformsLib.sprite,
					UniformsLib.fog
				] ),
	
				vertexShader: ShaderChunk.sprite_vert,
				fragmentShader: ShaderChunk.sprite_frag
	
			},
	
			background: {
	
				uniforms: {
					uvTransform: { value: new Matrix3() },
					t2D: { value: null },
				},
	
				vertexShader: ShaderChunk.background_vert,
				fragmentShader: ShaderChunk.background_frag
	
			},
			/* -------------------------------------------------------------------------
			//	Cube map shader
			 ------------------------------------------------------------------------- */
	
			cube: {
	
				uniforms: mergeUniforms( [
					UniformsLib.envmap,
					{
						opacity: { value: 1.0 }
					}
				] ),
	
				vertexShader: ShaderChunk.cube_vert,
				fragmentShader: ShaderChunk.cube_frag
	
			},
	
			equirect: {
	
				uniforms: {
					tEquirect: { value: null },
				},
	
				vertexShader: ShaderChunk.equirect_vert,
				fragmentShader: ShaderChunk.equirect_frag
	
			},
	
			distanceRGBA: {
	
				uniforms: mergeUniforms( [
					UniformsLib.common,
					UniformsLib.displacementmap,
					{
						referencePosition: { value: new Vector3() },
						nearDistance: { value: 1 },
						farDistance: { value: 1000 }
					}
				] ),
	
				vertexShader: ShaderChunk.distanceRGBA_vert,
				fragmentShader: ShaderChunk.distanceRGBA_frag
	
			},
	
			shadow: {
	
				uniforms: mergeUniforms( [
					UniformsLib.lights,
					UniformsLib.fog,
					{
						color: { value: new Color( 0x00000 ) },
						opacity: { value: 1.0 }
					} ] ),
	
				vertexShader: ShaderChunk.shadow_vert,
				fragmentShader: ShaderChunk.shadow_frag
	
			}
	
		};
	
		ShaderLib.physical = {
	
			uniforms: mergeUniforms( [
				ShaderLib.standard.uniforms,
				{
					transparency: { value: 0 },
					clearcoat: { value: 0 },
					clearcoatRoughness: { value: 0 },
					sheen: { value: new Color( 0x000000 ) },
					clearcoatNormalScale: { value: new Vector2( 1, 1 ) },
					clearcoatNormalMap: { value: null },
				}
			] ),
	
			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLBackground( renderer, state, objects, premultipliedAlpha ) {
	
			var clearColor = new Color( 0x000000 );
			var clearAlpha = 0;
	
			var planeMesh;
			var boxMesh;
	
			var currentBackground = null;
			var currentBackgroundVersion = 0;
			var currentTonemapping = null;
	
			function render( renderList, scene, camera, forceClear ) {
	
				var background = scene.background;
	
				// Ignore background in AR
				// TODO: Reconsider this.
	
				var xr = renderer.xr;
				var session = xr.getSession && xr.getSession();
	
				if ( session && session.environmentBlendMode === 'additive' ) {
	
					background = null;
	
				}
	
				if ( background === null ) {
	
					setClear( clearColor, clearAlpha );
	
				} else if ( background && background.isColor ) {
	
					setClear( background, 1 );
					forceClear = true;
	
				}
	
				if ( renderer.autoClear || forceClear ) {
	
					renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );
	
				}
	
				if ( background && ( background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping ) ) {
	
					if ( boxMesh === undefined ) {
	
						boxMesh = new Mesh(
							new BoxBufferGeometry( 1, 1, 1 ),
							new ShaderMaterial( {
								type: 'BackgroundCubeMaterial',
								uniforms: cloneUniforms( ShaderLib.cube.uniforms ),
								vertexShader: ShaderLib.cube.vertexShader,
								fragmentShader: ShaderLib.cube.fragmentShader,
								side: BackSide,
								depthTest: false,
								depthWrite: false,
								fog: false
							} )
						);
	
						boxMesh.geometry.deleteAttribute( 'normal' );
						boxMesh.geometry.deleteAttribute( 'uv' );
	
						boxMesh.onBeforeRender = function ( renderer, scene, camera ) {
	
							this.matrixWorld.copyPosition( camera.matrixWorld );
	
						};
	
						// enable code injection for non-built-in material
						Object.defineProperty( boxMesh.material, 'envMap', {
	
							get: function () {
	
								return this.uniforms.envMap.value;
	
							}
	
						} );
	
						objects.update( boxMesh );
	
					}
	
					var texture = background.isWebGLCubeRenderTarget ? background.texture : background;
	
					boxMesh.material.uniforms.envMap.value = texture;
					boxMesh.material.uniforms.flipEnvMap.value = texture.isCubeTexture ? - 1 : 1;
	
					if ( currentBackground !== background ||
						currentBackgroundVersion !== texture.version ||
						currentTonemapping !== renderer.toneMapping ) {
	
						boxMesh.material.needsUpdate = true;
	
						currentBackground = background;
						currentBackgroundVersion = texture.version;
						currentTonemapping = renderer.toneMapping;
	
					}
	
					// push to the pre-sorted opaque render list
					renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );
	
				} else if ( background && background.isTexture ) {
	
					if ( planeMesh === undefined ) {
	
						planeMesh = new Mesh(
							new PlaneBufferGeometry( 2, 2 ),
							new ShaderMaterial( {
								type: 'BackgroundMaterial',
								uniforms: cloneUniforms( ShaderLib.background.uniforms ),
								vertexShader: ShaderLib.background.vertexShader,
								fragmentShader: ShaderLib.background.fragmentShader,
								side: FrontSide,
								depthTest: false,
								depthWrite: false,
								fog: false
							} )
						);
	
						planeMesh.geometry.deleteAttribute( 'normal' );
	
						// enable code injection for non-built-in material
						Object.defineProperty( planeMesh.material, 'map', {
	
							get: function () {
	
								return this.uniforms.t2D.value;
	
							}
	
						} );
	
						objects.update( planeMesh );
	
					}
	
					planeMesh.material.uniforms.t2D.value = background;
	
					if ( background.matrixAutoUpdate === true ) {
	
						background.updateMatrix();
	
					}
	
					planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );
	
					if ( currentBackground !== background ||
						currentBackgroundVersion !== background.version ||
						currentTonemapping !== renderer.toneMapping ) {
	
						planeMesh.material.needsUpdate = true;
	
						currentBackground = background;
						currentBackgroundVersion = background.version;
						currentTonemapping = renderer.toneMapping;
	
					}
	
	
					// push to the pre-sorted opaque render list
					renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );
	
				}
	
			}
	
			function setClear( color, alpha ) {
	
				state.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );
	
			}
	
			return {
	
				getClearColor: function () {
	
					return clearColor;
	
				},
				setClearColor: function ( color, alpha ) {
	
					clearColor.set( color );
					clearAlpha = alpha !== undefined ? alpha : 1;
					setClear( clearColor, clearAlpha );
	
				},
				getClearAlpha: function () {
	
					return clearAlpha;
	
				},
				setClearAlpha: function ( alpha ) {
	
					clearAlpha = alpha;
					setClear( clearColor, clearAlpha );
	
				},
				render: render
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLBufferRenderer( gl, extensions, info, capabilities ) {
	
			var isWebGL2 = capabilities.isWebGL2;
	
			var mode;
	
			function setMode( value ) {
	
				mode = value;
	
			}
	
			function render( start, count ) {
	
				gl.drawArrays( mode, start, count );
	
				info.update( count, mode );
	
			}
	
			function renderInstances( geometry, start, count, primcount ) {
	
				if ( primcount === 0 ) { return; }
	
				var extension, methodName;
	
				if ( isWebGL2 ) {
	
					extension = gl;
					methodName = 'drawArraysInstanced';
	
				} else {
	
					extension = extensions.get( 'ANGLE_instanced_arrays' );
					methodName = 'drawArraysInstancedANGLE';
	
					if ( extension === null ) {
	
						console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
						return;
	
					}
	
				}
	
				extension[ methodName ]( mode, start, count, primcount );
	
				info.update( count, mode, primcount );
	
			}
	
			//
	
			this.setMode = setMode;
			this.render = render;
			this.renderInstances = renderInstances;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLCapabilities( gl, extensions, parameters ) {
	
			var maxAnisotropy;
	
			function getMaxAnisotropy() {
	
				if ( maxAnisotropy !== undefined ) { return maxAnisotropy; }
	
				var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
	
				if ( extension !== null ) {
	
					maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );
	
				} else {
	
					maxAnisotropy = 0;
	
				}
	
				return maxAnisotropy;
	
			}
	
			function getMaxPrecision( precision ) {
	
				if ( precision === 'highp' ) {
	
					if ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&
						gl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {
	
						return 'highp';
	
					}
	
					precision = 'mediump';
	
				}
	
				if ( precision === 'mediump' ) {
	
					if ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&
						gl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {
	
						return 'mediump';
	
					}
	
				}
	
				return 'lowp';
	
			}
	
			/* eslint-disable no-undef */
			var isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||
				( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );
			/* eslint-enable no-undef */
	
			var precision = parameters.precision !== undefined ? parameters.precision : 'highp';
			var maxPrecision = getMaxPrecision( precision );
	
			if ( maxPrecision !== precision ) {
	
				console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
				precision = maxPrecision;
	
			}
	
			var logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
	
			var maxTextures = gl.getParameter( 34930 );
			var maxVertexTextures = gl.getParameter( 35660 );
			var maxTextureSize = gl.getParameter( 3379 );
			var maxCubemapSize = gl.getParameter( 34076 );
	
			var maxAttributes = gl.getParameter( 34921 );
			var maxVertexUniforms = gl.getParameter( 36347 );
			var maxVaryings = gl.getParameter( 36348 );
			var maxFragmentUniforms = gl.getParameter( 36349 );
	
			var vertexTextures = maxVertexTextures > 0;
			var floatFragmentTextures = isWebGL2 || !! extensions.get( 'OES_texture_float' );
			var floatVertexTextures = vertexTextures && floatFragmentTextures;
	
			var maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;
	
			return {
	
				isWebGL2: isWebGL2,
	
				getMaxAnisotropy: getMaxAnisotropy,
				getMaxPrecision: getMaxPrecision,
	
				precision: precision,
				logarithmicDepthBuffer: logarithmicDepthBuffer,
	
				maxTextures: maxTextures,
				maxVertexTextures: maxVertexTextures,
				maxTextureSize: maxTextureSize,
				maxCubemapSize: maxCubemapSize,
	
				maxAttributes: maxAttributes,
				maxVertexUniforms: maxVertexUniforms,
				maxVaryings: maxVaryings,
				maxFragmentUniforms: maxFragmentUniforms,
	
				vertexTextures: vertexTextures,
				floatFragmentTextures: floatFragmentTextures,
				floatVertexTextures: floatVertexTextures,
	
				maxSamples: maxSamples
	
			};
	
		}
	
		/**
		 * @author tschw
		 */
	
		function WebGLClipping() {
	
			var scope = this,
	
				globalState = null,
				numGlobalPlanes = 0,
				localClippingEnabled = false,
				renderingShadows = false,
	
				plane = new Plane(),
				viewNormalMatrix = new Matrix3(),
	
				uniform = { value: null, needsUpdate: false };
	
			this.uniform = uniform;
			this.numPlanes = 0;
			this.numIntersection = 0;
	
			this.init = function ( planes, enableLocalClipping, camera ) {
	
				var enabled =
					planes.length !== 0 ||
					enableLocalClipping ||
					// enable state of previous frame - the clipping code has to
					// run another frame in order to reset the state:
					numGlobalPlanes !== 0 ||
					localClippingEnabled;
	
				localClippingEnabled = enableLocalClipping;
	
				globalState = projectPlanes( planes, camera, 0 );
				numGlobalPlanes = planes.length;
	
				return enabled;
	
			};
	
			this.beginShadows = function () {
	
				renderingShadows = true;
				projectPlanes( null );
	
			};
	
			this.endShadows = function () {
	
				renderingShadows = false;
				resetGlobalState();
	
			};
	
			this.setState = function ( planes, clipIntersection, clipShadows, camera, cache, fromCache ) {
	
				if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {
	
					// there's no local clipping
	
					if ( renderingShadows ) {
	
						// there's no global clipping
	
						projectPlanes( null );
	
					} else {
	
						resetGlobalState();
	
					}
	
				} else {
	
					var nGlobal = renderingShadows ? 0 : numGlobalPlanes,
						lGlobal = nGlobal * 4,
	
						dstArray = cache.clippingState || null;
	
					uniform.value = dstArray; // ensure unique state
	
					dstArray = projectPlanes( planes, camera, lGlobal, fromCache );
	
					for ( var i = 0; i !== lGlobal; ++ i ) {
	
						dstArray[ i ] = globalState[ i ];
	
					}
	
					cache.clippingState = dstArray;
					this.numIntersection = clipIntersection ? this.numPlanes : 0;
					this.numPlanes += nGlobal;
	
				}
	
	
			};
	
			function resetGlobalState() {
	
				if ( uniform.value !== globalState ) {
	
					uniform.value = globalState;
					uniform.needsUpdate = numGlobalPlanes > 0;
	
				}
	
				scope.numPlanes = numGlobalPlanes;
				scope.numIntersection = 0;
	
			}
	
			function projectPlanes( planes, camera, dstOffset, skipTransform ) {
	
				var nPlanes = planes !== null ? planes.length : 0,
					dstArray = null;
	
				if ( nPlanes !== 0 ) {
	
					dstArray = uniform.value;
	
					if ( skipTransform !== true || dstArray === null ) {
	
						var flatSize = dstOffset + nPlanes * 4,
							viewMatrix = camera.matrixWorldInverse;
	
						viewNormalMatrix.getNormalMatrix( viewMatrix );
	
						if ( dstArray === null || dstArray.length < flatSize ) {
	
							dstArray = new Float32Array( flatSize );
	
						}
	
						for ( var i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {
	
							plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );
	
							plane.normal.toArray( dstArray, i4 );
							dstArray[ i4 + 3 ] = plane.constant;
	
						}
	
					}
	
					uniform.value = dstArray;
					uniform.needsUpdate = true;
	
				}
	
				scope.numPlanes = nPlanes;
				scope.numIntersection = 0;
	
				return dstArray;
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLExtensions( gl ) {
	
			var extensions = {};
	
			return {
	
				get: function ( name ) {
	
					if ( extensions[ name ] !== undefined ) {
	
						return extensions[ name ];
	
					}
	
					var extension;
	
					switch ( name ) {
	
						case 'WEBGL_depth_texture':
							extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
							break;
	
						case 'EXT_texture_filter_anisotropic':
							extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
							break;
	
						case 'WEBGL_compressed_texture_s3tc':
							extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
							break;
	
						case 'WEBGL_compressed_texture_pvrtc':
							extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
							break;
	
						default:
							extension = gl.getExtension( name );
	
					}
	
					if ( extension === null ) {
	
						console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
	
					}
	
					extensions[ name ] = extension;
	
					return extension;
	
				}
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLGeometries( gl, attributes, info ) {
	
			var geometries = new WeakMap();
			var wireframeAttributes = new WeakMap();
	
			function onGeometryDispose( event ) {
	
				var geometry = event.target;
				var buffergeometry = geometries.get( geometry );
	
				if ( buffergeometry.index !== null ) {
	
					attributes.remove( buffergeometry.index );
	
				}
	
				for ( var name in buffergeometry.attributes ) {
	
					attributes.remove( buffergeometry.attributes[ name ] );
	
				}
	
				geometry.removeEventListener( 'dispose', onGeometryDispose );
	
				geometries.delete( geometry );
	
				var attribute = wireframeAttributes.get( buffergeometry );
	
				if ( attribute ) {
	
					attributes.remove( attribute );
					wireframeAttributes.delete( buffergeometry );
	
				}
	
				//
	
				info.memory.geometries --;
	
			}
	
			function get( object, geometry ) {
	
				var buffergeometry = geometries.get( geometry );
	
				if ( buffergeometry ) { return buffergeometry; }
	
				geometry.addEventListener( 'dispose', onGeometryDispose );
	
				if ( geometry.isBufferGeometry ) {
	
					buffergeometry = geometry;
	
				} else if ( geometry.isGeometry ) {
	
					if ( geometry._bufferGeometry === undefined ) {
	
						geometry._bufferGeometry = new BufferGeometry().setFromObject( object );
	
					}
	
					buffergeometry = geometry._bufferGeometry;
	
				}
	
				geometries.set( geometry, buffergeometry );
	
				info.memory.geometries ++;
	
				return buffergeometry;
	
			}
	
			function update( geometry ) {
	
				var index = geometry.index;
				var geometryAttributes = geometry.attributes;
	
				if ( index !== null ) {
	
					attributes.update( index, 34963 );
	
				}
	
				for ( var name in geometryAttributes ) {
	
					attributes.update( geometryAttributes[ name ], 34962 );
	
				}
	
				// morph targets
	
				var morphAttributes = geometry.morphAttributes;
	
				for ( var name in morphAttributes ) {
	
					var array = morphAttributes[ name ];
	
					for ( var i = 0, l = array.length; i < l; i ++ ) {
	
						attributes.update( array[ i ], 34962 );
	
					}
	
				}
	
			}
	
			function updateWireframeAttribute( geometry ) {
	
				var indices = [];
	
				var geometryIndex = geometry.index;
				var geometryPosition = geometry.attributes.position;
				var version = 0;
	
				if ( geometryIndex !== null ) {
	
					var array = geometryIndex.array;
					version = geometryIndex.version;
	
					for ( var i = 0, l = array.length; i < l; i += 3 ) {
	
						var a = array[ i + 0 ];
						var b = array[ i + 1 ];
						var c = array[ i + 2 ];
	
						indices.push( a, b, b, c, c, a );
	
					}
	
				} else {
	
					var array = geometryPosition.array;
					version = geometryPosition.version;
	
					for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {
	
						var a = i + 0;
						var b = i + 1;
						var c = i + 2;
	
						indices.push( a, b, b, c, c, a );
	
					}
	
				}
	
				var attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
				attribute.version = version;
	
				attributes.update( attribute, 34963 );
	
				//
	
				var previousAttribute = wireframeAttributes.get( geometry );
	
				if ( previousAttribute ) { attributes.remove( previousAttribute ); }
	
				//
	
				wireframeAttributes.set( geometry, attribute );
	
			}
	
			function getWireframeAttribute( geometry ) {
	
				var currentAttribute = wireframeAttributes.get( geometry );
	
				if ( currentAttribute ) {
	
					var geometryIndex = geometry.index;
	
					if ( geometryIndex !== null ) {
	
						// if the attribute is obsolete, create a new one
	
						if ( currentAttribute.version < geometryIndex.version ) {
	
							updateWireframeAttribute( geometry );
	
						}
	
					}
	
				} else {
	
					updateWireframeAttribute( geometry );
	
				}
	
				return wireframeAttributes.get( geometry );
	
			}
	
			return {
	
				get: get,
				update: update,
	
				getWireframeAttribute: getWireframeAttribute
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {
	
			var isWebGL2 = capabilities.isWebGL2;
	
			var mode;
	
			function setMode( value ) {
	
				mode = value;
	
			}
	
			var type, bytesPerElement;
	
			function setIndex( value ) {
	
				type = value.type;
				bytesPerElement = value.bytesPerElement;
	
			}
	
			function render( start, count ) {
	
				gl.drawElements( mode, count, type, start * bytesPerElement );
	
				info.update( count, mode );
	
			}
	
			function renderInstances( geometry, start, count, primcount ) {
	
				if ( primcount === 0 ) { return; }
	
				var extension, methodName;
	
				if ( isWebGL2 ) {
	
					extension = gl;
					methodName = 'drawElementsInstanced';
	
				} else {
	
					extension = extensions.get( 'ANGLE_instanced_arrays' );
					methodName = 'drawElementsInstancedANGLE';
	
					if ( extension === null ) {
	
						console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
						return;
	
					}
	
				}
	
				extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );
	
				info.update( count, mode, primcount );
	
			}
	
			//
	
			this.setMode = setMode;
			this.setIndex = setIndex;
			this.render = render;
			this.renderInstances = renderInstances;
	
		}
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function WebGLInfo( gl ) {
	
			var memory = {
				geometries: 0,
				textures: 0
			};
	
			var render = {
				frame: 0,
				calls: 0,
				triangles: 0,
				points: 0,
				lines: 0
			};
	
			function update( count, mode, instanceCount ) {
	
				instanceCount = instanceCount || 1;
	
				render.calls ++;
	
				switch ( mode ) {
	
					case 4:
						render.triangles += instanceCount * ( count / 3 );
						break;
	
					case 1:
						render.lines += instanceCount * ( count / 2 );
						break;
	
					case 3:
						render.lines += instanceCount * ( count - 1 );
						break;
	
					case 2:
						render.lines += instanceCount * count;
						break;
	
					case 0:
						render.points += instanceCount * count;
						break;
	
					default:
						console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
						break;
	
				}
	
			}
	
			function reset() {
	
				render.frame ++;
				render.calls = 0;
				render.triangles = 0;
				render.points = 0;
				render.lines = 0;
	
			}
	
			return {
				memory: memory,
				render: render,
				programs: null,
				autoReset: true,
				reset: reset,
				update: update
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function absNumericalSort( a, b ) {
	
			return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );
	
		}
	
		function WebGLMorphtargets( gl ) {
	
			var influencesList = {};
			var morphInfluences = new Float32Array( 8 );
	
			function update( object, geometry, material, program ) {
	
				var objectInfluences = object.morphTargetInfluences;
	
				// When object doesn't have morph target influences defined, we treat it as a 0-length array
				// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences
	
				var length = objectInfluences === undefined ? 0 : objectInfluences.length;
	
				var influences = influencesList[ geometry.id ];
	
				if ( influences === undefined ) {
	
					// initialise list
	
					influences = [];
	
					for ( var i = 0; i < length; i ++ ) {
	
						influences[ i ] = [ i, 0 ];
	
					}
	
					influencesList[ geometry.id ] = influences;
	
				}
	
				var morphTargets = material.morphTargets && geometry.morphAttributes.position;
				var morphNormals = material.morphNormals && geometry.morphAttributes.normal;
	
				// Remove current morphAttributes
	
				for ( var i = 0; i < length; i ++ ) {
	
					var influence = influences[ i ];
	
					if ( influence[ 1 ] !== 0 ) {
	
						if ( morphTargets ) { geometry.deleteAttribute( 'morphTarget' + i ); }
						if ( morphNormals ) { geometry.deleteAttribute( 'morphNormal' + i ); }
	
					}
	
				}
	
				// Collect influences
	
				for ( var i = 0; i < length; i ++ ) {
	
					var influence = influences[ i ];
	
					influence[ 0 ] = i;
					influence[ 1 ] = objectInfluences[ i ];
	
				}
	
				influences.sort( absNumericalSort );
	
				// Add morphAttributes
	
				var morphInfluencesSum = 0;
	
				for ( var i = 0; i < 8; i ++ ) {
	
					var influence = influences[ i ];
	
					if ( influence ) {
	
						var index = influence[ 0 ];
						var value = influence[ 1 ];
	
						if ( value ) {
	
							if ( morphTargets ) { geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] ); }
							if ( morphNormals ) { geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] ); }
	
							morphInfluences[ i ] = value;
							morphInfluencesSum += value;
							continue;
	
						}
	
					}
	
					morphInfluences[ i ] = 0;
	
				}
	
				// GLSL shader uses formula baseinfluence * base + sum(target * influence)
				// This allows us to switch between absolute morphs and relative morphs without changing shader code
				// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
				var morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
	
				program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
				program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );
	
			}
	
			return {
	
				update: update
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLObjects( gl, geometries, attributes, info ) {
	
			var updateMap = new WeakMap();
	
			function update( object ) {
	
				var frame = info.render.frame;
	
				var geometry = object.geometry;
				var buffergeometry = geometries.get( object, geometry );
	
				// Update once per frame
	
				if ( updateMap.get( buffergeometry ) !== frame ) {
	
					if ( geometry.isGeometry ) {
	
						buffergeometry.updateFromObject( object );
	
					}
	
					geometries.update( buffergeometry );
	
					updateMap.set( buffergeometry, frame );
	
				}
	
				if ( object.isInstancedMesh ) {
	
					attributes.update( object.instanceMatrix, 34962 );
	
				}
	
				return buffergeometry;
	
			}
	
			function dispose() {
	
				updateMap = new WeakMap();
	
			}
	
			return {
	
				update: update,
				dispose: dispose
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function CubeTexture( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {
	
			images = images !== undefined ? images : [];
			mapping = mapping !== undefined ? mapping : CubeReflectionMapping;
			format = format !== undefined ? format : RGBFormat;
	
			Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
	
			this.flipY = false;
	
		}
	
		CubeTexture.prototype = Object.create( Texture.prototype );
		CubeTexture.prototype.constructor = CubeTexture;
	
		CubeTexture.prototype.isCubeTexture = true;
	
		Object.defineProperty( CubeTexture.prototype, 'images', {
	
			get: function () {
	
				return this.image;
	
			},
	
			set: function ( value ) {
	
				this.image = value;
	
			}
	
		} );
	
		/**
		 * @author Takahiro https://github.com/takahirox
		 */
	
		function DataTexture2DArray( data, width, height, depth ) {
	
			Texture.call( this, null );
	
			this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };
	
			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;
	
			this.wrapR = ClampToEdgeWrapping;
	
			this.generateMipmaps = false;
			this.flipY = false;
	
			this.needsUpdate = true;
	
		}
	
		DataTexture2DArray.prototype = Object.create( Texture.prototype );
		DataTexture2DArray.prototype.constructor = DataTexture2DArray;
		DataTexture2DArray.prototype.isDataTexture2DArray = true;
	
		/**
		 * @author Artur Trzesiok
		 */
	
		function DataTexture3D( data, width, height, depth ) {
	
			// We're going to add .setXXX() methods for setting properties later.
			// Users can still set in DataTexture3D directly.
			//
			//	var texture = new THREE.DataTexture3D( data, width, height, depth );
			// 	texture.anisotropy = 16;
			//
			// See #14839
	
			Texture.call( this, null );
	
			this.image = { data: data || null, width: width || 1, height: height || 1, depth: depth || 1 };
	
			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;
	
			this.wrapR = ClampToEdgeWrapping;
	
			this.generateMipmaps = false;
			this.flipY = false;
	
			this.needsUpdate = true;
	
	
		}
	
		DataTexture3D.prototype = Object.create( Texture.prototype );
		DataTexture3D.prototype.constructor = DataTexture3D;
		DataTexture3D.prototype.isDataTexture3D = true;
	
		/**
		 * @author tschw
		 * @author Mugen87 / https://github.com/Mugen87
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * Uniforms of a program.
		 * Those form a tree structure with a special top-level container for the root,
		 * which you get by calling 'new WebGLUniforms( gl, program )'.
		 *
		 *
		 * Properties of inner nodes including the top-level container:
		 *
		 * .seq - array of nested uniforms
		 * .map - nested uniforms by name
		 *
		 *
		 * Methods of all nodes except the top-level container:
		 *
		 * .setValue( gl, value, [textures] )
		 *
		 * 		uploads a uniform value(s)
		 *  	the 'textures' parameter is needed for sampler uniforms
		 *
		 *
		 * Static methods of the top-level container (textures factorizations):
		 *
		 * .upload( gl, seq, values, textures )
		 *
		 * 		sets uniforms in 'seq' to 'values[id].value'
		 *
		 * .seqWithValue( seq, values ) : filteredSeq
		 *
		 * 		filters 'seq' entries with corresponding entry in values
		 *
		 *
		 * Methods of the top-level container (textures factorizations):
		 *
		 * .setValue( gl, name, value, textures )
		 *
		 * 		sets uniform with  name 'name' to 'value'
		 *
		 * .setOptional( gl, obj, prop )
		 *
		 * 		like .set for an optional property of the object
		 *
		 */
	
		var emptyTexture = new Texture();
		var emptyTexture2dArray = new DataTexture2DArray();
		var emptyTexture3d = new DataTexture3D();
		var emptyCubeTexture = new CubeTexture();
	
		// --- Utilities ---
	
		// Array Caches (provide typed arrays for temporary by size)
	
		var arrayCacheF32 = [];
		var arrayCacheI32 = [];
	
		// Float32Array caches used for uploading Matrix uniforms
	
		var mat4array = new Float32Array( 16 );
		var mat3array = new Float32Array( 9 );
		var mat2array = new Float32Array( 4 );
	
		// Flattening for arrays of vectors and matrices
	
		function flatten( array, nBlocks, blockSize ) {
	
			var firstElem = array[ 0 ];
	
			if ( firstElem <= 0 || firstElem > 0 ) { return array; }
			// unoptimized: ! isNaN( firstElem )
			// see http://jacksondunstan.com/articles/983
	
			var n = nBlocks * blockSize,
				r = arrayCacheF32[ n ];
	
			if ( r === undefined ) {
	
				r = new Float32Array( n );
				arrayCacheF32[ n ] = r;
	
			}
	
			if ( nBlocks !== 0 ) {
	
				firstElem.toArray( r, 0 );
	
				for ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {
	
					offset += blockSize;
					array[ i ].toArray( r, offset );
	
				}
	
			}
	
			return r;
	
		}
	
		function arraysEqual( a, b ) {
	
			if ( a.length !== b.length ) { return false; }
	
			for ( var i = 0, l = a.length; i < l; i ++ ) {
	
				if ( a[ i ] !== b[ i ] ) { return false; }
	
			}
	
			return true;
	
		}
	
		function copyArray( a, b ) {
	
			for ( var i = 0, l = b.length; i < l; i ++ ) {
	
				a[ i ] = b[ i ];
	
			}
	
		}
	
		// Texture unit allocation
	
		function allocTexUnits( textures, n ) {
	
			var r = arrayCacheI32[ n ];
	
			if ( r === undefined ) {
	
				r = new Int32Array( n );
				arrayCacheI32[ n ] = r;
	
			}
	
			for ( var i = 0; i !== n; ++ i )
				{ r[ i ] = textures.allocateTextureUnit(); }
	
			return r;
	
		}
	
		// --- Setters ---
	
		// Note: Defining these methods externally, because they come in a bunch
		// and this way their names minify.
	
		// Single scalar
	
		function setValueV1f( gl, v ) {
	
			var cache = this.cache;
	
			if ( cache[ 0 ] === v ) { return; }
	
			gl.uniform1f( this.addr, v );
	
			cache[ 0 ] = v;
	
		}
	
		// Single float vector (from flat array or THREE.VectorN)
	
		function setValueV2f( gl, v ) {
	
			var cache = this.cache;
	
			if ( v.x !== undefined ) {
	
				if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {
	
					gl.uniform2f( this.addr, v.x, v.y );
	
					cache[ 0 ] = v.x;
					cache[ 1 ] = v.y;
	
				}
	
			} else {
	
				if ( arraysEqual( cache, v ) ) { return; }
	
				gl.uniform2fv( this.addr, v );
	
				copyArray( cache, v );
	
			}
	
		}
	
		function setValueV3f( gl, v ) {
	
			var cache = this.cache;
	
			if ( v.x !== undefined ) {
	
				if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {
	
					gl.uniform3f( this.addr, v.x, v.y, v.z );
	
					cache[ 0 ] = v.x;
					cache[ 1 ] = v.y;
					cache[ 2 ] = v.z;
	
				}
	
			} else if ( v.r !== undefined ) {
	
				if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {
	
					gl.uniform3f( this.addr, v.r, v.g, v.b );
	
					cache[ 0 ] = v.r;
					cache[ 1 ] = v.g;
					cache[ 2 ] = v.b;
	
				}
	
			} else {
	
				if ( arraysEqual( cache, v ) ) { return; }
	
				gl.uniform3fv( this.addr, v );
	
				copyArray( cache, v );
	
			}
	
		}
	
		function setValueV4f( gl, v ) {
	
			var cache = this.cache;
	
			if ( v.x !== undefined ) {
	
				if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {
	
					gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );
	
					cache[ 0 ] = v.x;
					cache[ 1 ] = v.y;
					cache[ 2 ] = v.z;
					cache[ 3 ] = v.w;
	
				}
	
			} else {
	
				if ( arraysEqual( cache, v ) ) { return; }
	
				gl.uniform4fv( this.addr, v );
	
				copyArray( cache, v );
	
			}
	
		}
	
		// Single matrix (from flat array or MatrixN)
	
		function setValueM2( gl, v ) {
	
			var cache = this.cache;
			var elements = v.elements;
	
			if ( elements === undefined ) {
	
				if ( arraysEqual( cache, v ) ) { return; }
	
				gl.uniformMatrix2fv( this.addr, false, v );
	
				copyArray( cache, v );
	
			} else {
	
				if ( arraysEqual( cache, elements ) ) { return; }
	
				mat2array.set( elements );
	
				gl.uniformMatrix2fv( this.addr, false, mat2array );
	
				copyArray( cache, elements );
	
			}
	
		}
	
		function setValueM3( gl, v ) {
	
			var cache = this.cache;
			var elements = v.elements;
	
			if ( elements === undefined ) {
	
				if ( arraysEqual( cache, v ) ) { return; }
	
				gl.uniformMatrix3fv( this.addr, false, v );
	
				copyArray( cache, v );
	
			} else {
	
				if ( arraysEqual( cache, elements ) ) { return; }
	
				mat3array.set( elements );
	
				gl.uniformMatrix3fv( this.addr, false, mat3array );
	
				copyArray( cache, elements );
	
			}
	
		}
	
		function setValueM4( gl, v ) {
	
			var cache = this.cache;
			var elements = v.elements;
	
			if ( elements === undefined ) {
	
				if ( arraysEqual( cache, v ) ) { return; }
	
				gl.uniformMatrix4fv( this.addr, false, v );
	
				copyArray( cache, v );
	
			} else {
	
				if ( arraysEqual( cache, elements ) ) { return; }
	
				mat4array.set( elements );
	
				gl.uniformMatrix4fv( this.addr, false, mat4array );
	
				copyArray( cache, elements );
	
			}
	
		}
	
		// Single texture (2D / Cube)
	
		function setValueT1( gl, v, textures ) {
	
			var cache = this.cache;
			var unit = textures.allocateTextureUnit();
	
			if ( cache[ 0 ] !== unit ) {
	
				gl.uniform1i( this.addr, unit );
				cache[ 0 ] = unit;
	
			}
	
			textures.safeSetTexture2D( v || emptyTexture, unit );
	
		}
	
		function setValueT2DArray1( gl, v, textures ) {
	
			var cache = this.cache;
			var unit = textures.allocateTextureUnit();
	
			if ( cache[ 0 ] !== unit ) {
	
				gl.uniform1i( this.addr, unit );
				cache[ 0 ] = unit;
	
			}
	
			textures.setTexture2DArray( v || emptyTexture2dArray, unit );
	
		}
	
		function setValueT3D1( gl, v, textures ) {
	
			var cache = this.cache;
			var unit = textures.allocateTextureUnit();
	
			if ( cache[ 0 ] !== unit ) {
	
				gl.uniform1i( this.addr, unit );
				cache[ 0 ] = unit;
	
			}
	
			textures.setTexture3D( v || emptyTexture3d, unit );
	
		}
	
		function setValueT6( gl, v, textures ) {
	
			var cache = this.cache;
			var unit = textures.allocateTextureUnit();
	
			if ( cache[ 0 ] !== unit ) {
	
				gl.uniform1i( this.addr, unit );
				cache[ 0 ] = unit;
	
			}
	
			textures.safeSetTextureCube( v || emptyCubeTexture, unit );
	
		}
	
		// Integer / Boolean vectors or arrays thereof (always flat arrays)
	
		function setValueV1i( gl, v ) {
	
			var cache = this.cache;
	
			if ( cache[ 0 ] === v ) { return; }
	
			gl.uniform1i( this.addr, v );
	
			cache[ 0 ] = v;
	
		}
	
		function setValueV2i( gl, v ) {
	
			var cache = this.cache;
	
			if ( arraysEqual( cache, v ) ) { return; }
	
			gl.uniform2iv( this.addr, v );
	
			copyArray( cache, v );
	
		}
	
		function setValueV3i( gl, v ) {
	
			var cache = this.cache;
	
			if ( arraysEqual( cache, v ) ) { return; }
	
			gl.uniform3iv( this.addr, v );
	
			copyArray( cache, v );
	
		}
	
		function setValueV4i( gl, v ) {
	
			var cache = this.cache;
	
			if ( arraysEqual( cache, v ) ) { return; }
	
			gl.uniform4iv( this.addr, v );
	
			copyArray( cache, v );
	
		}
	
		// uint
	
		function setValueV1ui( gl, v ) {
	
			var cache = this.cache;
	
			if ( cache[ 0 ] === v ) { return; }
	
			gl.uniform1ui( this.addr, v );
	
			cache[ 0 ] = v;
	
		}
	
		// Helper to pick the right setter for the singular case
	
		function getSingularSetter( type ) {
	
			switch ( type ) {
	
				case 0x1406: return setValueV1f; // FLOAT
				case 0x8b50: return setValueV2f; // _VEC2
				case 0x8b51: return setValueV3f; // _VEC3
				case 0x8b52: return setValueV4f; // _VEC4
	
				case 0x8b5a: return setValueM2; // _MAT2
				case 0x8b5b: return setValueM3; // _MAT3
				case 0x8b5c: return setValueM4; // _MAT4
	
				case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
				case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
				case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
				case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4
	
				case 0x1405: return setValueV1ui; // UINT
	
				case 0x8b5e: // SAMPLER_2D
				case 0x8d66: // SAMPLER_EXTERNAL_OES
				case 0x8dca: // INT_SAMPLER_2D
				case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
				case 0x8b62: // SAMPLER_2D_SHADOW
					return setValueT1;
	
				case 0x8b5f: // SAMPLER_3D
				case 0x8dcb: // INT_SAMPLER_3D
				case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
					return setValueT3D1;
	
				case 0x8b60: // SAMPLER_CUBE
				case 0x8dcc: // INT_SAMPLER_CUBE
				case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
				case 0x8dc5: // SAMPLER_CUBE_SHADOW
					return setValueT6;
	
				case 0x8dc1: // SAMPLER_2D_ARRAY
				case 0x8dcf: // INT_SAMPLER_2D_ARRAY
				case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
				case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
					return setValueT2DArray1;
	
			}
	
		}
	
		// Array of scalars
		function setValueV1fArray( gl, v ) {
	
			gl.uniform1fv( this.addr, v );
	
		}
	
		// Integer / Boolean vectors or arrays thereof (always flat arrays)
		function setValueV1iArray( gl, v ) {
	
			gl.uniform1iv( this.addr, v );
	
		}
	
		function setValueV2iArray( gl, v ) {
	
			gl.uniform2iv( this.addr, v );
	
		}
	
		function setValueV3iArray( gl, v ) {
	
			gl.uniform3iv( this.addr, v );
	
		}
	
		function setValueV4iArray( gl, v ) {
	
			gl.uniform4iv( this.addr, v );
	
		}
	
	
		// Array of vectors (flat or from THREE classes)
	
		function setValueV2fArray( gl, v ) {
	
			var data = flatten( v, this.size, 2 );
	
			gl.uniform2fv( this.addr, data );
	
		}
	
		function setValueV3fArray( gl, v ) {
	
			var data = flatten( v, this.size, 3 );
	
			gl.uniform3fv( this.addr, data );
	
		}
	
		function setValueV4fArray( gl, v ) {
	
			var data = flatten( v, this.size, 4 );
	
			gl.uniform4fv( this.addr, data );
	
		}
	
		// Array of matrices (flat or from THREE clases)
	
		function setValueM2Array( gl, v ) {
	
			var data = flatten( v, this.size, 4 );
	
			gl.uniformMatrix2fv( this.addr, false, data );
	
		}
	
		function setValueM3Array( gl, v ) {
	
			var data = flatten( v, this.size, 9 );
	
			gl.uniformMatrix3fv( this.addr, false, data );
	
		}
	
		function setValueM4Array( gl, v ) {
	
			var data = flatten( v, this.size, 16 );
	
			gl.uniformMatrix4fv( this.addr, false, data );
	
		}
	
		// Array of textures (2D / Cube)
	
		function setValueT1Array( gl, v, textures ) {
	
			var n = v.length;
	
			var units = allocTexUnits( textures, n );
	
			gl.uniform1iv( this.addr, units );
	
			for ( var i = 0; i !== n; ++ i ) {
	
				textures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );
	
			}
	
		}
	
		function setValueT6Array( gl, v, textures ) {
	
			var n = v.length;
	
			var units = allocTexUnits( textures, n );
	
			gl.uniform1iv( this.addr, units );
	
			for ( var i = 0; i !== n; ++ i ) {
	
				textures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );
	
			}
	
		}
	
		// Helper to pick the right setter for a pure (bottom-level) array
	
		function getPureArraySetter( type ) {
	
			switch ( type ) {
	
				case 0x1406: return setValueV1fArray; // FLOAT
				case 0x8b50: return setValueV2fArray; // _VEC2
				case 0x8b51: return setValueV3fArray; // _VEC3
				case 0x8b52: return setValueV4fArray; // _VEC4
	
				case 0x8b5a: return setValueM2Array; // _MAT2
				case 0x8b5b: return setValueM3Array; // _MAT3
				case 0x8b5c: return setValueM4Array; // _MAT4
	
				case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
				case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
				case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
				case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4
	
				case 0x8b5e: // SAMPLER_2D
				case 0x8d66: // SAMPLER_EXTERNAL_OES
				case 0x8dca: // INT_SAMPLER_2D
				case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
				case 0x8b62: // SAMPLER_2D_SHADOW
					return setValueT1Array;
	
				case 0x8b60: // SAMPLER_CUBE
				case 0x8dcc: // INT_SAMPLER_CUBE
				case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
				case 0x8dc5: // SAMPLER_CUBE_SHADOW
					return setValueT6Array;
	
			}
	
		}
	
		// --- Uniform Classes ---
	
		function SingleUniform( id, activeInfo, addr ) {
	
			this.id = id;
			this.addr = addr;
			this.cache = [];
			this.setValue = getSingularSetter( activeInfo.type );
	
			// this.path = activeInfo.name; // DEBUG
	
		}
	
		function PureArrayUniform( id, activeInfo, addr ) {
	
			this.id = id;
			this.addr = addr;
			this.cache = [];
			this.size = activeInfo.size;
			this.setValue = getPureArraySetter( activeInfo.type );
	
			// this.path = activeInfo.name; // DEBUG
	
		}
	
		PureArrayUniform.prototype.updateCache = function ( data ) {
	
			var cache = this.cache;
	
			if ( data instanceof Float32Array && cache.length !== data.length ) {
	
				this.cache = new Float32Array( data.length );
	
			}
	
			copyArray( cache, data );
	
		};
	
		function StructuredUniform( id ) {
	
			this.id = id;
	
			this.seq = [];
			this.map = {};
	
		}
	
		StructuredUniform.prototype.setValue = function ( gl, value, textures ) {
	
			var seq = this.seq;
	
			for ( var i = 0, n = seq.length; i !== n; ++ i ) {
	
				var u = seq[ i ];
				u.setValue( gl, value[ u.id ], textures );
	
			}
	
		};
	
		// --- Top-level ---
	
		// Parser - builds up the property tree from the path strings
	
		var RePathPart = /([\w\d_]+)(\])?(\[|\.)?/g;
	
		// extracts
		// 	- the identifier (member name or array index)
		//  - followed by an optional right bracket (found when array index)
		//  - followed by an optional left bracket or dot (type of subscript)
		//
		// Note: These portions can be read in a non-overlapping fashion and
		// allow straightforward parsing of the hierarchy that WebGL encodes
		// in the uniform names.
	
		function addUniform( container, uniformObject ) {
	
			container.seq.push( uniformObject );
			container.map[ uniformObject.id ] = uniformObject;
	
		}
	
		function parseUniform( activeInfo, addr, container ) {
	
			var path = activeInfo.name,
				pathLength = path.length;
	
			// reset RegExp object, because of the early exit of a previous run
			RePathPart.lastIndex = 0;
	
			while ( true ) {
	
				var match = RePathPart.exec( path ),
					matchEnd = RePathPart.lastIndex,
	
					id = match[ 1 ],
					idIsIndex = match[ 2 ] === ']',
					subscript = match[ 3 ];
	
				if ( idIsIndex ) { id = id | 0; } // convert to integer
	
				if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {
	
					// bare name or "pure" bottom-level array "[0]" suffix
	
					addUniform( container, subscript === undefined ?
						new SingleUniform( id, activeInfo, addr ) :
						new PureArrayUniform( id, activeInfo, addr ) );
	
					break;
	
				} else {
	
					// step into inner node / create it in case it doesn't exist
	
					var map = container.map, next = map[ id ];
	
					if ( next === undefined ) {
	
						next = new StructuredUniform( id );
						addUniform( container, next );
	
					}
	
					container = next;
	
				}
	
			}
	
		}
	
		// Root Container
	
		function WebGLUniforms( gl, program ) {
	
			this.seq = [];
			this.map = {};
	
			var n = gl.getProgramParameter( program, 35718 );
	
			for ( var i = 0; i < n; ++ i ) {
	
				var info = gl.getActiveUniform( program, i ),
					addr = gl.getUniformLocation( program, info.name );
	
				parseUniform( info, addr, this );
	
			}
	
		}
	
		WebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {
	
			var u = this.map[ name ];
	
			if ( u !== undefined ) { u.setValue( gl, value, textures ); }
	
		};
	
		WebGLUniforms.prototype.setOptional = function ( gl, object, name ) {
	
			var v = object[ name ];
	
			if ( v !== undefined ) { this.setValue( gl, name, v ); }
	
		};
	
	
		// Static interface
	
		WebGLUniforms.upload = function ( gl, seq, values, textures ) {
	
			for ( var i = 0, n = seq.length; i !== n; ++ i ) {
	
				var u = seq[ i ],
					v = values[ u.id ];
	
				if ( v.needsUpdate !== false ) {
	
					// note: always updating when .needsUpdate is undefined
					u.setValue( gl, v.value, textures );
	
				}
	
			}
	
		};
	
		WebGLUniforms.seqWithValue = function ( seq, values ) {
	
			var r = [];
	
			for ( var i = 0, n = seq.length; i !== n; ++ i ) {
	
				var u = seq[ i ];
				if ( u.id in values ) { r.push( u ); }
	
			}
	
			return r;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLShader( gl, type, string ) {
	
			var shader = gl.createShader( type );
	
			gl.shaderSource( shader, string );
			gl.compileShader( shader );
	
			return shader;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var programIdCount = 0;
	
		function addLineNumbers( string ) {
	
			var lines = string.split( '\n' );
	
			for ( var i = 0; i < lines.length; i ++ ) {
	
				lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];
	
			}
	
			return lines.join( '\n' );
	
		}
	
		function getEncodingComponents( encoding ) {
	
			switch ( encoding ) {
	
				case LinearEncoding:
					return [ 'Linear', '( value )' ];
				case sRGBEncoding:
					return [ 'sRGB', '( value )' ];
				case RGBEEncoding:
					return [ 'RGBE', '( value )' ];
				case RGBM7Encoding:
					return [ 'RGBM', '( value, 7.0 )' ];
				case RGBM16Encoding:
					return [ 'RGBM', '( value, 16.0 )' ];
				case RGBDEncoding:
					return [ 'RGBD', '( value, 256.0 )' ];
				case GammaEncoding:
					return [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];
				case LogLuvEncoding:
					return [ 'LogLuv', '( value )' ];
				default:
					throw new Error( 'unsupported encoding: ' + encoding );
	
			}
	
		}
	
		function getShaderErrors( gl, shader, type ) {
	
			var status = gl.getShaderParameter( shader, 35713 );
			var log = gl.getShaderInfoLog( shader ).trim();
	
			if ( status && log === '' ) { return ''; }
	
			// --enable-privileged-webgl-extension
			// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
	
			var source = gl.getShaderSource( shader );
	
			return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\n' + log + addLineNumbers( source );
	
		}
	
		function getTexelDecodingFunction( functionName, encoding ) {
	
			var components = getEncodingComponents( encoding );
			return 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';
	
		}
	
		function getTexelEncodingFunction( functionName, encoding ) {
	
			var components = getEncodingComponents( encoding );
			return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';
	
		}
	
		function getToneMappingFunction( functionName, toneMapping ) {
	
			var toneMappingName;
	
			switch ( toneMapping ) {
	
				case LinearToneMapping:
					toneMappingName = 'Linear';
					break;
	
				case ReinhardToneMapping:
					toneMappingName = 'Reinhard';
					break;
	
				case Uncharted2ToneMapping:
					toneMappingName = 'Uncharted2';
					break;
	
				case CineonToneMapping:
					toneMappingName = 'OptimizedCineon';
					break;
	
				case ACESFilmicToneMapping:
					toneMappingName = 'ACESFilmic';
					break;
	
				default:
					throw new Error( 'unsupported toneMapping: ' + toneMapping );
	
			}
	
			return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';
	
		}
	
		function generateExtensions( parameters ) {
	
			var chunks = [
				( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
				( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
				( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
				( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
			];
	
			return chunks.filter( filterEmptyLine ).join( '\n' );
	
		}
	
		function generateDefines( defines ) {
	
			var chunks = [];
	
			for ( var name in defines ) {
	
				var value = defines[ name ];
	
				if ( value === false ) { continue; }
	
				chunks.push( '#define ' + name + ' ' + value );
	
			}
	
			return chunks.join( '\n' );
	
		}
	
		function fetchAttributeLocations( gl, program ) {
	
			var attributes = {};
	
			var n = gl.getProgramParameter( program, 35721 );
	
			for ( var i = 0; i < n; i ++ ) {
	
				var info = gl.getActiveAttrib( program, i );
				var name = info.name;
	
				// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );
	
				attributes[ name ] = gl.getAttribLocation( program, name );
	
			}
	
			return attributes;
	
		}
	
		function filterEmptyLine( string ) {
	
			return string !== '';
	
		}
	
		function replaceLightNums( string, parameters ) {
	
			return string
				.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
				.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
				.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
				.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
				.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
				.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
				.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
				.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );
	
		}
	
		function replaceClippingPlaneNums( string, parameters ) {
	
			return string
				.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
				.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );
	
		}
	
		// Resolve Includes
	
		var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
	
		function resolveIncludes( string ) {
	
			return string.replace( includePattern, includeReplacer );
	
		}
	
		function includeReplacer( match, include ) {
	
			var string = ShaderChunk[ include ];
	
			if ( string === undefined ) {
	
				throw new Error( 'Can not resolve #include <' + include + '>' );
	
			}
	
			return resolveIncludes( string );
	
		}
	
		// Unroll Loops
	
		var loopPattern = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;
	
		function unrollLoops( string ) {
	
			return string.replace( loopPattern, loopReplacer );
	
		}
	
		function loopReplacer( match, start, end, snippet ) {
	
			var string = '';
	
			for ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {
	
				string += snippet
					.replace( /\[ i \]/g, '[ ' + i + ' ]' )
					.replace( /UNROLLED_LOOP_INDEX/g, i );
	
			}
	
			return string;
	
		}
	
		//
	
		function generatePrecision( parameters ) {
	
			var precisionstring = "precision " + parameters.precision + " float;\nprecision " + parameters.precision + " int;";
	
			if ( parameters.precision === "highp" ) {
	
				precisionstring += "\n#define HIGH_PRECISION";
	
			} else if ( parameters.precision === "mediump" ) {
	
				precisionstring += "\n#define MEDIUM_PRECISION";
	
			} else if ( parameters.precision === "lowp" ) {
	
				precisionstring += "\n#define LOW_PRECISION";
	
			}
	
			return precisionstring;
	
		}
	
		function generateShadowMapTypeDefine( parameters ) {
	
			var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
	
			if ( parameters.shadowMapType === PCFShadowMap ) {
	
				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
	
			} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {
	
				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
	
			} else if ( parameters.shadowMapType === VSMShadowMap ) {
	
				shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';
	
			}
	
			return shadowMapTypeDefine;
	
		}
	
		function generateEnvMapTypeDefine( parameters ) {
	
			var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
	
			if ( parameters.envMap ) {
	
				switch ( parameters.envMapMode ) {
	
					case CubeReflectionMapping:
					case CubeRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
						break;
	
					case CubeUVReflectionMapping:
					case CubeUVRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
						break;
	
					case EquirectangularReflectionMapping:
					case EquirectangularRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
						break;
	
					case SphericalReflectionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
						break;
	
				}
	
			}
	
			return envMapTypeDefine;
	
		}
	
		function generateEnvMapModeDefine( parameters ) {
	
			var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
	
			if ( parameters.envMap ) {
	
				switch ( parameters.envMapMode ) {
	
					case CubeRefractionMapping:
					case EquirectangularRefractionMapping:
						envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
						break;
	
				}
	
			}
	
			return envMapModeDefine;
	
		}
	
		function generateEnvMapBlendingDefine( parameters ) {
	
			var envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';
	
			if ( parameters.envMap ) {
	
				switch ( parameters.combine ) {
	
					case MultiplyOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
						break;
	
					case MixOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
						break;
	
					case AddOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
						break;
	
				}
	
			}
	
			return envMapBlendingDefine;
	
		}
	
		function WebGLProgram( renderer, cacheKey, parameters ) {
	
			var gl = renderer.getContext();
	
			var defines = parameters.defines;
	
			var vertexShader = parameters.vertexShader;
			var fragmentShader = parameters.fragmentShader;
			var shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
			var envMapTypeDefine = generateEnvMapTypeDefine( parameters );
			var envMapModeDefine = generateEnvMapModeDefine( parameters );
			var envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
	
	
			var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;
	
			var customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );
	
			var customDefines = generateDefines( defines );
	
			var program = gl.createProgram();
	
			var prefixVertex, prefixFragment;
	
			if ( parameters.isRawShaderMaterial ) {
	
				prefixVertex = [
	
					customDefines
	
				].filter( filterEmptyLine ).join( '\n' );
	
				if ( prefixVertex.length > 0 ) {
	
					prefixVertex += '\n';
	
				}
	
				prefixFragment = [
	
					customExtensions,
					customDefines
	
				].filter( filterEmptyLine ).join( '\n' );
	
				if ( prefixFragment.length > 0 ) {
	
					prefixFragment += '\n';
	
				}
	
			} else {
	
				prefixVertex = [
	
					generatePrecision( parameters ),
	
					'#define SHADER_NAME ' + parameters.shaderName,
	
					customDefines,
	
					parameters.instancing ? '#define USE_INSTANCING' : '',
					parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
	
					'#define GAMMA_FACTOR ' + gammaFactorDefine,
	
					'#define MAX_BONES ' + parameters.maxBones,
					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',
	
					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
					( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
	
					parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
					parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
	
					parameters.vertexTangents ? '#define USE_TANGENT' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',
					parameters.vertexUvs ? '#define USE_UV' : '',
					parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
	
					parameters.flatShading ? '#define FLAT_SHADED' : '',
	
					parameters.skinning ? '#define USE_SKINNING' : '',
					parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
	
					parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
					parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',
	
					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
	
					parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
	
					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
	
					'uniform mat4 modelMatrix;',
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform mat4 viewMatrix;',
					'uniform mat3 normalMatrix;',
					'uniform vec3 cameraPosition;',
					'uniform bool isOrthographic;',
	
					'#ifdef USE_INSTANCING',
	
					' attribute mat4 instanceMatrix;',
	
					'#endif',
	
					'attribute vec3 position;',
					'attribute vec3 normal;',
					'attribute vec2 uv;',
	
					'#ifdef USE_TANGENT',
	
					'	attribute vec4 tangent;',
	
					'#endif',
	
					'#ifdef USE_COLOR',
	
					'	attribute vec3 color;',
	
					'#endif',
	
					'#ifdef USE_MORPHTARGETS',
	
					'	attribute vec3 morphTarget0;',
					'	attribute vec3 morphTarget1;',
					'	attribute vec3 morphTarget2;',
					'	attribute vec3 morphTarget3;',
	
					'	#ifdef USE_MORPHNORMALS',
	
					'		attribute vec3 morphNormal0;',
					'		attribute vec3 morphNormal1;',
					'		attribute vec3 morphNormal2;',
					'		attribute vec3 morphNormal3;',
	
					'	#else',
	
					'		attribute vec3 morphTarget4;',
					'		attribute vec3 morphTarget5;',
					'		attribute vec3 morphTarget6;',
					'		attribute vec3 morphTarget7;',
	
					'	#endif',
	
					'#endif',
	
					'#ifdef USE_SKINNING',
	
					'	attribute vec4 skinIndex;',
					'	attribute vec4 skinWeight;',
	
					'#endif',
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
				prefixFragment = [
	
					customExtensions,
	
					generatePrecision( parameters ),
	
					'#define SHADER_NAME ' + parameters.shaderName,
	
					customDefines,
	
					parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + ( parameters.alphaTest % 1 ? '' : '.0' ) : '', // add '.0' if integer
	
					'#define GAMMA_FACTOR ' + gammaFactorDefine,
	
					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',
	
					parameters.map ? '#define USE_MAP' : '',
					parameters.matcap ? '#define USE_MATCAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapTypeDefine : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.envMap ? '#define ' + envMapBlendingDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',
					( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',
					parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
					parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
	
					parameters.sheen ? '#define USE_SHEEN' : '',
	
					parameters.vertexTangents ? '#define USE_TANGENT' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',
					parameters.vertexUvs ? '#define USE_UV' : '',
					parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
	
					parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',
	
					parameters.flatShading ? '#define FLAT_SHADED' : '',
	
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',
	
					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
	
					parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
	
					parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
	
					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
	
					( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',
	
					'uniform mat4 viewMatrix;',
					'uniform vec3 cameraPosition;',
					'uniform bool isOrthographic;',
	
					( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
					( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
					( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',
	
					parameters.dithering ? '#define DITHERING' : '',
	
					( parameters.outputEncoding || parameters.mapEncoding || parameters.matcapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding || parameters.lightMapEncoding ) ?
						ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below
					parameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',
					parameters.matcapEncoding ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',
					parameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',
					parameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',
					parameters.lightMapEncoding ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',
					parameters.outputEncoding ? getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ) : '',
	
					parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
			}
	
			vertexShader = resolveIncludes( vertexShader );
			vertexShader = replaceLightNums( vertexShader, parameters );
			vertexShader = replaceClippingPlaneNums( vertexShader, parameters );
	
			fragmentShader = resolveIncludes( fragmentShader );
			fragmentShader = replaceLightNums( fragmentShader, parameters );
			fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );
	
			vertexShader = unrollLoops( vertexShader );
			fragmentShader = unrollLoops( fragmentShader );
	
			if ( parameters.isWebGL2 && ! parameters.isRawShaderMaterial ) {
	
				var isGLSL3ShaderMaterial = false;
	
				var versionRegex = /^\s*#version\s+300\s+es\s*\n/;
	
				if ( parameters.isShaderMaterial &&
					vertexShader.match( versionRegex ) !== null &&
					fragmentShader.match( versionRegex ) !== null ) {
	
					isGLSL3ShaderMaterial = true;
	
					vertexShader = vertexShader.replace( versionRegex, '' );
					fragmentShader = fragmentShader.replace( versionRegex, '' );
	
				}
	
				// GLSL 3.0 conversion
	
				prefixVertex = [
					'#version 300 es\n',
					'#define attribute in',
					'#define varying out',
					'#define texture2D texture'
				].join( '\n' ) + '\n' + prefixVertex;
	
				prefixFragment = [
					'#version 300 es\n',
					'#define varying in',
					isGLSL3ShaderMaterial ? '' : 'out highp vec4 pc_fragColor;',
					isGLSL3ShaderMaterial ? '' : '#define gl_FragColor pc_fragColor',
					'#define gl_FragDepthEXT gl_FragDepth',
					'#define texture2D texture',
					'#define textureCube texture',
					'#define texture2DProj textureProj',
					'#define texture2DLodEXT textureLod',
					'#define texture2DProjLodEXT textureProjLod',
					'#define textureCubeLodEXT textureLod',
					'#define texture2DGradEXT textureGrad',
					'#define texture2DProjGradEXT textureProjGrad',
					'#define textureCubeGradEXT textureGrad'
				].join( '\n' ) + '\n' + prefixFragment;
	
			}
	
			var vertexGlsl = prefixVertex + vertexShader;
			var fragmentGlsl = prefixFragment + fragmentShader;
	
			// console.log( '*VERTEX*', vertexGlsl );
			// console.log( '*FRAGMENT*', fragmentGlsl );
	
			var glVertexShader = WebGLShader( gl, 35633, vertexGlsl );
			var glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );
	
			gl.attachShader( program, glVertexShader );
			gl.attachShader( program, glFragmentShader );
	
			// Force a particular attribute to index 0.
	
			if ( parameters.index0AttributeName !== undefined ) {
	
				gl.bindAttribLocation( program, 0, parameters.index0AttributeName );
	
			} else if ( parameters.morphTargets === true ) {
	
				// programs with morphTargets displace position out of attribute 0
				gl.bindAttribLocation( program, 0, 'position' );
	
			}
	
			gl.linkProgram( program );
	
			// check for link errors
			if ( renderer.debug.checkShaderErrors ) {
	
				var programLog = gl.getProgramInfoLog( program ).trim();
				var vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
				var fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();
	
				var runnable = true;
				var haveDiagnostics = true;
	
				if ( gl.getProgramParameter( program, 35714 ) === false ) {
	
					runnable = false;
	
					var vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
					var fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );
	
					console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter( program, 35715 ), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors );
	
				} else if ( programLog !== '' ) {
	
					console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );
	
				} else if ( vertexLog === '' || fragmentLog === '' ) {
	
					haveDiagnostics = false;
	
				}
	
				if ( haveDiagnostics ) {
	
					this.diagnostics = {
	
						runnable: runnable,
	
						programLog: programLog,
	
						vertexShader: {
	
							log: vertexLog,
							prefix: prefixVertex
	
						},
	
						fragmentShader: {
	
							log: fragmentLog,
							prefix: prefixFragment
	
						}
	
					};
	
				}
	
			}
	
			// clean up
	
			gl.detachShader( program, glVertexShader );
			gl.detachShader( program, glFragmentShader );
	
			gl.deleteShader( glVertexShader );
			gl.deleteShader( glFragmentShader );
	
			// set up caching for uniform locations
	
			var cachedUniforms;
	
			this.getUniforms = function () {
	
				if ( cachedUniforms === undefined ) {
	
					cachedUniforms = new WebGLUniforms( gl, program );
	
				}
	
				return cachedUniforms;
	
			};
	
			// set up caching for attribute locations
	
			var cachedAttributes;
	
			this.getAttributes = function () {
	
				if ( cachedAttributes === undefined ) {
	
					cachedAttributes = fetchAttributeLocations( gl, program );
	
				}
	
				return cachedAttributes;
	
			};
	
			// free resource
	
			this.destroy = function () {
	
				gl.deleteProgram( program );
				this.program = undefined;
	
			};
	
			//
	
			this.name = parameters.shaderName;
			this.id = programIdCount ++;
			this.cacheKey = cacheKey;
			this.usedTimes = 1;
			this.program = program;
			this.vertexShader = glVertexShader;
			this.fragmentShader = glFragmentShader;
	
			return this;
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLPrograms( renderer, extensions, capabilities ) {
	
			var programs = [];
	
			var isWebGL2 = capabilities.isWebGL2;
			var logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
			var floatVertexTextures = capabilities.floatVertexTextures;
			var precision = capabilities.precision;
			var maxVertexUniforms = capabilities.maxVertexUniforms;
			var vertexTextures = capabilities.vertexTextures;
	
			var shaderIDs = {
				MeshDepthMaterial: 'depth',
				MeshDistanceMaterial: 'distanceRGBA',
				MeshNormalMaterial: 'normal',
				MeshBasicMaterial: 'basic',
				MeshLambertMaterial: 'lambert',
				MeshPhongMaterial: 'phong',
				MeshToonMaterial: 'toon',
				MeshStandardMaterial: 'physical',
				MeshPhysicalMaterial: 'physical',
				MeshMatcapMaterial: 'matcap',
				LineBasicMaterial: 'basic',
				LineDashedMaterial: 'dashed',
				PointsMaterial: 'points',
				ShadowMaterial: 'shadow',
				SpriteMaterial: 'sprite'
			};
	
			var parameterNames = [
				"precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing",
				"map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV",
				"lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoatNormalMap", "displacementMap", "specularMap",
				"roughnessMap", "metalnessMap", "gradientMap",
				"alphaMap", "combine", "vertexColors", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2",
				"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
				"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
				"maxMorphTargets", "maxMorphNormals", "premultipliedAlpha",
				"numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights",
				"numDirLightShadows", "numPointLightShadows", "numSpotLightShadows",
				"shadowMapEnabled", "shadowMapType", "toneMapping", 'physicallyCorrectLights',
				"alphaTest", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering",
				"sheen"
			];
	
			function getShaderObject( material, shaderID ) {
	
				var shaderobject;
	
				if ( shaderID ) {
	
					var shader = ShaderLib[ shaderID ];
	
					shaderobject = {
						name: material.type,
						uniforms: UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};
	
				} else {
	
					shaderobject = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};
	
				}
	
				return shaderobject;
	
			}
	
			function allocateBones( object ) {
	
				var skeleton = object.skeleton;
				var bones = skeleton.bones;
	
				if ( floatVertexTextures ) {
	
					return 1024;
	
				} else {
	
					// default for when object is not specified
					// ( for example when prebuilding shader to be used with multiple objects )
					//
					//  - leave some extra space for other uniforms
					//  - limit here is ANGLE's 254 max uniform vectors
					//    (up to 54 should be safe)
	
					var nVertexUniforms = maxVertexUniforms;
					var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );
	
					var maxBones = Math.min( nVertexMatrices, bones.length );
	
					if ( maxBones < bones.length ) {
	
						console.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );
						return 0;
	
					}
	
					return maxBones;
	
				}
	
			}
	
			function getTextureEncodingFromMap( map ) {
	
				var encoding;
	
				if ( ! map ) {
	
					encoding = LinearEncoding;
	
				} else if ( map.isTexture ) {
	
					encoding = map.encoding;
	
				} else if ( map.isWebGLRenderTarget ) {
	
					console.warn( "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead." );
					encoding = map.texture.encoding;
	
				}
	
				return encoding;
	
			}
	
			this.getParameters = function ( material, lights, shadows, scene, nClipPlanes, nClipIntersection, object ) {
	
				var fog = scene.fog;
				var environment = material.isMeshStandardMaterial ? scene.environment : null;
	
				var envMap = material.envMap || environment;
	
				var shaderID = shaderIDs[ material.type ];
	
				// heuristics to create shader parameters according to lights in the scene
				// (not to blow over maxLights budget)
	
				var maxBones = object.isSkinnedMesh ? allocateBones( object ) : 0;
	
				if ( material.precision !== null ) {
	
					precision = capabilities.getMaxPrecision( material.precision );
	
					if ( precision !== material.precision ) {
	
						console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );
	
					}
	
				}
	
				var shaderobject = getShaderObject( material, shaderID );
				material.onBeforeCompile( shaderobject, renderer );
	
				var currentRenderTarget = renderer.getRenderTarget();
	
				var parameters = {
	
					isWebGL2: isWebGL2,
	
					shaderID: shaderID,
					shaderName: shaderobject.name,
	
					uniforms: shaderobject.uniforms,
					vertexShader: shaderobject.vertexShader,
					fragmentShader: shaderobject.fragmentShader,
					defines: material.defines,
	
					isRawShaderMaterial: material.isRawShaderMaterial,
					isShaderMaterial: material.isShaderMaterial,
	
					precision: precision,
	
					instancing: object.isInstancedMesh === true,
	
					supportsVertexTextures: vertexTextures,
					outputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,
					map: !! material.map,
					mapEncoding: getTextureEncodingFromMap( material.map ),
					matcap: !! material.matcap,
					matcapEncoding: getTextureEncodingFromMap( material.matcap ),
					envMap: !! envMap,
					envMapMode: envMap && envMap.mapping,
					envMapEncoding: getTextureEncodingFromMap( envMap ),
					envMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),
					lightMap: !! material.lightMap,
					lightMapEncoding: getTextureEncodingFromMap( material.lightMap ),
					aoMap: !! material.aoMap,
					emissiveMap: !! material.emissiveMap,
					emissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),
					bumpMap: !! material.bumpMap,
					normalMap: !! material.normalMap,
					objectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,
					tangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,
					clearcoatNormalMap: !! material.clearcoatNormalMap,
					displacementMap: !! material.displacementMap,
					roughnessMap: !! material.roughnessMap,
					metalnessMap: !! material.metalnessMap,
					specularMap: !! material.specularMap,
					alphaMap: !! material.alphaMap,
	
					gradientMap: !! material.gradientMap,
	
					sheen: !! material.sheen,
	
					combine: material.combine,
	
					vertexTangents: ( material.normalMap && material.vertexTangents ),
					vertexColors: material.vertexColors,
					vertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || !! material.displacementMap,
					uvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap ) && !! material.displacementMap,
	
					fog: !! fog,
					useFog: material.fog,
					fogExp2: ( fog && fog.isFogExp2 ),
	
					flatShading: material.flatShading,
	
					sizeAttenuation: material.sizeAttenuation,
					logarithmicDepthBuffer: logarithmicDepthBuffer,
	
					skinning: material.skinning && maxBones > 0,
					maxBones: maxBones,
					useVertexTexture: floatVertexTextures,
	
					morphTargets: material.morphTargets,
					morphNormals: material.morphNormals,
					maxMorphTargets: renderer.maxMorphTargets,
					maxMorphNormals: renderer.maxMorphNormals,
	
					numDirLights: lights.directional.length,
					numPointLights: lights.point.length,
					numSpotLights: lights.spot.length,
					numRectAreaLights: lights.rectArea.length,
					numHemiLights: lights.hemi.length,
	
					numDirLightShadows: lights.directionalShadowMap.length,
					numPointLightShadows: lights.pointShadowMap.length,
					numSpotLightShadows: lights.spotShadowMap.length,
	
					numClippingPlanes: nClipPlanes,
					numClipIntersection: nClipIntersection,
	
					dithering: material.dithering,
	
					shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
					shadowMapType: renderer.shadowMap.type,
	
					toneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,
					physicallyCorrectLights: renderer.physicallyCorrectLights,
	
					premultipliedAlpha: material.premultipliedAlpha,
	
					alphaTest: material.alphaTest,
					doubleSided: material.side === DoubleSide,
					flipSided: material.side === BackSide,
	
					depthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,
	
					index0AttributeName: material.index0AttributeName,
	
					extensionDerivatives: material.extensions && material.extensions.derivatives,
					extensionFragDepth: material.extensions && material.extensions.fragDepth,
					extensionDrawbuffers: material.extensions && material.extensions.drawBuffers,
					extensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,
	
					rendererExtensionFragDepth: isWebGL2 || extensions.get( 'EXT_frag_depth' ) !== null,
					rendererExtensionDrawBuffers: isWebGL2 || extensions.get( 'WEBGL_draw_buffers' ) !== null,
					rendererExtensionShaderTextureLod: isWebGL2 || extensions.get( 'EXT_shader_texture_lod' ) !== null,
	
					onBeforeCompile: material.onBeforeCompile
	
				};
	
				return parameters;
	
			};
	
			this.getProgramCacheKey = function ( parameters ) {
	
				var array = [];
	
				if ( parameters.shaderID ) {
	
					array.push( parameters.shaderID );
	
				} else {
	
					array.push( parameters.fragmentShader );
					array.push( parameters.vertexShader );
	
				}
	
				if ( parameters.defines !== undefined ) {
	
					for ( var name in parameters.defines ) {
	
						array.push( name );
						array.push( parameters.defines[ name ] );
	
					}
	
				}
	
				if ( parameters.isRawShaderMaterial === undefined ) {
	
					for ( var i = 0; i < parameterNames.length; i ++ ) {
	
						array.push( parameters[ parameterNames[ i ] ] );
	
					}
	
					array.push( renderer.outputEncoding );
					array.push( renderer.gammaFactor );
	
				}
	
				array.push( parameters.onBeforeCompile.toString() );
	
				return array.join();
	
			};
	
			this.acquireProgram = function ( parameters, cacheKey ) {
	
				var program;
	
				// Check if code has been already compiled
				for ( var p = 0, pl = programs.length; p < pl; p ++ ) {
	
					var preexistingProgram = programs[ p ];
	
					if ( preexistingProgram.cacheKey === cacheKey ) {
	
						program = preexistingProgram;
						++ program.usedTimes;
	
						break;
	
					}
	
				}
	
				if ( program === undefined ) {
	
					program = new WebGLProgram( renderer, cacheKey, parameters );
					programs.push( program );
	
				}
	
				return program;
	
			};
	
			this.releaseProgram = function ( program ) {
	
				if ( -- program.usedTimes === 0 ) {
	
					// Remove from unordered set
					var i = programs.indexOf( program );
					programs[ i ] = programs[ programs.length - 1 ];
					programs.pop();
	
					// Free WebGL resources
					program.destroy();
	
				}
	
			};
	
			// Exposed for resource monitoring & error feedback via renderer.info:
			this.programs = programs;
	
		}
	
		/**
		 * @author fordacious / fordacious.github.io
		 */
	
		function WebGLProperties() {
	
			var properties = new WeakMap();
	
			function get( object ) {
	
				var map = properties.get( object );
	
				if ( map === undefined ) {
	
					map = {};
					properties.set( object, map );
	
				}
	
				return map;
	
			}
	
			function remove( object ) {
	
				properties.delete( object );
	
			}
	
			function update( object, key, value ) {
	
				properties.get( object )[ key ] = value;
	
			}
	
			function dispose() {
	
				properties = new WeakMap();
	
			}
	
			return {
				get: get,
				remove: remove,
				update: update,
				dispose: dispose
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function painterSortStable( a, b ) {
	
			if ( a.groupOrder !== b.groupOrder ) {
	
				return a.groupOrder - b.groupOrder;
	
			} else if ( a.renderOrder !== b.renderOrder ) {
	
				return a.renderOrder - b.renderOrder;
	
			} else if ( a.program !== b.program ) {
	
				return a.program.id - b.program.id;
	
			} else if ( a.material.id !== b.material.id ) {
	
				return a.material.id - b.material.id;
	
			} else if ( a.z !== b.z ) {
	
				return a.z - b.z;
	
			} else {
	
				return a.id - b.id;
	
			}
	
		}
	
		function reversePainterSortStable( a, b ) {
	
			if ( a.groupOrder !== b.groupOrder ) {
	
				return a.groupOrder - b.groupOrder;
	
			} else if ( a.renderOrder !== b.renderOrder ) {
	
				return a.renderOrder - b.renderOrder;
	
			} else if ( a.z !== b.z ) {
	
				return b.z - a.z;
	
			} else {
	
				return a.id - b.id;
	
			}
	
		}
	
	
		function WebGLRenderList() {
	
			var renderItems = [];
			var renderItemsIndex = 0;
	
			var opaque = [];
			var transparent = [];
	
			var defaultProgram = { id: - 1 };
	
			function init() {
	
				renderItemsIndex = 0;
	
				opaque.length = 0;
				transparent.length = 0;
	
			}
	
			function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {
	
				var renderItem = renderItems[ renderItemsIndex ];
	
				if ( renderItem === undefined ) {
	
					renderItem = {
						id: object.id,
						object: object,
						geometry: geometry,
						material: material,
						program: material.program || defaultProgram,
						groupOrder: groupOrder,
						renderOrder: object.renderOrder,
						z: z,
						group: group
					};
	
					renderItems[ renderItemsIndex ] = renderItem;
	
				} else {
	
					renderItem.id = object.id;
					renderItem.object = object;
					renderItem.geometry = geometry;
					renderItem.material = material;
					renderItem.program = material.program || defaultProgram;
					renderItem.groupOrder = groupOrder;
					renderItem.renderOrder = object.renderOrder;
					renderItem.z = z;
					renderItem.group = group;
	
				}
	
				renderItemsIndex ++;
	
				return renderItem;
	
			}
	
			function push( object, geometry, material, groupOrder, z, group ) {
	
				var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
	
				( material.transparent === true ? transparent : opaque ).push( renderItem );
	
			}
	
			function unshift( object, geometry, material, groupOrder, z, group ) {
	
				var renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );
	
				( material.transparent === true ? transparent : opaque ).unshift( renderItem );
	
			}
	
			function sort( customOpaqueSort, customTransparentSort ) {
	
				if ( opaque.length > 1 ) { opaque.sort( customOpaqueSort || painterSortStable ); }
				if ( transparent.length > 1 ) { transparent.sort( customTransparentSort || reversePainterSortStable ); }
	
			}
	
			function finish() {
	
				// Clear references from inactive renderItems in the list
	
				for ( var i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {
	
					var renderItem = renderItems[ i ];
	
					if ( renderItem.id === null ) { break; }
	
					renderItem.id = null;
					renderItem.object = null;
					renderItem.geometry = null;
					renderItem.material = null;
					renderItem.program = null;
					renderItem.group = null;
	
				}
	
			}
	
			return {
				opaque: opaque,
				transparent: transparent,
	
				init: init,
				push: push,
				unshift: unshift,
				finish: finish,
	
				sort: sort
			};
	
		}
	
		function WebGLRenderLists() {
	
			var lists = new WeakMap();
	
			function onSceneDispose( event ) {
	
				var scene = event.target;
	
				scene.removeEventListener( 'dispose', onSceneDispose );
	
				lists.delete( scene );
	
			}
	
			function get( scene, camera ) {
	
				var cameras = lists.get( scene );
				var list;
				if ( cameras === undefined ) {
	
					list = new WebGLRenderList();
					lists.set( scene, new WeakMap() );
					lists.get( scene ).set( camera, list );
	
					scene.addEventListener( 'dispose', onSceneDispose );
	
				} else {
	
					list = cameras.get( camera );
					if ( list === undefined ) {
	
						list = new WebGLRenderList();
						cameras.set( camera, list );
	
					}
	
				}
	
				return list;
	
			}
	
			function dispose() {
	
				lists = new WeakMap();
	
			}
	
			return {
				get: get,
				dispose: dispose
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function UniformsCache() {
	
			var lights = {};
	
			return {
	
				get: function ( light ) {
	
					if ( lights[ light.id ] !== undefined ) {
	
						return lights[ light.id ];
	
					}
	
					var uniforms;
	
					switch ( light.type ) {
	
						case 'DirectionalLight':
							uniforms = {
								direction: new Vector3(),
								color: new Color()
							};
							break;
	
						case 'SpotLight':
							uniforms = {
								position: new Vector3(),
								direction: new Vector3(),
								color: new Color(),
								distance: 0,
								coneCos: 0,
								penumbraCos: 0,
								decay: 0
							};
							break;
	
						case 'PointLight':
							uniforms = {
								position: new Vector3(),
								color: new Color(),
								distance: 0,
								decay: 0
							};
							break;
	
						case 'HemisphereLight':
							uniforms = {
								direction: new Vector3(),
								skyColor: new Color(),
								groundColor: new Color()
							};
							break;
	
						case 'RectAreaLight':
							uniforms = {
								color: new Color(),
								position: new Vector3(),
								halfWidth: new Vector3(),
								halfHeight: new Vector3()
							};
							break;
	
					}
	
					lights[ light.id ] = uniforms;
	
					return uniforms;
	
				}
	
			};
	
		}
	
		function ShadowUniformsCache() {
	
			var lights = {};
	
			return {
	
				get: function ( light ) {
	
					if ( lights[ light.id ] !== undefined ) {
	
						return lights[ light.id ];
	
					}
	
					var uniforms;
	
					switch ( light.type ) {
	
						case 'DirectionalLight':
							uniforms = {
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;
	
						case 'SpotLight':
							uniforms = {
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2()
							};
							break;
	
						case 'PointLight':
							uniforms = {
								shadowBias: 0,
								shadowRadius: 1,
								shadowMapSize: new Vector2(),
								shadowCameraNear: 1,
								shadowCameraFar: 1000
							};
							break;
	
						// TODO (abelnation): set RectAreaLight shadow uniforms
	
					}
	
					lights[ light.id ] = uniforms;
	
					return uniforms;
	
				}
	
			};
	
		}
	
	
	
		var nextVersion = 0;
	
		function shadowCastingLightsFirst( lightA, lightB ) {
	
			return ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );
	
		}
	
		function WebGLLights() {
	
			var cache = new UniformsCache();
	
			var shadowCache = ShadowUniformsCache();
	
			var state = {
	
				version: 0,
	
				hash: {
					directionalLength: - 1,
					pointLength: - 1,
					spotLength: - 1,
					rectAreaLength: - 1,
					hemiLength: - 1,
	
					numDirectionalShadows: - 1,
					numPointShadows: - 1,
					numSpotShadows: - 1
				},
	
				ambient: [ 0, 0, 0 ],
				probe: [],
				directional: [],
				directionalShadow: [],
				directionalShadowMap: [],
				directionalShadowMatrix: [],
				spot: [],
				spotShadow: [],
				spotShadowMap: [],
				spotShadowMatrix: [],
				rectArea: [],
				point: [],
				pointShadow: [],
				pointShadowMap: [],
				pointShadowMatrix: [],
				hemi: []
	
			};
	
			for ( var i = 0; i < 9; i ++ ) { state.probe.push( new Vector3() ); }
	
			var vector3 = new Vector3();
			var matrix4 = new Matrix4();
			var matrix42 = new Matrix4();
	
			function setup( lights, shadows, camera ) {
	
				var r = 0, g = 0, b = 0;
	
				for ( var i = 0; i < 9; i ++ ) { state.probe[ i ].set( 0, 0, 0 ); }
	
				var directionalLength = 0;
				var pointLength = 0;
				var spotLength = 0;
				var rectAreaLength = 0;
				var hemiLength = 0;
	
				var numDirectionalShadows = 0;
				var numPointShadows = 0;
				var numSpotShadows = 0;
	
				var viewMatrix = camera.matrixWorldInverse;
	
				lights.sort( shadowCastingLightsFirst );
	
				for ( var i = 0, l = lights.length; i < l; i ++ ) {
	
					var light = lights[ i ];
	
					var color = light.color;
					var intensity = light.intensity;
					var distance = light.distance;
	
					var shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;
	
					if ( light.isAmbientLight ) {
	
						r += color.r * intensity;
						g += color.g * intensity;
						b += color.b * intensity;
	
					} else if ( light.isLightProbe ) {
	
						for ( var j = 0; j < 9; j ++ ) {
	
							state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );
	
						}
	
					} else if ( light.isDirectionalLight ) {
	
						var uniforms = cache.get( light );
	
						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( vector3 );
						uniforms.direction.transformDirection( viewMatrix );
	
						if ( light.castShadow ) {
	
							var shadow = light.shadow;
	
							var shadowUniforms = shadowCache.get( light );
	
							shadowUniforms.shadowBias = shadow.bias;
							shadowUniforms.shadowRadius = shadow.radius;
							shadowUniforms.shadowMapSize = shadow.mapSize;
	
							state.directionalShadow[ directionalLength ] = shadowUniforms;
							state.directionalShadowMap[ directionalLength ] = shadowMap;
							state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;
	
							numDirectionalShadows ++;
	
						}
	
						state.directional[ directionalLength ] = uniforms;
	
						directionalLength ++;
	
					} else if ( light.isSpotLight ) {
	
						var uniforms = cache.get( light );
	
						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );
	
						uniforms.color.copy( color ).multiplyScalar( intensity );
						uniforms.distance = distance;
	
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						vector3.setFromMatrixPosition( light.target.matrixWorld );
						uniforms.direction.sub( vector3 );
						uniforms.direction.transformDirection( viewMatrix );
	
						uniforms.coneCos = Math.cos( light.angle );
						uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
						uniforms.decay = light.decay;
	
						if ( light.castShadow ) {
	
							var shadow = light.shadow;
	
							var shadowUniforms = shadowCache.get( light );
	
							shadowUniforms.shadowBias = shadow.bias;
							shadowUniforms.shadowRadius = shadow.radius;
							shadowUniforms.shadowMapSize = shadow.mapSize;
	
							state.spotShadow[ spotLength ] = shadowUniforms;
							state.spotShadowMap[ spotLength ] = shadowMap;
							state.spotShadowMatrix[ spotLength ] = light.shadow.matrix;
	
							numSpotShadows ++;
	
						}
	
						state.spot[ spotLength ] = uniforms;
	
						spotLength ++;
	
					} else if ( light.isRectAreaLight ) {
	
						var uniforms = cache.get( light );
	
						// (a) intensity is the total visible light emitted
						//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );
	
						// (b) intensity is the brightness of the light
						uniforms.color.copy( color ).multiplyScalar( intensity );
	
						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );
	
						// extract local rotation of light to derive width/height half vectors
						matrix42.identity();
						matrix4.copy( light.matrixWorld );
						matrix4.premultiply( viewMatrix );
						matrix42.extractRotation( matrix4 );
	
						uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
						uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );
	
						uniforms.halfWidth.applyMatrix4( matrix42 );
						uniforms.halfHeight.applyMatrix4( matrix42 );
	
						// TODO (abelnation): RectAreaLight distance?
						// uniforms.distance = distance;
	
						state.rectArea[ rectAreaLength ] = uniforms;
	
						rectAreaLength ++;
	
					} else if ( light.isPointLight ) {
	
						var uniforms = cache.get( light );
	
						uniforms.position.setFromMatrixPosition( light.matrixWorld );
						uniforms.position.applyMatrix4( viewMatrix );
	
						uniforms.color.copy( light.color ).multiplyScalar( light.intensity );
						uniforms.distance = light.distance;
						uniforms.decay = light.decay;
	
						if ( light.castShadow ) {
	
							var shadow = light.shadow;
	
							var shadowUniforms = shadowCache.get( light );
	
							shadowUniforms.shadowBias = shadow.bias;
							shadowUniforms.shadowRadius = shadow.radius;
							shadowUniforms.shadowMapSize = shadow.mapSize;
							shadowUniforms.shadowCameraNear = shadow.camera.near;
							shadowUniforms.shadowCameraFar = shadow.camera.far;
	
							state.pointShadow[ pointLength ] = shadowUniforms;
							state.pointShadowMap[ pointLength ] = shadowMap;
							state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;
	
							numPointShadows ++;
	
						}
	
						state.point[ pointLength ] = uniforms;
	
						pointLength ++;
	
					} else if ( light.isHemisphereLight ) {
	
						var uniforms = cache.get( light );
	
						uniforms.direction.setFromMatrixPosition( light.matrixWorld );
						uniforms.direction.transformDirection( viewMatrix );
						uniforms.direction.normalize();
	
						uniforms.skyColor.copy( light.color ).multiplyScalar( intensity );
						uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );
	
						state.hemi[ hemiLength ] = uniforms;
	
						hemiLength ++;
	
					}
	
				}
	
				state.ambient[ 0 ] = r;
				state.ambient[ 1 ] = g;
				state.ambient[ 2 ] = b;
	
				var hash = state.hash;
	
				if ( hash.directionalLength !== directionalLength ||
					hash.pointLength !== pointLength ||
					hash.spotLength !== spotLength ||
					hash.rectAreaLength !== rectAreaLength ||
					hash.hemiLength !== hemiLength ||
					hash.numDirectionalShadows !== numDirectionalShadows ||
					hash.numPointShadows !== numPointShadows ||
					hash.numSpotShadows !== numSpotShadows ) {
	
					state.directional.length = directionalLength;
					state.spot.length = spotLength;
					state.rectArea.length = rectAreaLength;
					state.point.length = pointLength;
					state.hemi.length = hemiLength;
	
					state.directionalShadow.length = numDirectionalShadows;
					state.directionalShadowMap.length = numDirectionalShadows;
					state.pointShadow.length = numPointShadows;
					state.pointShadowMap.length = numPointShadows;
					state.spotShadow.length = numSpotShadows;
					state.spotShadowMap.length = numSpotShadows;
					state.directionalShadowMatrix.length = numDirectionalShadows;
					state.pointShadowMatrix.length = numPointShadows;
					state.spotShadowMatrix.length = numSpotShadows;
	
					hash.directionalLength = directionalLength;
					hash.pointLength = pointLength;
					hash.spotLength = spotLength;
					hash.rectAreaLength = rectAreaLength;
					hash.hemiLength = hemiLength;
	
					hash.numDirectionalShadows = numDirectionalShadows;
					hash.numPointShadows = numPointShadows;
					hash.numSpotShadows = numSpotShadows;
	
					state.version = nextVersion ++;
	
				}
	
			}
	
			return {
				setup: setup,
				state: state
			};
	
		}
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function WebGLRenderState() {
	
			var lights = new WebGLLights();
	
			var lightsArray = [];
			var shadowsArray = [];
	
			function init() {
	
				lightsArray.length = 0;
				shadowsArray.length = 0;
	
			}
	
			function pushLight( light ) {
	
				lightsArray.push( light );
	
			}
	
			function pushShadow( shadowLight ) {
	
				shadowsArray.push( shadowLight );
	
			}
	
			function setupLights( camera ) {
	
				lights.setup( lightsArray, shadowsArray, camera );
	
			}
	
			var state = {
				lightsArray: lightsArray,
				shadowsArray: shadowsArray,
	
				lights: lights
			};
	
			return {
				init: init,
				state: state,
				setupLights: setupLights,
	
				pushLight: pushLight,
				pushShadow: pushShadow
			};
	
		}
	
		function WebGLRenderStates() {
	
			var renderStates = new WeakMap();
	
			function onSceneDispose( event ) {
	
				var scene = event.target;
	
				scene.removeEventListener( 'dispose', onSceneDispose );
	
				renderStates.delete( scene );
	
			}
	
			function get( scene, camera ) {
	
				var renderState;
	
				if ( renderStates.has( scene ) === false ) {
	
					renderState = new WebGLRenderState();
					renderStates.set( scene, new WeakMap() );
					renderStates.get( scene ).set( camera, renderState );
	
					scene.addEventListener( 'dispose', onSceneDispose );
	
				} else {
	
					if ( renderStates.get( scene ).has( camera ) === false ) {
	
						renderState = new WebGLRenderState();
						renderStates.get( scene ).set( camera, renderState );
	
					} else {
	
						renderState = renderStates.get( scene ).get( camera );
	
					}
	
				}
	
				return renderState;
	
			}
	
			function dispose() {
	
				renderStates = new WeakMap();
	
			}
	
			return {
				get: get,
				dispose: dispose
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author bhouston / https://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 * }
		 */
	
		function MeshDepthMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshDepthMaterial';
	
			this.depthPacking = BasicDepthPacking;
	
			this.skinning = false;
			this.morphTargets = false;
	
			this.map = null;
	
			this.alphaMap = null;
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
	
			this.fog = false;
	
			this.setValues( parameters );
	
		}
	
		MeshDepthMaterial.prototype = Object.create( Material.prototype );
		MeshDepthMaterial.prototype.constructor = MeshDepthMaterial;
	
		MeshDepthMaterial.prototype.isMeshDepthMaterial = true;
	
		MeshDepthMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.depthPacking = source.depthPacking;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
	
			this.map = source.map;
	
			this.alphaMap = source.alphaMap;
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
	
			return this;
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *
		 *  referencePosition: <float>,
		 *  nearDistance: <float>,
		 *  farDistance: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>
		 *
		 * }
		 */
	
		function MeshDistanceMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshDistanceMaterial';
	
			this.referencePosition = new Vector3();
			this.nearDistance = 1;
			this.farDistance = 1000;
	
			this.skinning = false;
			this.morphTargets = false;
	
			this.map = null;
	
			this.alphaMap = null;
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.fog = false;
	
			this.setValues( parameters );
	
		}
	
		MeshDistanceMaterial.prototype = Object.create( Material.prototype );
		MeshDistanceMaterial.prototype.constructor = MeshDistanceMaterial;
	
		MeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;
	
		MeshDistanceMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.referencePosition.copy( source.referencePosition );
			this.nearDistance = source.nearDistance;
			this.farDistance = source.farDistance;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
	
			this.map = source.map;
	
			this.alphaMap = source.alphaMap;
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			return this;
	
		};
	
		var vsm_frag = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
	
		var vsm_vert = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLShadowMap( _renderer, _objects, maxTextureSize ) {
	
			var _frustum = new Frustum(),
	
				_shadowMapSize = new Vector2(),
				_viewportSize = new Vector2(),
	
				_viewport = new Vector4(),
	
				_depthMaterials = [],
				_distanceMaterials = [],
	
				_materialCache = {};
	
			var shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };
	
			var shadowMaterialVertical = new ShaderMaterial( {
	
				defines: {
					SAMPLE_RATE: 2.0 / 8.0,
					HALF_SAMPLE_RATE: 1.0 / 8.0
				},
	
				uniforms: {
					shadow_pass: { value: null },
					resolution: { value: new Vector2() },
					radius: { value: 4.0 }
				},
	
				vertexShader: vsm_vert,
	
				fragmentShader: vsm_frag
	
			} );
	
			var shadowMaterialHorizonal = shadowMaterialVertical.clone();
			shadowMaterialHorizonal.defines.HORIZONAL_PASS = 1;
	
			var fullScreenTri = new BufferGeometry();
			fullScreenTri.setAttribute(
				"position",
				new BufferAttribute(
					new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
					3
				)
			);
	
			var fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );
	
			var scope = this;
	
			this.enabled = false;
	
			this.autoUpdate = true;
			this.needsUpdate = false;
	
			this.type = PCFShadowMap;
	
			this.render = function ( lights, scene, camera ) {
	
				if ( scope.enabled === false ) { return; }
				if ( scope.autoUpdate === false && scope.needsUpdate === false ) { return; }
	
				if ( lights.length === 0 ) { return; }
	
				var currentRenderTarget = _renderer.getRenderTarget();
				var activeCubeFace = _renderer.getActiveCubeFace();
				var activeMipmapLevel = _renderer.getActiveMipmapLevel();
	
				var _state = _renderer.state;
	
				// Set GL state for depth map.
				_state.setBlending( NoBlending );
				_state.buffers.color.setClear( 1, 1, 1, 1 );
				_state.buffers.depth.setTest( true );
				_state.setScissorTest( false );
	
				// render depth map
	
				for ( var i = 0, il = lights.length; i < il; i ++ ) {
	
					var light = lights[ i ];
					var shadow = light.shadow;
	
					if ( shadow === undefined ) {
	
						console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
						continue;
	
					}
	
					_shadowMapSize.copy( shadow.mapSize );
	
					var shadowFrameExtents = shadow.getFrameExtents();
	
					_shadowMapSize.multiply( shadowFrameExtents );
	
					_viewportSize.copy( shadow.mapSize );
	
					if ( _shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize ) {
	
						console.warn( 'THREE.WebGLShadowMap:', light, 'has shadow exceeding max texture size, reducing' );
	
						if ( _shadowMapSize.x > maxTextureSize ) {
	
							_viewportSize.x = Math.floor( maxTextureSize / shadowFrameExtents.x );
							_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
							shadow.mapSize.x = _viewportSize.x;
	
						}
	
						if ( _shadowMapSize.y > maxTextureSize ) {
	
							_viewportSize.y = Math.floor( maxTextureSize / shadowFrameExtents.y );
							_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
							shadow.mapSize.y = _viewportSize.y;
	
						}
	
					}
	
					if ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {
	
						var pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };
	
						shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
						shadow.map.texture.name = light.name + ".shadowMap";
	
						shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
	
						shadow.camera.updateProjectionMatrix();
	
					}
	
					if ( shadow.map === null ) {
	
						var pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };
	
						shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
						shadow.map.texture.name = light.name + ".shadowMap";
	
						shadow.camera.updateProjectionMatrix();
	
					}
	
					_renderer.setRenderTarget( shadow.map );
					_renderer.clear();
	
					var viewportCount = shadow.getViewportCount();
	
					for ( var vp = 0; vp < viewportCount; vp ++ ) {
	
						var viewport = shadow.getViewport( vp );
	
						_viewport.set(
							_viewportSize.x * viewport.x,
							_viewportSize.y * viewport.y,
							_viewportSize.x * viewport.z,
							_viewportSize.y * viewport.w
						);
	
						_state.viewport( _viewport );
	
						shadow.updateMatrices( light, vp );
	
						_frustum = shadow.getFrustum();
	
						renderObject( scene, camera, shadow.camera, light, this.type );
	
					}
	
					// do blur pass for VSM
	
					if ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {
	
						VSMPass( shadow, camera );
	
					}
	
				}
	
				scope.needsUpdate = false;
	
				_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );
	
			};
	
			function VSMPass( shadow, camera ) {
	
				var geometry = _objects.update( fullScreenMesh );
	
				// vertical pass
	
				shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
				shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
				shadowMaterialVertical.uniforms.radius.value = shadow.radius;
				_renderer.setRenderTarget( shadow.mapPass );
				_renderer.clear();
				_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );
	
				// horizonal pass
	
				shadowMaterialHorizonal.uniforms.shadow_pass.value = shadow.mapPass.texture;
				shadowMaterialHorizonal.uniforms.resolution.value = shadow.mapSize;
				shadowMaterialHorizonal.uniforms.radius.value = shadow.radius;
				_renderer.setRenderTarget( shadow.map );
				_renderer.clear();
				_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizonal, fullScreenMesh, null );
	
			}
	
			function getDepthMaterialVariant( useMorphing, useSkinning, useInstancing ) {
	
				var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
	
				var material = _depthMaterials[ index ];
	
				if ( material === undefined ) {
	
					material = new MeshDepthMaterial( {
	
						depthPacking: RGBADepthPacking,
	
						morphTargets: useMorphing,
						skinning: useSkinning
	
					} );
	
					_depthMaterials[ index ] = material;
	
				}
	
				return material;
	
			}
	
			function getDistanceMaterialVariant( useMorphing, useSkinning, useInstancing ) {
	
				var index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;
	
				var material = _distanceMaterials[ index ];
	
				if ( material === undefined ) {
	
					material = new MeshDistanceMaterial( {
	
						morphTargets: useMorphing,
						skinning: useSkinning
	
					} );
	
					_distanceMaterials[ index ] = material;
	
				}
	
				return material;
	
			}
	
			function getDepthMaterial( object, material, light, shadowCameraNear, shadowCameraFar, type ) {
	
				var geometry = object.geometry;
	
				var result = null;
	
				var getMaterialVariant = getDepthMaterialVariant;
				var customMaterial = object.customDepthMaterial;
	
				if ( light.isPointLight === true ) {
	
					getMaterialVariant = getDistanceMaterialVariant;
					customMaterial = object.customDistanceMaterial;
	
				}
	
				if ( customMaterial === undefined ) {
	
					var useMorphing = false;
	
					if ( material.morphTargets === true ) {
	
						if ( geometry.isBufferGeometry === true ) {
	
							useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;
	
						} else if ( geometry.isGeometry === true ) {
	
							useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;
	
						}
	
					}
	
					var useSkinning = false;
	
					if ( object.isSkinnedMesh === true ) {
	
						if ( material.skinning === true ) {
	
							useSkinning = true;
	
						} else {
	
							console.warn( 'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object );
	
						}
	
					}
	
					var useInstancing = object.isInstancedMesh === true;
	
					result = getMaterialVariant( useMorphing, useSkinning, useInstancing );
	
				} else {
	
					result = customMaterial;
	
				}
	
				if ( _renderer.localClippingEnabled &&
						material.clipShadows === true &&
						material.clippingPlanes.length !== 0 ) {
	
					// in this case we need a unique material instance reflecting the
					// appropriate state
	
					var keyA = result.uuid, keyB = material.uuid;
	
					var materialsForVariant = _materialCache[ keyA ];
	
					if ( materialsForVariant === undefined ) {
	
						materialsForVariant = {};
						_materialCache[ keyA ] = materialsForVariant;
	
					}
	
					var cachedMaterial = materialsForVariant[ keyB ];
	
					if ( cachedMaterial === undefined ) {
	
						cachedMaterial = result.clone();
						materialsForVariant[ keyB ] = cachedMaterial;
	
					}
	
					result = cachedMaterial;
	
				}
	
				result.visible = material.visible;
				result.wireframe = material.wireframe;
	
				if ( type === VSMShadowMap ) {
	
					result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;
	
				} else {
	
					result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];
	
				}
	
				result.clipShadows = material.clipShadows;
				result.clippingPlanes = material.clippingPlanes;
				result.clipIntersection = material.clipIntersection;
	
				result.wireframeLinewidth = material.wireframeLinewidth;
				result.linewidth = material.linewidth;
	
				if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {
	
					result.referencePosition.setFromMatrixPosition( light.matrixWorld );
					result.nearDistance = shadowCameraNear;
					result.farDistance = shadowCameraFar;
	
				}
	
				return result;
	
			}
	
			function renderObject( object, camera, shadowCamera, light, type ) {
	
				if ( object.visible === false ) { return; }
	
				var visible = object.layers.test( camera.layers );
	
				if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {
	
					if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {
	
						object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
	
						var geometry = _objects.update( object );
						var material = object.material;
	
						if ( Array.isArray( material ) ) {
	
							var groups = geometry.groups;
	
							for ( var k = 0, kl = groups.length; k < kl; k ++ ) {
	
								var group = groups[ k ];
								var groupMaterial = material[ group.materialIndex ];
	
								if ( groupMaterial && groupMaterial.visible ) {
	
									var depthMaterial = getDepthMaterial( object, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );
	
									_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );
	
								}
	
							}
	
						} else if ( material.visible ) {
	
							var depthMaterial = getDepthMaterial( object, material, light, shadowCamera.near, shadowCamera.far, type );
	
							_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );
	
						}
	
					}
	
				}
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					renderObject( children[ i ], camera, shadowCamera, light, type );
	
				}
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLState( gl, extensions, capabilities ) {
	
			var isWebGL2 = capabilities.isWebGL2;
	
			function ColorBuffer() {
	
				var locked = false;
	
				var color = new Vector4();
				var currentColorMask = null;
				var currentColorClear = new Vector4( 0, 0, 0, 0 );
	
				return {
	
					setMask: function ( colorMask ) {
	
						if ( currentColorMask !== colorMask && ! locked ) {
	
							gl.colorMask( colorMask, colorMask, colorMask, colorMask );
							currentColorMask = colorMask;
	
						}
	
					},
	
					setLocked: function ( lock ) {
	
						locked = lock;
	
					},
	
					setClear: function ( r, g, b, a, premultipliedAlpha ) {
	
						if ( premultipliedAlpha === true ) {
	
							r *= a; g *= a; b *= a;
	
						}
	
						color.set( r, g, b, a );
	
						if ( currentColorClear.equals( color ) === false ) {
	
							gl.clearColor( r, g, b, a );
							currentColorClear.copy( color );
	
						}
	
					},
	
					reset: function () {
	
						locked = false;
	
						currentColorMask = null;
						currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state
	
					}
	
				};
	
			}
	
			function DepthBuffer() {
	
				var locked = false;
	
				var currentDepthMask = null;
				var currentDepthFunc = null;
				var currentDepthClear = null;
	
				return {
	
					setTest: function ( depthTest ) {
	
						if ( depthTest ) {
	
							enable( 2929 );
	
						} else {
	
							disable( 2929 );
	
						}
	
					},
	
					setMask: function ( depthMask ) {
	
						if ( currentDepthMask !== depthMask && ! locked ) {
	
							gl.depthMask( depthMask );
							currentDepthMask = depthMask;
	
						}
	
					},
	
					setFunc: function ( depthFunc ) {
	
						if ( currentDepthFunc !== depthFunc ) {
	
							if ( depthFunc ) {
	
								switch ( depthFunc ) {
	
									case NeverDepth:
	
										gl.depthFunc( 512 );
										break;
	
									case AlwaysDepth:
	
										gl.depthFunc( 519 );
										break;
	
									case LessDepth:
	
										gl.depthFunc( 513 );
										break;
	
									case LessEqualDepth:
	
										gl.depthFunc( 515 );
										break;
	
									case EqualDepth:
	
										gl.depthFunc( 514 );
										break;
	
									case GreaterEqualDepth:
	
										gl.depthFunc( 518 );
										break;
	
									case GreaterDepth:
	
										gl.depthFunc( 516 );
										break;
	
									case NotEqualDepth:
	
										gl.depthFunc( 517 );
										break;
	
									default:
	
										gl.depthFunc( 515 );
	
								}
	
							} else {
	
								gl.depthFunc( 515 );
	
							}
	
							currentDepthFunc = depthFunc;
	
						}
	
					},
	
					setLocked: function ( lock ) {
	
						locked = lock;
	
					},
	
					setClear: function ( depth ) {
	
						if ( currentDepthClear !== depth ) {
	
							gl.clearDepth( depth );
							currentDepthClear = depth;
	
						}
	
					},
	
					reset: function () {
	
						locked = false;
	
						currentDepthMask = null;
						currentDepthFunc = null;
						currentDepthClear = null;
	
					}
	
				};
	
			}
	
			function StencilBuffer() {
	
				var locked = false;
	
				var currentStencilMask = null;
				var currentStencilFunc = null;
				var currentStencilRef = null;
				var currentStencilFuncMask = null;
				var currentStencilFail = null;
				var currentStencilZFail = null;
				var currentStencilZPass = null;
				var currentStencilClear = null;
	
				return {
	
					setTest: function ( stencilTest ) {
	
						if ( ! locked ) {
	
							if ( stencilTest ) {
	
								enable( 2960 );
	
							} else {
	
								disable( 2960 );
	
							}
	
						}
	
					},
	
					setMask: function ( stencilMask ) {
	
						if ( currentStencilMask !== stencilMask && ! locked ) {
	
							gl.stencilMask( stencilMask );
							currentStencilMask = stencilMask;
	
						}
	
					},
	
					setFunc: function ( stencilFunc, stencilRef, stencilMask ) {
	
						if ( currentStencilFunc !== stencilFunc ||
						     currentStencilRef 	!== stencilRef 	||
						     currentStencilFuncMask !== stencilMask ) {
	
							gl.stencilFunc( stencilFunc, stencilRef, stencilMask );
	
							currentStencilFunc = stencilFunc;
							currentStencilRef = stencilRef;
							currentStencilFuncMask = stencilMask;
	
						}
	
					},
	
					setOp: function ( stencilFail, stencilZFail, stencilZPass ) {
	
						if ( currentStencilFail	 !== stencilFail 	||
						     currentStencilZFail !== stencilZFail ||
						     currentStencilZPass !== stencilZPass ) {
	
							gl.stencilOp( stencilFail, stencilZFail, stencilZPass );
	
							currentStencilFail = stencilFail;
							currentStencilZFail = stencilZFail;
							currentStencilZPass = stencilZPass;
	
						}
	
					},
	
					setLocked: function ( lock ) {
	
						locked = lock;
	
					},
	
					setClear: function ( stencil ) {
	
						if ( currentStencilClear !== stencil ) {
	
							gl.clearStencil( stencil );
							currentStencilClear = stencil;
	
						}
	
					},
	
					reset: function () {
	
						locked = false;
	
						currentStencilMask = null;
						currentStencilFunc = null;
						currentStencilRef = null;
						currentStencilFuncMask = null;
						currentStencilFail = null;
						currentStencilZFail = null;
						currentStencilZPass = null;
						currentStencilClear = null;
	
					}
	
				};
	
			}
	
			//
	
			var colorBuffer = new ColorBuffer();
			var depthBuffer = new DepthBuffer();
			var stencilBuffer = new StencilBuffer();
	
			var maxVertexAttributes = gl.getParameter( 34921 );
			var newAttributes = new Uint8Array( maxVertexAttributes );
			var enabledAttributes = new Uint8Array( maxVertexAttributes );
			var attributeDivisors = new Uint8Array( maxVertexAttributes );
	
			var enabledCapabilities = {};
	
			var currentProgram = null;
	
			var currentBlendingEnabled = null;
			var currentBlending = null;
			var currentBlendEquation = null;
			var currentBlendSrc = null;
			var currentBlendDst = null;
			var currentBlendEquationAlpha = null;
			var currentBlendSrcAlpha = null;
			var currentBlendDstAlpha = null;
			var currentPremultipledAlpha = false;
	
			var currentFlipSided = null;
			var currentCullFace = null;
	
			var currentLineWidth = null;
	
			var currentPolygonOffsetFactor = null;
			var currentPolygonOffsetUnits = null;
	
			var maxTextures = gl.getParameter( 35661 );
	
			var lineWidthAvailable = false;
			var version = 0;
			var glVersion = gl.getParameter( 7938 );
	
			if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {
	
				version = parseFloat( /^WebGL\ ([0-9])/.exec( glVersion )[ 1 ] );
				lineWidthAvailable = ( version >= 1.0 );
	
			} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {
	
				version = parseFloat( /^OpenGL\ ES\ ([0-9])/.exec( glVersion )[ 1 ] );
				lineWidthAvailable = ( version >= 2.0 );
	
			}
	
			var currentTextureSlot = null;
			var currentBoundTextures = {};
	
			var currentScissor = new Vector4();
			var currentViewport = new Vector4();
	
			function createTexture( type, target, count ) {
	
				var data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
				var texture = gl.createTexture();
	
				gl.bindTexture( type, texture );
				gl.texParameteri( type, 10241, 9728 );
				gl.texParameteri( type, 10240, 9728 );
	
				for ( var i = 0; i < count; i ++ ) {
	
					gl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );
	
				}
	
				return texture;
	
			}
	
			var emptyTextures = {};
			emptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );
			emptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );
	
			// init
	
			colorBuffer.setClear( 0, 0, 0, 1 );
			depthBuffer.setClear( 1 );
			stencilBuffer.setClear( 0 );
	
			enable( 2929 );
			depthBuffer.setFunc( LessEqualDepth );
	
			setFlipSided( false );
			setCullFace( CullFaceBack );
			enable( 2884 );
	
			setBlending( NoBlending );
	
			//
	
			function initAttributes() {
	
				for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {
	
					newAttributes[ i ] = 0;
	
				}
	
			}
	
			function enableAttribute( attribute ) {
	
				enableAttributeAndDivisor( attribute, 0 );
	
			}
	
			function enableAttributeAndDivisor( attribute, meshPerAttribute ) {
	
				newAttributes[ attribute ] = 1;
	
				if ( enabledAttributes[ attribute ] === 0 ) {
	
					gl.enableVertexAttribArray( attribute );
					enabledAttributes[ attribute ] = 1;
	
				}
	
				if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {
	
					var extension = isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );
	
					extension[ isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
					attributeDivisors[ attribute ] = meshPerAttribute;
	
				}
	
			}
	
			function disableUnusedAttributes() {
	
				for ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {
	
					if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {
	
						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;
	
					}
	
				}
	
			}
	
			function enable( id ) {
	
				if ( enabledCapabilities[ id ] !== true ) {
	
					gl.enable( id );
					enabledCapabilities[ id ] = true;
	
				}
	
			}
	
			function disable( id ) {
	
				if ( enabledCapabilities[ id ] !== false ) {
	
					gl.disable( id );
					enabledCapabilities[ id ] = false;
	
				}
	
			}
	
			function useProgram( program ) {
	
				if ( currentProgram !== program ) {
	
					gl.useProgram( program );
	
					currentProgram = program;
	
					return true;
	
				}
	
				return false;
	
			}
	
			var equationToGL = {};
			equationToGL[ AddEquation ] = 32774;
			equationToGL[ SubtractEquation ] = 32778;
			equationToGL[ ReverseSubtractEquation ] = 32779;
	
			if ( isWebGL2 ) {
	
				equationToGL[ MinEquation ] = 32775;
				equationToGL[ MaxEquation ] = 32776;
	
			} else {
	
				var extension = extensions.get( 'EXT_blend_minmax' );
	
				if ( extension !== null ) {
	
					equationToGL[ MinEquation ] = extension.MIN_EXT;
					equationToGL[ MaxEquation ] = extension.MAX_EXT;
	
				}
	
			}
	
			var factorToGL = {};
			factorToGL[ ZeroFactor ] = 0;
			factorToGL[ OneFactor ] = 1;
			factorToGL[ SrcColorFactor ] = 768;
			factorToGL[ SrcAlphaFactor ] = 770;
			factorToGL[ SrcAlphaSaturateFactor ] = 776;
			factorToGL[ DstColorFactor ] = 774;
			factorToGL[ DstAlphaFactor ] = 772;
			factorToGL[ OneMinusSrcColorFactor ] = 769;
			factorToGL[ OneMinusSrcAlphaFactor ] = 771;
			factorToGL[ OneMinusDstColorFactor ] = 775;
			factorToGL[ OneMinusDstAlphaFactor ] = 773;
	
			function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {
	
				if ( blending === NoBlending ) {
	
					if ( currentBlendingEnabled ) {
	
						disable( 3042 );
						currentBlendingEnabled = false;
	
					}
	
					return;
	
				}
	
				if ( ! currentBlendingEnabled ) {
	
					enable( 3042 );
					currentBlendingEnabled = true;
	
				}
	
				if ( blending !== CustomBlending ) {
	
					if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {
	
						if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {
	
							gl.blendEquation( 32774 );
	
							currentBlendEquation = AddEquation;
							currentBlendEquationAlpha = AddEquation;
	
						}
	
						if ( premultipliedAlpha ) {
	
							switch ( blending ) {
	
								case NormalBlending:
									gl.blendFuncSeparate( 1, 771, 1, 771 );
									break;
	
								case AdditiveBlending:
									gl.blendFunc( 1, 1 );
									break;
	
								case SubtractiveBlending:
									gl.blendFuncSeparate( 0, 0, 769, 771 );
									break;
	
								case MultiplyBlending:
									gl.blendFuncSeparate( 0, 768, 0, 770 );
									break;
	
								default:
									console.error( 'THREE.WebGLState: Invalid blending: ', blending );
									break;
	
							}
	
						} else {
	
							switch ( blending ) {
	
								case NormalBlending:
									gl.blendFuncSeparate( 770, 771, 1, 771 );
									break;
	
								case AdditiveBlending:
									gl.blendFunc( 770, 1 );
									break;
	
								case SubtractiveBlending:
									gl.blendFunc( 0, 769 );
									break;
	
								case MultiplyBlending:
									gl.blendFunc( 0, 768 );
									break;
	
								default:
									console.error( 'THREE.WebGLState: Invalid blending: ', blending );
									break;
	
							}
	
						}
	
						currentBlendSrc = null;
						currentBlendDst = null;
						currentBlendSrcAlpha = null;
						currentBlendDstAlpha = null;
	
						currentBlending = blending;
						currentPremultipledAlpha = premultipliedAlpha;
	
					}
	
					return;
	
				}
	
				// custom blending
	
				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;
	
				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {
	
					gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );
	
					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;
	
				}
	
				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {
	
					gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );
	
					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;
	
				}
	
				currentBlending = blending;
				currentPremultipledAlpha = null;
	
			}
	
			function setMaterial( material, frontFaceCW ) {
	
				material.side === DoubleSide
					? disable( 2884 )
					: enable( 2884 );
	
				var flipSided = ( material.side === BackSide );
				if ( frontFaceCW ) { flipSided = ! flipSided; }
	
				setFlipSided( flipSided );
	
				( material.blending === NormalBlending && material.transparent === false )
					? setBlending( NoBlending )
					: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );
	
				depthBuffer.setFunc( material.depthFunc );
				depthBuffer.setTest( material.depthTest );
				depthBuffer.setMask( material.depthWrite );
				colorBuffer.setMask( material.colorWrite );
	
				var stencilWrite = material.stencilWrite;
				stencilBuffer.setTest( stencilWrite );
				if ( stencilWrite ) {
	
					stencilBuffer.setMask( material.stencilWriteMask );
					stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
					stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );
	
				}
	
				setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
	
			}
	
			//
	
			function setFlipSided( flipSided ) {
	
				if ( currentFlipSided !== flipSided ) {
	
					if ( flipSided ) {
	
						gl.frontFace( 2304 );
	
					} else {
	
						gl.frontFace( 2305 );
	
					}
	
					currentFlipSided = flipSided;
	
				}
	
			}
	
			function setCullFace( cullFace ) {
	
				if ( cullFace !== CullFaceNone ) {
	
					enable( 2884 );
	
					if ( cullFace !== currentCullFace ) {
	
						if ( cullFace === CullFaceBack ) {
	
							gl.cullFace( 1029 );
	
						} else if ( cullFace === CullFaceFront ) {
	
							gl.cullFace( 1028 );
	
						} else {
	
							gl.cullFace( 1032 );
	
						}
	
					}
	
				} else {
	
					disable( 2884 );
	
				}
	
				currentCullFace = cullFace;
	
			}
	
			function setLineWidth( width ) {
	
				if ( width !== currentLineWidth ) {
	
					if ( lineWidthAvailable ) { gl.lineWidth( width ); }
	
					currentLineWidth = width;
	
				}
	
			}
	
			function setPolygonOffset( polygonOffset, factor, units ) {
	
				if ( polygonOffset ) {
	
					enable( 32823 );
	
					if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {
	
						gl.polygonOffset( factor, units );
	
						currentPolygonOffsetFactor = factor;
						currentPolygonOffsetUnits = units;
	
					}
	
				} else {
	
					disable( 32823 );
	
				}
	
			}
	
			function setScissorTest( scissorTest ) {
	
				if ( scissorTest ) {
	
					enable( 3089 );
	
				} else {
	
					disable( 3089 );
	
				}
	
			}
	
			// texture
	
			function activeTexture( webglSlot ) {
	
				if ( webglSlot === undefined ) { webglSlot = 33984 + maxTextures - 1; }
	
				if ( currentTextureSlot !== webglSlot ) {
	
					gl.activeTexture( webglSlot );
					currentTextureSlot = webglSlot;
	
				}
	
			}
	
			function bindTexture( webglType, webglTexture ) {
	
				if ( currentTextureSlot === null ) {
	
					activeTexture();
	
				}
	
				var boundTexture = currentBoundTextures[ currentTextureSlot ];
	
				if ( boundTexture === undefined ) {
	
					boundTexture = { type: undefined, texture: undefined };
					currentBoundTextures[ currentTextureSlot ] = boundTexture;
	
				}
	
				if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {
	
					gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );
	
					boundTexture.type = webglType;
					boundTexture.texture = webglTexture;
	
				}
	
			}
	
			function unbindTexture() {
	
				var boundTexture = currentBoundTextures[ currentTextureSlot ];
	
				if ( boundTexture !== undefined && boundTexture.type !== undefined ) {
	
					gl.bindTexture( boundTexture.type, null );
	
					boundTexture.type = undefined;
					boundTexture.texture = undefined;
	
				}
	
			}
	
			function compressedTexImage2D() {
	
				try {
	
					gl.compressedTexImage2D.apply( gl, arguments );
	
				} catch ( error ) {
	
					console.error( 'THREE.WebGLState:', error );
	
				}
	
			}
	
			function texImage2D() {
	
				try {
	
					gl.texImage2D.apply( gl, arguments );
	
				} catch ( error ) {
	
					console.error( 'THREE.WebGLState:', error );
	
				}
	
			}
	
			function texImage3D() {
	
				try {
	
					gl.texImage3D.apply( gl, arguments );
	
				} catch ( error ) {
	
					console.error( 'THREE.WebGLState:', error );
	
				}
	
			}
	
			//
	
			function scissor( scissor ) {
	
				if ( currentScissor.equals( scissor ) === false ) {
	
					gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
					currentScissor.copy( scissor );
	
				}
	
			}
	
			function viewport( viewport ) {
	
				if ( currentViewport.equals( viewport ) === false ) {
	
					gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
					currentViewport.copy( viewport );
	
				}
	
			}
	
			//
	
			function reset() {
	
				for ( var i = 0; i < enabledAttributes.length; i ++ ) {
	
					if ( enabledAttributes[ i ] === 1 ) {
	
						gl.disableVertexAttribArray( i );
						enabledAttributes[ i ] = 0;
	
					}
	
				}
	
				enabledCapabilities = {};
	
				currentTextureSlot = null;
				currentBoundTextures = {};
	
				currentProgram = null;
	
				currentBlending = null;
	
				currentFlipSided = null;
				currentCullFace = null;
	
				colorBuffer.reset();
				depthBuffer.reset();
				stencilBuffer.reset();
	
			}
	
			return {
	
				buffers: {
					color: colorBuffer,
					depth: depthBuffer,
					stencil: stencilBuffer
				},
	
				initAttributes: initAttributes,
				enableAttribute: enableAttribute,
				enableAttributeAndDivisor: enableAttributeAndDivisor,
				disableUnusedAttributes: disableUnusedAttributes,
				enable: enable,
				disable: disable,
	
				useProgram: useProgram,
	
				setBlending: setBlending,
				setMaterial: setMaterial,
	
				setFlipSided: setFlipSided,
				setCullFace: setCullFace,
	
				setLineWidth: setLineWidth,
				setPolygonOffset: setPolygonOffset,
	
				setScissorTest: setScissorTest,
	
				activeTexture: activeTexture,
				bindTexture: bindTexture,
				unbindTexture: unbindTexture,
				compressedTexImage2D: compressedTexImage2D,
				texImage2D: texImage2D,
				texImage3D: texImage3D,
	
				scissor: scissor,
				viewport: viewport,
	
				reset: reset
	
			};
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {
	
			var isWebGL2 = capabilities.isWebGL2;
			var maxTextures = capabilities.maxTextures;
			var maxCubemapSize = capabilities.maxCubemapSize;
			var maxTextureSize = capabilities.maxTextureSize;
			var maxSamples = capabilities.maxSamples;
	
			var _videoTextures = new WeakMap();
			var _canvas;
	
			// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
			// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
			// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).
	
			var useOffscreenCanvas = false;
	
			try {
	
				useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
					&& ( new OffscreenCanvas( 1, 1 ).getContext( "2d" ) ) !== null;
	
			} catch ( err ) {
	
				// Ignore any errors
	
			}
	
			function createCanvas( width, height ) {
	
				// Use OffscreenCanvas when available. Specially needed in web workers
	
				return useOffscreenCanvas ?
					new OffscreenCanvas( width, height ) :
					document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' );
	
			}
	
			function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {
	
				var scale = 1;
	
				// handle case if texture exceeds max size
	
				if ( image.width > maxSize || image.height > maxSize ) {
	
					scale = maxSize / Math.max( image.width, image.height );
	
				}
	
				// only perform resize if necessary
	
				if ( scale < 1 || needsPowerOfTwo === true ) {
	
					// only perform resize for certain image types
	
					if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
						( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
						( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {
	
						var floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;
	
						var width = floor( scale * image.width );
						var height = floor( scale * image.height );
	
						if ( _canvas === undefined ) { _canvas = createCanvas( width, height ); }
	
						// cube textures can't reuse the same canvas
	
						var canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;
	
						canvas.width = width;
						canvas.height = height;
	
						var context = canvas.getContext( '2d' );
						context.drawImage( image, 0, 0, width, height );
	
						console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );
	
						return canvas;
	
					} else {
	
						if ( 'data' in image ) {
	
							console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );
	
						}
	
						return image;
	
					}
	
				}
	
				return image;
	
			}
	
			function isPowerOfTwo( image ) {
	
				return MathUtils.isPowerOfTwo( image.width ) && MathUtils.isPowerOfTwo( image.height );
	
			}
	
			function textureNeedsPowerOfTwo( texture ) {
	
				if ( isWebGL2 ) { return false; }
	
				return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
					( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );
	
			}
	
			function textureNeedsGenerateMipmaps( texture, supportsMips ) {
	
				return texture.generateMipmaps && supportsMips &&
					texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;
	
			}
	
			function generateMipmap( target, texture, width, height ) {
	
				_gl.generateMipmap( target );
	
				var textureProperties = properties.get( texture );
	
				// Note: Math.log( x ) * Math.LOG2E used instead of Math.log2( x ) which is not supported by IE11
				textureProperties.__maxMipLevel = Math.log( Math.max( width, height ) ) * Math.LOG2E;
	
			}
	
			function getInternalFormat( internalFormatName, glFormat, glType ) {
	
				if ( isWebGL2 === false ) { return glFormat; }
	
				if ( internalFormatName !== null ) {
	
					if ( _gl[ internalFormatName ] !== undefined ) { return _gl[ internalFormatName ]; }
	
					console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );
	
				}
	
				var internalFormat = glFormat;
	
				if ( glFormat === 6403 ) {
	
					if ( glType === 5126 ) { internalFormat = 33326; }
					if ( glType === 5131 ) { internalFormat = 33325; }
					if ( glType === 5121 ) { internalFormat = 33321; }
	
				}
	
				if ( glFormat === 6407 ) {
	
					if ( glType === 5126 ) { internalFormat = 34837; }
					if ( glType === 5131 ) { internalFormat = 34843; }
					if ( glType === 5121 ) { internalFormat = 32849; }
	
				}
	
				if ( glFormat === 6408 ) {
	
					if ( glType === 5126 ) { internalFormat = 34836; }
					if ( glType === 5131 ) { internalFormat = 34842; }
					if ( glType === 5121 ) { internalFormat = 32856; }
	
				}
	
				if ( internalFormat === 33325 || internalFormat === 33326 ||
					internalFormat === 34842 || internalFormat === 34836 ) {
	
					extensions.get( 'EXT_color_buffer_float' );
	
				} else if ( internalFormat === 34843 || internalFormat === 34837 ) {
	
					console.warn( 'THREE.WebGLRenderer: Floating point textures with RGB format not supported. Please use RGBA instead.' );
	
				}
	
				return internalFormat;
	
			}
	
			// Fallback filters for non-power-of-2 textures
	
			function filterFallback( f ) {
	
				if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {
	
					return 9728;
	
				}
	
				return 9729;
	
			}
	
			//
	
			function onTextureDispose( event ) {
	
				var texture = event.target;
	
				texture.removeEventListener( 'dispose', onTextureDispose );
	
				deallocateTexture( texture );
	
				if ( texture.isVideoTexture ) {
	
					_videoTextures.delete( texture );
	
				}
	
				info.memory.textures --;
	
			}
	
			function onRenderTargetDispose( event ) {
	
				var renderTarget = event.target;
	
				renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
	
				deallocateRenderTarget( renderTarget );
	
				info.memory.textures --;
	
			}
	
			//
	
			function deallocateTexture( texture ) {
	
				var textureProperties = properties.get( texture );
	
				if ( textureProperties.__webglInit === undefined ) { return; }
	
				_gl.deleteTexture( textureProperties.__webglTexture );
	
				properties.remove( texture );
	
			}
	
			function deallocateRenderTarget( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );
	
				if ( ! renderTarget ) { return; }
	
				if ( textureProperties.__webglTexture !== undefined ) {
	
					_gl.deleteTexture( textureProperties.__webglTexture );
	
				}
	
				if ( renderTarget.depthTexture ) {
	
					renderTarget.depthTexture.dispose();
	
				}
	
				if ( renderTarget.isWebGLCubeRenderTarget ) {
	
					for ( var i = 0; i < 6; i ++ ) {
	
						_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
						if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] ); }
	
					}
	
				} else {
	
					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
					if ( renderTargetProperties.__webglDepthbuffer ) { _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer ); }
	
				}
	
				properties.remove( renderTarget.texture );
				properties.remove( renderTarget );
	
			}
	
			//
	
			var textureUnits = 0;
	
			function resetTextureUnits() {
	
				textureUnits = 0;
	
			}
	
			function allocateTextureUnit() {
	
				var textureUnit = textureUnits;
	
				if ( textureUnit >= maxTextures ) {
	
					console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );
	
				}
	
				textureUnits += 1;
	
				return textureUnit;
	
			}
	
			//
	
			function setTexture2D( texture, slot ) {
	
				var textureProperties = properties.get( texture );
	
				if ( texture.isVideoTexture ) { updateVideoTexture( texture ); }
	
				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
					var image = texture.image;
	
					if ( image === undefined ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );
	
					} else if ( image.complete === false ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );
	
					} else {
	
						uploadTexture( textureProperties, texture, slot );
						return;
	
					}
	
				}
	
				state.activeTexture( 33984 + slot );
				state.bindTexture( 3553, textureProperties.__webglTexture );
	
			}
	
			function setTexture2DArray( texture, slot ) {
	
				var textureProperties = properties.get( texture );
	
				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
					uploadTexture( textureProperties, texture, slot );
					return;
	
				}
	
				state.activeTexture( 33984 + slot );
				state.bindTexture( 35866, textureProperties.__webglTexture );
	
			}
	
			function setTexture3D( texture, slot ) {
	
				var textureProperties = properties.get( texture );
	
				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
					uploadTexture( textureProperties, texture, slot );
					return;
	
				}
	
				state.activeTexture( 33984 + slot );
				state.bindTexture( 32879, textureProperties.__webglTexture );
	
			}
	
			function setTextureCube( texture, slot ) {
	
				if ( texture.image.length !== 6 ) { return; }
	
				var textureProperties = properties.get( texture );
	
				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
					initTexture( textureProperties, texture );
	
					state.activeTexture( 33984 + slot );
					state.bindTexture( 34067, textureProperties.__webglTexture );
	
					_gl.pixelStorei( 37440, texture.flipY );
	
					var isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );
					var isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );
	
					var cubeImage = [];
	
					for ( var i = 0; i < 6; i ++ ) {
	
						if ( ! isCompressed && ! isDataTexture ) {
	
							cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );
	
						} else {
	
							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
	
						}
	
					}
	
					var image = cubeImage[ 0 ],
						supportsMips = isPowerOfTwo( image ) || isWebGL2,
						glFormat = utils.convert( texture.format ),
						glType = utils.convert( texture.type ),
						glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );
	
					setTextureParameters( 34067, texture, supportsMips );
	
					var mipmaps;
	
					if ( isCompressed ) {
	
						for ( var i = 0; i < 6; i ++ ) {
	
							mipmaps = cubeImage[ i ].mipmaps;
	
							for ( var j = 0; j < mipmaps.length; j ++ ) {
	
								var mipmap = mipmaps[ j ];
	
								if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
	
									if ( glFormat !== null ) {
	
										state.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
	
									} else {
	
										console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );
	
									}
	
								} else {
	
									state.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
								}
	
							}
	
						}
	
						textureProperties.__maxMipLevel = mipmaps.length - 1;
	
					} else {
	
						mipmaps = texture.mipmaps;
	
						for ( var i = 0; i < 6; i ++ ) {
	
							if ( isDataTexture ) {
	
								state.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
	
								for ( var j = 0; j < mipmaps.length; j ++ ) {
	
									var mipmap = mipmaps[ j ];
									var mipmapImage = mipmap.image[ i ].image;
	
									state.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );
	
								}
	
							} else {
	
								state.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );
	
								for ( var j = 0; j < mipmaps.length; j ++ ) {
	
									var mipmap = mipmaps[ j ];
	
									state.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );
	
								}
	
							}
	
						}
	
						textureProperties.__maxMipLevel = mipmaps.length;
	
					}
	
					if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
	
						// We assume images for cube map have the same size.
						generateMipmap( 34067, texture, image.width, image.height );
	
					}
	
					textureProperties.__version = texture.version;
	
					if ( texture.onUpdate ) { texture.onUpdate( texture ); }
	
				} else {
	
					state.activeTexture( 33984 + slot );
					state.bindTexture( 34067, textureProperties.__webglTexture );
	
				}
	
			}
	
			function setTextureCubeDynamic( texture, slot ) {
	
				state.activeTexture( 33984 + slot );
				state.bindTexture( 34067, properties.get( texture ).__webglTexture );
	
			}
	
			var wrappingToGL = {};
			wrappingToGL[ RepeatWrapping ] = 10497;
			wrappingToGL[ ClampToEdgeWrapping ] = 33071;
			wrappingToGL[ MirroredRepeatWrapping ] = 33648;
	
			var filterToGL = {};
			filterToGL[ NearestFilter ] = 9728;
			filterToGL[ NearestMipmapNearestFilter ] = 9984;
			filterToGL[ NearestMipmapLinearFilter ] = 9986;
			filterToGL[ LinearFilter ] = 9729;
			filterToGL[ LinearMipmapNearestFilter ] = 9985;
			filterToGL[ LinearMipmapLinearFilter ] = 9987;
	
			function setTextureParameters( textureType, texture, supportsMips ) {
	
				if ( supportsMips ) {
	
					_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );
					_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );
	
					if ( textureType === 32879 || textureType === 35866 ) {
	
						_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );
	
					}
	
					_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );
					_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );
	
				} else {
	
					_gl.texParameteri( textureType, 10242, 33071 );
					_gl.texParameteri( textureType, 10243, 33071 );
	
					if ( textureType === 32879 || textureType === 35866 ) {
	
						_gl.texParameteri( textureType, 32882, 33071 );
	
					}
	
					if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );
	
					}
	
					_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );
					_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );
	
					if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {
	
						console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );
	
					}
	
				}
	
				var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
	
				if ( extension ) {
	
					if ( texture.type === FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) { return; }
					if ( texture.type === HalfFloatType && ( isWebGL2 || extensions.get( 'OES_texture_half_float_linear' ) ) === null ) { return; }
	
					if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {
	
						_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
						properties.get( texture ).__currentAnisotropy = texture.anisotropy;
	
					}
	
				}
	
			}
	
			function initTexture( textureProperties, texture ) {
	
				if ( textureProperties.__webglInit === undefined ) {
	
					textureProperties.__webglInit = true;
	
					texture.addEventListener( 'dispose', onTextureDispose );
	
					textureProperties.__webglTexture = _gl.createTexture();
	
					info.memory.textures ++;
	
				}
	
			}
	
			function uploadTexture( textureProperties, texture, slot ) {
	
				var textureType = 3553;
	
				if ( texture.isDataTexture2DArray ) { textureType = 35866; }
				if ( texture.isDataTexture3D ) { textureType = 32879; }
	
				initTexture( textureProperties, texture );
	
				state.activeTexture( 33984 + slot );
				state.bindTexture( textureType, textureProperties.__webglTexture );
	
				_gl.pixelStorei( 37440, texture.flipY );
				_gl.pixelStorei( 37441, texture.premultiplyAlpha );
				_gl.pixelStorei( 3317, texture.unpackAlignment );
	
				var needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false;
				var image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );
	
				var supportsMips = isPowerOfTwo( image ) || isWebGL2,
					glFormat = utils.convert( texture.format ),
					glType = utils.convert( texture.type ),
					glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType );
	
				setTextureParameters( textureType, texture, supportsMips );
	
				var mipmap, mipmaps = texture.mipmaps;
	
				if ( texture.isDepthTexture ) {
	
					// populate depth texture with dummy data
	
					glInternalFormat = 6402;
	
					if ( texture.type === FloatType ) {
	
						if ( isWebGL2 === false ) { throw new Error( 'Float Depth Texture only supported in WebGL2.0' ); }
						glInternalFormat = 36012;
	
					} else if ( isWebGL2 ) {
	
						// WebGL 2.0 requires signed internalformat for glTexImage2D
						glInternalFormat = 33189;
	
					}
	
					if ( texture.format === DepthFormat && glInternalFormat === 6402 ) {
	
						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {
	
							console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );
	
							texture.type = UnsignedShortType;
							glType = utils.convert( texture.type );
	
						}
	
					}
	
					// Depth stencil textures need the DEPTH_STENCIL internal format
					// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
					if ( texture.format === DepthStencilFormat ) {
	
						glInternalFormat = 34041;
	
						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedInt248Type ) {
	
							console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );
	
							texture.type = UnsignedInt248Type;
							glType = utils.convert( texture.type );
	
						}
	
					}
	
					state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );
	
				} else if ( texture.isDataTexture ) {
	
					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels
	
					if ( mipmaps.length > 0 && supportsMips ) {
	
						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
							mipmap = mipmaps[ i ];
							state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
						}
	
						texture.generateMipmaps = false;
						textureProperties.__maxMipLevel = mipmaps.length - 1;
	
					} else {
	
						state.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );
						textureProperties.__maxMipLevel = 0;
	
					}
	
				} else if ( texture.isCompressedTexture ) {
	
					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
						mipmap = mipmaps[ i ];
	
						if ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {
	
							if ( glFormat !== null ) {
	
								state.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );
	
							} else {
	
								console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );
	
							}
	
						} else {
	
							state.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
						}
	
					}
	
					textureProperties.__maxMipLevel = mipmaps.length - 1;
	
				} else if ( texture.isDataTexture2DArray ) {
	
					state.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
					textureProperties.__maxMipLevel = 0;
	
				} else if ( texture.isDataTexture3D ) {
	
					state.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );
					textureProperties.__maxMipLevel = 0;
	
				} else {
	
					// regular Texture (image, video, canvas)
	
					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels
	
					if ( mipmaps.length > 0 && supportsMips ) {
	
						for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
							mipmap = mipmaps[ i ];
							state.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );
	
						}
	
						texture.generateMipmaps = false;
						textureProperties.__maxMipLevel = mipmaps.length - 1;
	
					} else {
	
						state.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );
						textureProperties.__maxMipLevel = 0;
	
					}
	
				}
	
				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
	
					generateMipmap( textureType, texture, image.width, image.height );
	
				}
	
				textureProperties.__version = texture.version;
	
				if ( texture.onUpdate ) { texture.onUpdate( texture ); }
	
			}
	
			// Render targets
	
			// Setup storage for target texture and bind it to correct framebuffer
			function setupFrameBufferTexture( framebuffer, renderTarget, attachment, textureTarget ) {
	
				var glFormat = utils.convert( renderTarget.texture.format );
				var glType = utils.convert( renderTarget.texture.type );
				var glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );
				state.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
				_gl.bindFramebuffer( 36160, framebuffer );
				_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
				_gl.bindFramebuffer( 36160, null );
	
			}
	
			// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
			function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {
	
				_gl.bindRenderbuffer( 36161, renderbuffer );
	
				if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
	
					if ( isMultisample ) {
	
						var samples = getRenderTargetSamples( renderTarget );
	
						_gl.renderbufferStorageMultisample( 36161, samples, 33189, renderTarget.width, renderTarget.height );
	
					} else {
	
						_gl.renderbufferStorage( 36161, 33189, renderTarget.width, renderTarget.height );
	
					}
	
					_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );
	
				} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
	
					if ( isMultisample ) {
	
						var samples = getRenderTargetSamples( renderTarget );
	
						_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );
	
					} else {
	
						_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );
	
					}
	
	
					_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );
	
				} else {
	
					var glFormat = utils.convert( renderTarget.texture.format );
					var glType = utils.convert( renderTarget.texture.type );
					var glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );
	
					if ( isMultisample ) {
	
						var samples = getRenderTargetSamples( renderTarget );
	
						_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
	
					} else {
	
						_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );
	
					}
	
				}
	
				_gl.bindRenderbuffer( 36161, null );
	
			}
	
			// Setup resources for a Depth Texture for a FBO (needs an extension)
			function setupDepthTexture( framebuffer, renderTarget ) {
	
				var isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
				if ( isCube ) { throw new Error( 'Depth Texture with cube render targets is not supported' ); }
	
				_gl.bindFramebuffer( 36160, framebuffer );
	
				if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {
	
					throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );
	
				}
	
				// upload an empty depth texture with framebuffer size
				if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
						renderTarget.depthTexture.image.width !== renderTarget.width ||
						renderTarget.depthTexture.image.height !== renderTarget.height ) {
	
					renderTarget.depthTexture.image.width = renderTarget.width;
					renderTarget.depthTexture.image.height = renderTarget.height;
					renderTarget.depthTexture.needsUpdate = true;
	
				}
	
				setTexture2D( renderTarget.depthTexture, 0 );
	
				var webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
	
				if ( renderTarget.depthTexture.format === DepthFormat ) {
	
					_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );
	
				} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {
	
					_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );
	
				} else {
	
					throw new Error( 'Unknown depthTexture format' );
	
				}
	
			}
	
			// Setup GL resources for a non-texture depth buffer
			function setupDepthRenderbuffer( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
	
				var isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
	
				if ( renderTarget.depthTexture ) {
	
					if ( isCube ) { throw new Error( 'target.depthTexture not supported in Cube render targets' ); }
	
					setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );
	
				} else {
	
					if ( isCube ) {
	
						renderTargetProperties.__webglDepthbuffer = [];
	
						for ( var i = 0; i < 6; i ++ ) {
	
							_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );
							renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
							setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );
	
						}
	
					} else {
	
						_gl.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );
						renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );
	
					}
	
				}
	
				_gl.bindFramebuffer( 36160, null );
	
			}
	
			// Set up GL resources for the render target
			function setupRenderTarget( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );
	
				renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
	
				textureProperties.__webglTexture = _gl.createTexture();
	
				info.memory.textures ++;
	
				var isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
				var isMultisample = ( renderTarget.isWebGLMultisampleRenderTarget === true );
				var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;
	
				// Setup framebuffer
	
				if ( isCube ) {
	
					renderTargetProperties.__webglFramebuffer = [];
	
					for ( var i = 0; i < 6; i ++ ) {
	
						renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();
	
					}
	
				} else {
	
					renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
	
					if ( isMultisample ) {
	
						if ( isWebGL2 ) {
	
							renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
							renderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();
	
							_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );
	
							var glFormat = utils.convert( renderTarget.texture.format );
							var glType = utils.convert( renderTarget.texture.type );
							var glInternalFormat = getInternalFormat( renderTarget.texture.internalFormat, glFormat, glType );
							var samples = getRenderTargetSamples( renderTarget );
							_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );
	
							_gl.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );
							_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );
							_gl.bindRenderbuffer( 36161, null );
	
							if ( renderTarget.depthBuffer ) {
	
								renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
								setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );
	
							}
	
							_gl.bindFramebuffer( 36160, null );
	
	
						} else {
	
							console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );
	
						}
	
					}
	
				}
	
				// Setup color buffer
	
				if ( isCube ) {
	
					state.bindTexture( 34067, textureProperties.__webglTexture );
					setTextureParameters( 34067, renderTarget.texture, supportsMips );
	
					for ( var i = 0; i < 6; i ++ ) {
	
						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, 36064, 34069 + i );
	
					}
	
					if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {
	
						generateMipmap( 34067, renderTarget.texture, renderTarget.width, renderTarget.height );
	
					}
	
					state.bindTexture( 34067, null );
	
				} else {
	
					state.bindTexture( 3553, textureProperties.__webglTexture );
					setTextureParameters( 3553, renderTarget.texture, supportsMips );
					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, 36064, 3553 );
	
					if ( textureNeedsGenerateMipmaps( renderTarget.texture, supportsMips ) ) {
	
						generateMipmap( 3553, renderTarget.texture, renderTarget.width, renderTarget.height );
	
					}
	
					state.bindTexture( 3553, null );
	
				}
	
				// Setup depth and stencil buffers
	
				if ( renderTarget.depthBuffer ) {
	
					setupDepthRenderbuffer( renderTarget );
	
				}
	
			}
	
			function updateRenderTargetMipmap( renderTarget ) {
	
				var texture = renderTarget.texture;
				var supportsMips = isPowerOfTwo( renderTarget ) || isWebGL2;
	
				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {
	
					var target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;
					var webglTexture = properties.get( texture ).__webglTexture;
	
					state.bindTexture( target, webglTexture );
					generateMipmap( target, texture, renderTarget.width, renderTarget.height );
					state.bindTexture( target, null );
	
				}
	
			}
	
			function updateMultisampleRenderTarget( renderTarget ) {
	
				if ( renderTarget.isWebGLMultisampleRenderTarget ) {
	
					if ( isWebGL2 ) {
	
						var renderTargetProperties = properties.get( renderTarget );
	
						_gl.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );
						_gl.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );
	
						var width = renderTarget.width;
						var height = renderTarget.height;
						var mask = 16384;
	
						if ( renderTarget.depthBuffer ) { mask |= 256; }
						if ( renderTarget.stencilBuffer ) { mask |= 1024; }
	
						_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );
	
					} else {
	
						console.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );
	
					}
	
				}
	
			}
	
			function getRenderTargetSamples( renderTarget ) {
	
				return ( isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ) ?
					Math.min( maxSamples, renderTarget.samples ) : 0;
	
			}
	
			function updateVideoTexture( texture ) {
	
				var frame = info.render.frame;
	
				// Check the last frame we updated the VideoTexture
	
				if ( _videoTextures.get( texture ) !== frame ) {
	
					_videoTextures.set( texture, frame );
					texture.update();
	
				}
	
			}
	
			// backwards compatibility
	
			var warnedTexture2D = false;
			var warnedTextureCube = false;
	
			function safeSetTexture2D( texture, slot ) {
	
				if ( texture && texture.isWebGLRenderTarget ) {
	
					if ( warnedTexture2D === false ) {
	
						console.warn( "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead." );
						warnedTexture2D = true;
	
					}
	
					texture = texture.texture;
	
				}
	
				setTexture2D( texture, slot );
	
			}
	
			function safeSetTextureCube( texture, slot ) {
	
				if ( texture && texture.isWebGLCubeRenderTarget ) {
	
					if ( warnedTextureCube === false ) {
	
						console.warn( "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead." );
						warnedTextureCube = true;
	
					}
	
					texture = texture.texture;
	
				}
	
				// currently relying on the fact that WebGLCubeRenderTarget.texture is a Texture and NOT a CubeTexture
				// TODO: unify these code paths
				if ( ( texture && texture.isCubeTexture ) ||
					( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {
	
					// CompressedTexture can have Array in image :/
	
					// this function alone should take care of cube textures
					setTextureCube( texture, slot );
	
				} else {
	
					// assumed: texture property of THREE.WebGLCubeRenderTarget
					setTextureCubeDynamic( texture, slot );
	
				}
	
			}
	
			//
	
			this.allocateTextureUnit = allocateTextureUnit;
			this.resetTextureUnits = resetTextureUnits;
	
			this.setTexture2D = setTexture2D;
			this.setTexture2DArray = setTexture2DArray;
			this.setTexture3D = setTexture3D;
			this.setTextureCube = setTextureCube;
			this.setTextureCubeDynamic = setTextureCubeDynamic;
			this.setupRenderTarget = setupRenderTarget;
			this.updateRenderTargetMipmap = updateRenderTargetMipmap;
			this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
	
			this.safeSetTexture2D = safeSetTexture2D;
			this.safeSetTextureCube = safeSetTextureCube;
	
		}
	
		/**
		 * @author thespite / http://www.twitter.com/thespite
		 */
	
		function WebGLUtils( gl, extensions, capabilities ) {
	
			var isWebGL2 = capabilities.isWebGL2;
	
			function convert( p ) {
	
				var extension;
	
				if ( p === UnsignedByteType ) { return 5121; }
				if ( p === UnsignedShort4444Type ) { return 32819; }
				if ( p === UnsignedShort5551Type ) { return 32820; }
				if ( p === UnsignedShort565Type ) { return 33635; }
	
				if ( p === ByteType ) { return 5120; }
				if ( p === ShortType ) { return 5122; }
				if ( p === UnsignedShortType ) { return 5123; }
				if ( p === IntType ) { return 5124; }
				if ( p === UnsignedIntType ) { return 5125; }
				if ( p === FloatType ) { return 5126; }
	
				if ( p === HalfFloatType ) {
	
					if ( isWebGL2 ) { return 5131; }
	
					extension = extensions.get( 'OES_texture_half_float' );
	
					if ( extension !== null ) {
	
						return extension.HALF_FLOAT_OES;
	
					} else {
	
						return null;
	
					}
	
				}
	
				if ( p === AlphaFormat ) { return 6406; }
				if ( p === RGBFormat ) { return 6407; }
				if ( p === RGBAFormat ) { return 6408; }
				if ( p === LuminanceFormat ) { return 6409; }
				if ( p === LuminanceAlphaFormat ) { return 6410; }
				if ( p === DepthFormat ) { return 6402; }
				if ( p === DepthStencilFormat ) { return 34041; }
				if ( p === RedFormat ) { return 6403; }
	
				// WebGL2 formats.
	
				if ( p === RedIntegerFormat ) { return 36244; }
				if ( p === RGFormat ) { return 33319; }
				if ( p === RGIntegerFormat ) { return 33320; }
				if ( p === RGBIntegerFormat ) { return 36248; }
				if ( p === RGBAIntegerFormat ) { return 36249; }
	
				if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||
					p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
	
					if ( extension !== null ) {
	
						if ( p === RGB_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGB_S3TC_DXT1_EXT; }
						if ( p === RGBA_S3TC_DXT1_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT; }
						if ( p === RGBA_S3TC_DXT3_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT; }
						if ( p === RGBA_S3TC_DXT5_Format ) { return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT; }
	
					} else {
	
						return null;
	
					}
	
				}
	
				if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||
					p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
	
					if ( extension !== null ) {
	
						if ( p === RGB_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; }
						if ( p === RGB_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; }
						if ( p === RGBA_PVRTC_4BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; }
						if ( p === RGBA_PVRTC_2BPPV1_Format ) { return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG; }
	
					} else {
	
						return null;
	
					}
	
				}
	
				if ( p === RGB_ETC1_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_etc1' );
	
					if ( extension !== null ) {
	
						return extension.COMPRESSED_RGB_ETC1_WEBGL;
	
					} else {
	
						return null;
	
					}
	
				}
	
				if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_etc' );
	
					if ( extension !== null ) {
	
						if ( p === RGB_ETC2_Format ) { return extension.COMPRESSED_RGB8_ETC2; }
						if ( p === RGBA_ETC2_EAC_Format ) { return extension.COMPRESSED_RGBA8_ETC2_EAC; }
	
					}
	
				}
	
				if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
					p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
					p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
					p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
					p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||
					p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||
					p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||
					p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||
					p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||
					p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {
	
					extension = extensions.get( 'WEBGL_compressed_texture_astc' );
	
					if ( extension !== null ) {
	
						// TODO Complete?
	
						return p;
	
					} else {
	
						return null;
	
					}
	
				}
	
				if ( p === UnsignedInt248Type ) {
	
					if ( isWebGL2 ) { return 34042; }
	
					extension = extensions.get( 'WEBGL_depth_texture' );
	
					if ( extension !== null ) {
	
						return extension.UNSIGNED_INT_24_8_WEBGL;
	
					} else {
	
						return null;
	
					}
	
				}
	
			}
	
			return { convert: convert };
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function ArrayCamera( array ) {
	
			PerspectiveCamera.call( this );
	
			this.cameras = array || [];
	
		}
	
		ArrayCamera.prototype = Object.assign( Object.create( PerspectiveCamera.prototype ), {
	
			constructor: ArrayCamera,
	
			isArrayCamera: true
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Group() {
	
			Object3D.call( this );
	
			this.type = 'Group';
	
		}
	
		Group.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Group,
	
			isGroup: true
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function WebXRManager( renderer, gl ) {
	
			var scope = this;
	
			var session = null;
	
			var framebufferScaleFactor = 1.0;
	
			var referenceSpace = null;
			var referenceSpaceType = 'local-floor';
	
			var pose = null;
	
			var controllers = [];
			var inputSourcesMap = new Map();
	
			//
	
			var cameraL = new PerspectiveCamera();
			cameraL.layers.enable( 1 );
			cameraL.viewport = new Vector4();
	
			var cameraR = new PerspectiveCamera();
			cameraR.layers.enable( 2 );
			cameraR.viewport = new Vector4();
	
			var cameraVR = new ArrayCamera( [ cameraL, cameraR ] );
			cameraVR.layers.enable( 1 );
			cameraVR.layers.enable( 2 );
	
			var _currentDepthNear = null;
			var _currentDepthFar = null;
	
			//
	
			this.enabled = false;
	
			this.isPresenting = false;
	
			this.getController = function ( id ) {
	
				var controller = controllers[ id ];
	
				if ( controller === undefined ) {
	
					controller = {};
					controllers[ id ] = controller;
	
				}
	
				if ( controller.targetRay === undefined ) {
	
					controller.targetRay = new Group();
					controller.targetRay.matrixAutoUpdate = false;
					controller.targetRay.visible = false;
	
				}
	
				return controller.targetRay;
	
			};
	
			this.getControllerGrip = function ( id ) {
	
				var controller = controllers[ id ];
	
				if ( controller === undefined ) {
	
					controller = {};
					controllers[ id ] = controller;
	
				}
	
				if ( controller.grip === undefined ) {
	
					controller.grip = new Group();
					controller.grip.matrixAutoUpdate = false;
					controller.grip.visible = false;
	
				}
	
				return controller.grip;
	
			};
	
			//
	
			function onSessionEvent( event ) {
	
				var controller = inputSourcesMap.get( event.inputSource );
	
				if ( controller ) {
	
					if ( controller.targetRay ) {
	
						controller.targetRay.dispatchEvent( { type: event.type } );
	
					}
	
					if ( controller.grip ) {
	
						controller.grip.dispatchEvent( { type: event.type } );
	
					}
	
				}
	
			}
	
			function onSessionEnd() {
	
				inputSourcesMap.forEach( function ( controller, inputSource ) {
	
					if ( controller.targetRay ) {
	
						controller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );
						controller.targetRay.visible = false;
	
					}
	
					if ( controller.grip ) {
	
						controller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );
						controller.grip.visible = false;
	
					}
	
				} );
	
				inputSourcesMap.clear();
	
				//
	
				renderer.setFramebuffer( null );
				renderer.setRenderTarget( renderer.getRenderTarget() ); // Hack #15830
				animation.stop();
	
				scope.isPresenting = false;
	
				scope.dispatchEvent( { type: 'sessionend' } );
	
			}
	
			function onRequestReferenceSpace( value ) {
	
				referenceSpace = value;
	
				animation.setContext( session );
				animation.start();
	
				scope.isPresenting = true;
	
				scope.dispatchEvent( { type: 'sessionstart' } );
	
			}
	
			this.setFramebufferScaleFactor = function ( value ) {
	
				framebufferScaleFactor = value;
	
				// Warn if function is used while presenting
				if ( scope.isPresenting == true ) {
	
					console.warn( "WebXRManager: Cannot change framebuffer scale while presenting VR content" );
	
				}
	
			};
	
			this.setReferenceSpaceType = function ( value ) {
	
				referenceSpaceType = value;
	
			};
	
			this.getReferenceSpace = function () {
	
				return referenceSpace;
	
			};
	
			this.getSession = function () {
	
				return session;
	
			};
	
			this.setSession = function ( value ) {
	
				session = value;
	
				if ( session !== null ) {
	
					session.addEventListener( 'select', onSessionEvent );
					session.addEventListener( 'selectstart', onSessionEvent );
					session.addEventListener( 'selectend', onSessionEvent );
					session.addEventListener( 'squeeze', onSessionEvent );
					session.addEventListener( 'squeezestart', onSessionEvent );
					session.addEventListener( 'squeezeend', onSessionEvent );
					session.addEventListener( 'end', onSessionEnd );
	
					var attributes = gl.getContextAttributes();
	
					var layerInit = {
						antialias: attributes.antialias,
						alpha: attributes.alpha,
						depth: attributes.depth,
						stencil: attributes.stencil,
						framebufferScaleFactor: framebufferScaleFactor
					};
	
					// eslint-disable-next-line no-undef
					var baseLayer = new XRWebGLLayer( session, gl, layerInit );
	
					session.updateRenderState( { baseLayer: baseLayer } );
	
					session.requestReferenceSpace( referenceSpaceType ).then( onRequestReferenceSpace );
	
					//
	
					session.addEventListener( 'inputsourceschange', updateInputSources );
	
				}
	
			};
	
			function updateInputSources( event ) {
	
				var inputSources = session.inputSources;
	
				// Assign inputSources to available controllers
	
				for ( var i = 0; i < controllers.length; i ++ ) {
	
					inputSourcesMap.set( inputSources[ i ], controllers[ i ] );
	
				}
	
				// Notify disconnected
	
				for ( var i = 0; i < event.removed.length; i ++ ) {
	
					var inputSource = event.removed[ i ];
					var controller = inputSourcesMap.get( inputSource );
	
					if ( controller ) {
	
						if ( controller.targetRay ) {
	
							controller.targetRay.dispatchEvent( { type: 'disconnected', data: inputSource } );
	
						}
	
						if ( controller.grip ) {
	
							controller.grip.dispatchEvent( { type: 'disconnected', data: inputSource } );
	
						}
	
						inputSourcesMap.delete( inputSource );
	
					}
	
				}
	
				// Notify connected
	
				for ( var i = 0; i < event.added.length; i ++ ) {
	
					var inputSource = event.added[ i ];
					var controller = inputSourcesMap.get( inputSource );
	
					if ( controller ) {
	
						if ( controller.targetRay ) {
	
							controller.targetRay.dispatchEvent( { type: 'connected', data: inputSource } );
	
						}
	
						if ( controller.grip ) {
	
							controller.grip.dispatchEvent( { type: 'connected', data: inputSource } );
	
						}
	
					}
	
				}
	
			}
	
			//
	
			var cameraLPos = new Vector3();
			var cameraRPos = new Vector3();
	
			/**
			 * @author jsantell / https://www.jsantell.com/
			 *
			 * Assumes 2 cameras that are parallel and share an X-axis, and that
			 * the cameras' projection and world matrices have already been set.
			 * And that near and far planes are identical for both cameras.
			 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
			 */
			function setProjectionFromUnion( camera, cameraL, cameraR ) {
	
				cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
				cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );
	
				var ipd = cameraLPos.distanceTo( cameraRPos );
	
				var projL = cameraL.projectionMatrix.elements;
				var projR = cameraR.projectionMatrix.elements;
	
				// VR systems will have identical far and near planes, and
				// most likely identical top and bottom frustum extents.
				// Use the left camera for these values.
				var near = projL[ 14 ] / ( projL[ 10 ] - 1 );
				var far = projL[ 14 ] / ( projL[ 10 ] + 1 );
				var topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
				var bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];
	
				var leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
				var rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
				var left = near * leftFov;
				var right = near * rightFov;
	
				// Calculate the new camera's position offset from the
				// left camera. xOffset should be roughly half `ipd`.
				var zOffset = ipd / ( - leftFov + rightFov );
				var xOffset = zOffset * - leftFov;
	
				// TODO: Better way to apply this offset?
				cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
				camera.translateX( xOffset );
				camera.translateZ( zOffset );
				camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
				camera.matrixWorldInverse.getInverse( camera.matrixWorld );
	
				// Find the union of the frustum values of the cameras and scale
				// the values so that the near plane's position does not change in world space,
				// although must now be relative to the new union camera.
				var near2 = near + zOffset;
				var far2 = far + zOffset;
				var left2 = left - xOffset;
				var right2 = right + ( ipd - xOffset );
				var top2 = topFov * far / far2 * near2;
				var bottom2 = bottomFov * far / far2 * near2;
	
				camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
	
			}
	
			function updateCamera( camera, parent ) {
	
				if ( parent === null ) {
	
					camera.matrixWorld.copy( camera.matrix );
	
				} else {
	
					camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );
	
				}
	
				camera.matrixWorldInverse.getInverse( camera.matrixWorld );
	
			}
	
			this.getCamera = function ( camera ) {
	
				cameraVR.near = cameraR.near = cameraL.near = camera.near;
				cameraVR.far = cameraR.far = cameraL.far = camera.far;
	
				if ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {
	
					// Note that the new renderState won't apply until the next frame. See #18320
	
					session.updateRenderState( {
						depthNear: cameraVR.near,
						depthFar: cameraVR.far
					} );
	
					_currentDepthNear = cameraVR.near;
					_currentDepthFar = cameraVR.far;
	
				}
	
				var parent = camera.parent;
				var cameras = cameraVR.cameras;
	
				updateCamera( cameraVR, parent );
	
				for ( var i = 0; i < cameras.length; i ++ ) {
	
					updateCamera( cameras[ i ], parent );
	
				}
	
				// update camera and its children
	
				camera.matrixWorld.copy( cameraVR.matrixWorld );
	
				var children = camera.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					children[ i ].updateMatrixWorld( true );
	
				}
	
				setProjectionFromUnion( cameraVR, cameraL, cameraR );
	
				return cameraVR;
	
			};
	
			// Animation Loop
	
			var onAnimationFrameCallback = null;
	
			function onAnimationFrame( time, frame ) {
	
				pose = frame.getViewerPose( referenceSpace );
	
				if ( pose !== null ) {
	
					var views = pose.views;
					var baseLayer = session.renderState.baseLayer;
	
					renderer.setFramebuffer( baseLayer.framebuffer );
	
					for ( var i = 0; i < views.length; i ++ ) {
	
						var view = views[ i ];
						var viewport = baseLayer.getViewport( view );
	
						var camera = cameraVR.cameras[ i ];
						camera.matrix.fromArray( view.transform.matrix );
						camera.projectionMatrix.fromArray( view.projectionMatrix );
						camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );
	
						if ( i === 0 ) {
	
							cameraVR.matrix.copy( camera.matrix );
	
						}
	
					}
	
				}
	
				//
	
				var inputSources = session.inputSources;
	
				for ( var i = 0; i < controllers.length; i ++ ) {
	
					var controller = controllers[ i ];
	
					var inputSource = inputSources[ i ];
	
					var inputPose = null;
					var gripPose = null;
	
					if ( inputSource ) {
	
						if ( controller.targetRay ) {
	
							inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );
	
							if ( inputPose !== null ) {
	
								controller.targetRay.matrix.fromArray( inputPose.transform.matrix );
								controller.targetRay.matrix.decompose( controller.targetRay.position, controller.targetRay.rotation, controller.targetRay.scale );
	
							}
	
						}
	
						if ( controller.grip && inputSource.gripSpace ) {
	
							gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );
	
							if ( gripPose !== null ) {
	
								controller.grip.matrix.fromArray( gripPose.transform.matrix );
								controller.grip.matrix.decompose( controller.grip.position, controller.grip.rotation, controller.grip.scale );
	
							}
	
						}
	
					}
	
					if ( controller.targetRay ) {
	
						controller.targetRay.visible = inputPose !== null;
	
					}
	
					if ( controller.grip ) {
	
						controller.grip.visible = gripPose !== null;
	
					}
	
				}
	
				if ( onAnimationFrameCallback ) { onAnimationFrameCallback( time, frame ); }
	
			}
	
			var animation = new WebGLAnimation();
			animation.setAnimationLoop( onAnimationFrame );
	
			this.setAnimationLoop = function ( callback ) {
	
				onAnimationFrameCallback = callback;
	
			};
	
			this.dispose = function () {};
	
		}
	
		Object.assign( WebXRManager.prototype, EventDispatcher.prototype );
	
		/**
		 * @author supereggbert / http://www.paulbrunt.co.uk/
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 * @author szimek / https://github.com/szimek/
		 * @author tschw
		 */
	
		function WebGLRenderer( parameters ) {
	
			parameters = parameters || {};
	
			var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS( 'http://www.w3.org/1999/xhtml', 'canvas' ),
				_context = parameters.context !== undefined ? parameters.context : null,
	
				_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
				_depth = parameters.depth !== undefined ? parameters.depth : true,
				_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
				_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
				_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
				_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
				_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',
				_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;
	
			var currentRenderList = null;
			var currentRenderState = null;
	
			// public properties
	
			this.domElement = _canvas;
	
			// Debug configuration container
			this.debug = {
	
				/**
				 * Enables error checking and reporting when shader programs are being compiled
				 * @type {boolean}
				 */
				checkShaderErrors: true
			};
	
			// clearing
	
			this.autoClear = true;
			this.autoClearColor = true;
			this.autoClearDepth = true;
			this.autoClearStencil = true;
	
			// scene graph
	
			this.sortObjects = true;
	
			// user-defined clipping
	
			this.clippingPlanes = [];
			this.localClippingEnabled = false;
	
			// physically based shading
	
			this.gammaFactor = 2.0;	// for backwards compatibility
			this.outputEncoding = LinearEncoding;
	
			// physical lights
	
			this.physicallyCorrectLights = false;
	
			// tone mapping
	
			this.toneMapping = LinearToneMapping;
			this.toneMappingExposure = 1.0;
			this.toneMappingWhitePoint = 1.0;
	
			// morphs
	
			this.maxMorphTargets = 8;
			this.maxMorphNormals = 4;
	
			// internal properties
	
			var _this = this,
	
				_isContextLost = false,
	
				// internal state cache
	
				_framebuffer = null,
	
				_currentActiveCubeFace = 0,
				_currentActiveMipmapLevel = 0,
				_currentRenderTarget = null,
				_currentFramebuffer = null,
				_currentMaterialId = - 1,
	
				// geometry and program caching
	
				_currentGeometryProgram = {
					geometry: null,
					program: null,
					wireframe: false
				},
	
				_currentCamera = null,
				_currentArrayCamera = null,
	
				_currentViewport = new Vector4(),
				_currentScissor = new Vector4(),
				_currentScissorTest = null,
	
				//
	
				_width = _canvas.width,
				_height = _canvas.height,
	
				_pixelRatio = 1,
				_opaqueSort = null,
				_transparentSort = null,
	
				_viewport = new Vector4( 0, 0, _width, _height ),
				_scissor = new Vector4( 0, 0, _width, _height ),
				_scissorTest = false,
	
				// frustum
	
				_frustum = new Frustum(),
	
				// clipping
	
				_clipping = new WebGLClipping(),
				_clippingEnabled = false,
				_localClippingEnabled = false,
	
				// camera matrices cache
	
				_projScreenMatrix = new Matrix4(),
	
				_vector3 = new Vector3();
	
			function getTargetPixelRatio() {
	
				return _currentRenderTarget === null ? _pixelRatio : 1;
	
			}
	
			// initialize
	
			var _gl;
	
			try {
	
				var contextAttributes = {
					alpha: _alpha,
					depth: _depth,
					stencil: _stencil,
					antialias: _antialias,
					premultipliedAlpha: _premultipliedAlpha,
					preserveDrawingBuffer: _preserveDrawingBuffer,
					powerPreference: _powerPreference,
					failIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat,
					xrCompatible: true
				};
	
				// event listeners must be registered before WebGL context is created, see #12753
	
				_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
				_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
	
				_gl = _context || _canvas.getContext( 'webgl', contextAttributes ) || _canvas.getContext( 'experimental-webgl', contextAttributes );
	
				if ( _gl === null ) {
	
					if ( _canvas.getContext( 'webgl' ) !== null ) {
	
						throw new Error( 'Error creating WebGL context with your selected attributes.' );
	
					} else {
	
						throw new Error( 'Error creating WebGL context.' );
	
					}
	
				}
	
				// Some experimental-webgl implementations do not have getShaderPrecisionFormat
	
				if ( _gl.getShaderPrecisionFormat === undefined ) {
	
					_gl.getShaderPrecisionFormat = function () {
	
						return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };
	
					};
	
				}
	
			} catch ( error ) {
	
				console.error( 'THREE.WebGLRenderer: ' + error.message );
				throw error;
	
			}
	
			var extensions, capabilities, state, info;
			var properties, textures, attributes, geometries, objects;
			var programCache, renderLists, renderStates;
	
			var background, morphtargets, bufferRenderer, indexedBufferRenderer;
	
			var utils;
	
			function initGLContext() {
	
				extensions = new WebGLExtensions( _gl );
	
				capabilities = new WebGLCapabilities( _gl, extensions, parameters );
	
				if ( capabilities.isWebGL2 === false ) {
	
					extensions.get( 'WEBGL_depth_texture' );
					extensions.get( 'OES_texture_float' );
					extensions.get( 'OES_texture_half_float' );
					extensions.get( 'OES_texture_half_float_linear' );
					extensions.get( 'OES_standard_derivatives' );
					extensions.get( 'OES_element_index_uint' );
					extensions.get( 'ANGLE_instanced_arrays' );
	
				}
	
				extensions.get( 'OES_texture_float_linear' );
	
				utils = new WebGLUtils( _gl, extensions, capabilities );
	
				state = new WebGLState( _gl, extensions, capabilities );
				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );
	
				info = new WebGLInfo( _gl );
				properties = new WebGLProperties();
				textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
				attributes = new WebGLAttributes( _gl, capabilities );
				geometries = new WebGLGeometries( _gl, attributes, info );
				objects = new WebGLObjects( _gl, geometries, attributes, info );
				morphtargets = new WebGLMorphtargets( _gl );
				programCache = new WebGLPrograms( _this, extensions, capabilities );
				renderLists = new WebGLRenderLists();
				renderStates = new WebGLRenderStates();
	
				background = new WebGLBackground( _this, state, objects, _premultipliedAlpha );
	
				bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
				indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );
	
				info.programs = programCache.programs;
	
				_this.capabilities = capabilities;
				_this.extensions = extensions;
				_this.properties = properties;
				_this.renderLists = renderLists;
				_this.state = state;
				_this.info = info;
	
			}
	
			initGLContext();
	
			// xr
	
			var xr = new WebXRManager( _this, _gl );
	
			this.xr = xr;
	
			// shadow map
	
			var shadowMap = new WebGLShadowMap( _this, objects, capabilities.maxTextureSize );
	
			this.shadowMap = shadowMap;
	
			// API
	
			this.getContext = function () {
	
				return _gl;
	
			};
	
			this.getContextAttributes = function () {
	
				return _gl.getContextAttributes();
	
			};
	
			this.forceContextLoss = function () {
	
				var extension = extensions.get( 'WEBGL_lose_context' );
				if ( extension ) { extension.loseContext(); }
	
			};
	
			this.forceContextRestore = function () {
	
				var extension = extensions.get( 'WEBGL_lose_context' );
				if ( extension ) { extension.restoreContext(); }
	
			};
	
			this.getPixelRatio = function () {
	
				return _pixelRatio;
	
			};
	
			this.setPixelRatio = function ( value ) {
	
				if ( value === undefined ) { return; }
	
				_pixelRatio = value;
	
				this.setSize( _width, _height, false );
	
			};
	
			this.getSize = function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'WebGLRenderer: .getsize() now requires a Vector2 as an argument' );
	
					target = new Vector2();
	
				}
	
				return target.set( _width, _height );
	
			};
	
			this.setSize = function ( width, height, updateStyle ) {
	
				if ( xr.isPresenting ) {
	
					console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
					return;
	
				}
	
				_width = width;
				_height = height;
	
				_canvas.width = Math.floor( width * _pixelRatio );
				_canvas.height = Math.floor( height * _pixelRatio );
	
				if ( updateStyle !== false ) {
	
					_canvas.style.width = width + 'px';
					_canvas.style.height = height + 'px';
	
				}
	
				this.setViewport( 0, 0, width, height );
	
			};
	
			this.getDrawingBufferSize = function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument' );
	
					target = new Vector2();
	
				}
	
				return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();
	
			};
	
			this.setDrawingBufferSize = function ( width, height, pixelRatio ) {
	
				_width = width;
				_height = height;
	
				_pixelRatio = pixelRatio;
	
				_canvas.width = Math.floor( width * pixelRatio );
				_canvas.height = Math.floor( height * pixelRatio );
	
				this.setViewport( 0, 0, width, height );
	
			};
	
			this.getCurrentViewport = function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument' );
	
					target = new Vector4();
	
				}
	
				return target.copy( _currentViewport );
	
			};
	
			this.getViewport = function ( target ) {
	
				return target.copy( _viewport );
	
			};
	
			this.setViewport = function ( x, y, width, height ) {
	
				if ( x.isVector4 ) {
	
					_viewport.set( x.x, x.y, x.z, x.w );
	
				} else {
	
					_viewport.set( x, y, width, height );
	
				}
	
				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );
	
			};
	
			this.getScissor = function ( target ) {
	
				return target.copy( _scissor );
	
			};
	
			this.setScissor = function ( x, y, width, height ) {
	
				if ( x.isVector4 ) {
	
					_scissor.set( x.x, x.y, x.z, x.w );
	
				} else {
	
					_scissor.set( x, y, width, height );
	
				}
	
				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );
	
			};
	
			this.getScissorTest = function () {
	
				return _scissorTest;
	
			};
	
			this.setScissorTest = function ( boolean ) {
	
				state.setScissorTest( _scissorTest = boolean );
	
			};
	
			this.setOpaqueSort = function ( method ) {
	
				_opaqueSort = method;
	
			};
	
			this.setTransparentSort = function ( method ) {
	
				_transparentSort = method;
	
			};
	
			// Clearing
	
			this.getClearColor = function () {
	
				return background.getClearColor();
	
			};
	
			this.setClearColor = function () {
	
				background.setClearColor.apply( background, arguments );
	
			};
	
			this.getClearAlpha = function () {
	
				return background.getClearAlpha();
	
			};
	
			this.setClearAlpha = function () {
	
				background.setClearAlpha.apply( background, arguments );
	
			};
	
			this.clear = function ( color, depth, stencil ) {
	
				var bits = 0;
	
				if ( color === undefined || color ) { bits |= 16384; }
				if ( depth === undefined || depth ) { bits |= 256; }
				if ( stencil === undefined || stencil ) { bits |= 1024; }
	
				_gl.clear( bits );
	
			};
	
			this.clearColor = function () {
	
				this.clear( true, false, false );
	
			};
	
			this.clearDepth = function () {
	
				this.clear( false, true, false );
	
			};
	
			this.clearStencil = function () {
	
				this.clear( false, false, true );
	
			};
	
			//
	
			this.dispose = function () {
	
				_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
				_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
	
				renderLists.dispose();
				renderStates.dispose();
				properties.dispose();
				objects.dispose();
	
				xr.dispose();
	
				animation.stop();
	
			};
	
			// Events
	
			function onContextLost( event ) {
	
				event.preventDefault();
	
				console.log( 'THREE.WebGLRenderer: Context Lost.' );
	
				_isContextLost = true;
	
			}
	
			function onContextRestore( /* event */ ) {
	
				console.log( 'THREE.WebGLRenderer: Context Restored.' );
	
				_isContextLost = false;
	
				initGLContext();
	
			}
	
			function onMaterialDispose( event ) {
	
				var material = event.target;
	
				material.removeEventListener( 'dispose', onMaterialDispose );
	
				deallocateMaterial( material );
	
			}
	
			// Buffer deallocation
	
			function deallocateMaterial( material ) {
	
				releaseMaterialProgramReference( material );
	
				properties.remove( material );
	
			}
	
	
			function releaseMaterialProgramReference( material ) {
	
				var programInfo = properties.get( material ).program;
	
				material.program = undefined;
	
				if ( programInfo !== undefined ) {
	
					programCache.releaseProgram( programInfo );
	
				}
	
			}
	
			// Buffer rendering
	
			function renderObjectImmediate( object, program ) {
	
				object.render( function ( object ) {
	
					_this.renderBufferImmediate( object, program );
	
				} );
	
			}
	
			this.renderBufferImmediate = function ( object, program ) {
	
				state.initAttributes();
	
				var buffers = properties.get( object );
	
				if ( object.hasPositions && ! buffers.position ) { buffers.position = _gl.createBuffer(); }
				if ( object.hasNormals && ! buffers.normal ) { buffers.normal = _gl.createBuffer(); }
				if ( object.hasUvs && ! buffers.uv ) { buffers.uv = _gl.createBuffer(); }
				if ( object.hasColors && ! buffers.color ) { buffers.color = _gl.createBuffer(); }
	
				var programAttributes = program.getAttributes();
	
				if ( object.hasPositions ) {
	
					_gl.bindBuffer( 34962, buffers.position );
					_gl.bufferData( 34962, object.positionArray, 35048 );
	
					state.enableAttribute( programAttributes.position );
					_gl.vertexAttribPointer( programAttributes.position, 3, 5126, false, 0, 0 );
	
				}
	
				if ( object.hasNormals ) {
	
					_gl.bindBuffer( 34962, buffers.normal );
					_gl.bufferData( 34962, object.normalArray, 35048 );
	
					state.enableAttribute( programAttributes.normal );
					_gl.vertexAttribPointer( programAttributes.normal, 3, 5126, false, 0, 0 );
	
				}
	
				if ( object.hasUvs ) {
	
					_gl.bindBuffer( 34962, buffers.uv );
					_gl.bufferData( 34962, object.uvArray, 35048 );
	
					state.enableAttribute( programAttributes.uv );
					_gl.vertexAttribPointer( programAttributes.uv, 2, 5126, false, 0, 0 );
	
				}
	
				if ( object.hasColors ) {
	
					_gl.bindBuffer( 34962, buffers.color );
					_gl.bufferData( 34962, object.colorArray, 35048 );
	
					state.enableAttribute( programAttributes.color );
					_gl.vertexAttribPointer( programAttributes.color, 3, 5126, false, 0, 0 );
	
				}
	
				state.disableUnusedAttributes();
	
				_gl.drawArrays( 4, 0, object.count );
	
				object.count = 0;
	
			};
	
			var tempScene = new Scene();
	
			this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {
	
				if ( scene === null ) { scene = tempScene; } // renderBufferDirect second parameter used to be fog (could be null)
	
				var frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );
	
				var program = setProgram( camera, scene, material, object );
	
				state.setMaterial( material, frontFaceCW );
	
				var updateBuffers = false;
	
				if ( _currentGeometryProgram.geometry !== geometry.id ||
					_currentGeometryProgram.program !== program.id ||
					_currentGeometryProgram.wireframe !== ( material.wireframe === true ) ) {
	
					_currentGeometryProgram.geometry = geometry.id;
					_currentGeometryProgram.program = program.id;
					_currentGeometryProgram.wireframe = material.wireframe === true;
					updateBuffers = true;
	
				}
	
				if ( material.morphTargets || material.morphNormals ) {
	
					morphtargets.update( object, geometry, material, program );
	
					updateBuffers = true;
	
				}
	
				//
	
				var index = geometry.index;
				var position = geometry.attributes.position;
	
				//
	
				if ( index === null ) {
	
					if ( position === undefined || position.count === 0 ) { return; }
	
				} else if ( index.count === 0 ) {
	
					return;
	
				}
	
				//
	
				var rangeFactor = 1;
	
				if ( material.wireframe === true ) {
	
					index = geometries.getWireframeAttribute( geometry );
					rangeFactor = 2;
	
				}
	
				var attribute;
				var renderer = bufferRenderer;
	
				if ( index !== null ) {
	
					attribute = attributes.get( index );
	
					renderer = indexedBufferRenderer;
					renderer.setIndex( attribute );
	
				}
	
				if ( updateBuffers ) {
	
					setupVertexAttributes( object, geometry, material, program );
	
					if ( index !== null ) {
	
						_gl.bindBuffer( 34963, attribute.buffer );
	
					}
	
				}
	
				//
	
				var dataCount = ( index !== null ) ? index.count : position.count;
	
				var rangeStart = geometry.drawRange.start * rangeFactor;
				var rangeCount = geometry.drawRange.count * rangeFactor;
	
				var groupStart = group !== null ? group.start * rangeFactor : 0;
				var groupCount = group !== null ? group.count * rangeFactor : Infinity;
	
				var drawStart = Math.max( rangeStart, groupStart );
				var drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;
	
				var drawCount = Math.max( 0, drawEnd - drawStart + 1 );
	
				if ( drawCount === 0 ) { return; }
	
				//
	
				if ( object.isMesh ) {
	
					if ( material.wireframe === true ) {
	
						state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
						renderer.setMode( 1 );
	
					} else {
	
						renderer.setMode( 4 );
	
					}
	
				} else if ( object.isLine ) {
	
					var lineWidth = material.linewidth;
	
					if ( lineWidth === undefined ) { lineWidth = 1; } // Not using Line*Material
	
					state.setLineWidth( lineWidth * getTargetPixelRatio() );
	
					if ( object.isLineSegments ) {
	
						renderer.setMode( 1 );
	
					} else if ( object.isLineLoop ) {
	
						renderer.setMode( 2 );
	
					} else {
	
						renderer.setMode( 3 );
	
					}
	
				} else if ( object.isPoints ) {
	
					renderer.setMode( 0 );
	
				} else if ( object.isSprite ) {
	
					renderer.setMode( 4 );
	
				}
	
				if ( object.isInstancedMesh ) {
	
					renderer.renderInstances( geometry, drawStart, drawCount, object.count );
	
				} else if ( geometry.isInstancedBufferGeometry ) {
	
					renderer.renderInstances( geometry, drawStart, drawCount, geometry.maxInstancedCount );
	
				} else {
	
					renderer.render( drawStart, drawCount );
	
				}
	
			};
	
			function setupVertexAttributes( object, geometry, material, program ) {
	
				if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {
	
					if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) { return; }
	
				}
	
				state.initAttributes();
	
				var geometryAttributes = geometry.attributes;
	
				var programAttributes = program.getAttributes();
	
				var materialDefaultAttributeValues = material.defaultAttributeValues;
	
				for ( var name in programAttributes ) {
	
					var programAttribute = programAttributes[ name ];
	
					if ( programAttribute >= 0 ) {
	
						var geometryAttribute = geometryAttributes[ name ];
	
						if ( geometryAttribute !== undefined ) {
	
							var normalized = geometryAttribute.normalized;
							var size = geometryAttribute.itemSize;
	
							var attribute = attributes.get( geometryAttribute );
	
							// TODO Attribute may not be available on context restore
	
							if ( attribute === undefined ) { continue; }
	
							var buffer = attribute.buffer;
							var type = attribute.type;
							var bytesPerElement = attribute.bytesPerElement;
	
							if ( geometryAttribute.isInterleavedBufferAttribute ) {
	
								var data = geometryAttribute.data;
								var stride = data.stride;
								var offset = geometryAttribute.offset;
	
								if ( data && data.isInstancedInterleavedBuffer ) {
	
									state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute );
	
									if ( geometry.maxInstancedCount === undefined ) {
	
										geometry.maxInstancedCount = data.meshPerAttribute * data.count;
	
									}
	
								} else {
	
									state.enableAttribute( programAttribute );
	
								}
	
								_gl.bindBuffer( 34962, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement );
	
							} else {
	
								if ( geometryAttribute.isInstancedBufferAttribute ) {
	
									state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute );
	
									if ( geometry.maxInstancedCount === undefined ) {
	
										geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
	
									}
	
								} else {
	
									state.enableAttribute( programAttribute );
	
								}
	
								_gl.bindBuffer( 34962, buffer );
								_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, 0 );
	
							}
	
						} else if ( name === 'instanceMatrix' ) {
	
							var attribute = attributes.get( object.instanceMatrix );
	
							// TODO Attribute may not be available on context restore
	
							if ( attribute === undefined ) { continue; }
	
							var buffer = attribute.buffer;
							var type = attribute.type;
	
							state.enableAttributeAndDivisor( programAttribute + 0, 1 );
							state.enableAttributeAndDivisor( programAttribute + 1, 1 );
							state.enableAttributeAndDivisor( programAttribute + 2, 1 );
							state.enableAttributeAndDivisor( programAttribute + 3, 1 );
	
							_gl.bindBuffer( 34962, buffer );
	
							_gl.vertexAttribPointer( programAttribute + 0, 4, type, false, 64, 0 );
							_gl.vertexAttribPointer( programAttribute + 1, 4, type, false, 64, 16 );
							_gl.vertexAttribPointer( programAttribute + 2, 4, type, false, 64, 32 );
							_gl.vertexAttribPointer( programAttribute + 3, 4, type, false, 64, 48 );
	
						} else if ( materialDefaultAttributeValues !== undefined ) {
	
							var value = materialDefaultAttributeValues[ name ];
	
							if ( value !== undefined ) {
	
								switch ( value.length ) {
	
									case 2:
										_gl.vertexAttrib2fv( programAttribute, value );
										break;
	
									case 3:
										_gl.vertexAttrib3fv( programAttribute, value );
										break;
	
									case 4:
										_gl.vertexAttrib4fv( programAttribute, value );
										break;
	
									default:
										_gl.vertexAttrib1fv( programAttribute, value );
	
								}
	
							}
	
						}
	
					}
	
				}
	
				state.disableUnusedAttributes();
	
			}
	
			// Compile
	
			this.compile = function ( scene, camera ) {
	
				currentRenderState = renderStates.get( scene, camera );
				currentRenderState.init();
	
				scene.traverse( function ( object ) {
	
					if ( object.isLight ) {
	
						currentRenderState.pushLight( object );
	
						if ( object.castShadow ) {
	
							currentRenderState.pushShadow( object );
	
						}
	
					}
	
				} );
	
				currentRenderState.setupLights( camera );
	
				var compiled = {};
	
				scene.traverse( function ( object ) {
	
					if ( object.material ) {
	
						if ( Array.isArray( object.material ) ) {
	
							for ( var i = 0; i < object.material.length; i ++ ) {
	
								if ( object.material[ i ].uuid in compiled === false ) {
	
									initMaterial( object.material[ i ], scene, object );
									compiled[ object.material[ i ].uuid ] = true;
	
								}
	
							}
	
						} else if ( object.material.uuid in compiled === false ) {
	
							initMaterial( object.material, scene, object );
							compiled[ object.material.uuid ] = true;
	
						}
	
					}
	
				} );
	
			};
	
			// Animation Loop
	
			var onAnimationFrameCallback = null;
	
			function onAnimationFrame( time ) {
	
				if ( xr.isPresenting ) { return; }
				if ( onAnimationFrameCallback ) { onAnimationFrameCallback( time ); }
	
			}
	
			var animation = new WebGLAnimation();
			animation.setAnimationLoop( onAnimationFrame );
	
			if ( typeof window !== 'undefined' ) { animation.setContext( window ); }
	
			this.setAnimationLoop = function ( callback ) {
	
				onAnimationFrameCallback = callback;
				xr.setAnimationLoop( callback );
	
				animation.start();
	
			};
	
			// Rendering
	
			this.render = function ( scene, camera ) {
	
				var renderTarget, forceClear;
	
				if ( arguments[ 2 ] !== undefined ) {
	
					console.warn( 'THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.' );
					renderTarget = arguments[ 2 ];
	
				}
	
				if ( arguments[ 3 ] !== undefined ) {
	
					console.warn( 'THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.' );
					forceClear = arguments[ 3 ];
	
				}
	
				if ( ! ( camera && camera.isCamera ) ) {
	
					console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
					return;
	
				}
	
				if ( _isContextLost ) { return; }
	
				// reset caching for this frame
	
				_currentGeometryProgram.geometry = null;
				_currentGeometryProgram.program = null;
				_currentGeometryProgram.wireframe = false;
				_currentMaterialId = - 1;
				_currentCamera = null;
	
				// update scene graph
	
				if ( scene.autoUpdate === true ) { scene.updateMatrixWorld(); }
	
				// update camera matrices and frustum
	
				if ( camera.parent === null ) { camera.updateMatrixWorld(); }
	
				if ( xr.enabled && xr.isPresenting ) {
	
					camera = xr.getCamera( camera );
	
				}
	
				//
	
				currentRenderState = renderStates.get( scene, camera );
				currentRenderState.init();
	
				scene.onBeforeRender( _this, scene, camera, renderTarget || _currentRenderTarget );
	
				_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
				_frustum.setFromProjectionMatrix( _projScreenMatrix );
	
				_localClippingEnabled = this.localClippingEnabled;
				_clippingEnabled = _clipping.init( this.clippingPlanes, _localClippingEnabled, camera );
	
				currentRenderList = renderLists.get( scene, camera );
				currentRenderList.init();
	
				projectObject( scene, camera, 0, _this.sortObjects );
	
				currentRenderList.finish();
	
				if ( _this.sortObjects === true ) {
	
					currentRenderList.sort( _opaqueSort, _transparentSort );
	
				}
	
				//
	
				if ( _clippingEnabled ) { _clipping.beginShadows(); }
	
				var shadowsArray = currentRenderState.state.shadowsArray;
	
				shadowMap.render( shadowsArray, scene, camera );
	
				currentRenderState.setupLights( camera );
	
				if ( _clippingEnabled ) { _clipping.endShadows(); }
	
				//
	
				if ( this.info.autoReset ) { this.info.reset(); }
	
				if ( renderTarget !== undefined ) {
	
					this.setRenderTarget( renderTarget );
	
				}
	
				//
	
				background.render( currentRenderList, scene, camera, forceClear );
	
				// render scene
	
				var opaqueObjects = currentRenderList.opaque;
				var transparentObjects = currentRenderList.transparent;
	
				if ( scene.overrideMaterial ) {
	
					var overrideMaterial = scene.overrideMaterial;
	
					if ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera, overrideMaterial ); }
					if ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera, overrideMaterial ); }
	
				} else {
	
					// opaque pass (front-to-back order)
	
					if ( opaqueObjects.length ) { renderObjects( opaqueObjects, scene, camera ); }
	
					// transparent pass (back-to-front order)
	
					if ( transparentObjects.length ) { renderObjects( transparentObjects, scene, camera ); }
	
				}
	
				//
	
				scene.onAfterRender( _this, scene, camera );
	
				//
	
				if ( _currentRenderTarget !== null ) {
	
					// Generate mipmap if we're using any kind of mipmap filtering
	
					textures.updateRenderTargetMipmap( _currentRenderTarget );
	
					// resolve multisample renderbuffers to a single-sample texture if necessary
	
					textures.updateMultisampleRenderTarget( _currentRenderTarget );
	
				}
	
				// Ensure depth buffer writing is enabled so it can be cleared on next render
	
				state.buffers.depth.setTest( true );
				state.buffers.depth.setMask( true );
				state.buffers.color.setMask( true );
	
				state.setPolygonOffset( false );
	
				// _gl.finish();
	
				currentRenderList = null;
				currentRenderState = null;
	
			};
	
			function projectObject( object, camera, groupOrder, sortObjects ) {
	
				if ( object.visible === false ) { return; }
	
				var visible = object.layers.test( camera.layers );
	
				if ( visible ) {
	
					if ( object.isGroup ) {
	
						groupOrder = object.renderOrder;
	
					} else if ( object.isLOD ) {
	
						if ( object.autoUpdate === true ) { object.update( camera ); }
	
					} else if ( object.isLight ) {
	
						currentRenderState.pushLight( object );
	
						if ( object.castShadow ) {
	
							currentRenderState.pushShadow( object );
	
						}
	
					} else if ( object.isSprite ) {
	
						if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {
	
							if ( sortObjects ) {
	
								_vector3.setFromMatrixPosition( object.matrixWorld )
									.applyMatrix4( _projScreenMatrix );
	
							}
	
							var geometry = objects.update( object );
							var material = object.material;
	
							if ( material.visible ) {
	
								currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
	
							}
	
						}
	
					} else if ( object.isImmediateRenderObject ) {
	
						if ( sortObjects ) {
	
							_vector3.setFromMatrixPosition( object.matrixWorld )
								.applyMatrix4( _projScreenMatrix );
	
						}
	
						currentRenderList.push( object, null, object.material, groupOrder, _vector3.z, null );
	
					} else if ( object.isMesh || object.isLine || object.isPoints ) {
	
						if ( object.isSkinnedMesh ) {
	
							// update skeleton only once in a frame
	
							if ( object.skeleton.frame !== info.render.frame ) {
	
								object.skeleton.update();
								object.skeleton.frame = info.render.frame;
	
							}
	
						}
	
						if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {
	
							if ( sortObjects ) {
	
								_vector3.setFromMatrixPosition( object.matrixWorld )
									.applyMatrix4( _projScreenMatrix );
	
							}
	
							var geometry = objects.update( object );
							var material = object.material;
	
							if ( Array.isArray( material ) ) {
	
								var groups = geometry.groups;
	
								for ( var i = 0, l = groups.length; i < l; i ++ ) {
	
									var group = groups[ i ];
									var groupMaterial = material[ group.materialIndex ];
	
									if ( groupMaterial && groupMaterial.visible ) {
	
										currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );
	
									}
	
								}
	
							} else if ( material.visible ) {
	
								currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );
	
							}
	
						}
	
					}
	
				}
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					projectObject( children[ i ], camera, groupOrder, sortObjects );
	
				}
	
			}
	
			function renderObjects( renderList, scene, camera, overrideMaterial ) {
	
				for ( var i = 0, l = renderList.length; i < l; i ++ ) {
	
					var renderItem = renderList[ i ];
	
					var object = renderItem.object;
					var geometry = renderItem.geometry;
					var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
					var group = renderItem.group;
	
					if ( camera.isArrayCamera ) {
	
						_currentArrayCamera = camera;
	
						var cameras = camera.cameras;
	
						for ( var j = 0, jl = cameras.length; j < jl; j ++ ) {
	
							var camera2 = cameras[ j ];
	
							if ( object.layers.test( camera2.layers ) ) {
	
								state.viewport( _currentViewport.copy( camera2.viewport ) );
	
								currentRenderState.setupLights( camera2 );
	
								renderObject( object, scene, camera2, geometry, material, group );
	
							}
	
						}
	
					} else {
	
						_currentArrayCamera = null;
	
						renderObject( object, scene, camera, geometry, material, group );
	
					}
	
				}
	
			}
	
			function renderObject( object, scene, camera, geometry, material, group ) {
	
				object.onBeforeRender( _this, scene, camera, geometry, material, group );
				currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );
	
				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );
	
				if ( object.isImmediateRenderObject ) {
	
					var program = setProgram( camera, scene, material, object );
	
					state.setMaterial( material );
	
					_currentGeometryProgram.geometry = null;
					_currentGeometryProgram.program = null;
					_currentGeometryProgram.wireframe = false;
	
					renderObjectImmediate( object, program );
	
				} else {
	
					_this.renderBufferDirect( camera, scene, geometry, material, object, group );
	
				}
	
				object.onAfterRender( _this, scene, camera, geometry, material, group );
				currentRenderState = renderStates.get( scene, _currentArrayCamera || camera );
	
			}
	
			function initMaterial( material, scene, object ) {
	
				var materialProperties = properties.get( material );
	
				var lights = currentRenderState.state.lights;
				var shadowsArray = currentRenderState.state.shadowsArray;
	
				var lightsStateVersion = lights.state.version;
	
				var parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, _clipping.numPlanes, _clipping.numIntersection, object );
				var programCacheKey = programCache.getProgramCacheKey( parameters );
	
				var program = materialProperties.program;
				var programChange = true;
	
				if ( program === undefined ) {
	
					// new material
					material.addEventListener( 'dispose', onMaterialDispose );
	
				} else if ( program.cacheKey !== programCacheKey ) {
	
					// changed glsl or parameters
					releaseMaterialProgramReference( material );
	
				} else if ( materialProperties.lightsStateVersion !== lightsStateVersion ) {
	
					materialProperties.lightsStateVersion = lightsStateVersion;
	
					programChange = false;
	
				} else if ( parameters.shaderID !== undefined ) {
	
					// same glsl and uniform list
					return;
	
				} else {
	
					// only rebuild uniform list
					programChange = false;
	
				}
	
				if ( programChange ) {
	
					program = programCache.acquireProgram( parameters, programCacheKey );
	
					materialProperties.program = program;
					materialProperties.uniforms = parameters.uniforms;
					materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
					materialProperties.outputEncoding = _this.outputEncoding;
					material.program = program;
	
				}
	
				var programAttributes = program.getAttributes();
	
				if ( material.morphTargets ) {
	
					material.numSupportedMorphTargets = 0;
	
					for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {
	
						if ( programAttributes[ 'morphTarget' + i ] >= 0 ) {
	
							material.numSupportedMorphTargets ++;
	
						}
	
					}
	
				}
	
				if ( material.morphNormals ) {
	
					material.numSupportedMorphNormals = 0;
	
					for ( var i = 0; i < _this.maxMorphNormals; i ++ ) {
	
						if ( programAttributes[ 'morphNormal' + i ] >= 0 ) {
	
							material.numSupportedMorphNormals ++;
	
						}
	
					}
	
				}
	
				var uniforms = materialProperties.uniforms;
	
				if ( ! material.isShaderMaterial &&
					! material.isRawShaderMaterial ||
					material.clipping === true ) {
	
					materialProperties.numClippingPlanes = _clipping.numPlanes;
					materialProperties.numIntersection = _clipping.numIntersection;
					uniforms.clippingPlanes = _clipping.uniform;
	
				}
	
				materialProperties.fog = scene.fog;
	
				// store the light setup it was created for
	
				materialProperties.needsLights = materialNeedsLights( material );
				materialProperties.lightsStateVersion = lightsStateVersion;
	
				if ( materialProperties.needsLights ) {
	
					// wire up the material to this renderer's lighting state
	
					uniforms.ambientLightColor.value = lights.state.ambient;
					uniforms.lightProbe.value = lights.state.probe;
					uniforms.directionalLights.value = lights.state.directional;
					uniforms.directionalLightShadows.value = lights.state.directionalShadow;
					uniforms.spotLights.value = lights.state.spot;
					uniforms.spotLightShadows.value = lights.state.spotShadow;
					uniforms.rectAreaLights.value = lights.state.rectArea;
					uniforms.pointLights.value = lights.state.point;
					uniforms.pointLightShadows.value = lights.state.pointShadow;
					uniforms.hemisphereLights.value = lights.state.hemi;
	
					uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
					uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
					uniforms.spotShadowMap.value = lights.state.spotShadowMap;
					uniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;
					uniforms.pointShadowMap.value = lights.state.pointShadowMap;
					uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
					// TODO (abelnation): add area lights shadow info to uniforms
	
				}
	
				var progUniforms = materialProperties.program.getUniforms(),
					uniformsList =
						WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );
	
				materialProperties.uniformsList = uniformsList;
	
			}
	
			function setProgram( camera, scene, material, object ) {
	
				textures.resetTextureUnits();
	
				var fog = scene.fog;
				var environment = material.isMeshStandardMaterial ? scene.environment : null;
	
				var materialProperties = properties.get( material );
				var lights = currentRenderState.state.lights;
	
				if ( _clippingEnabled ) {
	
					if ( _localClippingEnabled || camera !== _currentCamera ) {
	
						var useCache =
							camera === _currentCamera &&
							material.id === _currentMaterialId;
	
						// we might want to call this function with some ClippingGroup
						// object instead of the material, once it becomes feasible
						// (#8465, #8379)
						_clipping.setState(
							material.clippingPlanes, material.clipIntersection, material.clipShadows,
							camera, materialProperties, useCache );
	
					}
	
				}
	
				if ( material.version === materialProperties.__version ) {
	
					if ( materialProperties.program === undefined ) {
	
						initMaterial( material, scene, object );
	
					} else if ( material.fog && materialProperties.fog !== fog ) {
	
						initMaterial( material, scene, object );
	
					} else if ( materialProperties.environment !== environment ) {
	
						initMaterial( material, scene, object );
	
					} else if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {
	
						initMaterial( material, scene, object );
	
					} else if ( materialProperties.numClippingPlanes !== undefined &&
						( materialProperties.numClippingPlanes !== _clipping.numPlanes ||
						materialProperties.numIntersection !== _clipping.numIntersection ) ) {
	
						initMaterial( material, scene, object );
	
					} else if ( materialProperties.outputEncoding !== _this.outputEncoding ) {
	
						initMaterial( material, scene, object );
	
					}
	
				} else {
	
					initMaterial( material, scene, object );
					materialProperties.__version = material.version;
	
				}
	
				var refreshProgram = false;
				var refreshMaterial = false;
				var refreshLights = false;
	
				var program = materialProperties.program,
					p_uniforms = program.getUniforms(),
					m_uniforms = materialProperties.uniforms;
	
				if ( state.useProgram( program.program ) ) {
	
					refreshProgram = true;
					refreshMaterial = true;
					refreshLights = true;
	
				}
	
				if ( material.id !== _currentMaterialId ) {
	
					_currentMaterialId = material.id;
	
					refreshMaterial = true;
	
				}
	
				if ( refreshProgram || _currentCamera !== camera ) {
	
					p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
	
					if ( capabilities.logarithmicDepthBuffer ) {
	
						p_uniforms.setValue( _gl, 'logDepthBufFC',
							2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
	
					}
	
					if ( _currentCamera !== camera ) {
	
						_currentCamera = camera;
	
						// lighting uniforms depend on the camera so enforce an update
						// now, in case this material supports lights - or later, when
						// the next material that does gets activated:
	
						refreshMaterial = true;		// set to true on material change
						refreshLights = true;		// remains set until update done
	
					}
	
					// load material specific uniforms
					// (shader material also gets them for the sake of genericity)
	
					if ( material.isShaderMaterial ||
						material.isMeshPhongMaterial ||
						material.isMeshToonMaterial ||
						material.isMeshStandardMaterial ||
						material.envMap ) {
	
						var uCamPos = p_uniforms.map.cameraPosition;
	
						if ( uCamPos !== undefined ) {
	
							uCamPos.setValue( _gl,
								_vector3.setFromMatrixPosition( camera.matrixWorld ) );
	
						}
	
					}
	
					if ( material.isMeshPhongMaterial ||
						material.isMeshToonMaterial ||
						material.isMeshLambertMaterial ||
						material.isMeshBasicMaterial ||
						material.isMeshStandardMaterial ||
						material.isShaderMaterial ) {
	
						p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );
	
					}
	
					if ( material.isMeshPhongMaterial ||
						material.isMeshToonMaterial ||
						material.isMeshLambertMaterial ||
						material.isMeshBasicMaterial ||
						material.isMeshStandardMaterial ||
						material.isShaderMaterial ||
						material.skinning ) {
	
						p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );
	
					}
	
				}
	
				// skinning uniforms must be set even if material didn't change
				// auto-setting of texture unit for bone texture must go before other textures
				// otherwise textures used for skinning can take over texture units reserved for other material textures
	
				if ( material.skinning ) {
	
					p_uniforms.setOptional( _gl, object, 'bindMatrix' );
					p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );
	
					var skeleton = object.skeleton;
	
					if ( skeleton ) {
	
						var bones = skeleton.bones;
	
						if ( capabilities.floatVertexTextures ) {
	
							if ( skeleton.boneTexture === undefined ) {
	
								// layout (1 matrix = 4 pixels)
								//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
								//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
								//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
								//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
								//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
	
	
								var size = Math.sqrt( bones.length * 4 ); // 4 pixels needed for 1 matrix
								size = MathUtils.ceilPowerOfTwo( size );
								size = Math.max( size, 4 );
	
								var boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel
								boneMatrices.set( skeleton.boneMatrices ); // copy current values
	
								var boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );
	
								skeleton.boneMatrices = boneMatrices;
								skeleton.boneTexture = boneTexture;
								skeleton.boneTextureSize = size;
	
							}
	
							p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
							p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );
	
						} else {
	
							p_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );
	
						}
	
					}
	
				}
	
				if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {
	
					materialProperties.receiveShadow = object.receiveShadow;
					p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );
	
				}
	
				if ( refreshMaterial ) {
	
					p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );
					p_uniforms.setValue( _gl, 'toneMappingWhitePoint', _this.toneMappingWhitePoint );
	
					if ( materialProperties.needsLights ) {
	
						// the current material requires lighting info
	
						// note: all lighting uniforms are always set correctly
						// they simply reference the renderer's state for their
						// values
						//
						// use the current material's .needsUpdate flags to set
						// the GL state when required
	
						markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );
	
					}
	
					// refresh uniforms common to several materials
	
					if ( fog && material.fog ) {
	
						refreshUniformsFog( m_uniforms, fog );
	
					}
	
					if ( material.isMeshBasicMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
	
					} else if ( material.isMeshLambertMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsLambert( m_uniforms, material );
	
					} else if ( material.isMeshToonMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsToon( m_uniforms, material );
	
					} else if ( material.isMeshPhongMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsPhong( m_uniforms, material );
	
					} else if ( material.isMeshStandardMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material, environment );
	
						if ( material.isMeshPhysicalMaterial ) {
	
							refreshUniformsPhysical( m_uniforms, material, environment );
	
						} else {
	
							refreshUniformsStandard( m_uniforms, material, environment );
	
						}
	
					} else if ( material.isMeshMatcapMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsMatcap( m_uniforms, material );
	
					} else if ( material.isMeshDepthMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsDepth( m_uniforms, material );
	
					} else if ( material.isMeshDistanceMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsDistance( m_uniforms, material );
	
					} else if ( material.isMeshNormalMaterial ) {
	
						refreshUniformsCommon( m_uniforms, material );
						refreshUniformsNormal( m_uniforms, material );
	
					} else if ( material.isLineBasicMaterial ) {
	
						refreshUniformsLine( m_uniforms, material );
	
						if ( material.isLineDashedMaterial ) {
	
							refreshUniformsDash( m_uniforms, material );
	
						}
	
					} else if ( material.isPointsMaterial ) {
	
						refreshUniformsPoints( m_uniforms, material );
	
					} else if ( material.isSpriteMaterial ) {
	
						refreshUniformsSprites( m_uniforms, material );
	
					} else if ( material.isShadowMaterial ) {
	
						m_uniforms.color.value.copy( material.color );
						m_uniforms.opacity.value = material.opacity;
	
					}
	
					// RectAreaLight Texture
					// TODO (mrdoob): Find a nicer implementation
	
					if ( m_uniforms.ltc_1 !== undefined ) { m_uniforms.ltc_1.value = UniformsLib.LTC_1; }
					if ( m_uniforms.ltc_2 !== undefined ) { m_uniforms.ltc_2.value = UniformsLib.LTC_2; }
	
					WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
	
					if ( material.isShaderMaterial ) {
	
						material.uniformsNeedUpdate = false; // #15581
	
					}
	
				}
	
				if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {
	
					WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
					material.uniformsNeedUpdate = false;
	
				}
	
				if ( material.isSpriteMaterial ) {
	
					p_uniforms.setValue( _gl, 'center', object.center );
	
				}
	
				// common matrices
	
				p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
				p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
				p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );
	
				return program;
	
			}
	
			// Uniforms (refresh uniforms objects)
	
			function refreshUniformsCommon( uniforms, material, environment ) {
	
				uniforms.opacity.value = material.opacity;
	
				if ( material.color ) {
	
					uniforms.diffuse.value.copy( material.color );
	
				}
	
				if ( material.emissive ) {
	
					uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
	
				}
	
				if ( material.map ) {
	
					uniforms.map.value = material.map;
	
				}
	
				if ( material.alphaMap ) {
	
					uniforms.alphaMap.value = material.alphaMap;
	
				}
	
				if ( material.specularMap ) {
	
					uniforms.specularMap.value = material.specularMap;
	
				}
	
				var envMap = material.envMap || environment;
	
				if ( envMap ) {
	
					uniforms.envMap.value = envMap;
	
					uniforms.flipEnvMap.value = envMap.isCubeTexture ? - 1 : 1;
	
					uniforms.reflectivity.value = material.reflectivity;
					uniforms.refractionRatio.value = material.refractionRatio;
	
					uniforms.maxMipLevel.value = properties.get( envMap ).__maxMipLevel;
	
				}
	
				if ( material.lightMap ) {
	
					uniforms.lightMap.value = material.lightMap;
					uniforms.lightMapIntensity.value = material.lightMapIntensity;
	
				}
	
				if ( material.aoMap ) {
	
					uniforms.aoMap.value = material.aoMap;
					uniforms.aoMapIntensity.value = material.aoMapIntensity;
	
				}
	
				// uv repeat and offset setting priorities
				// 1. color map
				// 2. specular map
				// 3. normal map
				// 4. bump map
				// 5. alpha map
				// 6. emissive map
	
				var uvScaleMap;
	
				if ( material.map ) {
	
					uvScaleMap = material.map;
	
				} else if ( material.specularMap ) {
	
					uvScaleMap = material.specularMap;
	
				} else if ( material.displacementMap ) {
	
					uvScaleMap = material.displacementMap;
	
				} else if ( material.normalMap ) {
	
					uvScaleMap = material.normalMap;
	
				} else if ( material.bumpMap ) {
	
					uvScaleMap = material.bumpMap;
	
				} else if ( material.roughnessMap ) {
	
					uvScaleMap = material.roughnessMap;
	
				} else if ( material.metalnessMap ) {
	
					uvScaleMap = material.metalnessMap;
	
				} else if ( material.alphaMap ) {
	
					uvScaleMap = material.alphaMap;
	
				} else if ( material.emissiveMap ) {
	
					uvScaleMap = material.emissiveMap;
	
				}
	
				if ( uvScaleMap !== undefined ) {
	
					// backwards compatibility
					if ( uvScaleMap.isWebGLRenderTarget ) {
	
						uvScaleMap = uvScaleMap.texture;
	
					}
	
					if ( uvScaleMap.matrixAutoUpdate === true ) {
	
						uvScaleMap.updateMatrix();
	
					}
	
					uniforms.uvTransform.value.copy( uvScaleMap.matrix );
	
				}
	
				// uv repeat and offset setting priorities for uv2
				// 1. ao map
				// 2. light map
	
				var uv2ScaleMap;
	
				if ( material.aoMap ) {
	
					uv2ScaleMap = material.aoMap;
	
				} else if ( material.lightMap ) {
	
					uv2ScaleMap = material.lightMap;
	
				}
	
				if ( uv2ScaleMap !== undefined ) {
	
					// backwards compatibility
					if ( uv2ScaleMap.isWebGLRenderTarget ) {
	
						uv2ScaleMap = uv2ScaleMap.texture;
	
					}
	
					if ( uv2ScaleMap.matrixAutoUpdate === true ) {
	
						uv2ScaleMap.updateMatrix();
	
					}
	
					uniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );
	
				}
	
			}
	
			function refreshUniformsLine( uniforms, material ) {
	
				uniforms.diffuse.value.copy( material.color );
				uniforms.opacity.value = material.opacity;
	
			}
	
			function refreshUniformsDash( uniforms, material ) {
	
				uniforms.dashSize.value = material.dashSize;
				uniforms.totalSize.value = material.dashSize + material.gapSize;
				uniforms.scale.value = material.scale;
	
			}
	
			function refreshUniformsPoints( uniforms, material ) {
	
				uniforms.diffuse.value.copy( material.color );
				uniforms.opacity.value = material.opacity;
				uniforms.size.value = material.size * _pixelRatio;
				uniforms.scale.value = _height * 0.5;
	
				if ( material.map ) {
	
					uniforms.map.value = material.map;
	
				}
	
				if ( material.alphaMap ) {
	
					uniforms.alphaMap.value = material.alphaMap;
	
				}
	
				// uv repeat and offset setting priorities
				// 1. color map
				// 2. alpha map
	
				var uvScaleMap;
	
				if ( material.map ) {
	
					uvScaleMap = material.map;
	
				} else if ( material.alphaMap ) {
	
					uvScaleMap = material.alphaMap;
	
				}
	
				if ( uvScaleMap !== undefined ) {
	
					if ( uvScaleMap.matrixAutoUpdate === true ) {
	
						uvScaleMap.updateMatrix();
	
					}
	
					uniforms.uvTransform.value.copy( uvScaleMap.matrix );
	
				}
	
			}
	
			function refreshUniformsSprites( uniforms, material ) {
	
				uniforms.diffuse.value.copy( material.color );
				uniforms.opacity.value = material.opacity;
				uniforms.rotation.value = material.rotation;
	
				if ( material.map ) {
	
					uniforms.map.value = material.map;
	
				}
	
				if ( material.alphaMap ) {
	
					uniforms.alphaMap.value = material.alphaMap;
	
				}
	
				// uv repeat and offset setting priorities
				// 1. color map
				// 2. alpha map
	
				var uvScaleMap;
	
				if ( material.map ) {
	
					uvScaleMap = material.map;
	
				} else if ( material.alphaMap ) {
	
					uvScaleMap = material.alphaMap;
	
				}
	
				if ( uvScaleMap !== undefined ) {
	
					if ( uvScaleMap.matrixAutoUpdate === true ) {
	
						uvScaleMap.updateMatrix();
	
					}
	
					uniforms.uvTransform.value.copy( uvScaleMap.matrix );
	
				}
	
			}
	
			function refreshUniformsFog( uniforms, fog ) {
	
				uniforms.fogColor.value.copy( fog.color );
	
				if ( fog.isFog ) {
	
					uniforms.fogNear.value = fog.near;
					uniforms.fogFar.value = fog.far;
	
				} else if ( fog.isFogExp2 ) {
	
					uniforms.fogDensity.value = fog.density;
	
				}
	
			}
	
			function refreshUniformsLambert( uniforms, material ) {
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
			}
	
			function refreshUniformsPhong( uniforms, material ) {
	
				uniforms.specular.value.copy( material.specular );
				uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
					if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
					if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
			}
	
			function refreshUniformsToon( uniforms, material ) {
	
				uniforms.specular.value.copy( material.specular );
				uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )
	
				if ( material.gradientMap ) {
	
					uniforms.gradientMap.value = material.gradientMap;
	
				}
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
					if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
					if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
			}
	
			function refreshUniformsStandard( uniforms, material, environment ) {
	
				uniforms.roughness.value = material.roughness;
				uniforms.metalness.value = material.metalness;
	
				if ( material.roughnessMap ) {
	
					uniforms.roughnessMap.value = material.roughnessMap;
	
				}
	
				if ( material.metalnessMap ) {
	
					uniforms.metalnessMap.value = material.metalnessMap;
	
				}
	
				if ( material.emissiveMap ) {
	
					uniforms.emissiveMap.value = material.emissiveMap;
	
				}
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
					if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
					if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
				if ( material.envMap || environment ) {
	
					//uniforms.envMap.value = material.envMap; // part of uniforms common
					uniforms.envMapIntensity.value = material.envMapIntensity;
	
				}
	
			}
	
			function refreshUniformsPhysical( uniforms, material, environment ) {
	
				refreshUniformsStandard( uniforms, material, environment );
	
				uniforms.reflectivity.value = material.reflectivity; // also part of uniforms common
	
				uniforms.clearcoat.value = material.clearcoat;
				uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
				if ( material.sheen ) { uniforms.sheen.value.copy( material.sheen ); }
	
				if ( material.clearcoatNormalMap ) {
	
					uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );
					uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
	
					if ( material.side === BackSide ) {
	
						uniforms.clearcoatNormalScale.value.negate();
	
					}
	
				}
	
				uniforms.transparency.value = material.transparency;
	
			}
	
			function refreshUniformsMatcap( uniforms, material ) {
	
				if ( material.matcap ) {
	
					uniforms.matcap.value = material.matcap;
	
				}
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
					if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
					if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
			}
	
			function refreshUniformsDepth( uniforms, material ) {
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
			}
	
			function refreshUniformsDistance( uniforms, material ) {
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
				uniforms.referencePosition.value.copy( material.referencePosition );
				uniforms.nearDistance.value = material.nearDistance;
				uniforms.farDistance.value = material.farDistance;
	
			}
	
			function refreshUniformsNormal( uniforms, material ) {
	
				if ( material.bumpMap ) {
	
					uniforms.bumpMap.value = material.bumpMap;
					uniforms.bumpScale.value = material.bumpScale;
					if ( material.side === BackSide ) { uniforms.bumpScale.value *= - 1; }
	
				}
	
				if ( material.normalMap ) {
	
					uniforms.normalMap.value = material.normalMap;
					uniforms.normalScale.value.copy( material.normalScale );
					if ( material.side === BackSide ) { uniforms.normalScale.value.negate(); }
	
				}
	
				if ( material.displacementMap ) {
	
					uniforms.displacementMap.value = material.displacementMap;
					uniforms.displacementScale.value = material.displacementScale;
					uniforms.displacementBias.value = material.displacementBias;
	
				}
	
			}
	
			// If uniforms are marked as clean, they don't need to be loaded to the GPU.
	
			function markUniformsLightsNeedsUpdate( uniforms, value ) {
	
				uniforms.ambientLightColor.needsUpdate = value;
				uniforms.lightProbe.needsUpdate = value;
	
				uniforms.directionalLights.needsUpdate = value;
				uniforms.directionalLightShadows.needsUpdate = value;
				uniforms.pointLights.needsUpdate = value;
				uniforms.pointLightShadows.needsUpdate = value;
				uniforms.spotLights.needsUpdate = value;
				uniforms.spotLightShadows.needsUpdate = value;
				uniforms.rectAreaLights.needsUpdate = value;
				uniforms.hemisphereLights.needsUpdate = value;
	
			}
	
			function materialNeedsLights( material ) {
	
				return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
					material.isMeshStandardMaterial || material.isShadowMaterial ||
					( material.isShaderMaterial && material.lights === true );
	
			}
	
			//
			this.setFramebuffer = function ( value ) {
	
				if ( _framebuffer !== value && _currentRenderTarget === null ) { _gl.bindFramebuffer( 36160, value ); }
	
				_framebuffer = value;
	
			};
	
			this.getActiveCubeFace = function () {
	
				return _currentActiveCubeFace;
	
			};
	
			this.getActiveMipmapLevel = function () {
	
				return _currentActiveMipmapLevel;
	
			};
	
			this.getRenderTarget = function () {
	
				return _currentRenderTarget;
	
			};
	
			this.setRenderTarget = function ( renderTarget, activeCubeFace, activeMipmapLevel ) {
	
				_currentRenderTarget = renderTarget;
				_currentActiveCubeFace = activeCubeFace;
				_currentActiveMipmapLevel = activeMipmapLevel;
	
				if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {
	
					textures.setupRenderTarget( renderTarget );
	
				}
	
				var framebuffer = _framebuffer;
				var isCube = false;
	
				if ( renderTarget ) {
	
					var __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;
	
					if ( renderTarget.isWebGLCubeRenderTarget ) {
	
						framebuffer = __webglFramebuffer[ activeCubeFace || 0 ];
						isCube = true;
	
					} else if ( renderTarget.isWebGLMultisampleRenderTarget ) {
	
						framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;
	
					} else {
	
						framebuffer = __webglFramebuffer;
	
					}
	
					_currentViewport.copy( renderTarget.viewport );
					_currentScissor.copy( renderTarget.scissor );
					_currentScissorTest = renderTarget.scissorTest;
	
				} else {
	
					_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
					_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
					_currentScissorTest = _scissorTest;
	
				}
	
				if ( _currentFramebuffer !== framebuffer ) {
	
					_gl.bindFramebuffer( 36160, framebuffer );
					_currentFramebuffer = framebuffer;
	
				}
	
				state.viewport( _currentViewport );
				state.scissor( _currentScissor );
				state.setScissorTest( _currentScissorTest );
	
				if ( isCube ) {
	
					var textureProperties = properties.get( renderTarget.texture );
					_gl.framebufferTexture2D( 36160, 36064, 34069 + ( activeCubeFace || 0 ), textureProperties.__webglTexture, activeMipmapLevel || 0 );
	
				}
	
			};
	
			this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {
	
				if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {
	
					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
					return;
	
				}
	
				var framebuffer = properties.get( renderTarget ).__webglFramebuffer;
	
				if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {
	
					framebuffer = framebuffer[ activeCubeFaceIndex ];
	
				}
	
				if ( framebuffer ) {
	
					var restore = false;
	
					if ( framebuffer !== _currentFramebuffer ) {
	
						_gl.bindFramebuffer( 36160, framebuffer );
	
						restore = true;
	
					}
	
					try {
	
						var texture = renderTarget.texture;
						var textureFormat = texture.format;
						var textureType = texture.type;
	
						if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {
	
							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
							return;
	
						}
	
						if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // IE11, Edge and Chrome Mac < 52 (#9513)
							! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.get( 'OES_texture_float' ) || extensions.get( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
							! ( textureType === HalfFloatType && ( capabilities.isWebGL2 ? extensions.get( 'EXT_color_buffer_float' ) : extensions.get( 'EXT_color_buffer_half_float' ) ) ) ) {
	
							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
							return;
	
						}
	
						if ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {
	
							// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)
	
							if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {
	
								_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );
	
							}
	
						} else {
	
							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );
	
						}
	
					} finally {
	
						if ( restore ) {
	
							_gl.bindFramebuffer( 36160, _currentFramebuffer );
	
						}
	
					}
	
				}
	
			};
	
			this.copyFramebufferToTexture = function ( position, texture, level ) {
	
				if ( level === undefined ) { level = 0; }
	
				var levelScale = Math.pow( 2, - level );
				var width = Math.floor( texture.image.width * levelScale );
				var height = Math.floor( texture.image.height * levelScale );
				var glFormat = utils.convert( texture.format );
	
				textures.setTexture2D( texture, 0 );
	
				_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );
	
				state.unbindTexture();
	
			};
	
			this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level ) {
	
				var width = srcTexture.image.width;
				var height = srcTexture.image.height;
				var glFormat = utils.convert( dstTexture.format );
				var glType = utils.convert( dstTexture.type );
	
				textures.setTexture2D( dstTexture, 0 );
	
				if ( srcTexture.isDataTexture ) {
	
					_gl.texSubImage2D( 3553, level || 0, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );
	
				} else {
	
					_gl.texSubImage2D( 3553, level || 0, position.x, position.y, glFormat, glType, srcTexture.image );
	
				}
	
				state.unbindTexture();
	
			};
	
			this.initTexture = function ( texture ) {
	
				textures.setTexture2D( texture, 0 );
	
				state.unbindTexture();
	
			};
	
			if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
	
				__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function FogExp2( color, density ) {
	
			this.name = '';
	
			this.color = new Color( color );
			this.density = ( density !== undefined ) ? density : 0.00025;
	
		}
	
		Object.assign( FogExp2.prototype, {
	
			isFogExp2: true,
	
			clone: function () {
	
				return new FogExp2( this.color, this.density );
	
			},
	
			toJSON: function ( /* meta */ ) {
	
				return {
					type: 'FogExp2',
					color: this.color.getHex(),
					density: this.density
				};
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Fog( color, near, far ) {
	
			this.name = '';
	
			this.color = new Color( color );
	
			this.near = ( near !== undefined ) ? near : 1;
			this.far = ( far !== undefined ) ? far : 1000;
	
		}
	
		Object.assign( Fog.prototype, {
	
			isFog: true,
	
			clone: function () {
	
				return new Fog( this.color, this.near, this.far );
	
			},
	
			toJSON: function ( /* meta */ ) {
	
				return {
					type: 'Fog',
					color: this.color.getHex(),
					near: this.near,
					far: this.far
				};
	
			}
	
		} );
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InterleavedBuffer( array, stride ) {
	
			this.array = array;
			this.stride = stride;
			this.count = array !== undefined ? array.length / stride : 0;
	
			this.usage = StaticDrawUsage;
			this.updateRange = { offset: 0, count: - 1 };
	
			this.version = 0;
	
		}
	
		Object.defineProperty( InterleavedBuffer.prototype, 'needsUpdate', {
	
			set: function ( value ) {
	
				if ( value === true ) { this.version ++; }
	
			}
	
		} );
	
		Object.assign( InterleavedBuffer.prototype, {
	
			isInterleavedBuffer: true,
	
			onUploadCallback: function () {},
	
			setUsage: function ( value ) {
	
				this.usage = value;
	
				return this;
	
			},
	
			copy: function ( source ) {
	
				this.array = new source.array.constructor( source.array );
				this.count = source.count;
				this.stride = source.stride;
				this.usage = source.usage;
	
				return this;
	
			},
	
			copyAt: function ( index1, attribute, index2 ) {
	
				index1 *= this.stride;
				index2 *= attribute.stride;
	
				for ( var i = 0, l = this.stride; i < l; i ++ ) {
	
					this.array[ index1 + i ] = attribute.array[ index2 + i ];
	
				}
	
				return this;
	
			},
	
			set: function ( value, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				this.array.set( value, offset );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			onUpload: function ( callback ) {
	
				this.onUploadCallback = callback;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		var _vector$6 = new Vector3();
	
		function InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, normalized ) {
	
			this.data = interleavedBuffer;
			this.itemSize = itemSize;
			this.offset = offset;
	
			this.normalized = normalized === true;
	
		}
	
		Object.defineProperties( InterleavedBufferAttribute.prototype, {
	
			count: {
	
				get: function () {
	
					return this.data.count;
	
				}
	
			},
	
			array: {
	
				get: function () {
	
					return this.data.array;
	
				}
	
			}
	
		} );
	
		Object.assign( InterleavedBufferAttribute.prototype, {
	
			isInterleavedBufferAttribute: true,
	
			applyMatrix4: function ( m ) {
	
				for ( var i = 0, l = this.data.count; i < l; i ++ ) {
	
					_vector$6.x = this.getX( i );
					_vector$6.y = this.getY( i );
					_vector$6.z = this.getZ( i );
	
					_vector$6.applyMatrix4( m );
	
					this.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );
	
				}
	
				return this;
	
			},
	
			setX: function ( index, x ) {
	
				this.data.array[ index * this.data.stride + this.offset ] = x;
	
				return this;
	
			},
	
			setY: function ( index, y ) {
	
				this.data.array[ index * this.data.stride + this.offset + 1 ] = y;
	
				return this;
	
			},
	
			setZ: function ( index, z ) {
	
				this.data.array[ index * this.data.stride + this.offset + 2 ] = z;
	
				return this;
	
			},
	
			setW: function ( index, w ) {
	
				this.data.array[ index * this.data.stride + this.offset + 3 ] = w;
	
				return this;
	
			},
	
			getX: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset ];
	
			},
	
			getY: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset + 1 ];
	
			},
	
			getZ: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset + 2 ];
	
			},
	
			getW: function ( index ) {
	
				return this.data.array[ index * this.data.stride + this.offset + 3 ];
	
			},
	
			setXY: function ( index, x, y ) {
	
				index = index * this.data.stride + this.offset;
	
				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
	
				return this;
	
			},
	
			setXYZ: function ( index, x, y, z ) {
	
				index = index * this.data.stride + this.offset;
	
				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;
	
				return this;
	
			},
	
			setXYZW: function ( index, x, y, z, w ) {
	
				index = index * this.data.stride + this.offset;
	
				this.data.array[ index + 0 ] = x;
				this.data.array[ index + 1 ] = y;
				this.data.array[ index + 2 ] = z;
				this.data.array[ index + 3 ] = w;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  map: new THREE.Texture( <Image> ),
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *  rotation: <float>,
		 *  sizeAttenuation: <bool>
		 * }
		 */
	
		function SpriteMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'SpriteMaterial';
	
			this.color = new Color( 0xffffff );
	
			this.map = null;
	
			this.alphaMap = null;
	
			this.rotation = 0;
	
			this.sizeAttenuation = true;
	
			this.transparent = true;
	
			this.setValues( parameters );
	
		}
	
		SpriteMaterial.prototype = Object.create( Material.prototype );
		SpriteMaterial.prototype.constructor = SpriteMaterial;
		SpriteMaterial.prototype.isSpriteMaterial = true;
	
		SpriteMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.alphaMap = source.alphaMap;
	
			this.rotation = source.rotation;
	
			this.sizeAttenuation = source.sizeAttenuation;
	
			return this;
	
		};
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		var _geometry;
	
		var _intersectPoint = new Vector3();
		var _worldScale = new Vector3();
		var _mvPosition = new Vector3();
	
		var _alignedPosition = new Vector2();
		var _rotatedPosition = new Vector2();
		var _viewWorldMatrix = new Matrix4();
	
		var _vA$1 = new Vector3();
		var _vB$1 = new Vector3();
		var _vC$1 = new Vector3();
	
		var _uvA$1 = new Vector2();
		var _uvB$1 = new Vector2();
		var _uvC$1 = new Vector2();
	
		function Sprite( material ) {
	
			Object3D.call( this );
	
			this.type = 'Sprite';
	
			if ( _geometry === undefined ) {
	
				_geometry = new BufferGeometry();
	
				var float32Array = new Float32Array( [
					- 0.5, - 0.5, 0, 0, 0,
					0.5, - 0.5, 0, 1, 0,
					0.5, 0.5, 0, 1, 1,
					- 0.5, 0.5, 0, 0, 1
				] );
	
				var interleavedBuffer = new InterleavedBuffer( float32Array, 5 );
	
				_geometry.setIndex( [ 0, 1, 2,	0, 2, 3 ] );
				_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );
				_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );
	
			}
	
			this.geometry = _geometry;
			this.material = ( material !== undefined ) ? material : new SpriteMaterial();
	
			this.center = new Vector2( 0.5, 0.5 );
	
		}
	
		Sprite.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Sprite,
	
			isSprite: true,
	
			raycast: function ( raycaster, intersects ) {
	
				if ( raycaster.camera === null ) {
	
					console.error( 'THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.' );
	
				}
	
				_worldScale.setFromMatrixScale( this.matrixWorld );
	
				_viewWorldMatrix.copy( raycaster.camera.matrixWorld );
				this.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );
	
				_mvPosition.setFromMatrixPosition( this.modelViewMatrix );
	
				if ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {
	
					_worldScale.multiplyScalar( - _mvPosition.z );
	
				}
	
				var rotation = this.material.rotation;
				var sin, cos;
				if ( rotation !== 0 ) {
	
					cos = Math.cos( rotation );
					sin = Math.sin( rotation );
	
				}
	
				var center = this.center;
	
				transformVertex( _vA$1.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
				transformVertex( _vB$1.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
				transformVertex( _vC$1.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
	
				_uvA$1.set( 0, 0 );
				_uvB$1.set( 1, 0 );
				_uvC$1.set( 1, 1 );
	
				// check first triangle
				var intersect = raycaster.ray.intersectTriangle( _vA$1, _vB$1, _vC$1, false, _intersectPoint );
	
				if ( intersect === null ) {
	
					// check second triangle
					transformVertex( _vB$1.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );
					_uvB$1.set( 0, 1 );
	
					intersect = raycaster.ray.intersectTriangle( _vA$1, _vC$1, _vB$1, false, _intersectPoint );
					if ( intersect === null ) {
	
						return;
	
					}
	
				}
	
				var distance = raycaster.ray.origin.distanceTo( _intersectPoint );
	
				if ( distance < raycaster.near || distance > raycaster.far ) { return; }
	
				intersects.push( {
	
					distance: distance,
					point: _intersectPoint.clone(),
					uv: Triangle.getUV( _intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() ),
					face: null,
					object: this
	
				} );
	
			},
	
			clone: function () {
	
				return new this.constructor( this.material ).copy( this );
	
			},
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				if ( source.center !== undefined ) { this.center.copy( source.center ); }
	
				return this;
	
			}
	
	
		} );
	
		function transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {
	
			// compute position in camera space
			_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );
	
			// to check if rotation is not zero
			if ( sin !== undefined ) {
	
				_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );
				_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );
	
			} else {
	
				_rotatedPosition.copy( _alignedPosition );
	
			}
	
	
			vertexPosition.copy( mvPosition );
			vertexPosition.x += _rotatedPosition.x;
			vertexPosition.y += _rotatedPosition.y;
	
			// transform to world space
			vertexPosition.applyMatrix4( _viewWorldMatrix );
	
		}
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _v1$4 = new Vector3();
		var _v2$2 = new Vector3();
	
		function LOD() {
	
			Object3D.call( this );
	
			this._currentLevel = 0;
	
			this.type = 'LOD';
	
			Object.defineProperties( this, {
				levels: {
					enumerable: true,
					value: []
				}
			} );
	
			this.autoUpdate = true;
	
		}
	
		LOD.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: LOD,
	
			isLOD: true,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source, false );
	
				var levels = source.levels;
	
				for ( var i = 0, l = levels.length; i < l; i ++ ) {
	
					var level = levels[ i ];
	
					this.addLevel( level.object.clone(), level.distance );
	
				}
	
				this.autoUpdate = source.autoUpdate;
	
				return this;
	
			},
	
			addLevel: function ( object, distance ) {
	
				if ( distance === undefined ) { distance = 0; }
	
				distance = Math.abs( distance );
	
				var levels = this.levels;
	
				for ( var l = 0; l < levels.length; l ++ ) {
	
					if ( distance < levels[ l ].distance ) {
	
						break;
	
					}
	
				}
	
				levels.splice( l, 0, { distance: distance, object: object } );
	
				this.add( object );
	
				return this;
	
			},
	
			getCurrentLevel: function () {
	
				return this._currentLevel;
	
			},
	
			getObjectForDistance: function ( distance ) {
	
				var levels = this.levels;
	
				if ( levels.length > 0 ) {
	
					for ( var i = 1, l = levels.length; i < l; i ++ ) {
	
						if ( distance < levels[ i ].distance ) {
	
							break;
	
						}
	
					}
	
					return levels[ i - 1 ].object;
	
				}
	
				return null;
	
			},
	
			raycast: function ( raycaster, intersects ) {
	
				var levels = this.levels;
	
				if ( levels.length > 0 ) {
	
					_v1$4.setFromMatrixPosition( this.matrixWorld );
	
					var distance = raycaster.ray.origin.distanceTo( _v1$4 );
	
					this.getObjectForDistance( distance ).raycast( raycaster, intersects );
	
				}
	
			},
	
			update: function ( camera ) {
	
				var levels = this.levels;
	
				if ( levels.length > 1 ) {
	
					_v1$4.setFromMatrixPosition( camera.matrixWorld );
					_v2$2.setFromMatrixPosition( this.matrixWorld );
	
					var distance = _v1$4.distanceTo( _v2$2 ) / camera.zoom;
	
					levels[ 0 ].object.visible = true;
	
					for ( var i = 1, l = levels.length; i < l; i ++ ) {
	
						if ( distance >= levels[ i ].distance ) {
	
							levels[ i - 1 ].object.visible = false;
							levels[ i ].object.visible = true;
	
						} else {
	
							break;
	
						}
	
					}
	
					this._currentLevel = i - 1;
	
					for ( ; i < l; i ++ ) {
	
						levels[ i ].object.visible = false;
	
					}
	
				}
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				if ( this.autoUpdate === false ) { data.object.autoUpdate = false; }
	
				data.object.levels = [];
	
				var levels = this.levels;
	
				for ( var i = 0, l = levels.length; i < l; i ++ ) {
	
					var level = levels[ i ];
	
					data.object.levels.push( {
						object: level.object.uuid,
						distance: level.distance
					} );
	
				}
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */
	
		function SkinnedMesh( geometry, material ) {
	
			if ( geometry && geometry.isGeometry ) {
	
				console.error( 'THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );
	
			}
	
			Mesh.call( this, geometry, material );
	
			this.type = 'SkinnedMesh';
	
			this.bindMode = 'attached';
			this.bindMatrix = new Matrix4();
			this.bindMatrixInverse = new Matrix4();
	
		}
	
		SkinnedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {
	
			constructor: SkinnedMesh,
	
			isSkinnedMesh: true,
	
			bind: function ( skeleton, bindMatrix ) {
	
				this.skeleton = skeleton;
	
				if ( bindMatrix === undefined ) {
	
					this.updateMatrixWorld( true );
	
					this.skeleton.calculateInverses();
	
					bindMatrix = this.matrixWorld;
	
				}
	
				this.bindMatrix.copy( bindMatrix );
				this.bindMatrixInverse.getInverse( bindMatrix );
	
			},
	
			pose: function () {
	
				this.skeleton.pose();
	
			},
	
			normalizeSkinWeights: function () {
	
				var vector = new Vector4();
	
				var skinWeight = this.geometry.attributes.skinWeight;
	
				for ( var i = 0, l = skinWeight.count; i < l; i ++ ) {
	
					vector.x = skinWeight.getX( i );
					vector.y = skinWeight.getY( i );
					vector.z = skinWeight.getZ( i );
					vector.w = skinWeight.getW( i );
	
					var scale = 1.0 / vector.manhattanLength();
	
					if ( scale !== Infinity ) {
	
						vector.multiplyScalar( scale );
	
					} else {
	
						vector.set( 1, 0, 0, 0 ); // do something reasonable
	
					}
	
					skinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );
	
				}
	
			},
	
			updateMatrixWorld: function ( force ) {
	
				Mesh.prototype.updateMatrixWorld.call( this, force );
	
				if ( this.bindMode === 'attached' ) {
	
					this.bindMatrixInverse.getInverse( this.matrixWorld );
	
				} else if ( this.bindMode === 'detached' ) {
	
					this.bindMatrixInverse.getInverse( this.bindMatrix );
	
				} else {
	
					console.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author michael guerrero / http://realitymeltdown.com
		 * @author ikerr / http://verold.com
		 */
	
		var _offsetMatrix = new Matrix4();
		var _identityMatrix = new Matrix4();
	
		function Skeleton( bones, boneInverses ) {
	
			// copy the bone array
	
			bones = bones || [];
	
			this.bones = bones.slice( 0 );
			this.boneMatrices = new Float32Array( this.bones.length * 16 );
	
			this.frame = - 1;
	
			// use the supplied bone inverses or calculate the inverses
	
			if ( boneInverses === undefined ) {
	
				this.calculateInverses();
	
			} else {
	
				if ( this.bones.length === boneInverses.length ) {
	
					this.boneInverses = boneInverses.slice( 0 );
	
				} else {
	
					console.warn( 'THREE.Skeleton boneInverses is the wrong length.' );
	
					this.boneInverses = [];
	
					for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
	
						this.boneInverses.push( new Matrix4() );
	
					}
	
				}
	
			}
	
		}
	
		Object.assign( Skeleton.prototype, {
	
			calculateInverses: function () {
	
				this.boneInverses = [];
	
				for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
	
					var inverse = new Matrix4();
	
					if ( this.bones[ i ] ) {
	
						inverse.getInverse( this.bones[ i ].matrixWorld );
	
					}
	
					this.boneInverses.push( inverse );
	
				}
	
			},
	
			pose: function () {
	
				var bone, i, il;
	
				// recover the bind-time world matrices
	
				for ( i = 0, il = this.bones.length; i < il; i ++ ) {
	
					bone = this.bones[ i ];
	
					if ( bone ) {
	
						bone.matrixWorld.getInverse( this.boneInverses[ i ] );
	
					}
	
				}
	
				// compute the local matrices, positions, rotations and scales
	
				for ( i = 0, il = this.bones.length; i < il; i ++ ) {
	
					bone = this.bones[ i ];
	
					if ( bone ) {
	
						if ( bone.parent && bone.parent.isBone ) {
	
							bone.matrix.getInverse( bone.parent.matrixWorld );
							bone.matrix.multiply( bone.matrixWorld );
	
						} else {
	
							bone.matrix.copy( bone.matrixWorld );
	
						}
	
						bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
	
					}
	
				}
	
			},
	
			update: function () {
	
				var bones = this.bones;
				var boneInverses = this.boneInverses;
				var boneMatrices = this.boneMatrices;
				var boneTexture = this.boneTexture;
	
				// flatten bone matrices to array
	
				for ( var i = 0, il = bones.length; i < il; i ++ ) {
	
					// compute the offset between the current and the original transform
	
					var matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;
	
					_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );
					_offsetMatrix.toArray( boneMatrices, i * 16 );
	
				}
	
				if ( boneTexture !== undefined ) {
	
					boneTexture.needsUpdate = true;
	
				}
	
			},
	
			clone: function () {
	
				return new Skeleton( this.bones, this.boneInverses );
	
			},
	
			getBoneByName: function ( name ) {
	
				for ( var i = 0, il = this.bones.length; i < il; i ++ ) {
	
					var bone = this.bones[ i ];
	
					if ( bone.name === name ) {
	
						return bone;
	
					}
	
				}
	
				return undefined;
	
			}
	
		} );
	
		/**
		 * @author mikael emtinger / http://gomo.se/
		 * @author alteredq / http://alteredqualia.com/
		 * @author ikerr / http://verold.com
		 */
	
		function Bone() {
	
			Object3D.call( this );
	
			this.type = 'Bone';
	
		}
	
		Bone.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Bone,
	
			isBone: true
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _instanceLocalMatrix = new Matrix4();
		var _instanceWorldMatrix = new Matrix4();
	
		var _instanceIntersects = [];
	
		var _mesh = new Mesh();
	
		function InstancedMesh( geometry, material, count ) {
	
			Mesh.call( this, geometry, material );
	
			this.instanceMatrix = new BufferAttribute( new Float32Array( count * 16 ), 16 );
	
			this.count = count;
	
			this.frustumCulled = false;
	
		}
	
		InstancedMesh.prototype = Object.assign( Object.create( Mesh.prototype ), {
	
			constructor: InstancedMesh,
	
			isInstancedMesh: true,
	
			getMatrixAt: function ( index, matrix ) {
	
				matrix.fromArray( this.instanceMatrix.array, index * 16 );
	
			},
	
			raycast: function ( raycaster, intersects ) {
	
				var matrixWorld = this.matrixWorld;
				var raycastTimes = this.count;
	
				_mesh.geometry = this.geometry;
				_mesh.material = this.material;
	
				if ( _mesh.material === undefined ) { return; }
	
				for ( var instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {
	
					// calculate the world matrix for each instance
	
					this.getMatrixAt( instanceId, _instanceLocalMatrix );
	
					_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );
	
					// the mesh represents this single instance
	
					_mesh.matrixWorld = _instanceWorldMatrix;
	
					_mesh.raycast( raycaster, _instanceIntersects );
	
					// process the result of raycast
	
					if ( _instanceIntersects.length > 0 ) {
	
						_instanceIntersects[ 0 ].instanceId = instanceId;
						_instanceIntersects[ 0 ].object = this;
	
						intersects.push( _instanceIntersects[ 0 ] );
	
						_instanceIntersects.length = 0;
	
					}
	
				}
	
			},
	
			setMatrixAt: function ( index, matrix ) {
	
				matrix.toArray( this.instanceMatrix.array, index * 16 );
	
			},
	
			updateMorphTargets: function () {
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *  linecap: "round",
		 *  linejoin: "round"
		 * }
		 */
	
		function LineBasicMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'LineBasicMaterial';
	
			this.color = new Color( 0xffffff );
	
			this.linewidth = 1;
			this.linecap = 'round';
			this.linejoin = 'round';
	
			this.setValues( parameters );
	
		}
	
		LineBasicMaterial.prototype = Object.create( Material.prototype );
		LineBasicMaterial.prototype.constructor = LineBasicMaterial;
	
		LineBasicMaterial.prototype.isLineBasicMaterial = true;
	
		LineBasicMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.linewidth = source.linewidth;
			this.linecap = source.linecap;
			this.linejoin = source.linejoin;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _start = new Vector3();
		var _end = new Vector3();
		var _inverseMatrix$1 = new Matrix4();
		var _ray$1 = new Ray();
		var _sphere$2 = new Sphere();
	
		function Line( geometry, material, mode ) {
	
			if ( mode === 1 ) {
	
				console.error( 'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead.' );
	
			}
	
			Object3D.call( this );
	
			this.type = 'Line';
	
			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new LineBasicMaterial();
	
		}
	
		Line.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Line,
	
			isLine: true,
	
			computeLineDistances: function () {
	
				var geometry = this.geometry;
	
				if ( geometry.isBufferGeometry ) {
	
					// we assume non-indexed geometry
	
					if ( geometry.index === null ) {
	
						var positionAttribute = geometry.attributes.position;
						var lineDistances = [ 0 ];
	
						for ( var i = 1, l = positionAttribute.count; i < l; i ++ ) {
	
							_start.fromBufferAttribute( positionAttribute, i - 1 );
							_end.fromBufferAttribute( positionAttribute, i );
	
							lineDistances[ i ] = lineDistances[ i - 1 ];
							lineDistances[ i ] += _start.distanceTo( _end );
	
						}
	
						geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
	
					} else {
	
						console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
	
					}
	
				} else if ( geometry.isGeometry ) {
	
					var vertices = geometry.vertices;
					var lineDistances = geometry.lineDistances;
	
					lineDistances[ 0 ] = 0;
	
					for ( var i = 1, l = vertices.length; i < l; i ++ ) {
	
						lineDistances[ i ] = lineDistances[ i - 1 ];
						lineDistances[ i ] += vertices[ i - 1 ].distanceTo( vertices[ i ] );
	
					}
	
				}
	
				return this;
	
			},
	
			raycast: function ( raycaster, intersects ) {
	
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				var threshold = raycaster.params.Line.threshold;
	
				// Checking boundingSphere distance to ray
	
				if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }
	
				_sphere$2.copy( geometry.boundingSphere );
				_sphere$2.applyMatrix4( matrixWorld );
				_sphere$2.radius += threshold;
	
				if ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) { return; }
	
				//
	
				_inverseMatrix$1.getInverse( matrixWorld );
				_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );
	
				var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localThresholdSq = localThreshold * localThreshold;
	
				var vStart = new Vector3();
				var vEnd = new Vector3();
				var interSegment = new Vector3();
				var interRay = new Vector3();
				var step = ( this && this.isLineSegments ) ? 2 : 1;
	
				if ( geometry.isBufferGeometry ) {
	
					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;
	
					if ( index !== null ) {
	
						var indices = index.array;
	
						for ( var i = 0, l = indices.length - 1; i < l; i += step ) {
	
							var a = indices[ i ];
							var b = indices[ i + 1 ];
	
							vStart.fromArray( positions, a * 3 );
							vEnd.fromArray( positions, b * 3 );
	
							var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
	
							if ( distSq > localThresholdSq ) { continue; }
	
							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
							var distance = raycaster.ray.origin.distanceTo( interRay );
	
							if ( distance < raycaster.near || distance > raycaster.far ) { continue; }
	
							intersects.push( {
	
								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this
	
							} );
	
						}
	
					} else {
	
						for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {
	
							vStart.fromArray( positions, 3 * i );
							vEnd.fromArray( positions, 3 * i + 3 );
	
							var distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
	
							if ( distSq > localThresholdSq ) { continue; }
	
							interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
							var distance = raycaster.ray.origin.distanceTo( interRay );
	
							if ( distance < raycaster.near || distance > raycaster.far ) { continue; }
	
							intersects.push( {
	
								distance: distance,
								// What do we want? intersection point on the ray or on the segment??
								// point: raycaster.ray.at( distance ),
								point: interSegment.clone().applyMatrix4( this.matrixWorld ),
								index: i,
								face: null,
								faceIndex: null,
								object: this
	
							} );
	
						}
	
					}
	
				} else if ( geometry.isGeometry ) {
	
					var vertices = geometry.vertices;
					var nbVertices = vertices.length;
	
					for ( var i = 0; i < nbVertices - 1; i += step ) {
	
						var distSq = _ray$1.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );
	
						if ( distSq > localThresholdSq ) { continue; }
	
						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
						var distance = raycaster.ray.origin.distanceTo( interRay );
	
						if ( distance < raycaster.near || distance > raycaster.far ) { continue; }
	
						intersects.push( {
	
							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this
	
						} );
	
					}
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _start$1 = new Vector3();
		var _end$1 = new Vector3();
	
		function LineSegments( geometry, material ) {
	
			Line.call( this, geometry, material );
	
			this.type = 'LineSegments';
	
		}
	
		LineSegments.prototype = Object.assign( Object.create( Line.prototype ), {
	
			constructor: LineSegments,
	
			isLineSegments: true,
	
			computeLineDistances: function () {
	
				var geometry = this.geometry;
	
				if ( geometry.isBufferGeometry ) {
	
					// we assume non-indexed geometry
	
					if ( geometry.index === null ) {
	
						var positionAttribute = geometry.attributes.position;
						var lineDistances = [];
	
						for ( var i = 0, l = positionAttribute.count; i < l; i += 2 ) {
	
							_start$1.fromBufferAttribute( positionAttribute, i );
							_end$1.fromBufferAttribute( positionAttribute, i + 1 );
	
							lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
							lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );
	
						}
	
						geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );
	
					} else {
	
						console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );
	
					}
	
				} else if ( geometry.isGeometry ) {
	
					var vertices = geometry.vertices;
					var lineDistances = geometry.lineDistances;
	
					for ( var i = 0, l = vertices.length; i < l; i += 2 ) {
	
						_start$1.copy( vertices[ i ] );
						_end$1.copy( vertices[ i + 1 ] );
	
						lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
						lineDistances[ i + 1 ] = lineDistances[ i ] + _start$1.distanceTo( _end$1 );
	
					}
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mgreter / http://github.com/mgreter
		 */
	
		function LineLoop( geometry, material ) {
	
			Line.call( this, geometry, material );
	
			this.type = 'LineLoop';
	
		}
	
		LineLoop.prototype = Object.assign( Object.create( Line.prototype ), {
	
			constructor: LineLoop,
	
			isLineLoop: true,
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *  map: new THREE.Texture( <Image> ),
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  size: <float>,
		 *  sizeAttenuation: <bool>
		 *
		 *  morphTargets: <bool>
		 * }
		 */
	
		function PointsMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'PointsMaterial';
	
			this.color = new Color( 0xffffff );
	
			this.map = null;
	
			this.alphaMap = null;
	
			this.size = 1;
			this.sizeAttenuation = true;
	
			this.morphTargets = false;
	
			this.setValues( parameters );
	
		}
	
		PointsMaterial.prototype = Object.create( Material.prototype );
		PointsMaterial.prototype.constructor = PointsMaterial;
	
		PointsMaterial.prototype.isPointsMaterial = true;
	
		PointsMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.alphaMap = source.alphaMap;
	
			this.size = source.size;
			this.sizeAttenuation = source.sizeAttenuation;
	
			this.morphTargets = source.morphTargets;
	
			return this;
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		var _inverseMatrix$2 = new Matrix4();
		var _ray$2 = new Ray();
		var _sphere$3 = new Sphere();
		var _position$1 = new Vector3();
	
		function Points( geometry, material ) {
	
			Object3D.call( this );
	
			this.type = 'Points';
	
			this.geometry = geometry !== undefined ? geometry : new BufferGeometry();
			this.material = material !== undefined ? material : new PointsMaterial();
	
			this.updateMorphTargets();
	
		}
	
		Points.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Points,
	
			isPoints: true,
	
			raycast: function ( raycaster, intersects ) {
	
				var geometry = this.geometry;
				var matrixWorld = this.matrixWorld;
				var threshold = raycaster.params.Points.threshold;
	
				// Checking boundingSphere distance to ray
	
				if ( geometry.boundingSphere === null ) { geometry.computeBoundingSphere(); }
	
				_sphere$3.copy( geometry.boundingSphere );
				_sphere$3.applyMatrix4( matrixWorld );
				_sphere$3.radius += threshold;
	
				if ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) { return; }
	
				//
	
				_inverseMatrix$2.getInverse( matrixWorld );
				_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );
	
				var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
				var localThresholdSq = localThreshold * localThreshold;
	
				if ( geometry.isBufferGeometry ) {
	
					var index = geometry.index;
					var attributes = geometry.attributes;
					var positions = attributes.position.array;
	
					if ( index !== null ) {
	
						var indices = index.array;
	
						for ( var i = 0, il = indices.length; i < il; i ++ ) {
	
							var a = indices[ i ];
	
							_position$1.fromArray( positions, a * 3 );
	
							testPoint( _position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this );
	
						}
	
					} else {
	
						for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {
	
							_position$1.fromArray( positions, i * 3 );
	
							testPoint( _position$1, i, localThresholdSq, matrixWorld, raycaster, intersects, this );
	
						}
	
					}
	
				} else {
	
					var vertices = geometry.vertices;
	
					for ( var i = 0, l = vertices.length; i < l; i ++ ) {
	
						testPoint( vertices[ i ], i, localThresholdSq, matrixWorld, raycaster, intersects, this );
	
					}
	
				}
	
			},
	
			updateMorphTargets: function () {
	
				var geometry = this.geometry;
				var m, ml, name;
	
				if ( geometry.isBufferGeometry ) {
	
					var morphAttributes = geometry.morphAttributes;
					var keys = Object.keys( morphAttributes );
	
					if ( keys.length > 0 ) {
	
						var morphAttribute = morphAttributes[ keys[ 0 ] ];
	
						if ( morphAttribute !== undefined ) {
	
							this.morphTargetInfluences = [];
							this.morphTargetDictionary = {};
	
							for ( m = 0, ml = morphAttribute.length; m < ml; m ++ ) {
	
								name = morphAttribute[ m ].name || String( m );
	
								this.morphTargetInfluences.push( 0 );
								this.morphTargetDictionary[ name ] = m;
	
							}
	
						}
	
					}
	
				} else {
	
					var morphTargets = geometry.morphTargets;
	
					if ( morphTargets !== undefined && morphTargets.length > 0 ) {
	
						console.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );
	
					}
	
				}
	
			},
	
			clone: function () {
	
				return new this.constructor( this.geometry, this.material ).copy( this );
	
			}
	
		} );
	
		function testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {
	
			var rayPointDistanceSq = _ray$2.distanceSqToPoint( point );
	
			if ( rayPointDistanceSq < localThresholdSq ) {
	
				var intersectPoint = new Vector3();
	
				_ray$2.closestPointToPoint( point, intersectPoint );
				intersectPoint.applyMatrix4( matrixWorld );
	
				var distance = raycaster.ray.origin.distanceTo( intersectPoint );
	
				if ( distance < raycaster.near || distance > raycaster.far ) { return; }
	
				intersects.push( {
	
					distance: distance,
					distanceToRay: Math.sqrt( rayPointDistanceSq ),
					point: intersectPoint,
					index: index,
					face: null,
					object: object
	
				} );
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function VideoTexture( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
			Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
			this.format = format !== undefined ? format : RGBFormat;
	
			this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;
			this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;
	
			this.generateMipmaps = false;
	
		}
	
		VideoTexture.prototype = Object.assign( Object.create( Texture.prototype ), {
	
			constructor: VideoTexture,
	
			isVideoTexture: true,
	
			update: function () {
	
				var video = this.image;
	
				if ( video.readyState >= video.HAVE_CURRENT_DATA ) {
	
					this.needsUpdate = true;
	
				}
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {
	
			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );
	
			this.image = { width: width, height: height };
			this.mipmaps = mipmaps;
	
			// no flipping for cube textures
			// (also flipping doesn't work for compressed textures )
	
			this.flipY = false;
	
			// can't generate mipmaps for compressed textures
			// mips must be embedded in DDS files
	
			this.generateMipmaps = false;
	
		}
	
		CompressedTexture.prototype = Object.create( Texture.prototype );
		CompressedTexture.prototype.constructor = CompressedTexture;
	
		CompressedTexture.prototype.isCompressedTexture = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function CanvasTexture( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
			Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
			this.needsUpdate = true;
	
		}
	
		CanvasTexture.prototype = Object.create( Texture.prototype );
		CanvasTexture.prototype.constructor = CanvasTexture;
		CanvasTexture.prototype.isCanvasTexture = true;
	
		/**
		 * @author Matt DesLauriers / @mattdesl
		 * @author atix / arthursilber.de
		 */
	
		function DepthTexture( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {
	
			format = format !== undefined ? format : DepthFormat;
	
			if ( format !== DepthFormat && format !== DepthStencilFormat ) {
	
				throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );
	
			}
	
			if ( type === undefined && format === DepthFormat ) { type = UnsignedShortType; }
			if ( type === undefined && format === DepthStencilFormat ) { type = UnsignedInt248Type; }
	
			Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
			this.image = { width: width, height: height };
	
			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;
	
			this.flipY = false;
			this.generateMipmaps	= false;
	
		}
	
		DepthTexture.prototype = Object.create( Texture.prototype );
		DepthTexture.prototype.constructor = DepthTexture;
		DepthTexture.prototype.isDepthTexture = true;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function WireframeGeometry( geometry ) {
	
			BufferGeometry.call( this );
	
			this.type = 'WireframeGeometry';
	
			// buffer
	
			var vertices = [];
	
			// helper variables
	
			var i, j, l, o, ol;
			var edge = [ 0, 0 ], edges = {}, e, edge1, edge2;
			var key, keys = [ 'a', 'b', 'c' ];
			var vertex;
	
			// different logic for Geometry and BufferGeometry
	
			if ( geometry && geometry.isGeometry ) {
	
				// create a data structure that contains all edges without duplicates
	
				var faces = geometry.faces;
	
				for ( i = 0, l = faces.length; i < l; i ++ ) {
	
					var face = faces[ i ];
	
					for ( j = 0; j < 3; j ++ ) {
	
						edge1 = face[ keys[ j ] ];
						edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
						edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
						edge[ 1 ] = Math.max( edge1, edge2 );
	
						key = edge[ 0 ] + ',' + edge[ 1 ];
	
						if ( edges[ key ] === undefined ) {
	
							edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
	
						}
	
					}
	
				}
	
				// generate vertices
	
				for ( key in edges ) {
	
					e = edges[ key ];
	
					vertex = geometry.vertices[ e.index1 ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					vertex = geometry.vertices[ e.index2 ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
			} else if ( geometry && geometry.isBufferGeometry ) {
	
				var position, indices, groups;
				var group, start, count;
				var index1, index2;
	
				vertex = new Vector3();
	
				if ( geometry.index !== null ) {
	
					// indexed BufferGeometry
	
					position = geometry.attributes.position;
					indices = geometry.index;
					groups = geometry.groups;
	
					if ( groups.length === 0 ) {
	
						groups = [ { start: 0, count: indices.count, materialIndex: 0 } ];
	
					}
	
					// create a data structure that contains all eges without duplicates
	
					for ( o = 0, ol = groups.length; o < ol; ++ o ) {
	
						group = groups[ o ];
	
						start = group.start;
						count = group.count;
	
						for ( i = start, l = ( start + count ); i < l; i += 3 ) {
	
							for ( j = 0; j < 3; j ++ ) {
	
								edge1 = indices.getX( i + j );
								edge2 = indices.getX( i + ( j + 1 ) % 3 );
								edge[ 0 ] = Math.min( edge1, edge2 ); // sorting prevents duplicates
								edge[ 1 ] = Math.max( edge1, edge2 );
	
								key = edge[ 0 ] + ',' + edge[ 1 ];
	
								if ( edges[ key ] === undefined ) {
	
									edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ] };
	
								}
	
							}
	
						}
	
					}
	
					// generate vertices
	
					for ( key in edges ) {
	
						e = edges[ key ];
	
						vertex.fromBufferAttribute( position, e.index1 );
						vertices.push( vertex.x, vertex.y, vertex.z );
	
						vertex.fromBufferAttribute( position, e.index2 );
						vertices.push( vertex.x, vertex.y, vertex.z );
	
					}
	
				} else {
	
					// non-indexed BufferGeometry
	
					position = geometry.attributes.position;
	
					for ( i = 0, l = ( position.count / 3 ); i < l; i ++ ) {
	
						for ( j = 0; j < 3; j ++ ) {
	
							// three edges per triangle, an edge is represented as (index1, index2)
							// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)
	
							index1 = 3 * i + j;
							vertex.fromBufferAttribute( position, index1 );
							vertices.push( vertex.x, vertex.y, vertex.z );
	
							index2 = 3 * i + ( ( j + 1 ) % 3 );
							vertex.fromBufferAttribute( position, index2 );
							vertices.push( vertex.x, vertex.y, vertex.z );
	
						}
	
					}
	
				}
	
			}
	
			// build geometry
	
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	
		}
	
		WireframeGeometry.prototype = Object.create( BufferGeometry.prototype );
		WireframeGeometry.prototype.constructor = WireframeGeometry;
	
		/**
		 * @author zz85 / https://github.com/zz85
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * Parametric Surfaces Geometry
		 * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html
		 */
	
		// ParametricGeometry
	
		function ParametricGeometry( func, slices, stacks ) {
	
			Geometry.call( this );
	
			this.type = 'ParametricGeometry';
	
			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			};
	
			this.fromBufferGeometry( new ParametricBufferGeometry( func, slices, stacks ) );
			this.mergeVertices();
	
		}
	
		ParametricGeometry.prototype = Object.create( Geometry.prototype );
		ParametricGeometry.prototype.constructor = ParametricGeometry;
	
		// ParametricBufferGeometry
	
		function ParametricBufferGeometry( func, slices, stacks ) {
	
			BufferGeometry.call( this );
	
			this.type = 'ParametricBufferGeometry';
	
			this.parameters = {
				func: func,
				slices: slices,
				stacks: stacks
			};
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			var EPS = 0.00001;
	
			var normal = new Vector3();
	
			var p0 = new Vector3(), p1 = new Vector3();
			var pu = new Vector3(), pv = new Vector3();
	
			var i, j;
	
			if ( func.length < 3 ) {
	
				console.error( 'THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.' );
	
			}
	
			// generate vertices, normals and uvs
	
			var sliceCount = slices + 1;
	
			for ( i = 0; i <= stacks; i ++ ) {
	
				var v = i / stacks;
	
				for ( j = 0; j <= slices; j ++ ) {
	
					var u = j / slices;
	
					// vertex
	
					func( u, v, p0 );
					vertices.push( p0.x, p0.y, p0.z );
	
					// normal
	
					// approximate tangent vectors via finite differences
	
					if ( u - EPS >= 0 ) {
	
						func( u - EPS, v, p1 );
						pu.subVectors( p0, p1 );
	
					} else {
	
						func( u + EPS, v, p1 );
						pu.subVectors( p1, p0 );
	
					}
	
					if ( v - EPS >= 0 ) {
	
						func( u, v - EPS, p1 );
						pv.subVectors( p0, p1 );
	
					} else {
	
						func( u, v + EPS, p1 );
						pv.subVectors( p1, p0 );
	
					}
	
					// cross product of tangent vectors returns surface normal
	
					normal.crossVectors( pu, pv ).normalize();
					normals.push( normal.x, normal.y, normal.z );
	
					// uv
	
					uvs.push( u, v );
	
				}
	
			}
	
			// generate indices
	
			for ( i = 0; i < stacks; i ++ ) {
	
				for ( j = 0; j < slices; j ++ ) {
	
					var a = i * sliceCount + j;
					var b = i * sliceCount + j + 1;
					var c = ( i + 1 ) * sliceCount + j + 1;
					var d = ( i + 1 ) * sliceCount + j;
	
					// faces one and two
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		ParametricBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ParametricBufferGeometry.prototype.constructor = ParametricBufferGeometry;
	
		/**
		 * @author clockworkgeek / https://github.com/clockworkgeek
		 * @author timothypratley / https://github.com/timothypratley
		 * @author WestLangley / http://github.com/WestLangley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// PolyhedronGeometry
	
		function PolyhedronGeometry( vertices, indices, radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'PolyhedronGeometry';
	
			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new PolyhedronBufferGeometry( vertices, indices, radius, detail ) );
			this.mergeVertices();
	
		}
	
		PolyhedronGeometry.prototype = Object.create( Geometry.prototype );
		PolyhedronGeometry.prototype.constructor = PolyhedronGeometry;
	
		// PolyhedronBufferGeometry
	
		function PolyhedronBufferGeometry( vertices, indices, radius, detail ) {
	
			BufferGeometry.call( this );
	
			this.type = 'PolyhedronBufferGeometry';
	
			this.parameters = {
				vertices: vertices,
				indices: indices,
				radius: radius,
				detail: detail
			};
	
			radius = radius || 1;
			detail = detail || 0;
	
			// default buffer data
	
			var vertexBuffer = [];
			var uvBuffer = [];
	
			// the subdivision creates the vertex buffer data
	
			subdivide( detail );
	
			// all vertices should lie on a conceptual sphere with a given radius
	
			applyRadius( radius );
	
			// finally, create the uv data
	
			generateUVs();
	
			// build non-indexed geometry
	
			this.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );
	
			if ( detail === 0 ) {
	
				this.computeVertexNormals(); // flat normals
	
			} else {
	
				this.normalizeNormals(); // smooth normals
	
			}
	
			// helper functions
	
			function subdivide( detail ) {
	
				var a = new Vector3();
				var b = new Vector3();
				var c = new Vector3();
	
				// iterate over all faces and apply a subdivison with the given detail value
	
				for ( var i = 0; i < indices.length; i += 3 ) {
	
					// get the vertices of the face
	
					getVertexByIndex( indices[ i + 0 ], a );
					getVertexByIndex( indices[ i + 1 ], b );
					getVertexByIndex( indices[ i + 2 ], c );
	
					// perform subdivision
	
					subdivideFace( a, b, c, detail );
	
				}
	
			}
	
			function subdivideFace( a, b, c, detail ) {
	
				var cols = Math.pow( 2, detail );
	
				// we use this multidimensional array as a data structure for creating the subdivision
	
				var v = [];
	
				var i, j;
	
				// construct all of the vertices for this subdivision
	
				for ( i = 0; i <= cols; i ++ ) {
	
					v[ i ] = [];
	
					var aj = a.clone().lerp( c, i / cols );
					var bj = b.clone().lerp( c, i / cols );
	
					var rows = cols - i;
	
					for ( j = 0; j <= rows; j ++ ) {
	
						if ( j === 0 && i === cols ) {
	
							v[ i ][ j ] = aj;
	
						} else {
	
							v[ i ][ j ] = aj.clone().lerp( bj, j / rows );
	
						}
	
					}
	
				}
	
				// construct all of the faces
	
				for ( i = 0; i < cols; i ++ ) {
	
					for ( j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {
	
						var k = Math.floor( j / 2 );
	
						if ( j % 2 === 0 ) {
	
							pushVertex( v[ i ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k ] );
							pushVertex( v[ i ][ k ] );
	
						} else {
	
							pushVertex( v[ i ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k + 1 ] );
							pushVertex( v[ i + 1 ][ k ] );
	
						}
	
					}
	
				}
	
			}
	
			function applyRadius( radius ) {
	
				var vertex = new Vector3();
	
				// iterate over the entire buffer and apply the radius to each vertex
	
				for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
	
					vertex.x = vertexBuffer[ i + 0 ];
					vertex.y = vertexBuffer[ i + 1 ];
					vertex.z = vertexBuffer[ i + 2 ];
	
					vertex.normalize().multiplyScalar( radius );
	
					vertexBuffer[ i + 0 ] = vertex.x;
					vertexBuffer[ i + 1 ] = vertex.y;
					vertexBuffer[ i + 2 ] = vertex.z;
	
				}
	
			}
	
			function generateUVs() {
	
				var vertex = new Vector3();
	
				for ( var i = 0; i < vertexBuffer.length; i += 3 ) {
	
					vertex.x = vertexBuffer[ i + 0 ];
					vertex.y = vertexBuffer[ i + 1 ];
					vertex.z = vertexBuffer[ i + 2 ];
	
					var u = azimuth( vertex ) / 2 / Math.PI + 0.5;
					var v = inclination( vertex ) / Math.PI + 0.5;
					uvBuffer.push( u, 1 - v );
	
				}
	
				correctUVs();
	
				correctSeam();
	
			}
	
			function correctSeam() {
	
				// handle case when face straddles the seam, see #3269
	
				for ( var i = 0; i < uvBuffer.length; i += 6 ) {
	
					// uv data of a single face
	
					var x0 = uvBuffer[ i + 0 ];
					var x1 = uvBuffer[ i + 2 ];
					var x2 = uvBuffer[ i + 4 ];
	
					var max = Math.max( x0, x1, x2 );
					var min = Math.min( x0, x1, x2 );
	
					// 0.9 is somewhat arbitrary
	
					if ( max > 0.9 && min < 0.1 ) {
	
						if ( x0 < 0.2 ) { uvBuffer[ i + 0 ] += 1; }
						if ( x1 < 0.2 ) { uvBuffer[ i + 2 ] += 1; }
						if ( x2 < 0.2 ) { uvBuffer[ i + 4 ] += 1; }
	
					}
	
				}
	
			}
	
			function pushVertex( vertex ) {
	
				vertexBuffer.push( vertex.x, vertex.y, vertex.z );
	
			}
	
			function getVertexByIndex( index, vertex ) {
	
				var stride = index * 3;
	
				vertex.x = vertices[ stride + 0 ];
				vertex.y = vertices[ stride + 1 ];
				vertex.z = vertices[ stride + 2 ];
	
			}
	
			function correctUVs() {
	
				var a = new Vector3();
				var b = new Vector3();
				var c = new Vector3();
	
				var centroid = new Vector3();
	
				var uvA = new Vector2();
				var uvB = new Vector2();
				var uvC = new Vector2();
	
				for ( var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {
	
					a.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );
					b.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );
					c.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );
	
					uvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );
					uvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );
					uvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );
	
					centroid.copy( a ).add( b ).add( c ).divideScalar( 3 );
	
					var azi = azimuth( centroid );
	
					correctUV( uvA, j + 0, a, azi );
					correctUV( uvB, j + 2, b, azi );
					correctUV( uvC, j + 4, c, azi );
	
				}
	
			}
	
			function correctUV( uv, stride, vector, azimuth ) {
	
				if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {
	
					uvBuffer[ stride ] = uv.x - 1;
	
				}
	
				if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {
	
					uvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;
	
				}
	
			}
	
			// Angle around the Y axis, counter-clockwise when looking from above.
	
			function azimuth( vector ) {
	
				return Math.atan2( vector.z, - vector.x );
	
			}
	
	
			// Angle above the XZ plane.
	
			function inclination( vector ) {
	
				return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
	
			}
	
		}
	
		PolyhedronBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		PolyhedronBufferGeometry.prototype.constructor = PolyhedronBufferGeometry;
	
		/**
		 * @author timothypratley / https://github.com/timothypratley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// TetrahedronGeometry
	
		function TetrahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'TetrahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new TetrahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		TetrahedronGeometry.prototype = Object.create( Geometry.prototype );
		TetrahedronGeometry.prototype.constructor = TetrahedronGeometry;
	
		// TetrahedronBufferGeometry
	
		function TetrahedronBufferGeometry( radius, detail ) {
	
			var vertices = [
				1, 1, 1, 	- 1, - 1, 1, 	- 1, 1, - 1, 	1, - 1, - 1
			];
	
			var indices = [
				2, 1, 0, 	0, 3, 2,	1, 3, 0,	2, 3, 1
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'TetrahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		TetrahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		TetrahedronBufferGeometry.prototype.constructor = TetrahedronBufferGeometry;
	
		/**
		 * @author timothypratley / https://github.com/timothypratley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// OctahedronGeometry
	
		function OctahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'OctahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new OctahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		OctahedronGeometry.prototype = Object.create( Geometry.prototype );
		OctahedronGeometry.prototype.constructor = OctahedronGeometry;
	
		// OctahedronBufferGeometry
	
		function OctahedronBufferGeometry( radius, detail ) {
	
			var vertices = [
				1, 0, 0, 	- 1, 0, 0,	0, 1, 0,
				0, - 1, 0, 	0, 0, 1,	0, 0, - 1
			];
	
			var indices = [
				0, 2, 4,	0, 4, 3,	0, 3, 5,
				0, 5, 2,	1, 2, 5,	1, 5, 3,
				1, 3, 4,	1, 4, 2
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'OctahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		OctahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		OctahedronBufferGeometry.prototype.constructor = OctahedronBufferGeometry;
	
		/**
		 * @author timothypratley / https://github.com/timothypratley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// IcosahedronGeometry
	
		function IcosahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'IcosahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new IcosahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		IcosahedronGeometry.prototype = Object.create( Geometry.prototype );
		IcosahedronGeometry.prototype.constructor = IcosahedronGeometry;
	
		// IcosahedronBufferGeometry
	
		function IcosahedronBufferGeometry( radius, detail ) {
	
			var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	
			var vertices = [
				- 1, t, 0, 	1, t, 0, 	- 1, - t, 0, 	1, - t, 0,
				 0, - 1, t, 	0, 1, t,	0, - 1, - t, 	0, 1, - t,
				 t, 0, - 1, 	t, 0, 1, 	- t, 0, - 1, 	- t, 0, 1
			];
	
			var indices = [
				 0, 11, 5, 	0, 5, 1, 	0, 1, 7, 	0, 7, 10, 	0, 10, 11,
				 1, 5, 9, 	5, 11, 4,	11, 10, 2,	10, 7, 6,	7, 1, 8,
				 3, 9, 4, 	3, 4, 2,	3, 2, 6,	3, 6, 8,	3, 8, 9,
				 4, 9, 5, 	2, 4, 11,	6, 2, 10,	8, 6, 7,	9, 8, 1
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'IcosahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		IcosahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		IcosahedronBufferGeometry.prototype.constructor = IcosahedronBufferGeometry;
	
		/**
		 * @author Abe Pazos / https://hamoid.com
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// DodecahedronGeometry
	
		function DodecahedronGeometry( radius, detail ) {
	
			Geometry.call( this );
	
			this.type = 'DodecahedronGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
			this.fromBufferGeometry( new DodecahedronBufferGeometry( radius, detail ) );
			this.mergeVertices();
	
		}
	
		DodecahedronGeometry.prototype = Object.create( Geometry.prototype );
		DodecahedronGeometry.prototype.constructor = DodecahedronGeometry;
	
		// DodecahedronBufferGeometry
	
		function DodecahedronBufferGeometry( radius, detail ) {
	
			var t = ( 1 + Math.sqrt( 5 ) ) / 2;
			var r = 1 / t;
	
			var vertices = [
	
				// (±1, ±1, ±1)
				- 1, - 1, - 1,	- 1, - 1, 1,
				- 1, 1, - 1, - 1, 1, 1,
				1, - 1, - 1, 1, - 1, 1,
				1, 1, - 1, 1, 1, 1,
	
				// (0, ±1/φ, ±φ)
				 0, - r, - t, 0, - r, t,
				 0, r, - t, 0, r, t,
	
				// (±1/φ, ±φ, 0)
				- r, - t, 0, - r, t, 0,
				 r, - t, 0, r, t, 0,
	
				// (±φ, 0, ±1/φ)
				- t, 0, - r, t, 0, - r,
				- t, 0, r, t, 0, r
			];
	
			var indices = [
				3, 11, 7, 	3, 7, 15, 	3, 15, 13,
				7, 19, 17, 	7, 17, 6, 	7, 6, 15,
				17, 4, 8, 	17, 8, 10, 	17, 10, 6,
				8, 0, 16, 	8, 16, 2, 	8, 2, 10,
				0, 12, 1, 	0, 1, 18, 	0, 18, 16,
				6, 10, 2, 	6, 2, 13, 	6, 13, 15,
				2, 16, 18, 	2, 18, 3, 	2, 3, 13,
				18, 1, 9, 	18, 9, 11, 	18, 11, 3,
				4, 14, 12, 	4, 12, 0, 	4, 0, 8,
				11, 9, 5, 	11, 5, 19, 	11, 19, 7,
				19, 5, 14, 	19, 14, 4, 	19, 4, 17,
				1, 12, 14, 	1, 14, 5, 	1, 5, 9
			];
	
			PolyhedronBufferGeometry.call( this, vertices, indices, radius, detail );
	
			this.type = 'DodecahedronBufferGeometry';
	
			this.parameters = {
				radius: radius,
				detail: detail
			};
	
		}
	
		DodecahedronBufferGeometry.prototype = Object.create( PolyhedronBufferGeometry.prototype );
		DodecahedronBufferGeometry.prototype.constructor = DodecahedronBufferGeometry;
	
		/**
		 * @author oosmoxiecode / https://github.com/oosmoxiecode
		 * @author WestLangley / https://github.com/WestLangley
		 * @author zz85 / https://github.com/zz85
		 * @author miningold / https://github.com/miningold
		 * @author jonobr1 / https://github.com/jonobr1
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 */
	
		// TubeGeometry
	
		function TubeGeometry( path, tubularSegments, radius, radialSegments, closed, taper ) {
	
			Geometry.call( this );
	
			this.type = 'TubeGeometry';
	
			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};
	
			if ( taper !== undefined ) { console.warn( 'THREE.TubeGeometry: taper has been removed.' ); }
	
			var bufferGeometry = new TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed );
	
			// expose internals
	
			this.tangents = bufferGeometry.tangents;
			this.normals = bufferGeometry.normals;
			this.binormals = bufferGeometry.binormals;
	
			// create geometry
	
			this.fromBufferGeometry( bufferGeometry );
			this.mergeVertices();
	
		}
	
		TubeGeometry.prototype = Object.create( Geometry.prototype );
		TubeGeometry.prototype.constructor = TubeGeometry;
	
		// TubeBufferGeometry
	
		function TubeBufferGeometry( path, tubularSegments, radius, radialSegments, closed ) {
	
			BufferGeometry.call( this );
	
			this.type = 'TubeBufferGeometry';
	
			this.parameters = {
				path: path,
				tubularSegments: tubularSegments,
				radius: radius,
				radialSegments: radialSegments,
				closed: closed
			};
	
			tubularSegments = tubularSegments || 64;
			radius = radius || 1;
			radialSegments = radialSegments || 8;
			closed = closed || false;
	
			var frames = path.computeFrenetFrames( tubularSegments, closed );
	
			// expose internals
	
			this.tangents = frames.tangents;
			this.normals = frames.normals;
			this.binormals = frames.binormals;
	
			// helper variables
	
			var vertex = new Vector3();
			var normal = new Vector3();
			var uv = new Vector2();
			var P = new Vector3();
	
			var i, j;
	
			// buffer
	
			var vertices = [];
			var normals = [];
			var uvs = [];
			var indices = [];
	
			// create buffer data
	
			generateBufferData();
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
			// functions
	
			function generateBufferData() {
	
				for ( i = 0; i < tubularSegments; i ++ ) {
	
					generateSegment( i );
	
				}
	
				// if the geometry is not closed, generate the last row of vertices and normals
				// at the regular position on the given path
				//
				// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)
	
				generateSegment( ( closed === false ) ? tubularSegments : 0 );
	
				// uvs are generated in a separate function.
				// this makes it easy compute correct values for closed geometries
	
				generateUVs();
	
				// finally create faces
	
				generateIndices();
	
			}
	
			function generateSegment( i ) {
	
				// we use getPointAt to sample evenly distributed points from the given path
	
				P = path.getPointAt( i / tubularSegments, P );
	
				// retrieve corresponding normal and binormal
	
				var N = frames.normals[ i ];
				var B = frames.binormals[ i ];
	
				// generate normals and vertices for the current segment
	
				for ( j = 0; j <= radialSegments; j ++ ) {
	
					var v = j / radialSegments * Math.PI * 2;
	
					var sin = Math.sin( v );
					var cos = - Math.cos( v );
	
					// normal
	
					normal.x = ( cos * N.x + sin * B.x );
					normal.y = ( cos * N.y + sin * B.y );
					normal.z = ( cos * N.z + sin * B.z );
					normal.normalize();
	
					normals.push( normal.x, normal.y, normal.z );
	
					// vertex
	
					vertex.x = P.x + radius * normal.x;
					vertex.y = P.y + radius * normal.y;
					vertex.z = P.z + radius * normal.z;
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
			}
	
			function generateIndices() {
	
				for ( j = 1; j <= tubularSegments; j ++ ) {
	
					for ( i = 1; i <= radialSegments; i ++ ) {
	
						var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
						var b = ( radialSegments + 1 ) * j + ( i - 1 );
						var c = ( radialSegments + 1 ) * j + i;
						var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
	
						// faces
	
						indices.push( a, b, d );
						indices.push( b, c, d );
	
					}
	
				}
	
			}
	
			function generateUVs() {
	
				for ( i = 0; i <= tubularSegments; i ++ ) {
	
					for ( j = 0; j <= radialSegments; j ++ ) {
	
						uv.x = i / tubularSegments;
						uv.y = j / radialSegments;
	
						uvs.push( uv.x, uv.y );
	
					}
	
				}
	
			}
	
		}
	
		TubeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TubeBufferGeometry.prototype.constructor = TubeBufferGeometry;
	
		TubeBufferGeometry.prototype.toJSON = function () {
	
			var data = BufferGeometry.prototype.toJSON.call( this );
	
			data.path = this.parameters.path.toJSON();
	
			return data;
	
		};
	
		/**
		 * @author oosmoxiecode
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * based on http://www.blackpawn.com/texts/pqtorus/
		 */
	
		// TorusKnotGeometry
	
		function TorusKnotGeometry( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {
	
			Geometry.call( this );
	
			this.type = 'TorusKnotGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};
	
			if ( heightScale !== undefined ) { console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' ); }
	
			this.fromBufferGeometry( new TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );
			this.mergeVertices();
	
		}
	
		TorusKnotGeometry.prototype = Object.create( Geometry.prototype );
		TorusKnotGeometry.prototype.constructor = TorusKnotGeometry;
	
		// TorusKnotBufferGeometry
	
		function TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) {
	
			BufferGeometry.call( this );
	
			this.type = 'TorusKnotBufferGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				tubularSegments: tubularSegments,
				radialSegments: radialSegments,
				p: p,
				q: q
			};
	
			radius = radius || 1;
			tube = tube || 0.4;
			tubularSegments = Math.floor( tubularSegments ) || 64;
			radialSegments = Math.floor( radialSegments ) || 8;
			p = p || 2;
			q = q || 3;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var i, j;
	
			var vertex = new Vector3();
			var normal = new Vector3();
	
			var P1 = new Vector3();
			var P2 = new Vector3();
	
			var B = new Vector3();
			var T = new Vector3();
			var N = new Vector3();
	
			// generate vertices, normals and uvs
	
			for ( i = 0; i <= tubularSegments; ++ i ) {
	
				// the radian "u" is used to calculate the position on the torus curve of the current tubular segement
	
				var u = i / tubularSegments * p * Math.PI * 2;
	
				// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.
				// these points are used to create a special "coordinate space", which is necessary to calculate the correct vertex positions
	
				calculatePositionOnCurve( u, p, q, radius, P1 );
				calculatePositionOnCurve( u + 0.01, p, q, radius, P2 );
	
				// calculate orthonormal basis
	
				T.subVectors( P2, P1 );
				N.addVectors( P2, P1 );
				B.crossVectors( T, N );
				N.crossVectors( B, T );
	
				// normalize B, N. T can be ignored, we don't use it
	
				B.normalize();
				N.normalize();
	
				for ( j = 0; j <= radialSegments; ++ j ) {
	
					// now calculate the vertices. they are nothing more than an extrusion of the torus curve.
					// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.
	
					var v = j / radialSegments * Math.PI * 2;
					var cx = - tube * Math.cos( v );
					var cy = tube * Math.sin( v );
	
					// now calculate the final vertex position.
					// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve
	
					vertex.x = P1.x + ( cx * N.x + cy * B.x );
					vertex.y = P1.y + ( cx * N.y + cy * B.y );
					vertex.z = P1.z + ( cx * N.z + cy * B.z );
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)
	
					normal.subVectors( vertex, P1 ).normalize();
	
					normals.push( normal.x, normal.y, normal.z );
	
					// uv
	
					uvs.push( i / tubularSegments );
					uvs.push( j / radialSegments );
	
				}
	
			}
	
			// generate indices
	
			for ( j = 1; j <= tubularSegments; j ++ ) {
	
				for ( i = 1; i <= radialSegments; i ++ ) {
	
					// indices
	
					var a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );
					var b = ( radialSegments + 1 ) * j + ( i - 1 );
					var c = ( radialSegments + 1 ) * j + i;
					var d = ( radialSegments + 1 ) * ( j - 1 ) + i;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
			// this function calculates the current position on the torus curve
	
			function calculatePositionOnCurve( u, p, q, radius, position ) {
	
				var cu = Math.cos( u );
				var su = Math.sin( u );
				var quOverP = q / p * u;
				var cs = Math.cos( quOverP );
	
				position.x = radius * ( 2 + cs ) * 0.5 * cu;
				position.y = radius * ( 2 + cs ) * su * 0.5;
				position.z = radius * Math.sin( quOverP ) * 0.5;
	
			}
	
		}
	
		TorusKnotBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TorusKnotBufferGeometry.prototype.constructor = TorusKnotBufferGeometry;
	
		/**
		 * @author oosmoxiecode
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// TorusGeometry
	
		function TorusGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
	
			Geometry.call( this );
	
			this.type = 'TorusGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};
	
			this.fromBufferGeometry( new TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );
			this.mergeVertices();
	
		}
	
		TorusGeometry.prototype = Object.create( Geometry.prototype );
		TorusGeometry.prototype.constructor = TorusGeometry;
	
		// TorusBufferGeometry
	
		function TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) {
	
			BufferGeometry.call( this );
	
			this.type = 'TorusBufferGeometry';
	
			this.parameters = {
				radius: radius,
				tube: tube,
				radialSegments: radialSegments,
				tubularSegments: tubularSegments,
				arc: arc
			};
	
			radius = radius || 1;
			tube = tube || 0.4;
			radialSegments = Math.floor( radialSegments ) || 8;
			tubularSegments = Math.floor( tubularSegments ) || 6;
			arc = arc || Math.PI * 2;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var center = new Vector3();
			var vertex = new Vector3();
			var normal = new Vector3();
	
			var j, i;
	
			// generate vertices, normals and uvs
	
			for ( j = 0; j <= radialSegments; j ++ ) {
	
				for ( i = 0; i <= tubularSegments; i ++ ) {
	
					var u = i / tubularSegments * arc;
					var v = j / radialSegments * Math.PI * 2;
	
					// vertex
	
					vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
					vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
					vertex.z = tube * Math.sin( v );
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal
	
					center.x = radius * Math.cos( u );
					center.y = radius * Math.sin( u );
					normal.subVectors( vertex, center ).normalize();
	
					normals.push( normal.x, normal.y, normal.z );
	
					// uv
	
					uvs.push( i / tubularSegments );
					uvs.push( j / radialSegments );
	
				}
	
			}
	
			// generate indices
	
			for ( j = 1; j <= radialSegments; j ++ ) {
	
				for ( i = 1; i <= tubularSegments; i ++ ) {
	
					// indices
	
					var a = ( tubularSegments + 1 ) * j + i - 1;
					var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
					var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
					var d = ( tubularSegments + 1 ) * j + i;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		TorusBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		TorusBufferGeometry.prototype.constructor = TorusBufferGeometry;
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 * Port from https://github.com/mapbox/earcut (v2.1.5)
		 */
	
		var Earcut = {
	
			triangulate: function ( data, holeIndices, dim ) {
	
				dim = dim || 2;
	
				var hasHoles = holeIndices && holeIndices.length,
					outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length,
					outerNode = linkedList( data, 0, outerLen, dim, true ),
					triangles = [];
	
				if ( ! outerNode || outerNode.next === outerNode.prev ) { return triangles; }
	
				var minX, minY, maxX, maxY, x, y, invSize;
	
				if ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }
	
				// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
				if ( data.length > 80 * dim ) {
	
					minX = maxX = data[ 0 ];
					minY = maxY = data[ 1 ];
	
					for ( var i = dim; i < outerLen; i += dim ) {
	
						x = data[ i ];
						y = data[ i + 1 ];
						if ( x < minX ) { minX = x; }
						if ( y < minY ) { minY = y; }
						if ( x > maxX ) { maxX = x; }
						if ( y > maxY ) { maxY = y; }
	
					}
	
					// minX, minY and invSize are later used to transform coords into integers for z-order calculation
					invSize = Math.max( maxX - minX, maxY - minY );
					invSize = invSize !== 0 ? 1 / invSize : 0;
	
				}
	
				earcutLinked( outerNode, triangles, dim, minX, minY, invSize );
	
				return triangles;
	
			}
	
		};
	
		// create a circular doubly linked list from polygon points in the specified winding order
		function linkedList( data, start, end, dim, clockwise ) {
	
			var i, last;
	
			if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {
	
				for ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }
	
			} else {
	
				for ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }
	
			}
	
			if ( last && equals( last, last.next ) ) {
	
				removeNode( last );
				last = last.next;
	
			}
	
			return last;
	
		}
	
		// eliminate colinear or duplicate points
		function filterPoints( start, end ) {
	
			if ( ! start ) { return start; }
			if ( ! end ) { end = start; }
	
			var p = start,
				again;
			do {
	
				again = false;
	
				if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {
	
					removeNode( p );
					p = end = p.prev;
					if ( p === p.next ) { break; }
					again = true;
	
				} else {
	
					p = p.next;
	
				}
	
			} while ( again || p !== end );
	
			return end;
	
		}
	
		// main ear slicing loop which triangulates a polygon (given as a linked list)
		function earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {
	
			if ( ! ear ) { return; }
	
			// interlink polygon nodes in z-order
			if ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }
	
			var stop = ear,
				prev, next;
	
			// iterate through ears, slicing them one by one
			while ( ear.prev !== ear.next ) {
	
				prev = ear.prev;
				next = ear.next;
	
				if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {
	
					// cut off the triangle
					triangles.push( prev.i / dim );
					triangles.push( ear.i / dim );
					triangles.push( next.i / dim );
	
					removeNode( ear );
	
					// skipping the next vertex leads to less sliver triangles
					ear = next.next;
					stop = next.next;
	
					continue;
	
				}
	
				ear = next;
	
				// if we looped through the whole remaining polygon and can't find any more ears
				if ( ear === stop ) {
	
					// try filtering points and slicing again
					if ( ! pass ) {
	
						earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );
	
						// if this didn't work, try curing all small self-intersections locally
	
					} else if ( pass === 1 ) {
	
						ear = cureLocalIntersections( ear, triangles, dim );
						earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );
	
						// as a last resort, try splitting the remaining polygon into two
	
					} else if ( pass === 2 ) {
	
						splitEarcut( ear, triangles, dim, minX, minY, invSize );
	
					}
	
					break;
	
				}
	
			}
	
		}
	
		// check whether a polygon node forms a valid ear with adjacent nodes
		function isEar( ear ) {
	
			var a = ear.prev,
				b = ear,
				c = ear.next;
	
			if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear
	
			// now make sure we don't have other points inside the potential ear
			var p = ear.next.next;
	
			while ( p !== ear.prev ) {
	
				if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
					area( p.prev, p, p.next ) >= 0 ) { return false; }
				p = p.next;
	
			}
	
			return true;
	
		}
	
		function isEarHashed( ear, minX, minY, invSize ) {
	
			var a = ear.prev,
				b = ear,
				c = ear.next;
	
			if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear
	
			// triangle bbox; min & max are calculated like this for speed
			var minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),
				minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),
				maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),
				maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );
	
			// z-order range for the current triangle bbox;
			var minZ = zOrder( minTX, minTY, minX, minY, invSize ),
				maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );
	
			var p = ear.prevZ,
				n = ear.nextZ;
	
			// look for points inside the triangle in both directions
			while ( p && p.z >= minZ && n && n.z <= maxZ ) {
	
				if ( p !== ear.prev && p !== ear.next &&
					pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
					area( p.prev, p, p.next ) >= 0 ) { return false; }
				p = p.prevZ;
	
				if ( n !== ear.prev && n !== ear.next &&
					pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
					area( n.prev, n, n.next ) >= 0 ) { return false; }
				n = n.nextZ;
	
			}
	
			// look for remaining points in decreasing z-order
			while ( p && p.z >= minZ ) {
	
				if ( p !== ear.prev && p !== ear.next &&
					pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&
					area( p.prev, p, p.next ) >= 0 ) { return false; }
				p = p.prevZ;
	
			}
	
			// look for remaining points in increasing z-order
			while ( n && n.z <= maxZ ) {
	
				if ( n !== ear.prev && n !== ear.next &&
					pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&
					area( n.prev, n, n.next ) >= 0 ) { return false; }
				n = n.nextZ;
	
			}
	
			return true;
	
		}
	
		// go through all polygon nodes and cure small local self-intersections
		function cureLocalIntersections( start, triangles, dim ) {
	
			var p = start;
			do {
	
				var a = p.prev,
					b = p.next.next;
	
				if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {
	
					triangles.push( a.i / dim );
					triangles.push( p.i / dim );
					triangles.push( b.i / dim );
	
					// remove two nodes involved
					removeNode( p );
					removeNode( p.next );
	
					p = start = b;
	
				}
	
				p = p.next;
	
			} while ( p !== start );
	
			return p;
	
		}
	
		// try splitting polygon into two and triangulate them independently
		function splitEarcut( start, triangles, dim, minX, minY, invSize ) {
	
			// look for a valid diagonal that divides the polygon into two
			var a = start;
			do {
	
				var b = a.next.next;
				while ( b !== a.prev ) {
	
					if ( a.i !== b.i && isValidDiagonal( a, b ) ) {
	
						// split the polygon in two by the diagonal
						var c = splitPolygon( a, b );
	
						// filter colinear points around the cuts
						a = filterPoints( a, a.next );
						c = filterPoints( c, c.next );
	
						// run earcut on each half
						earcutLinked( a, triangles, dim, minX, minY, invSize );
						earcutLinked( c, triangles, dim, minX, minY, invSize );
						return;
	
					}
	
					b = b.next;
	
				}
	
				a = a.next;
	
			} while ( a !== start );
	
		}
	
		// link every hole into the outer loop, producing a single-ring polygon without holes
		function eliminateHoles( data, holeIndices, outerNode, dim ) {
	
			var queue = [],
				i, len, start, end, list;
	
			for ( i = 0, len = holeIndices.length; i < len; i ++ ) {
	
				start = holeIndices[ i ] * dim;
				end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;
				list = linkedList( data, start, end, dim, false );
				if ( list === list.next ) { list.steiner = true; }
				queue.push( getLeftmost( list ) );
	
			}
	
			queue.sort( compareX );
	
			// process holes from left to right
			for ( i = 0; i < queue.length; i ++ ) {
	
				eliminateHole( queue[ i ], outerNode );
				outerNode = filterPoints( outerNode, outerNode.next );
	
			}
	
			return outerNode;
	
		}
	
		function compareX( a, b ) {
	
			return a.x - b.x;
	
		}
	
		// find a bridge between vertices that connects hole with an outer ring and and link it
		function eliminateHole( hole, outerNode ) {
	
			outerNode = findHoleBridge( hole, outerNode );
			if ( outerNode ) {
	
				var b = splitPolygon( outerNode, hole );
				filterPoints( b, b.next );
	
			}
	
		}
	
		// David Eberly's algorithm for finding a bridge between hole and outer polygon
		function findHoleBridge( hole, outerNode ) {
	
			var p = outerNode,
				hx = hole.x,
				hy = hole.y,
				qx = - Infinity,
				m;
	
			// find a segment intersected by a ray from the hole's leftmost point to the left;
			// segment's endpoint with lesser x will be potential connection point
			do {
	
				if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {
	
					var x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );
					if ( x <= hx && x > qx ) {
	
						qx = x;
						if ( x === hx ) {
	
							if ( hy === p.y ) { return p; }
							if ( hy === p.next.y ) { return p.next; }
	
						}
	
						m = p.x < p.next.x ? p : p.next;
	
					}
	
				}
	
				p = p.next;
	
			} while ( p !== outerNode );
	
			if ( ! m ) { return null; }
	
			if ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint
	
			// look for points inside the triangle of hole point, segment intersection and endpoint;
			// if there are no points found, we have a valid connection;
			// otherwise choose the point of the minimum angle with the ray as connection point
	
			var stop = m,
				mx = m.x,
				my = m.y,
				tanMin = Infinity,
				tan;
	
			p = m.next;
	
			while ( p !== stop ) {
	
				if ( hx >= p.x && p.x >= mx && hx !== p.x &&
						pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {
	
					tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential
	
					if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {
	
						m = p;
						tanMin = tan;
	
					}
	
				}
	
				p = p.next;
	
			}
	
			return m;
	
		}
	
		// interlink polygon nodes in z-order
		function indexCurve( start, minX, minY, invSize ) {
	
			var p = start;
			do {
	
				if ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }
				p.prevZ = p.prev;
				p.nextZ = p.next;
				p = p.next;
	
			} while ( p !== start );
	
			p.prevZ.nextZ = null;
			p.prevZ = null;
	
			sortLinked( p );
	
		}
	
		// Simon Tatham's linked list merge sort algorithm
		// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
		function sortLinked( list ) {
	
			var i, p, q, e, tail, numMerges, pSize, qSize,
				inSize = 1;
	
			do {
	
				p = list;
				list = null;
				tail = null;
				numMerges = 0;
	
				while ( p ) {
	
					numMerges ++;
					q = p;
					pSize = 0;
					for ( i = 0; i < inSize; i ++ ) {
	
						pSize ++;
						q = q.nextZ;
						if ( ! q ) { break; }
	
					}
	
					qSize = inSize;
	
					while ( pSize > 0 || ( qSize > 0 && q ) ) {
	
						if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {
	
							e = p;
							p = p.nextZ;
							pSize --;
	
						} else {
	
							e = q;
							q = q.nextZ;
							qSize --;
	
						}
	
						if ( tail ) { tail.nextZ = e; }
						else { list = e; }
	
						e.prevZ = tail;
						tail = e;
	
					}
	
					p = q;
	
				}
	
				tail.nextZ = null;
				inSize *= 2;
	
			} while ( numMerges > 1 );
	
			return list;
	
		}
	
		// z-order of a point given coords and inverse of the longer side of data bbox
		function zOrder( x, y, minX, minY, invSize ) {
	
			// coords are transformed into non-negative 15-bit integer range
			x = 32767 * ( x - minX ) * invSize;
			y = 32767 * ( y - minY ) * invSize;
	
			x = ( x | ( x << 8 ) ) & 0x00FF00FF;
			x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;
			x = ( x | ( x << 2 ) ) & 0x33333333;
			x = ( x | ( x << 1 ) ) & 0x55555555;
	
			y = ( y | ( y << 8 ) ) & 0x00FF00FF;
			y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;
			y = ( y | ( y << 2 ) ) & 0x33333333;
			y = ( y | ( y << 1 ) ) & 0x55555555;
	
			return x | ( y << 1 );
	
		}
	
		// find the leftmost node of a polygon ring
		function getLeftmost( start ) {
	
			var p = start,
				leftmost = start;
			do {
	
				if ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) { leftmost = p; }
				p = p.next;
	
			} while ( p !== start );
	
			return leftmost;
	
		}
	
		// check if a point lies within a convex triangle
		function pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {
	
			return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&
				   ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&
				   ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;
	
		}
	
		// check if a diagonal between two polygon nodes is valid (lies in polygon interior)
		function isValidDiagonal( a, b ) {
	
			return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&
				   locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );
	
		}
	
		// signed area of a triangle
		function area( p, q, r ) {
	
			return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );
	
		}
	
		// check if two points are equal
		function equals( p1, p2 ) {
	
			return p1.x === p2.x && p1.y === p2.y;
	
		}
	
		// check if two segments intersect
		function intersects( p1, q1, p2, q2 ) {
	
			if ( ( equals( p1, p2 ) && equals( q1, q2 ) ) ||
				( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }
			return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&
				   area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;
	
		}
	
		// check if a polygon diagonal intersects any polygon segments
		function intersectsPolygon( a, b ) {
	
			var p = a;
			do {
	
				if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
						intersects( p, p.next, a, b ) ) { return true; }
				p = p.next;
	
			} while ( p !== a );
	
			return false;
	
		}
	
		// check if a polygon diagonal is locally inside the polygon
		function locallyInside( a, b ) {
	
			return area( a.prev, a, a.next ) < 0 ?
				area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :
				area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;
	
		}
	
		// check if the middle point of a polygon diagonal is inside the polygon
		function middleInside( a, b ) {
	
			var p = a,
				inside = false,
				px = ( a.x + b.x ) / 2,
				py = ( a.y + b.y ) / 2;
			do {
	
				if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&
						( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )
					{ inside = ! inside; }
				p = p.next;
	
			} while ( p !== a );
	
			return inside;
	
		}
	
		// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;
		// if one belongs to the outer ring and another to a hole, it merges it into a single ring
		function splitPolygon( a, b ) {
	
			var a2 = new Node( a.i, a.x, a.y ),
				b2 = new Node( b.i, b.x, b.y ),
				an = a.next,
				bp = b.prev;
	
			a.next = b;
			b.prev = a;
	
			a2.next = an;
			an.prev = a2;
	
			b2.next = a2;
			a2.prev = b2;
	
			bp.next = b2;
			b2.prev = bp;
	
			return b2;
	
		}
	
		// create a node and optionally link it with previous one (in a circular doubly linked list)
		function insertNode( i, x, y, last ) {
	
			var p = new Node( i, x, y );
	
			if ( ! last ) {
	
				p.prev = p;
				p.next = p;
	
			} else {
	
				p.next = last.next;
				p.prev = last;
				last.next.prev = p;
				last.next = p;
	
			}
	
			return p;
	
		}
	
		function removeNode( p ) {
	
			p.next.prev = p.prev;
			p.prev.next = p.next;
	
			if ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }
			if ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }
	
		}
	
		function Node( i, x, y ) {
	
			// vertex index in coordinates array
			this.i = i;
	
			// vertex coordinates
			this.x = x;
			this.y = y;
	
			// previous and next vertex nodes in a polygon ring
			this.prev = null;
			this.next = null;
	
			// z-order curve value
			this.z = null;
	
			// previous and next nodes in z-order
			this.prevZ = null;
			this.nextZ = null;
	
			// indicates whether this is a steiner point
			this.steiner = false;
	
		}
	
		function signedArea( data, start, end, dim ) {
	
			var sum = 0;
			for ( var i = start, j = end - dim; i < end; i += dim ) {
	
				sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );
				j = i;
	
			}
	
			return sum;
	
		}
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 */
	
		var ShapeUtils = {
	
			// calculate area of the contour polygon
	
			area: function ( contour ) {
	
				var n = contour.length;
				var a = 0.0;
	
				for ( var p = n - 1, q = 0; q < n; p = q ++ ) {
	
					a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
	
				}
	
				return a * 0.5;
	
			},
	
			isClockWise: function ( pts ) {
	
				return ShapeUtils.area( pts ) < 0;
	
			},
	
			triangulateShape: function ( contour, holes ) {
	
				var vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]
				var holeIndices = []; // array of hole indices
				var faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]
	
				removeDupEndPts( contour );
				addContour( vertices, contour );
	
				//
	
				var holeIndex = contour.length;
	
				holes.forEach( removeDupEndPts );
	
				for ( var i = 0; i < holes.length; i ++ ) {
	
					holeIndices.push( holeIndex );
					holeIndex += holes[ i ].length;
					addContour( vertices, holes[ i ] );
	
				}
	
				//
	
				var triangles = Earcut.triangulate( vertices, holeIndices );
	
				//
	
				for ( var i = 0; i < triangles.length; i += 3 ) {
	
					faces.push( triangles.slice( i, i + 3 ) );
	
				}
	
				return faces;
	
			}
	
		};
	
		function removeDupEndPts( points ) {
	
			var l = points.length;
	
			if ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {
	
				points.pop();
	
			}
	
		}
	
		function addContour( vertices, contour ) {
	
			for ( var i = 0; i < contour.length; i ++ ) {
	
				vertices.push( contour[ i ].x );
				vertices.push( contour[ i ].y );
	
			}
	
		}
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Creates extruded geometry from a path shape.
		 *
		 * parameters = {
		 *
		 *  curveSegments: <int>, // number of points on the curves
		 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
		 *  depth: <float>, // Depth to extrude the shape
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into the original shape bevel goes
		 *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel
		 *  bevelOffset: <float>, // how far from shape outline does bevel start
		 *  bevelSegments: <int>, // number of bevel layers
		 *
		 *  extrudePath: <THREE.Curve> // curve to extrude shape along
		 *
		 *  UVGenerator: <Object> // object that provides UV generator functions
		 *
		 * }
		 */
	
		// ExtrudeGeometry
	
		function ExtrudeGeometry( shapes, options ) {
	
			Geometry.call( this );
	
			this.type = 'ExtrudeGeometry';
	
			this.parameters = {
				shapes: shapes,
				options: options
			};
	
			this.fromBufferGeometry( new ExtrudeBufferGeometry( shapes, options ) );
			this.mergeVertices();
	
		}
	
		ExtrudeGeometry.prototype = Object.create( Geometry.prototype );
		ExtrudeGeometry.prototype.constructor = ExtrudeGeometry;
	
		ExtrudeGeometry.prototype.toJSON = function () {
	
			var data = Geometry.prototype.toJSON.call( this );
	
			var shapes = this.parameters.shapes;
			var options = this.parameters.options;
	
			return toJSON( shapes, options, data );
	
		};
	
		// ExtrudeBufferGeometry
	
		function ExtrudeBufferGeometry( shapes, options ) {
	
			BufferGeometry.call( this );
	
			this.type = 'ExtrudeBufferGeometry';
	
			this.parameters = {
				shapes: shapes,
				options: options
			};
	
			shapes = Array.isArray( shapes ) ? shapes : [ shapes ];
	
			var scope = this;
	
			var verticesArray = [];
			var uvArray = [];
	
			for ( var i = 0, l = shapes.length; i < l; i ++ ) {
	
				var shape = shapes[ i ];
				addShape( shape );
	
			}
	
			// build geometry
	
			this.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );
	
			this.computeVertexNormals();
	
			// functions
	
			function addShape( shape ) {
	
				var placeholder = [];
	
				// options
	
				var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
				var steps = options.steps !== undefined ? options.steps : 1;
				var depth = options.depth !== undefined ? options.depth : 100;
	
				var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;
				var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;
				var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;
				var bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;
				var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
	
				var extrudePath = options.extrudePath;
	
				var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;
	
				// deprecated options
	
				if ( options.amount !== undefined ) {
	
					console.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );
					depth = options.amount;
	
				}
	
				//
	
				var extrudePts, extrudeByPath = false;
				var splineTube, binormal, normal, position2;
	
				if ( extrudePath ) {
	
					extrudePts = extrudePath.getSpacedPoints( steps );
	
					extrudeByPath = true;
					bevelEnabled = false; // bevels not supported for path extrusion
	
					// SETUP TNB variables
	
					// TODO1 - have a .isClosed in spline?
	
					splineTube = extrudePath.computeFrenetFrames( steps, false );
	
					// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
	
					binormal = new Vector3();
					normal = new Vector3();
					position2 = new Vector3();
	
				}
	
				// Safeguards if bevels are not enabled
	
				if ( ! bevelEnabled ) {
	
					bevelSegments = 0;
					bevelThickness = 0;
					bevelSize = 0;
					bevelOffset = 0;
	
				}
	
				// Variables initialization
	
				var ahole, h, hl; // looping of holes
	
				var shapePoints = shape.extractPoints( curveSegments );
	
				var vertices = shapePoints.shape;
				var holes = shapePoints.holes;
	
				var reverse = ! ShapeUtils.isClockWise( vertices );
	
				if ( reverse ) {
	
					vertices = vertices.reverse();
	
					// Maybe we should also check if holes are in the opposite direction, just to be safe ...
	
					for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
						ahole = holes[ h ];
	
						if ( ShapeUtils.isClockWise( ahole ) ) {
	
							holes[ h ] = ahole.reverse();
	
						}
	
					}
	
				}
	
	
				var faces = ShapeUtils.triangulateShape( vertices, holes );
	
				/* Vertices */
	
				var contour = vertices; // vertices has all points but contour has only points of circumference
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
	
					vertices = vertices.concat( ahole );
	
				}
	
	
				function scalePt2( pt, vec, size ) {
	
					if ( ! vec ) { console.error( "THREE.ExtrudeGeometry: vec does not exist" ); }
	
					return vec.clone().multiplyScalar( size ).add( pt );
	
				}
	
				var b, bs, t, z,
					vert, vlen = vertices.length,
					face, flen = faces.length;
	
	
				// Find directions for point movement
	
	
				function getBevelVec( inPt, inPrev, inNext ) {
	
					// computes for inPt the corresponding point inPt' on a new contour
					//   shifted by 1 unit (length of normalized vector) to the left
					// if we walk along contour clockwise, this new contour is outside the old one
					//
					// inPt' is the intersection of the two lines parallel to the two
					//  adjacent edges of inPt at a distance of 1 unit on the left side.
	
					var v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt
	
					// good reading for geometry algorithms (here: line-line intersection)
					// http://geomalgorithms.com/a05-_intersect-1.html
	
					var v_prev_x = inPt.x - inPrev.x,
						v_prev_y = inPt.y - inPrev.y;
					var v_next_x = inNext.x - inPt.x,
						v_next_y = inNext.y - inPt.y;
	
					var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
	
					// check for collinear edges
					var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
	
					if ( Math.abs( collinear0 ) > Number.EPSILON ) {
	
						// not collinear
	
						// length of vectors for normalizing
	
						var v_prev_len = Math.sqrt( v_prev_lensq );
						var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
	
						// shift adjacent points by unit vectors to the left
	
						var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
						var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
	
						var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
						var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
	
						// scaling factor for v_prev to intersection point
	
						var sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
								( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /
							( v_prev_x * v_next_y - v_prev_y * v_next_x );
	
						// vector from inPt to intersection point
	
						v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
						v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
	
						// Don't normalize!, otherwise sharp corners become ugly
						//  but prevent crazy spikes
						var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
						if ( v_trans_lensq <= 2 ) {
	
							return new Vector2( v_trans_x, v_trans_y );
	
						} else {
	
							shrink_by = Math.sqrt( v_trans_lensq / 2 );
	
						}
	
					} else {
	
						// handle special case of collinear edges
	
						var direction_eq = false; // assumes: opposite
						if ( v_prev_x > Number.EPSILON ) {
	
							if ( v_next_x > Number.EPSILON ) {
	
								direction_eq = true;
	
							}
	
						} else {
	
							if ( v_prev_x < - Number.EPSILON ) {
	
								if ( v_next_x < - Number.EPSILON ) {
	
									direction_eq = true;
	
								}
	
							} else {
	
								if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {
	
									direction_eq = true;
	
								}
	
							}
	
						}
	
						if ( direction_eq ) {
	
							// console.log("Warning: lines are a straight sequence");
							v_trans_x = - v_prev_y;
							v_trans_y = v_prev_x;
							shrink_by = Math.sqrt( v_prev_lensq );
	
						} else {
	
							// console.log("Warning: lines are a straight spike");
							v_trans_x = v_prev_x;
							v_trans_y = v_prev_y;
							shrink_by = Math.sqrt( v_prev_lensq / 2 );
	
						}
	
					}
	
					return new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
	
				}
	
	
				var contourMovements = [];
	
				for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
	
					if ( j === il ) { j = 0; }
					if ( k === il ) { k = 0; }
	
					//  (j)---(i)---(k)
					// console.log('i,j,k', i, j , k)
	
					contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
	
				}
	
				var holesMovements = [],
					oneHoleMovements, verticesMovements = contourMovements.concat();
	
				for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
					ahole = holes[ h ];
	
					oneHoleMovements = [];
	
					for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
	
						if ( j === il ) { j = 0; }
						if ( k === il ) { k = 0; }
	
						//  (j)---(i)---(k)
						oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
	
					}
	
					holesMovements.push( oneHoleMovements );
					verticesMovements = verticesMovements.concat( oneHoleMovements );
	
				}
	
	
				// Loop bevelSegments, 1 for the front, 1 for the back
	
				for ( b = 0; b < bevelSegments; b ++ ) {
	
					//for ( b = bevelSegments; b > 0; b -- ) {
	
					t = b / bevelSegments;
					z = bevelThickness * Math.cos( t * Math.PI / 2 );
					bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
	
					// contract shape
	
					for ( i = 0, il = contour.length; i < il; i ++ ) {
	
						vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
	
						v( vert.x, vert.y, - z );
	
					}
	
					// expand holes
	
					for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
						ahole = holes[ h ];
						oneHoleMovements = holesMovements[ h ];
	
						for ( i = 0, il = ahole.length; i < il; i ++ ) {
	
							vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
	
							v( vert.x, vert.y, - z );
	
						}
	
					}
	
				}
	
				bs = bevelSize + bevelOffset;
	
				// Back facing vertices
	
				for ( i = 0; i < vlen; i ++ ) {
	
					vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
	
					if ( ! extrudeByPath ) {
	
						v( vert.x, vert.y, 0 );
	
					} else {
	
						// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
	
						normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
						binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );
	
						position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );
	
						v( position2.x, position2.y, position2.z );
	
					}
	
				}
	
				// Add stepped vertices...
				// Including front facing vertices
	
				var s;
	
				for ( s = 1; s <= steps; s ++ ) {
	
					for ( i = 0; i < vlen; i ++ ) {
	
						vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
	
						if ( ! extrudeByPath ) {
	
							v( vert.x, vert.y, depth / steps * s );
	
						} else {
	
							// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
	
							normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
							binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );
	
							position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );
	
							v( position2.x, position2.y, position2.z );
	
						}
	
					}
	
				}
	
	
				// Add bevel segments planes
	
				//for ( b = 1; b <= bevelSegments; b ++ ) {
				for ( b = bevelSegments - 1; b >= 0; b -- ) {
	
					t = b / bevelSegments;
					z = bevelThickness * Math.cos( t * Math.PI / 2 );
					bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;
	
					// contract shape
	
					for ( i = 0, il = contour.length; i < il; i ++ ) {
	
						vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
						v( vert.x, vert.y, depth + z );
	
					}
	
					// expand holes
	
					for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
						ahole = holes[ h ];
						oneHoleMovements = holesMovements[ h ];
	
						for ( i = 0, il = ahole.length; i < il; i ++ ) {
	
							vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
	
							if ( ! extrudeByPath ) {
	
								v( vert.x, vert.y, depth + z );
	
							} else {
	
								v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
	
							}
	
						}
	
					}
	
				}
	
				/* Faces */
	
				// Top and bottom faces
	
				buildLidFaces();
	
				// Sides faces
	
				buildSideFaces();
	
	
				/////  Internal functions
	
				function buildLidFaces() {
	
					var start = verticesArray.length / 3;
	
					if ( bevelEnabled ) {
	
						var layer = 0; // steps + 1
						var offset = vlen * layer;
	
						// Bottom faces
	
						for ( i = 0; i < flen; i ++ ) {
	
							face = faces[ i ];
							f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );
	
						}
	
						layer = steps + bevelSegments * 2;
						offset = vlen * layer;
	
						// Top faces
	
						for ( i = 0; i < flen; i ++ ) {
	
							face = faces[ i ];
							f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
	
						}
	
					} else {
	
						// Bottom faces
	
						for ( i = 0; i < flen; i ++ ) {
	
							face = faces[ i ];
							f3( face[ 2 ], face[ 1 ], face[ 0 ] );
	
						}
	
						// Top faces
	
						for ( i = 0; i < flen; i ++ ) {
	
							face = faces[ i ];
							f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
	
						}
	
					}
	
					scope.addGroup( start, verticesArray.length / 3 - start, 0 );
	
				}
	
				// Create faces for the z-sides of the shape
	
				function buildSideFaces() {
	
					var start = verticesArray.length / 3;
					var layeroffset = 0;
					sidewalls( contour, layeroffset );
					layeroffset += contour.length;
	
					for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
						ahole = holes[ h ];
						sidewalls( ahole, layeroffset );
	
						//, true
						layeroffset += ahole.length;
	
					}
	
	
					scope.addGroup( start, verticesArray.length / 3 - start, 1 );
	
	
				}
	
				function sidewalls( contour, layeroffset ) {
	
					var j, k;
					i = contour.length;
	
					while ( -- i >= 0 ) {
	
						j = i;
						k = i - 1;
						if ( k < 0 ) { k = contour.length - 1; }
	
						//console.log('b', i,j, i-1, k,vertices.length);
	
						var s = 0,
							sl = steps + bevelSegments * 2;
	
						for ( s = 0; s < sl; s ++ ) {
	
							var slen1 = vlen * s;
							var slen2 = vlen * ( s + 1 );
	
							var a = layeroffset + j + slen1,
								b = layeroffset + k + slen1,
								c = layeroffset + k + slen2,
								d = layeroffset + j + slen2;
	
							f4( a, b, c, d );
	
						}
	
					}
	
				}
	
				function v( x, y, z ) {
	
					placeholder.push( x );
					placeholder.push( y );
					placeholder.push( z );
	
				}
	
	
				function f3( a, b, c ) {
	
					addVertex( a );
					addVertex( b );
					addVertex( c );
	
					var nextIndex = verticesArray.length / 3;
					var uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
	
					addUV( uvs[ 0 ] );
					addUV( uvs[ 1 ] );
					addUV( uvs[ 2 ] );
	
				}
	
				function f4( a, b, c, d ) {
	
					addVertex( a );
					addVertex( b );
					addVertex( d );
	
					addVertex( b );
					addVertex( c );
					addVertex( d );
	
	
					var nextIndex = verticesArray.length / 3;
					var uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );
	
					addUV( uvs[ 0 ] );
					addUV( uvs[ 1 ] );
					addUV( uvs[ 3 ] );
	
					addUV( uvs[ 1 ] );
					addUV( uvs[ 2 ] );
					addUV( uvs[ 3 ] );
	
				}
	
				function addVertex( index ) {
	
					verticesArray.push( placeholder[ index * 3 + 0 ] );
					verticesArray.push( placeholder[ index * 3 + 1 ] );
					verticesArray.push( placeholder[ index * 3 + 2 ] );
	
				}
	
	
				function addUV( vector2 ) {
	
					uvArray.push( vector2.x );
					uvArray.push( vector2.y );
	
				}
	
			}
	
		}
	
		ExtrudeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ExtrudeBufferGeometry.prototype.constructor = ExtrudeBufferGeometry;
	
		ExtrudeBufferGeometry.prototype.toJSON = function () {
	
			var data = BufferGeometry.prototype.toJSON.call( this );
	
			var shapes = this.parameters.shapes;
			var options = this.parameters.options;
	
			return toJSON( shapes, options, data );
	
		};
	
		//
	
		var WorldUVGenerator = {
	
			generateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {
	
				var a_x = vertices[ indexA * 3 ];
				var a_y = vertices[ indexA * 3 + 1 ];
				var b_x = vertices[ indexB * 3 ];
				var b_y = vertices[ indexB * 3 + 1 ];
				var c_x = vertices[ indexC * 3 ];
				var c_y = vertices[ indexC * 3 + 1 ];
	
				return [
					new Vector2( a_x, a_y ),
					new Vector2( b_x, b_y ),
					new Vector2( c_x, c_y )
				];
	
			},
	
			generateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {
	
				var a_x = vertices[ indexA * 3 ];
				var a_y = vertices[ indexA * 3 + 1 ];
				var a_z = vertices[ indexA * 3 + 2 ];
				var b_x = vertices[ indexB * 3 ];
				var b_y = vertices[ indexB * 3 + 1 ];
				var b_z = vertices[ indexB * 3 + 2 ];
				var c_x = vertices[ indexC * 3 ];
				var c_y = vertices[ indexC * 3 + 1 ];
				var c_z = vertices[ indexC * 3 + 2 ];
				var d_x = vertices[ indexD * 3 ];
				var d_y = vertices[ indexD * 3 + 1 ];
				var d_z = vertices[ indexD * 3 + 2 ];
	
				if ( Math.abs( a_y - b_y ) < 0.01 ) {
	
					return [
						new Vector2( a_x, 1 - a_z ),
						new Vector2( b_x, 1 - b_z ),
						new Vector2( c_x, 1 - c_z ),
						new Vector2( d_x, 1 - d_z )
					];
	
				} else {
	
					return [
						new Vector2( a_y, 1 - a_z ),
						new Vector2( b_y, 1 - b_z ),
						new Vector2( c_y, 1 - c_z ),
						new Vector2( d_y, 1 - d_z )
					];
	
				}
	
			}
		};
	
		function toJSON( shapes, options, data ) {
	
			//
	
			data.shapes = [];
	
			if ( Array.isArray( shapes ) ) {
	
				for ( var i = 0, l = shapes.length; i < l; i ++ ) {
	
					var shape = shapes[ i ];
	
					data.shapes.push( shape.uuid );
	
				}
	
			} else {
	
				data.shapes.push( shapes.uuid );
	
			}
	
			//
	
			if ( options.extrudePath !== undefined ) { data.options.extrudePath = options.extrudePath.toJSON(); }
	
			return data;
	
		}
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * Text = 3D Text
		 *
		 * parameters = {
		 *  font: <THREE.Font>, // font
		 *
		 *  size: <float>, // size of the text
		 *  height: <float>, // thickness to extrude text
		 *  curveSegments: <int>, // number of points on the curves
		 *
		 *  bevelEnabled: <bool>, // turn on bevel
		 *  bevelThickness: <float>, // how deep into text bevel goes
		 *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel
		 *  bevelOffset: <float> // how far from text outline does bevel start
		 * }
		 */
	
		// TextGeometry
	
		function TextGeometry( text, parameters ) {
	
			Geometry.call( this );
	
			this.type = 'TextGeometry';
	
			this.parameters = {
				text: text,
				parameters: parameters
			};
	
			this.fromBufferGeometry( new TextBufferGeometry( text, parameters ) );
			this.mergeVertices();
	
		}
	
		TextGeometry.prototype = Object.create( Geometry.prototype );
		TextGeometry.prototype.constructor = TextGeometry;
	
		// TextBufferGeometry
	
		function TextBufferGeometry( text, parameters ) {
	
			parameters = parameters || {};
	
			var font = parameters.font;
	
			if ( ! ( font && font.isFont ) ) {
	
				console.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );
				return new Geometry();
	
			}
	
			var shapes = font.generateShapes( text, parameters.size );
	
			// translate parameters to ExtrudeGeometry API
	
			parameters.depth = parameters.height !== undefined ? parameters.height : 50;
	
			// defaults
	
			if ( parameters.bevelThickness === undefined ) { parameters.bevelThickness = 10; }
			if ( parameters.bevelSize === undefined ) { parameters.bevelSize = 8; }
			if ( parameters.bevelEnabled === undefined ) { parameters.bevelEnabled = false; }
	
			ExtrudeBufferGeometry.call( this, shapes, parameters );
	
			this.type = 'TextBufferGeometry';
	
		}
	
		TextBufferGeometry.prototype = Object.create( ExtrudeBufferGeometry.prototype );
		TextBufferGeometry.prototype.constructor = TextBufferGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author benaadams / https://twitter.com/ben_a_adams
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// SphereGeometry
	
		function SphereGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'SphereGeometry';
	
			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
			this.mergeVertices();
	
		}
	
		SphereGeometry.prototype = Object.create( Geometry.prototype );
		SphereGeometry.prototype.constructor = SphereGeometry;
	
		// SphereBufferGeometry
	
		function SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'SphereBufferGeometry';
	
			this.parameters = {
				radius: radius,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				phiStart: phiStart,
				phiLength: phiLength,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			radius = radius || 1;
	
			widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
			heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );
	
			phiStart = phiStart !== undefined ? phiStart : 0;
			phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
	
			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
	
			var thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );
	
			var ix, iy;
	
			var index = 0;
			var grid = [];
	
			var vertex = new Vector3();
			var normal = new Vector3();
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// generate vertices, normals and uvs
	
			for ( iy = 0; iy <= heightSegments; iy ++ ) {
	
				var verticesRow = [];
	
				var v = iy / heightSegments;
	
				// special case for the poles
	
				var uOffset = 0;
	
				if ( iy == 0 && thetaStart == 0 ) {
	
					uOffset = 0.5 / widthSegments;
	
				} else if ( iy == heightSegments && thetaEnd == Math.PI ) {
	
					uOffset = - 0.5 / widthSegments;
	
				}
	
				for ( ix = 0; ix <= widthSegments; ix ++ ) {
	
					var u = ix / widthSegments;
	
					// vertex
	
					vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
					vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
					vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal
	
					normal.copy( vertex ).normalize();
					normals.push( normal.x, normal.y, normal.z );
	
					// uv
	
					uvs.push( u + uOffset, 1 - v );
	
					verticesRow.push( index ++ );
	
				}
	
				grid.push( verticesRow );
	
			}
	
			// indices
	
			for ( iy = 0; iy < heightSegments; iy ++ ) {
	
				for ( ix = 0; ix < widthSegments; ix ++ ) {
	
					var a = grid[ iy ][ ix + 1 ];
					var b = grid[ iy ][ ix ];
					var c = grid[ iy + 1 ][ ix ];
					var d = grid[ iy + 1 ][ ix + 1 ];
	
					if ( iy !== 0 || thetaStart > 0 ) { indices.push( a, b, d ); }
					if ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) { indices.push( b, c, d ); }
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		SphereBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		SphereBufferGeometry.prototype.constructor = SphereBufferGeometry;
	
		/**
		 * @author Kaleb Murphy
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// RingGeometry
	
		function RingGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'RingGeometry';
	
			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );
			this.mergeVertices();
	
		}
	
		RingGeometry.prototype = Object.create( Geometry.prototype );
		RingGeometry.prototype.constructor = RingGeometry;
	
		// RingBufferGeometry
	
		function RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'RingBufferGeometry';
	
			this.parameters = {
				innerRadius: innerRadius,
				outerRadius: outerRadius,
				thetaSegments: thetaSegments,
				phiSegments: phiSegments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			innerRadius = innerRadius || 0.5;
			outerRadius = outerRadius || 1;
	
			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
			thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
			phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// some helper variables
	
			var segment;
			var radius = innerRadius;
			var radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
			var vertex = new Vector3();
			var uv = new Vector2();
			var j, i;
	
			// generate vertices, normals and uvs
	
			for ( j = 0; j <= phiSegments; j ++ ) {
	
				for ( i = 0; i <= thetaSegments; i ++ ) {
	
					// values are generate from the inside of the ring to the outside
	
					segment = thetaStart + i / thetaSegments * thetaLength;
	
					// vertex
	
					vertex.x = radius * Math.cos( segment );
					vertex.y = radius * Math.sin( segment );
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal
	
					normals.push( 0, 0, 1 );
	
					// uv
	
					uv.x = ( vertex.x / outerRadius + 1 ) / 2;
					uv.y = ( vertex.y / outerRadius + 1 ) / 2;
	
					uvs.push( uv.x, uv.y );
	
				}
	
				// increase the radius for next row of vertices
	
				radius += radiusStep;
	
			}
	
			// indices
	
			for ( j = 0; j < phiSegments; j ++ ) {
	
				var thetaSegmentLevel = j * ( thetaSegments + 1 );
	
				for ( i = 0; i < thetaSegments; i ++ ) {
	
					segment = i + thetaSegmentLevel;
	
					var a = segment;
					var b = segment + thetaSegments + 1;
					var c = segment + thetaSegments + 2;
					var d = segment + 1;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		RingBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		RingBufferGeometry.prototype.constructor = RingBufferGeometry;
	
		/**
		 * @author zz85 / https://github.com/zz85
		 * @author bhouston / http://clara.io
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// LatheGeometry
	
		function LatheGeometry( points, segments, phiStart, phiLength ) {
	
			Geometry.call( this );
	
			this.type = 'LatheGeometry';
	
			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};
	
			this.fromBufferGeometry( new LatheBufferGeometry( points, segments, phiStart, phiLength ) );
			this.mergeVertices();
	
		}
	
		LatheGeometry.prototype = Object.create( Geometry.prototype );
		LatheGeometry.prototype.constructor = LatheGeometry;
	
		// LatheBufferGeometry
	
		function LatheBufferGeometry( points, segments, phiStart, phiLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'LatheBufferGeometry';
	
			this.parameters = {
				points: points,
				segments: segments,
				phiStart: phiStart,
				phiLength: phiLength
			};
	
			segments = Math.floor( segments ) || 12;
			phiStart = phiStart || 0;
			phiLength = phiLength || Math.PI * 2;
	
			// clamp phiLength so it's in range of [ 0, 2PI ]
	
			phiLength = MathUtils.clamp( phiLength, 0, Math.PI * 2 );
	
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var uvs = [];
	
			// helper variables
	
			var base;
			var inverseSegments = 1.0 / segments;
			var vertex = new Vector3();
			var uv = new Vector2();
			var i, j;
	
			// generate vertices and uvs
	
			for ( i = 0; i <= segments; i ++ ) {
	
				var phi = phiStart + i * inverseSegments * phiLength;
	
				var sin = Math.sin( phi );
				var cos = Math.cos( phi );
	
				for ( j = 0; j <= ( points.length - 1 ); j ++ ) {
	
					// vertex
	
					vertex.x = points[ j ].x * sin;
					vertex.y = points[ j ].y;
					vertex.z = points[ j ].x * cos;
	
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// uv
	
					uv.x = i / segments;
					uv.y = j / ( points.length - 1 );
	
					uvs.push( uv.x, uv.y );
	
	
				}
	
			}
	
			// indices
	
			for ( i = 0; i < segments; i ++ ) {
	
				for ( j = 0; j < ( points.length - 1 ); j ++ ) {
	
					base = j + i * points.length;
	
					var a = base;
					var b = base + points.length;
					var c = base + points.length + 1;
					var d = base + 1;
	
					// faces
	
					indices.push( a, b, d );
					indices.push( b, c, d );
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
			// generate normals
	
			this.computeVertexNormals();
	
			// if the geometry is closed, we need to average the normals along the seam.
			// because the corresponding vertices are identical (but still have different UVs).
	
			if ( phiLength === Math.PI * 2 ) {
	
				var normals = this.attributes.normal.array;
				var n1 = new Vector3();
				var n2 = new Vector3();
				var n = new Vector3();
	
				// this is the buffer offset for the last line of vertices
	
				base = segments * points.length * 3;
	
				for ( i = 0, j = 0; i < points.length; i ++, j += 3 ) {
	
					// select the normal of the vertex in the first line
	
					n1.x = normals[ j + 0 ];
					n1.y = normals[ j + 1 ];
					n1.z = normals[ j + 2 ];
	
					// select the normal of the vertex in the last line
	
					n2.x = normals[ base + j + 0 ];
					n2.y = normals[ base + j + 1 ];
					n2.z = normals[ base + j + 2 ];
	
					// average normals
	
					n.addVectors( n1, n2 ).normalize();
	
					// assign the new values to both normals
	
					normals[ j + 0 ] = normals[ base + j + 0 ] = n.x;
					normals[ j + 1 ] = normals[ base + j + 1 ] = n.y;
					normals[ j + 2 ] = normals[ base + j + 2 ] = n.z;
	
				}
	
			}
	
		}
	
		LatheBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		LatheBufferGeometry.prototype.constructor = LatheBufferGeometry;
	
		/**
		 * @author jonobr1 / http://jonobr1.com
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// ShapeGeometry
	
		function ShapeGeometry( shapes, curveSegments ) {
	
			Geometry.call( this );
	
			this.type = 'ShapeGeometry';
	
			if ( typeof curveSegments === 'object' ) {
	
				console.warn( 'THREE.ShapeGeometry: Options parameter has been removed.' );
	
				curveSegments = curveSegments.curveSegments;
	
			}
	
			this.parameters = {
				shapes: shapes,
				curveSegments: curveSegments
			};
	
			this.fromBufferGeometry( new ShapeBufferGeometry( shapes, curveSegments ) );
			this.mergeVertices();
	
		}
	
		ShapeGeometry.prototype = Object.create( Geometry.prototype );
		ShapeGeometry.prototype.constructor = ShapeGeometry;
	
		ShapeGeometry.prototype.toJSON = function () {
	
			var data = Geometry.prototype.toJSON.call( this );
	
			var shapes = this.parameters.shapes;
	
			return toJSON$1( shapes, data );
	
		};
	
		// ShapeBufferGeometry
	
		function ShapeBufferGeometry( shapes, curveSegments ) {
	
			BufferGeometry.call( this );
	
			this.type = 'ShapeBufferGeometry';
	
			this.parameters = {
				shapes: shapes,
				curveSegments: curveSegments
			};
	
			curveSegments = curveSegments || 12;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var groupStart = 0;
			var groupCount = 0;
	
			// allow single and array values for "shapes" parameter
	
			if ( Array.isArray( shapes ) === false ) {
	
				addShape( shapes );
	
			} else {
	
				for ( var i = 0; i < shapes.length; i ++ ) {
	
					addShape( shapes[ i ] );
	
					this.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support
	
					groupStart += groupCount;
					groupCount = 0;
	
				}
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
	
			// helper functions
	
			function addShape( shape ) {
	
				var i, l, shapeHole;
	
				var indexOffset = vertices.length / 3;
				var points = shape.extractPoints( curveSegments );
	
				var shapeVertices = points.shape;
				var shapeHoles = points.holes;
	
				// check direction of vertices
	
				if ( ShapeUtils.isClockWise( shapeVertices ) === false ) {
	
					shapeVertices = shapeVertices.reverse();
	
				}
	
				for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
	
					shapeHole = shapeHoles[ i ];
	
					if ( ShapeUtils.isClockWise( shapeHole ) === true ) {
	
						shapeHoles[ i ] = shapeHole.reverse();
	
					}
	
				}
	
				var faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );
	
				// join vertices of inner and outer paths to a single array
	
				for ( i = 0, l = shapeHoles.length; i < l; i ++ ) {
	
					shapeHole = shapeHoles[ i ];
					shapeVertices = shapeVertices.concat( shapeHole );
	
				}
	
				// vertices, normals, uvs
	
				for ( i = 0, l = shapeVertices.length; i < l; i ++ ) {
	
					var vertex = shapeVertices[ i ];
	
					vertices.push( vertex.x, vertex.y, 0 );
					normals.push( 0, 0, 1 );
					uvs.push( vertex.x, vertex.y ); // world uvs
	
				}
	
				// incides
	
				for ( i = 0, l = faces.length; i < l; i ++ ) {
	
					var face = faces[ i ];
	
					var a = face[ 0 ] + indexOffset;
					var b = face[ 1 ] + indexOffset;
					var c = face[ 2 ] + indexOffset;
	
					indices.push( a, b, c );
					groupCount += 3;
	
				}
	
			}
	
		}
	
		ShapeBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		ShapeBufferGeometry.prototype.constructor = ShapeBufferGeometry;
	
		ShapeBufferGeometry.prototype.toJSON = function () {
	
			var data = BufferGeometry.prototype.toJSON.call( this );
	
			var shapes = this.parameters.shapes;
	
			return toJSON$1( shapes, data );
	
		};
	
		//
	
		function toJSON$1( shapes, data ) {
	
			data.shapes = [];
	
			if ( Array.isArray( shapes ) ) {
	
				for ( var i = 0, l = shapes.length; i < l; i ++ ) {
	
					var shape = shapes[ i ];
	
					data.shapes.push( shape.uuid );
	
				}
	
			} else {
	
				data.shapes.push( shapes.uuid );
	
			}
	
			return data;
	
		}
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		function EdgesGeometry( geometry, thresholdAngle ) {
	
			BufferGeometry.call( this );
	
			this.type = 'EdgesGeometry';
	
			this.parameters = {
				thresholdAngle: thresholdAngle
			};
	
			thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;
	
			// buffer
	
			var vertices = [];
	
			// helper variables
	
			var thresholdDot = Math.cos( MathUtils.DEG2RAD * thresholdAngle );
			var edge = [ 0, 0 ], edges = {}, edge1, edge2;
			var key, keys = [ 'a', 'b', 'c' ];
	
			// prepare source geometry
	
			var geometry2;
	
			if ( geometry.isBufferGeometry ) {
	
				geometry2 = new Geometry();
				geometry2.fromBufferGeometry( geometry );
	
			} else {
	
				geometry2 = geometry.clone();
	
			}
	
			geometry2.mergeVertices();
			geometry2.computeFaceNormals();
	
			var sourceVertices = geometry2.vertices;
			var faces = geometry2.faces;
	
			// now create a data structure where each entry represents an edge with its adjoining faces
	
			for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
				var face = faces[ i ];
	
				for ( var j = 0; j < 3; j ++ ) {
	
					edge1 = face[ keys[ j ] ];
					edge2 = face[ keys[ ( j + 1 ) % 3 ] ];
					edge[ 0 ] = Math.min( edge1, edge2 );
					edge[ 1 ] = Math.max( edge1, edge2 );
	
					key = edge[ 0 ] + ',' + edge[ 1 ];
	
					if ( edges[ key ] === undefined ) {
	
						edges[ key ] = { index1: edge[ 0 ], index2: edge[ 1 ], face1: i, face2: undefined };
	
					} else {
	
						edges[ key ].face2 = i;
	
					}
	
				}
	
			}
	
			// generate vertices
	
			for ( key in edges ) {
	
				var e = edges[ key ];
	
				// an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.
	
				if ( e.face2 === undefined || faces[ e.face1 ].normal.dot( faces[ e.face2 ].normal ) <= thresholdDot ) {
	
					var vertex = sourceVertices[ e.index1 ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					vertex = sourceVertices[ e.index2 ];
					vertices.push( vertex.x, vertex.y, vertex.z );
	
				}
	
			}
	
			// build geometry
	
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
	
		}
	
		EdgesGeometry.prototype = Object.create( BufferGeometry.prototype );
		EdgesGeometry.prototype.constructor = EdgesGeometry;
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		// CylinderGeometry
	
		function CylinderGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'CylinderGeometry';
	
			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );
			this.mergeVertices();
	
		}
	
		CylinderGeometry.prototype = Object.create( Geometry.prototype );
		CylinderGeometry.prototype.constructor = CylinderGeometry;
	
		// CylinderBufferGeometry
	
		function CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'CylinderBufferGeometry';
	
			this.parameters = {
				radiusTop: radiusTop,
				radiusBottom: radiusBottom,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			var scope = this;
	
			radiusTop = radiusTop !== undefined ? radiusTop : 1;
			radiusBottom = radiusBottom !== undefined ? radiusBottom : 1;
			height = height || 1;
	
			radialSegments = Math.floor( radialSegments ) || 8;
			heightSegments = Math.floor( heightSegments ) || 1;
	
			openEnded = openEnded !== undefined ? openEnded : false;
			thetaStart = thetaStart !== undefined ? thetaStart : 0.0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var index = 0;
			var indexArray = [];
			var halfHeight = height / 2;
			var groupStart = 0;
	
			// generate geometry
	
			generateTorso();
	
			if ( openEnded === false ) {
	
				if ( radiusTop > 0 ) { generateCap( true ); }
				if ( radiusBottom > 0 ) { generateCap( false ); }
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
			function generateTorso() {
	
				var x, y;
				var normal = new Vector3();
				var vertex = new Vector3();
	
				var groupCount = 0;
	
				// this will be used to calculate the normal
				var slope = ( radiusBottom - radiusTop ) / height;
	
				// generate vertices, normals and uvs
	
				for ( y = 0; y <= heightSegments; y ++ ) {
	
					var indexRow = [];
	
					var v = y / heightSegments;
	
					// calculate the radius of the current row
	
					var radius = v * ( radiusBottom - radiusTop ) + radiusTop;
	
					for ( x = 0; x <= radialSegments; x ++ ) {
	
						var u = x / radialSegments;
	
						var theta = u * thetaLength + thetaStart;
	
						var sinTheta = Math.sin( theta );
						var cosTheta = Math.cos( theta );
	
						// vertex
	
						vertex.x = radius * sinTheta;
						vertex.y = - v * height + halfHeight;
						vertex.z = radius * cosTheta;
						vertices.push( vertex.x, vertex.y, vertex.z );
	
						// normal
	
						normal.set( sinTheta, slope, cosTheta ).normalize();
						normals.push( normal.x, normal.y, normal.z );
	
						// uv
	
						uvs.push( u, 1 - v );
	
						// save index of vertex in respective row
	
						indexRow.push( index ++ );
	
					}
	
					// now save vertices of the row in our index array
	
					indexArray.push( indexRow );
	
				}
	
				// generate indices
	
				for ( x = 0; x < radialSegments; x ++ ) {
	
					for ( y = 0; y < heightSegments; y ++ ) {
	
						// we use the index array to access the correct indices
	
						var a = indexArray[ y ][ x ];
						var b = indexArray[ y + 1 ][ x ];
						var c = indexArray[ y + 1 ][ x + 1 ];
						var d = indexArray[ y ][ x + 1 ];
	
						// faces
	
						indices.push( a, b, d );
						indices.push( b, c, d );
	
						// update group counter
	
						groupCount += 6;
	
					}
	
				}
	
				// add a group to the geometry. this will ensure multi material support
	
				scope.addGroup( groupStart, groupCount, 0 );
	
				// calculate new start value for groups
	
				groupStart += groupCount;
	
			}
	
			function generateCap( top ) {
	
				var x, centerIndexStart, centerIndexEnd;
	
				var uv = new Vector2();
				var vertex = new Vector3();
	
				var groupCount = 0;
	
				var radius = ( top === true ) ? radiusTop : radiusBottom;
				var sign = ( top === true ) ? 1 : - 1;
	
				// save the index of the first center vertex
				centerIndexStart = index;
	
				// first we generate the center vertex data of the cap.
				// because the geometry needs one set of uvs per face,
				// we must generate a center vertex per face/segment
	
				for ( x = 1; x <= radialSegments; x ++ ) {
	
					// vertex
	
					vertices.push( 0, halfHeight * sign, 0 );
	
					// normal
	
					normals.push( 0, sign, 0 );
	
					// uv
	
					uvs.push( 0.5, 0.5 );
	
					// increase index
	
					index ++;
	
				}
	
				// save the index of the last center vertex
	
				centerIndexEnd = index;
	
				// now we generate the surrounding vertices, normals and uvs
	
				for ( x = 0; x <= radialSegments; x ++ ) {
	
					var u = x / radialSegments;
					var theta = u * thetaLength + thetaStart;
	
					var cosTheta = Math.cos( theta );
					var sinTheta = Math.sin( theta );
	
					// vertex
	
					vertex.x = radius * sinTheta;
					vertex.y = halfHeight * sign;
					vertex.z = radius * cosTheta;
					vertices.push( vertex.x, vertex.y, vertex.z );
	
					// normal
	
					normals.push( 0, sign, 0 );
	
					// uv
	
					uv.x = ( cosTheta * 0.5 ) + 0.5;
					uv.y = ( sinTheta * 0.5 * sign ) + 0.5;
					uvs.push( uv.x, uv.y );
	
					// increase index
	
					index ++;
	
				}
	
				// generate indices
	
				for ( x = 0; x < radialSegments; x ++ ) {
	
					var c = centerIndexStart + x;
					var i = centerIndexEnd + x;
	
					if ( top === true ) {
	
						// face top
	
						indices.push( i, i + 1, c );
	
					} else {
	
						// face bottom
	
						indices.push( i + 1, i, c );
	
					}
	
					groupCount += 3;
	
				}
	
				// add a group to the geometry. this will ensure multi material support
	
				scope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );
	
				// calculate new start value for groups
	
				groupStart += groupCount;
	
			}
	
		}
	
		CylinderBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		CylinderBufferGeometry.prototype.constructor = CylinderBufferGeometry;
	
		/**
		 * @author abelnation / http://github.com/abelnation
		 */
	
		// ConeGeometry
	
		function ConeGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			CylinderGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
	
			this.type = 'ConeGeometry';
	
			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
		}
	
		ConeGeometry.prototype = Object.create( CylinderGeometry.prototype );
		ConeGeometry.prototype.constructor = ConeGeometry;
	
		// ConeBufferGeometry
	
		function ConeBufferGeometry( radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
			CylinderBufferGeometry.call( this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );
	
			this.type = 'ConeBufferGeometry';
	
			this.parameters = {
				radius: radius,
				height: height,
				radialSegments: radialSegments,
				heightSegments: heightSegments,
				openEnded: openEnded,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
		}
	
		ConeBufferGeometry.prototype = Object.create( CylinderBufferGeometry.prototype );
		ConeBufferGeometry.prototype.constructor = ConeBufferGeometry;
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 * @author Mugen87 / https://github.com/Mugen87
		 * @author hughes
		 */
	
		// CircleGeometry
	
		function CircleGeometry( radius, segments, thetaStart, thetaLength ) {
	
			Geometry.call( this );
	
			this.type = 'CircleGeometry';
	
			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			this.fromBufferGeometry( new CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
			this.mergeVertices();
	
		}
	
		CircleGeometry.prototype = Object.create( Geometry.prototype );
		CircleGeometry.prototype.constructor = CircleGeometry;
	
		// CircleBufferGeometry
	
		function CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) {
	
			BufferGeometry.call( this );
	
			this.type = 'CircleBufferGeometry';
	
			this.parameters = {
				radius: radius,
				segments: segments,
				thetaStart: thetaStart,
				thetaLength: thetaLength
			};
	
			radius = radius || 1;
			segments = segments !== undefined ? Math.max( 3, segments ) : 8;
	
			thetaStart = thetaStart !== undefined ? thetaStart : 0;
			thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
			// buffers
	
			var indices = [];
			var vertices = [];
			var normals = [];
			var uvs = [];
	
			// helper variables
	
			var i, s;
			var vertex = new Vector3();
			var uv = new Vector2();
	
			// center point
	
			vertices.push( 0, 0, 0 );
			normals.push( 0, 0, 1 );
			uvs.push( 0.5, 0.5 );
	
			for ( s = 0, i = 3; s <= segments; s ++, i += 3 ) {
	
				var segment = thetaStart + s / segments * thetaLength;
	
				// vertex
	
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );
	
				vertices.push( vertex.x, vertex.y, vertex.z );
	
				// normal
	
				normals.push( 0, 0, 1 );
	
				// uvs
	
				uv.x = ( vertices[ i ] / radius + 1 ) / 2;
				uv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;
	
				uvs.push( uv.x, uv.y );
	
			}
	
			// indices
	
			for ( i = 1; i <= segments; i ++ ) {
	
				indices.push( i, i + 1, 0 );
	
			}
	
			// build geometry
	
			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );
	
		}
	
		CircleBufferGeometry.prototype = Object.create( BufferGeometry.prototype );
		CircleBufferGeometry.prototype.constructor = CircleBufferGeometry;
	
	
	
		var Geometries = /*#__PURE__*/Object.freeze({
			__proto__: null,
			WireframeGeometry: WireframeGeometry,
			ParametricGeometry: ParametricGeometry,
			ParametricBufferGeometry: ParametricBufferGeometry,
			TetrahedronGeometry: TetrahedronGeometry,
			TetrahedronBufferGeometry: TetrahedronBufferGeometry,
			OctahedronGeometry: OctahedronGeometry,
			OctahedronBufferGeometry: OctahedronBufferGeometry,
			IcosahedronGeometry: IcosahedronGeometry,
			IcosahedronBufferGeometry: IcosahedronBufferGeometry,
			DodecahedronGeometry: DodecahedronGeometry,
			DodecahedronBufferGeometry: DodecahedronBufferGeometry,
			PolyhedronGeometry: PolyhedronGeometry,
			PolyhedronBufferGeometry: PolyhedronBufferGeometry,
			TubeGeometry: TubeGeometry,
			TubeBufferGeometry: TubeBufferGeometry,
			TorusKnotGeometry: TorusKnotGeometry,
			TorusKnotBufferGeometry: TorusKnotBufferGeometry,
			TorusGeometry: TorusGeometry,
			TorusBufferGeometry: TorusBufferGeometry,
			TextGeometry: TextGeometry,
			TextBufferGeometry: TextBufferGeometry,
			SphereGeometry: SphereGeometry,
			SphereBufferGeometry: SphereBufferGeometry,
			RingGeometry: RingGeometry,
			RingBufferGeometry: RingBufferGeometry,
			PlaneGeometry: PlaneGeometry,
			PlaneBufferGeometry: PlaneBufferGeometry,
			LatheGeometry: LatheGeometry,
			LatheBufferGeometry: LatheBufferGeometry,
			ShapeGeometry: ShapeGeometry,
			ShapeBufferGeometry: ShapeBufferGeometry,
			ExtrudeGeometry: ExtrudeGeometry,
			ExtrudeBufferGeometry: ExtrudeBufferGeometry,
			EdgesGeometry: EdgesGeometry,
			ConeGeometry: ConeGeometry,
			ConeBufferGeometry: ConeBufferGeometry,
			CylinderGeometry: CylinderGeometry,
			CylinderBufferGeometry: CylinderBufferGeometry,
			CircleGeometry: CircleGeometry,
			CircleBufferGeometry: CircleBufferGeometry,
			BoxGeometry: BoxGeometry,
			BoxBufferGeometry: BoxBufferGeometry
		});
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * parameters = {
		 *  color: <THREE.Color>
		 * }
		 */
	
		function ShadowMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'ShadowMaterial';
	
			this.color = new Color( 0x000000 );
			this.transparent = true;
	
			this.setValues( parameters );
	
		}
	
		ShadowMaterial.prototype = Object.create( Material.prototype );
		ShadowMaterial.prototype.constructor = ShadowMaterial;
	
		ShadowMaterial.prototype.isShadowMaterial = true;
	
		ShadowMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function RawShaderMaterial( parameters ) {
	
			ShaderMaterial.call( this, parameters );
	
			this.type = 'RawShaderMaterial';
	
		}
	
		RawShaderMaterial.prototype = Object.create( ShaderMaterial.prototype );
		RawShaderMaterial.prototype.constructor = RawShaderMaterial;
	
		RawShaderMaterial.prototype.isRawShaderMaterial = true;
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  roughness: <float>,
		 *  metalness: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalMapType: THREE.TangentSpaceNormalMap,
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  roughnessMap: new THREE.Texture( <Image> ),
		 *
		 *  metalnessMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
		 *  envMapIntensity: <float>
		 *
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshStandardMaterial( parameters ) {
	
			Material.call( this );
	
			this.defines = { 'STANDARD': '' };
	
			this.type = 'MeshStandardMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
			this.roughness = 1.0;
			this.metalness = 0.0;
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.roughnessMap = null;
	
			this.metalnessMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.envMapIntensity = 1.0;
	
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.vertexTangents = false;
	
			this.setValues( parameters );
	
		}
	
		MeshStandardMaterial.prototype = Object.create( Material.prototype );
		MeshStandardMaterial.prototype.constructor = MeshStandardMaterial;
	
		MeshStandardMaterial.prototype.isMeshStandardMaterial = true;
	
		MeshStandardMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.defines = { 'STANDARD': '' };
	
			this.color.copy( source.color );
			this.roughness = source.roughness;
			this.metalness = source.metalness;
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.roughnessMap = source.roughnessMap;
	
			this.metalnessMap = source.metalnessMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.envMapIntensity = source.envMapIntensity;
	
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			this.vertexTangents = source.vertexTangents;
	
			return this;
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  reflectivity: <float>
		 *  clearcoat: <float>
		 *  clearcoatRoughness: <float>
		 *
		 *  sheen: <Color>
		 *
		 *  clearcoatNormalScale: <Vector2>,
		 *  clearcoatNormalMap: new THREE.Texture( <Image> ),
		 * }
		 */
	
		function MeshPhysicalMaterial( parameters ) {
	
			MeshStandardMaterial.call( this );
	
			this.defines = {
	
				'STANDARD': '',
				'PHYSICAL': ''
	
			};
	
			this.type = 'MeshPhysicalMaterial';
	
			this.reflectivity = 0.5; // maps to F0 = 0.04
	
			this.clearcoat = 0.0;
			this.clearcoatRoughness = 0.0;
	
			this.sheen = null; // null will disable sheen bsdf
	
			this.clearcoatNormalScale = new Vector2( 1, 1 );
			this.clearcoatNormalMap = null;
	
			this.transparency = 0.0;
	
			this.setValues( parameters );
	
		}
	
		MeshPhysicalMaterial.prototype = Object.create( MeshStandardMaterial.prototype );
		MeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;
	
		MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;
	
		MeshPhysicalMaterial.prototype.copy = function ( source ) {
	
			MeshStandardMaterial.prototype.copy.call( this, source );
	
			this.defines = {
	
				'STANDARD': '',
				'PHYSICAL': ''
	
			};
	
			this.reflectivity = source.reflectivity;
	
			this.clearcoat = source.clearcoat;
			this.clearcoatRoughness = source.clearcoatRoughness;
	
			if ( source.sheen ) { this.sheen = ( this.sheen || new Color() ).copy( source.sheen ); }
			else { this.sheen = null; }
	
			this.clearcoatNormalMap = source.clearcoatNormalMap;
			this.clearcoatNormalScale.copy( source.clearcoatNormalScale );
	
			this.transparency = source.transparency;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  specular: <hex>,
		 *  shininess: <float>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalMapType: THREE.TangentSpaceNormalMap,
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.MultiplyOperation,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshPhongMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshPhongMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
			this.specular = new Color( 0x111111 );
			this.shininess = 30;
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshPhongMaterial.prototype = Object.create( Material.prototype );
		MeshPhongMaterial.prototype.constructor = MeshPhongMaterial;
	
		MeshPhongMaterial.prototype.isMeshPhongMaterial = true;
	
		MeshPhongMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
			this.specular.copy( source.specular );
			this.shininess = source.shininess;
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author takahirox / http://github.com/takahirox
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  specular: <hex>,
		 *  shininess: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *  gradientMap: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalMapType: THREE.TangentSpaceNormalMap,
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshToonMaterial( parameters ) {
	
			Material.call( this );
	
			this.defines = { 'TOON': '' };
	
			this.type = 'MeshToonMaterial';
	
			this.color = new Color( 0xffffff );
			this.specular = new Color( 0x111111 );
			this.shininess = 30;
	
			this.map = null;
			this.gradientMap = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshToonMaterial.prototype = Object.create( Material.prototype );
		MeshToonMaterial.prototype.constructor = MeshToonMaterial;
	
		MeshToonMaterial.prototype.isMeshToonMaterial = true;
	
		MeshToonMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
			this.specular.copy( source.specular );
			this.shininess = source.shininess;
	
			this.map = source.map;
			this.gradientMap = source.gradientMap;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  opacity: <float>,
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalMapType: THREE.TangentSpaceNormalMap,
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshNormalMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshNormalMaterial';
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
	
			this.fog = false;
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshNormalMaterial.prototype = Object.create( Material.prototype );
		MeshNormalMaterial.prototype.constructor = MeshNormalMaterial;
	
		MeshNormalMaterial.prototype.isMeshNormalMaterial = true;
	
		MeshNormalMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  lightMap: new THREE.Texture( <Image> ),
		 *  lightMapIntensity: <float>
		 *
		 *  aoMap: new THREE.Texture( <Image> ),
		 *  aoMapIntensity: <float>
		 *
		 *  emissive: <hex>,
		 *  emissiveIntensity: <float>
		 *  emissiveMap: new THREE.Texture( <Image> ),
		 *
		 *  specularMap: new THREE.Texture( <Image> ),
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),
		 *  combine: THREE.Multiply,
		 *  reflectivity: <float>,
		 *  refractionRatio: <float>,
		 *
		 *  wireframe: <boolean>,
		 *  wireframeLinewidth: <float>,
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshLambertMaterial( parameters ) {
	
			Material.call( this );
	
			this.type = 'MeshLambertMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
	
			this.map = null;
	
			this.lightMap = null;
			this.lightMapIntensity = 1.0;
	
			this.aoMap = null;
			this.aoMapIntensity = 1.0;
	
			this.emissive = new Color( 0x000000 );
			this.emissiveIntensity = 1.0;
			this.emissiveMap = null;
	
			this.specularMap = null;
	
			this.alphaMap = null;
	
			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;
	
			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshLambertMaterial.prototype = Object.create( Material.prototype );
		MeshLambertMaterial.prototype.constructor = MeshLambertMaterial;
	
		MeshLambertMaterial.prototype.isMeshLambertMaterial = true;
	
		MeshLambertMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.color.copy( source.color );
	
			this.map = source.map;
	
			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;
	
			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;
	
			this.emissive.copy( source.emissive );
			this.emissiveMap = source.emissiveMap;
			this.emissiveIntensity = source.emissiveIntensity;
	
			this.specularMap = source.specularMap;
	
			this.alphaMap = source.alphaMap;
	
			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;
	
			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  matcap: new THREE.Texture( <Image> ),
		 *
		 *  map: new THREE.Texture( <Image> ),
		 *
		 *  bumpMap: new THREE.Texture( <Image> ),
		 *  bumpScale: <float>,
		 *
		 *  normalMap: new THREE.Texture( <Image> ),
		 *  normalMapType: THREE.TangentSpaceNormalMap,
		 *  normalScale: <Vector2>,
		 *
		 *  displacementMap: new THREE.Texture( <Image> ),
		 *  displacementScale: <float>,
		 *  displacementBias: <float>,
		 *
		 *  alphaMap: new THREE.Texture( <Image> ),
		 *
		 *  skinning: <bool>,
		 *  morphTargets: <bool>,
		 *  morphNormals: <bool>
		 * }
		 */
	
		function MeshMatcapMaterial( parameters ) {
	
			Material.call( this );
	
			this.defines = { 'MATCAP': '' };
	
			this.type = 'MeshMatcapMaterial';
	
			this.color = new Color( 0xffffff ); // diffuse
	
			this.matcap = null;
	
			this.map = null;
	
			this.bumpMap = null;
			this.bumpScale = 1;
	
			this.normalMap = null;
			this.normalMapType = TangentSpaceNormalMap;
			this.normalScale = new Vector2( 1, 1 );
	
			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;
	
			this.alphaMap = null;
	
			this.skinning = false;
			this.morphTargets = false;
			this.morphNormals = false;
	
			this.setValues( parameters );
	
		}
	
		MeshMatcapMaterial.prototype = Object.create( Material.prototype );
		MeshMatcapMaterial.prototype.constructor = MeshMatcapMaterial;
	
		MeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;
	
		MeshMatcapMaterial.prototype.copy = function ( source ) {
	
			Material.prototype.copy.call( this, source );
	
			this.defines = { 'MATCAP': '' };
	
			this.color.copy( source.color );
	
			this.matcap = source.matcap;
	
			this.map = source.map;
	
			this.bumpMap = source.bumpMap;
			this.bumpScale = source.bumpScale;
	
			this.normalMap = source.normalMap;
			this.normalMapType = source.normalMapType;
			this.normalScale.copy( source.normalScale );
	
			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;
	
			this.alphaMap = source.alphaMap;
	
			this.skinning = source.skinning;
			this.morphTargets = source.morphTargets;
			this.morphNormals = source.morphNormals;
	
			return this;
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 *
		 * parameters = {
		 *  color: <hex>,
		 *  opacity: <float>,
		 *
		 *  linewidth: <float>,
		 *
		 *  scale: <float>,
		 *  dashSize: <float>,
		 *  gapSize: <float>
		 * }
		 */
	
		function LineDashedMaterial( parameters ) {
	
			LineBasicMaterial.call( this );
	
			this.type = 'LineDashedMaterial';
	
			this.scale = 1;
			this.dashSize = 3;
			this.gapSize = 1;
	
			this.setValues( parameters );
	
		}
	
		LineDashedMaterial.prototype = Object.create( LineBasicMaterial.prototype );
		LineDashedMaterial.prototype.constructor = LineDashedMaterial;
	
		LineDashedMaterial.prototype.isLineDashedMaterial = true;
	
		LineDashedMaterial.prototype.copy = function ( source ) {
	
			LineBasicMaterial.prototype.copy.call( this, source );
	
			this.scale = source.scale;
			this.dashSize = source.dashSize;
			this.gapSize = source.gapSize;
	
			return this;
	
		};
	
	
	
		var Materials = /*#__PURE__*/Object.freeze({
			__proto__: null,
			ShadowMaterial: ShadowMaterial,
			SpriteMaterial: SpriteMaterial,
			RawShaderMaterial: RawShaderMaterial,
			ShaderMaterial: ShaderMaterial,
			PointsMaterial: PointsMaterial,
			MeshPhysicalMaterial: MeshPhysicalMaterial,
			MeshStandardMaterial: MeshStandardMaterial,
			MeshPhongMaterial: MeshPhongMaterial,
			MeshToonMaterial: MeshToonMaterial,
			MeshNormalMaterial: MeshNormalMaterial,
			MeshLambertMaterial: MeshLambertMaterial,
			MeshDepthMaterial: MeshDepthMaterial,
			MeshDistanceMaterial: MeshDistanceMaterial,
			MeshBasicMaterial: MeshBasicMaterial,
			MeshMatcapMaterial: MeshMatcapMaterial,
			LineDashedMaterial: LineDashedMaterial,
			LineBasicMaterial: LineBasicMaterial,
			Material: Material
		});
	
		/**
		 * @author tschw
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */
	
		var AnimationUtils = {
	
			// same as Array.prototype.slice, but also works on typed arrays
			arraySlice: function ( array, from, to ) {
	
				if ( AnimationUtils.isTypedArray( array ) ) {
	
					// in ios9 array.subarray(from, undefined) will return empty array
					// but array.subarray(from) or array.subarray(from, len) is correct
					return new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );
	
				}
	
				return array.slice( from, to );
	
			},
	
			// converts an array to a specific type
			convertArray: function ( array, type, forceClone ) {
	
				if ( ! array || // let 'undefined' and 'null' pass
					! forceClone && array.constructor === type ) { return array; }
	
				if ( typeof type.BYTES_PER_ELEMENT === 'number' ) {
	
					return new type( array ); // create typed array
	
				}
	
				return Array.prototype.slice.call( array ); // create Array
	
			},
	
			isTypedArray: function ( object ) {
	
				return ArrayBuffer.isView( object ) &&
					! ( object instanceof DataView );
	
			},
	
			// returns an array by which times and values can be sorted
			getKeyframeOrder: function ( times ) {
	
				function compareTime( i, j ) {
	
					return times[ i ] - times[ j ];
	
				}
	
				var n = times.length;
				var result = new Array( n );
				for ( var i = 0; i !== n; ++ i ) { result[ i ] = i; }
	
				result.sort( compareTime );
	
				return result;
	
			},
	
			// uses the array previously returned by 'getKeyframeOrder' to sort data
			sortedArray: function ( values, stride, order ) {
	
				var nValues = values.length;
				var result = new values.constructor( nValues );
	
				for ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {
	
					var srcOffset = order[ i ] * stride;
	
					for ( var j = 0; j !== stride; ++ j ) {
	
						result[ dstOffset ++ ] = values[ srcOffset + j ];
	
					}
	
				}
	
				return result;
	
			},
	
			// function for parsing AOS keyframe formats
			flattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {
	
				var i = 1, key = jsonKeys[ 0 ];
	
				while ( key !== undefined && key[ valuePropertyName ] === undefined ) {
	
					key = jsonKeys[ i ++ ];
	
				}
	
				if ( key === undefined ) { return; } // no data
	
				var value = key[ valuePropertyName ];
				if ( value === undefined ) { return; } // no data
	
				if ( Array.isArray( value ) ) {
	
					do {
	
						value = key[ valuePropertyName ];
	
						if ( value !== undefined ) {
	
							times.push( key.time );
							values.push.apply( values, value ); // push all elements
	
						}
	
						key = jsonKeys[ i ++ ];
	
					} while ( key !== undefined );
	
				} else if ( value.toArray !== undefined ) {
	
					// ...assume THREE.Math-ish
	
					do {
	
						value = key[ valuePropertyName ];
	
						if ( value !== undefined ) {
	
							times.push( key.time );
							value.toArray( values, values.length );
	
						}
	
						key = jsonKeys[ i ++ ];
	
					} while ( key !== undefined );
	
				} else {
	
					// otherwise push as-is
	
					do {
	
						value = key[ valuePropertyName ];
	
						if ( value !== undefined ) {
	
							times.push( key.time );
							values.push( value );
	
						}
	
						key = jsonKeys[ i ++ ];
	
					} while ( key !== undefined );
	
				}
	
			},
	
			subclip: function ( sourceClip, name, startFrame, endFrame, fps ) {
	
				fps = fps || 30;
	
				var clip = sourceClip.clone();
	
				clip.name = name;
	
				var tracks = [];
	
				for ( var i = 0; i < clip.tracks.length; ++ i ) {
	
					var track = clip.tracks[ i ];
					var valueSize = track.getValueSize();
	
					var times = [];
					var values = [];
	
					for ( var j = 0; j < track.times.length; ++ j ) {
	
						var frame = track.times[ j ] * fps;
	
						if ( frame < startFrame || frame >= endFrame ) { continue; }
	
						times.push( track.times[ j ] );
	
						for ( var k = 0; k < valueSize; ++ k ) {
	
							values.push( track.values[ j * valueSize + k ] );
	
						}
	
					}
	
					if ( times.length === 0 ) { continue; }
	
					track.times = AnimationUtils.convertArray( times, track.times.constructor );
					track.values = AnimationUtils.convertArray( values, track.values.constructor );
	
					tracks.push( track );
	
				}
	
				clip.tracks = tracks;
	
				// find minimum .times value across all tracks in the trimmed clip
	
				var minStartTime = Infinity;
	
				for ( var i = 0; i < clip.tracks.length; ++ i ) {
	
					if ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {
	
						minStartTime = clip.tracks[ i ].times[ 0 ];
	
					}
	
				}
	
				// shift all tracks such that clip begins at t=0
	
				for ( var i = 0; i < clip.tracks.length; ++ i ) {
	
					clip.tracks[ i ].shift( - 1 * minStartTime );
	
				}
	
				clip.resetDuration();
	
				return clip;
	
			}
	
		};
	
		/**
		 * Abstract base class of interpolants over parametric samples.
		 *
		 * The parameter domain is one dimensional, typically the time or a path
		 * along a curve defined by the data.
		 *
		 * The sample values can have any dimensionality and derived classes may
		 * apply special interpretations to the data.
		 *
		 * This class provides the interval seek in a Template Method, deferring
		 * the actual interpolation to derived classes.
		 *
		 * Time complexity is O(1) for linear access crossing at most two points
		 * and O(log N) for random access, where N is the number of positions.
		 *
		 * References:
		 *
		 * 		http://www.oodesign.com/template-method-pattern.html
		 *
		 * @author tschw
		 */
	
		function Interpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			this.parameterPositions = parameterPositions;
			this._cachedIndex = 0;
	
			this.resultBuffer = resultBuffer !== undefined ?
				resultBuffer : new sampleValues.constructor( sampleSize );
			this.sampleValues = sampleValues;
			this.valueSize = sampleSize;
	
		}
	
		Object.assign( Interpolant.prototype, {
	
			evaluate: function ( t ) {
	
				var pp = this.parameterPositions,
					i1 = this._cachedIndex,
	
					t1 = pp[ i1 ],
					t0 = pp[ i1 - 1 ];
	
				validate_interval: {
	
					seek: {
	
						var right;
	
						linear_scan: {
	
							//- See http://jsperf.com/comparison-to-undefined/3
							//- slower code:
							//-
							//- 				if ( t >= t1 || t1 === undefined ) {
							forward_scan: if ( ! ( t < t1 ) ) {
	
								for ( var giveUpAt = i1 + 2; ; ) {
	
									if ( t1 === undefined ) {
	
										if ( t < t0 ) { break forward_scan; }
	
										// after end
	
										i1 = pp.length;
										this._cachedIndex = i1;
										return this.afterEnd_( i1 - 1, t, t0 );
	
									}
	
									if ( i1 === giveUpAt ) { break; } // this loop
	
									t0 = t1;
									t1 = pp[ ++ i1 ];
	
									if ( t < t1 ) {
	
										// we have arrived at the sought interval
										break seek;
	
									}
	
								}
	
								// prepare binary search on the right side of the index
								right = pp.length;
								break linear_scan;
	
							}
	
							//- slower code:
							//-					if ( t < t0 || t0 === undefined ) {
							if ( ! ( t >= t0 ) ) {
	
								// looping?
	
								var t1global = pp[ 1 ];
	
								if ( t < t1global ) {
	
									i1 = 2; // + 1, using the scan for the details
									t0 = t1global;
	
								}
	
								// linear reverse scan
	
								for ( var giveUpAt = i1 - 2; ; ) {
	
									if ( t0 === undefined ) {
	
										// before start
	
										this._cachedIndex = 0;
										return this.beforeStart_( 0, t, t1 );
	
									}
	
									if ( i1 === giveUpAt ) { break; } // this loop
	
									t1 = t0;
									t0 = pp[ -- i1 - 1 ];
	
									if ( t >= t0 ) {
	
										// we have arrived at the sought interval
										break seek;
	
									}
	
								}
	
								// prepare binary search on the left side of the index
								right = i1;
								i1 = 0;
								break linear_scan;
	
							}
	
							// the interval is valid
	
							break validate_interval;
	
						} // linear scan
	
						// binary search
	
						while ( i1 < right ) {
	
							var mid = ( i1 + right ) >>> 1;
	
							if ( t < pp[ mid ] ) {
	
								right = mid;
	
							} else {
	
								i1 = mid + 1;
	
							}
	
						}
	
						t1 = pp[ i1 ];
						t0 = pp[ i1 - 1 ];
	
						// check boundary cases, again
	
						if ( t0 === undefined ) {
	
							this._cachedIndex = 0;
							return this.beforeStart_( 0, t, t1 );
	
						}
	
						if ( t1 === undefined ) {
	
							i1 = pp.length;
							this._cachedIndex = i1;
							return this.afterEnd_( i1 - 1, t0, t );
	
						}
	
					} // seek
	
					this._cachedIndex = i1;
	
					this.intervalChanged_( i1, t0, t1 );
	
				} // validate_interval
	
				return this.interpolate_( i1, t0, t, t1 );
	
			},
	
			settings: null, // optional, subclass-specific settings structure
			// Note: The indirection allows central control of many interpolants.
	
			// --- Protected interface
	
			DefaultSettings_: {},
	
			getSettings_: function () {
	
				return this.settings || this.DefaultSettings_;
	
			},
	
			copySampleValue_: function ( index ) {
	
				// copies a sample value to the result buffer
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
					offset = index * stride;
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					result[ i ] = values[ offset + i ];
	
				}
	
				return result;
	
			},
	
			// Template methods for derived classes:
	
			interpolate_: function ( /* i1, t0, t, t1 */ ) {
	
				throw new Error( 'call to abstract method' );
				// implementations shall return this.resultBuffer
	
			},
	
			intervalChanged_: function ( /* i1, t0, t1 */ ) {
	
				// empty
	
			}
	
		} );
	
		//!\ DECLARE ALIAS AFTER assign prototype !
		Object.assign( Interpolant.prototype, {
	
			//( 0, t, t0 ), returns this.resultBuffer
			beforeStart_: Interpolant.prototype.copySampleValue_,
	
			//( N-1, tN-1, t ), returns this.resultBuffer
			afterEnd_: Interpolant.prototype.copySampleValue_,
	
		} );
	
		/**
		 * Fast and simple cubic spline interpolant.
		 *
		 * It was derived from a Hermitian construction setting the first derivative
		 * at each sample position to the linear slope between neighboring positions
		 * over their parameter interval.
		 *
		 * @author tschw
		 */
	
		function CubicInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
			this._weightPrev = - 0;
			this._offsetPrev = - 0;
			this._weightNext = - 0;
			this._offsetNext = - 0;
	
		}
	
		CubicInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: CubicInterpolant,
	
			DefaultSettings_: {
	
				endingStart: ZeroCurvatureEnding,
				endingEnd: ZeroCurvatureEnding
	
			},
	
			intervalChanged_: function ( i1, t0, t1 ) {
	
				var pp = this.parameterPositions,
					iPrev = i1 - 2,
					iNext = i1 + 1,
	
					tPrev = pp[ iPrev ],
					tNext = pp[ iNext ];
	
				if ( tPrev === undefined ) {
	
					switch ( this.getSettings_().endingStart ) {
	
						case ZeroSlopeEnding:
	
							// f'(t0) = 0
							iPrev = i1;
							tPrev = 2 * t0 - t1;
	
							break;
	
						case WrapAroundEnding:
	
							// use the other end of the curve
							iPrev = pp.length - 2;
							tPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];
	
							break;
	
						default: // ZeroCurvatureEnding
	
							// f''(t0) = 0 a.k.a. Natural Spline
							iPrev = i1;
							tPrev = t1;
	
					}
	
				}
	
				if ( tNext === undefined ) {
	
					switch ( this.getSettings_().endingEnd ) {
	
						case ZeroSlopeEnding:
	
							// f'(tN) = 0
							iNext = i1;
							tNext = 2 * t1 - t0;
	
							break;
	
						case WrapAroundEnding:
	
							// use the other end of the curve
							iNext = 1;
							tNext = t1 + pp[ 1 ] - pp[ 0 ];
	
							break;
	
						default: // ZeroCurvatureEnding
	
							// f''(tN) = 0, a.k.a. Natural Spline
							iNext = i1 - 1;
							tNext = t0;
	
					}
	
				}
	
				var halfDt = ( t1 - t0 ) * 0.5,
					stride = this.valueSize;
	
				this._weightPrev = halfDt / ( t0 - tPrev );
				this._weightNext = halfDt / ( tNext - t1 );
				this._offsetPrev = iPrev * stride;
				this._offsetNext = iNext * stride;
	
			},
	
			interpolate_: function ( i1, t0, t, t1 ) {
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
	
					o1 = i1 * stride,		o0 = o1 - stride,
					oP = this._offsetPrev, 	oN = this._offsetNext,
					wP = this._weightPrev,	wN = this._weightNext,
	
					p = ( t - t0 ) / ( t1 - t0 ),
					pp = p * p,
					ppp = pp * p;
	
				// evaluate polynomials
	
				var sP = - wP * ppp + 2 * wP * pp - wP * p;
				var s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;
				var s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;
				var sN = wN * ppp - wN * pp;
	
				// combine data linearly
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					result[ i ] =
							sP * values[ oP + i ] +
							s0 * values[ o0 + i ] +
							s1 * values[ o1 + i ] +
							sN * values[ oN + i ];
	
				}
	
				return result;
	
			}
	
		} );
	
		/**
		 * @author tschw
		 */
	
		function LinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
		}
	
		LinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: LinearInterpolant,
	
			interpolate_: function ( i1, t0, t, t1 ) {
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
	
					offset1 = i1 * stride,
					offset0 = offset1 - stride,
	
					weight1 = ( t - t0 ) / ( t1 - t0 ),
					weight0 = 1 - weight1;
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					result[ i ] =
							values[ offset0 + i ] * weight0 +
							values[ offset1 + i ] * weight1;
	
				}
	
				return result;
	
			}
	
		} );
	
		/**
		 *
		 * Interpolant that evaluates to the sample value at the position preceeding
		 * the parameter.
		 *
		 * @author tschw
		 */
	
		function DiscreteInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
		}
	
		DiscreteInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: DiscreteInterpolant,
	
			interpolate_: function ( i1 /*, t0, t, t1 */ ) {
	
				return this.copySampleValue_( i1 - 1 );
	
			}
	
		} );
	
		/**
		 *
		 * A timed sequence of keyframes for a specific property.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function KeyframeTrack( name, times, values, interpolation ) {
	
			if ( name === undefined ) { throw new Error( 'THREE.KeyframeTrack: track name is undefined' ); }
			if ( times === undefined || times.length === 0 ) { throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name ); }
	
			this.name = name;
	
			this.times = AnimationUtils.convertArray( times, this.TimeBufferType );
			this.values = AnimationUtils.convertArray( values, this.ValueBufferType );
	
			this.setInterpolation( interpolation || this.DefaultInterpolation );
	
		}
	
		// Static methods
	
		Object.assign( KeyframeTrack, {
	
			// Serialization (in static context, because of constructor invocation
			// and automatic invocation of .toJSON):
	
			toJSON: function ( track ) {
	
				var trackType = track.constructor;
	
				var json;
	
				// derived classes can define a static toJSON method
				if ( trackType.toJSON !== undefined ) {
	
					json = trackType.toJSON( track );
	
				} else {
	
					// by default, we assume the data can be serialized as-is
					json = {
	
						'name': track.name,
						'times': AnimationUtils.convertArray( track.times, Array ),
						'values': AnimationUtils.convertArray( track.values, Array )
	
					};
	
					var interpolation = track.getInterpolation();
	
					if ( interpolation !== track.DefaultInterpolation ) {
	
						json.interpolation = interpolation;
	
					}
	
				}
	
				json.type = track.ValueTypeName; // mandatory
	
				return json;
	
			}
	
		} );
	
		Object.assign( KeyframeTrack.prototype, {
	
			constructor: KeyframeTrack,
	
			TimeBufferType: Float32Array,
	
			ValueBufferType: Float32Array,
	
			DefaultInterpolation: InterpolateLinear,
	
			InterpolantFactoryMethodDiscrete: function ( result ) {
	
				return new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );
	
			},
	
			InterpolantFactoryMethodLinear: function ( result ) {
	
				return new LinearInterpolant( this.times, this.values, this.getValueSize(), result );
	
			},
	
			InterpolantFactoryMethodSmooth: function ( result ) {
	
				return new CubicInterpolant( this.times, this.values, this.getValueSize(), result );
	
			},
	
			setInterpolation: function ( interpolation ) {
	
				var factoryMethod;
	
				switch ( interpolation ) {
	
					case InterpolateDiscrete:
	
						factoryMethod = this.InterpolantFactoryMethodDiscrete;
	
						break;
	
					case InterpolateLinear:
	
						factoryMethod = this.InterpolantFactoryMethodLinear;
	
						break;
	
					case InterpolateSmooth:
	
						factoryMethod = this.InterpolantFactoryMethodSmooth;
	
						break;
	
				}
	
				if ( factoryMethod === undefined ) {
	
					var message = "unsupported interpolation for " +
						this.ValueTypeName + " keyframe track named " + this.name;
	
					if ( this.createInterpolant === undefined ) {
	
						// fall back to default, unless the default itself is messed up
						if ( interpolation !== this.DefaultInterpolation ) {
	
							this.setInterpolation( this.DefaultInterpolation );
	
						} else {
	
							throw new Error( message ); // fatal, in this case
	
						}
	
					}
	
					console.warn( 'THREE.KeyframeTrack:', message );
					return this;
	
				}
	
				this.createInterpolant = factoryMethod;
	
				return this;
	
			},
	
			getInterpolation: function () {
	
				switch ( this.createInterpolant ) {
	
					case this.InterpolantFactoryMethodDiscrete:
	
						return InterpolateDiscrete;
	
					case this.InterpolantFactoryMethodLinear:
	
						return InterpolateLinear;
	
					case this.InterpolantFactoryMethodSmooth:
	
						return InterpolateSmooth;
	
				}
	
			},
	
			getValueSize: function () {
	
				return this.values.length / this.times.length;
	
			},
	
			// move all keyframes either forwards or backwards in time
			shift: function ( timeOffset ) {
	
				if ( timeOffset !== 0.0 ) {
	
					var times = this.times;
	
					for ( var i = 0, n = times.length; i !== n; ++ i ) {
	
						times[ i ] += timeOffset;
	
					}
	
				}
	
				return this;
	
			},
	
			// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
			scale: function ( timeScale ) {
	
				if ( timeScale !== 1.0 ) {
	
					var times = this.times;
	
					for ( var i = 0, n = times.length; i !== n; ++ i ) {
	
						times[ i ] *= timeScale;
	
					}
	
				}
	
				return this;
	
			},
	
			// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
			// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
			trim: function ( startTime, endTime ) {
	
				var times = this.times,
					nKeys = times.length,
					from = 0,
					to = nKeys - 1;
	
				while ( from !== nKeys && times[ from ] < startTime ) {
	
					++ from;
	
				}
	
				while ( to !== - 1 && times[ to ] > endTime ) {
	
					-- to;
	
				}
	
				++ to; // inclusive -> exclusive bound
	
				if ( from !== 0 || to !== nKeys ) {
	
					// empty tracks are forbidden, so keep at least one keyframe
					if ( from >= to ) {
	
						to = Math.max( to, 1 );
						from = to - 1;
	
					}
	
					var stride = this.getValueSize();
					this.times = AnimationUtils.arraySlice( times, from, to );
					this.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );
	
				}
	
				return this;
	
			},
	
			// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
			validate: function () {
	
				var valid = true;
	
				var valueSize = this.getValueSize();
				if ( valueSize - Math.floor( valueSize ) !== 0 ) {
	
					console.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );
					valid = false;
	
				}
	
				var times = this.times,
					values = this.values,
	
					nKeys = times.length;
	
				if ( nKeys === 0 ) {
	
					console.error( 'THREE.KeyframeTrack: Track is empty.', this );
					valid = false;
	
				}
	
				var prevTime = null;
	
				for ( var i = 0; i !== nKeys; i ++ ) {
	
					var currTime = times[ i ];
	
					if ( typeof currTime === 'number' && isNaN( currTime ) ) {
	
						console.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );
						valid = false;
						break;
	
					}
	
					if ( prevTime !== null && prevTime > currTime ) {
	
						console.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );
						valid = false;
						break;
	
					}
	
					prevTime = currTime;
	
				}
	
				if ( values !== undefined ) {
	
					if ( AnimationUtils.isTypedArray( values ) ) {
	
						for ( var i = 0, n = values.length; i !== n; ++ i ) {
	
							var value = values[ i ];
	
							if ( isNaN( value ) ) {
	
								console.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );
								valid = false;
								break;
	
							}
	
						}
	
					}
	
				}
	
				return valid;
	
			},
	
			// removes equivalent sequential keys as common in morph target sequences
			// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
			optimize: function () {
	
				// times or values may be shared with other tracks, so overwriting is unsafe
				var times = AnimationUtils.arraySlice( this.times ),
					values = AnimationUtils.arraySlice( this.values ),
					stride = this.getValueSize(),
	
					smoothInterpolation = this.getInterpolation() === InterpolateSmooth,
	
					writeIndex = 1,
					lastIndex = times.length - 1;
	
				for ( var i = 1; i < lastIndex; ++ i ) {
	
					var keep = false;
	
					var time = times[ i ];
					var timeNext = times[ i + 1 ];
	
					// remove adjacent keyframes scheduled at the same time
	
					if ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {
	
						if ( ! smoothInterpolation ) {
	
							// remove unnecessary keyframes same as their neighbors
	
							var offset = i * stride,
								offsetP = offset - stride,
								offsetN = offset + stride;
	
							for ( var j = 0; j !== stride; ++ j ) {
	
								var value = values[ offset + j ];
	
								if ( value !== values[ offsetP + j ] ||
									value !== values[ offsetN + j ] ) {
	
									keep = true;
									break;
	
								}
	
							}
	
						} else {
	
							keep = true;
	
						}
	
					}
	
					// in-place compaction
	
					if ( keep ) {
	
						if ( i !== writeIndex ) {
	
							times[ writeIndex ] = times[ i ];
	
							var readOffset = i * stride,
								writeOffset = writeIndex * stride;
	
							for ( var j = 0; j !== stride; ++ j ) {
	
								values[ writeOffset + j ] = values[ readOffset + j ];
	
							}
	
						}
	
						++ writeIndex;
	
					}
	
				}
	
				// flush last keyframe (compaction looks ahead)
	
				if ( lastIndex > 0 ) {
	
					times[ writeIndex ] = times[ lastIndex ];
	
					for ( var readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {
	
						values[ writeOffset + j ] = values[ readOffset + j ];
	
					}
	
					++ writeIndex;
	
				}
	
				if ( writeIndex !== times.length ) {
	
					this.times = AnimationUtils.arraySlice( times, 0, writeIndex );
					this.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );
	
				} else {
	
					this.times = times;
					this.values = values;
	
				}
	
				return this;
	
			},
	
			clone: function () {
	
				var times = AnimationUtils.arraySlice( this.times, 0 );
				var values = AnimationUtils.arraySlice( this.values, 0 );
	
				var TypedKeyframeTrack = this.constructor;
				var track = new TypedKeyframeTrack( this.name, times, values );
	
				// Interpolant argument to constructor is not saved, so copy the factory method directly.
				track.createInterpolant = this.createInterpolant;
	
				return track;
	
			}
	
		} );
	
		/**
		 *
		 * A Track of Boolean keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function BooleanKeyframeTrack( name, times, values ) {
	
			KeyframeTrack.call( this, name, times, values );
	
		}
	
		BooleanKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
	
			constructor: BooleanKeyframeTrack,
	
			ValueTypeName: 'bool',
			ValueBufferType: Array,
	
			DefaultInterpolation: InterpolateDiscrete,
	
			InterpolantFactoryMethodLinear: undefined,
			InterpolantFactoryMethodSmooth: undefined
	
			// Note: Actually this track could have a optimized / compressed
			// representation of a single value and a custom interpolant that
			// computes "firstValue ^ isOdd( index )".
	
		} );
	
		/**
		 *
		 * A Track of keyframe values that represent color.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function ColorKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrack.call( this, name, times, values, interpolation );
	
		}
	
		ColorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
	
			constructor: ColorKeyframeTrack,
	
			ValueTypeName: 'color'
	
			// ValueBufferType is inherited
	
			// DefaultInterpolation is inherited
	
			// Note: Very basic implementation and nothing special yet.
			// However, this is the place for color space parameterization.
	
		} );
	
		/**
		 *
		 * A Track of numeric keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function NumberKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrack.call( this, name, times, values, interpolation );
	
		}
	
		NumberKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
	
			constructor: NumberKeyframeTrack,
	
			ValueTypeName: 'number'
	
			// ValueBufferType is inherited
	
			// DefaultInterpolation is inherited
	
		} );
	
		/**
		 * Spherical linear unit quaternion interpolant.
		 *
		 * @author tschw
		 */
	
		function QuaternionLinearInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
	
			Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
	
		}
	
		QuaternionLinearInterpolant.prototype = Object.assign( Object.create( Interpolant.prototype ), {
	
			constructor: QuaternionLinearInterpolant,
	
			interpolate_: function ( i1, t0, t, t1 ) {
	
				var result = this.resultBuffer,
					values = this.sampleValues,
					stride = this.valueSize,
	
					offset = i1 * stride,
	
					alpha = ( t - t0 ) / ( t1 - t0 );
	
				for ( var end = offset + stride; offset !== end; offset += 4 ) {
	
					Quaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );
	
				}
	
				return result;
	
			}
	
		} );
	
		/**
		 *
		 * A Track of quaternion keyframe values.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function QuaternionKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrack.call( this, name, times, values, interpolation );
	
		}
	
		QuaternionKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
	
			constructor: QuaternionKeyframeTrack,
	
			ValueTypeName: 'quaternion',
	
			// ValueBufferType is inherited
	
			DefaultInterpolation: InterpolateLinear,
	
			InterpolantFactoryMethodLinear: function ( result ) {
	
				return new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );
	
			},
	
			InterpolantFactoryMethodSmooth: undefined // not yet implemented
	
		} );
	
		/**
		 *
		 * A Track that interpolates Strings
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function StringKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrack.call( this, name, times, values, interpolation );
	
		}
	
		StringKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
	
			constructor: StringKeyframeTrack,
	
			ValueTypeName: 'string',
			ValueBufferType: Array,
	
			DefaultInterpolation: InterpolateDiscrete,
	
			InterpolantFactoryMethodLinear: undefined,
	
			InterpolantFactoryMethodSmooth: undefined
	
		} );
	
		/**
		 *
		 * A Track of vectored keyframe values.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function VectorKeyframeTrack( name, times, values, interpolation ) {
	
			KeyframeTrack.call( this, name, times, values, interpolation );
	
		}
	
		VectorKeyframeTrack.prototype = Object.assign( Object.create( KeyframeTrack.prototype ), {
	
			constructor: VectorKeyframeTrack,
	
			ValueTypeName: 'vector'
	
			// ValueBufferType is inherited
	
			// DefaultInterpolation is inherited
	
		} );
	
		/**
		 *
		 * Reusable set of Tracks that represent an animation.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 */
	
		function AnimationClip( name, duration, tracks ) {
	
			this.name = name;
			this.tracks = tracks;
			this.duration = ( duration !== undefined ) ? duration : - 1;
	
			this.uuid = MathUtils.generateUUID();
	
			// this means it should figure out its duration by scanning the tracks
			if ( this.duration < 0 ) {
	
				this.resetDuration();
	
			}
	
		}
	
		function getTrackTypeForValueTypeName( typeName ) {
	
			switch ( typeName.toLowerCase() ) {
	
				case 'scalar':
				case 'double':
				case 'float':
				case 'number':
				case 'integer':
	
					return NumberKeyframeTrack;
	
				case 'vector':
				case 'vector2':
				case 'vector3':
				case 'vector4':
	
					return VectorKeyframeTrack;
	
				case 'color':
	
					return ColorKeyframeTrack;
	
				case 'quaternion':
	
					return QuaternionKeyframeTrack;
	
				case 'bool':
				case 'boolean':
	
					return BooleanKeyframeTrack;
	
				case 'string':
	
					return StringKeyframeTrack;
	
			}
	
			throw new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );
	
		}
	
		function parseKeyframeTrack( json ) {
	
			if ( json.type === undefined ) {
	
				throw new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );
	
			}
	
			var trackType = getTrackTypeForValueTypeName( json.type );
	
			if ( json.times === undefined ) {
	
				var times = [], values = [];
	
				AnimationUtils.flattenJSON( json.keys, times, values, 'value' );
	
				json.times = times;
				json.values = values;
	
			}
	
			// derived classes can define a static parse method
			if ( trackType.parse !== undefined ) {
	
				return trackType.parse( json );
	
			} else {
	
				// by default, we assume a constructor compatible with the base
				return new trackType( json.name, json.times, json.values, json.interpolation );
	
			}
	
		}
	
		Object.assign( AnimationClip, {
	
			parse: function ( json ) {
	
				var tracks = [],
					jsonTracks = json.tracks,
					frameTime = 1.0 / ( json.fps || 1.0 );
	
				for ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {
	
					tracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );
	
				}
	
				return new AnimationClip( json.name, json.duration, tracks );
	
			},
	
			toJSON: function ( clip ) {
	
				var tracks = [],
					clipTracks = clip.tracks;
	
				var json = {
	
					'name': clip.name,
					'duration': clip.duration,
					'tracks': tracks,
					'uuid': clip.uuid
	
				};
	
				for ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {
	
					tracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );
	
				}
	
				return json;
	
			},
	
			CreateFromMorphTargetSequence: function ( name, morphTargetSequence, fps, noLoop ) {
	
				var numMorphTargets = morphTargetSequence.length;
				var tracks = [];
	
				for ( var i = 0; i < numMorphTargets; i ++ ) {
	
					var times = [];
					var values = [];
	
					times.push(
						( i + numMorphTargets - 1 ) % numMorphTargets,
						i,
						( i + 1 ) % numMorphTargets );
	
					values.push( 0, 1, 0 );
	
					var order = AnimationUtils.getKeyframeOrder( times );
					times = AnimationUtils.sortedArray( times, 1, order );
					values = AnimationUtils.sortedArray( values, 1, order );
	
					// if there is a key at the first frame, duplicate it as the
					// last frame as well for perfect loop.
					if ( ! noLoop && times[ 0 ] === 0 ) {
	
						times.push( numMorphTargets );
						values.push( values[ 0 ] );
	
					}
	
					tracks.push(
						new NumberKeyframeTrack(
							'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',
							times, values
						).scale( 1.0 / fps ) );
	
				}
	
				return new AnimationClip( name, - 1, tracks );
	
			},
	
			findByName: function ( objectOrClipArray, name ) {
	
				var clipArray = objectOrClipArray;
	
				if ( ! Array.isArray( objectOrClipArray ) ) {
	
					var o = objectOrClipArray;
					clipArray = o.geometry && o.geometry.animations || o.animations;
	
				}
	
				for ( var i = 0; i < clipArray.length; i ++ ) {
	
					if ( clipArray[ i ].name === name ) {
	
						return clipArray[ i ];
	
					}
	
				}
	
				return null;
	
			},
	
			CreateClipsFromMorphTargetSequences: function ( morphTargets, fps, noLoop ) {
	
				var animationToMorphTargets = {};
	
				// tested with https://regex101.com/ on trick sequences
				// such flamingo_flyA_003, flamingo_run1_003, crdeath0059
				var pattern = /^([\w-]*?)([\d]+)$/;
	
				// sort morph target names into animation groups based
				// patterns like Walk_001, Walk_002, Run_001, Run_002
				for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {
	
					var morphTarget = morphTargets[ i ];
					var parts = morphTarget.name.match( pattern );
	
					if ( parts && parts.length > 1 ) {
	
						var name = parts[ 1 ];
	
						var animationMorphTargets = animationToMorphTargets[ name ];
						if ( ! animationMorphTargets ) {
	
							animationToMorphTargets[ name ] = animationMorphTargets = [];
	
						}
	
						animationMorphTargets.push( morphTarget );
	
					}
	
				}
	
				var clips = [];
	
				for ( var name in animationToMorphTargets ) {
	
					clips.push( AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );
	
				}
	
				return clips;
	
			},
	
			// parse the animation.hierarchy format
			parseAnimation: function ( animation, bones ) {
	
				if ( ! animation ) {
	
					console.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );
					return null;
	
				}
	
				var addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {
	
					// only return track if there are actually keys.
					if ( animationKeys.length !== 0 ) {
	
						var times = [];
						var values = [];
	
						AnimationUtils.flattenJSON( animationKeys, times, values, propertyName );
	
						// empty keys are filtered out, so check again
						if ( times.length !== 0 ) {
	
							destTracks.push( new trackType( trackName, times, values ) );
	
						}
	
					}
	
				};
	
				var tracks = [];
	
				var clipName = animation.name || 'default';
				// automatic length determination in AnimationClip.
				var duration = animation.length || - 1;
				var fps = animation.fps || 30;
	
				var hierarchyTracks = animation.hierarchy || [];
	
				for ( var h = 0; h < hierarchyTracks.length; h ++ ) {
	
					var animationKeys = hierarchyTracks[ h ].keys;
	
					// skip empty tracks
					if ( ! animationKeys || animationKeys.length === 0 ) { continue; }
	
					// process morph targets
					if ( animationKeys[ 0 ].morphTargets ) {
	
						// figure out all morph targets used in this track
						var morphTargetNames = {};
	
						for ( var k = 0; k < animationKeys.length; k ++ ) {
	
							if ( animationKeys[ k ].morphTargets ) {
	
								for ( var m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {
	
									morphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;
	
								}
	
							}
	
						}
	
						// create a track for each morph target with all zero
						// morphTargetInfluences except for the keys in which
						// the morphTarget is named.
						for ( var morphTargetName in morphTargetNames ) {
	
							var times = [];
							var values = [];
	
							for ( var m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {
	
								var animationKey = animationKeys[ k ];
	
								times.push( animationKey.time );
								values.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );
	
							}
	
							tracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );
	
						}
	
						duration = morphTargetNames.length * ( fps || 1.0 );
	
					} else {
	
						// ...assume skeletal animation
	
						var boneName = '.bones[' + bones[ h ].name + ']';
	
						addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.position',
							animationKeys, 'pos', tracks );
	
						addNonemptyTrack(
							QuaternionKeyframeTrack, boneName + '.quaternion',
							animationKeys, 'rot', tracks );
	
						addNonemptyTrack(
							VectorKeyframeTrack, boneName + '.scale',
							animationKeys, 'scl', tracks );
	
					}
	
				}
	
				if ( tracks.length === 0 ) {
	
					return null;
	
				}
	
				var clip = new AnimationClip( clipName, duration, tracks );
	
				return clip;
	
			}
	
		} );
	
		Object.assign( AnimationClip.prototype, {
	
			resetDuration: function () {
	
				var tracks = this.tracks, duration = 0;
	
				for ( var i = 0, n = tracks.length; i !== n; ++ i ) {
	
					var track = this.tracks[ i ];
	
					duration = Math.max( duration, track.times[ track.times.length - 1 ] );
	
				}
	
				this.duration = duration;
	
				return this;
	
			},
	
			trim: function () {
	
				for ( var i = 0; i < this.tracks.length; i ++ ) {
	
					this.tracks[ i ].trim( 0, this.duration );
	
				}
	
				return this;
	
			},
	
			validate: function () {
	
				var valid = true;
	
				for ( var i = 0; i < this.tracks.length; i ++ ) {
	
					valid = valid && this.tracks[ i ].validate();
	
				}
	
				return valid;
	
			},
	
			optimize: function () {
	
				for ( var i = 0; i < this.tracks.length; i ++ ) {
	
					this.tracks[ i ].optimize();
	
				}
	
				return this;
	
			},
	
			clone: function () {
	
				var tracks = [];
	
				for ( var i = 0; i < this.tracks.length; i ++ ) {
	
					tracks.push( this.tracks[ i ].clone() );
	
				}
	
				return new AnimationClip( this.name, this.duration, tracks );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var Cache = {
	
			enabled: false,
	
			files: {},
	
			add: function ( key, file ) {
	
				if ( this.enabled === false ) { return; }
	
				// console.log( 'THREE.Cache', 'Adding key:', key );
	
				this.files[ key ] = file;
	
			},
	
			get: function ( key ) {
	
				if ( this.enabled === false ) { return; }
	
				// console.log( 'THREE.Cache', 'Checking key:', key );
	
				return this.files[ key ];
	
			},
	
			remove: function ( key ) {
	
				delete this.files[ key ];
	
			},
	
			clear: function () {
	
				this.files = {};
	
			}
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LoadingManager( onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var isLoading = false;
			var itemsLoaded = 0;
			var itemsTotal = 0;
			var urlModifier = undefined;
			var handlers = [];
	
			// Refer to #5689 for the reason why we don't set .onStart
			// in the constructor
	
			this.onStart = undefined;
			this.onLoad = onLoad;
			this.onProgress = onProgress;
			this.onError = onError;
	
			this.itemStart = function ( url ) {
	
				itemsTotal ++;
	
				if ( isLoading === false ) {
	
					if ( scope.onStart !== undefined ) {
	
						scope.onStart( url, itemsLoaded, itemsTotal );
	
					}
	
				}
	
				isLoading = true;
	
			};
	
			this.itemEnd = function ( url ) {
	
				itemsLoaded ++;
	
				if ( scope.onProgress !== undefined ) {
	
					scope.onProgress( url, itemsLoaded, itemsTotal );
	
				}
	
				if ( itemsLoaded === itemsTotal ) {
	
					isLoading = false;
	
					if ( scope.onLoad !== undefined ) {
	
						scope.onLoad();
	
					}
	
				}
	
			};
	
			this.itemError = function ( url ) {
	
				if ( scope.onError !== undefined ) {
	
					scope.onError( url );
	
				}
	
			};
	
			this.resolveURL = function ( url ) {
	
				if ( urlModifier ) {
	
					return urlModifier( url );
	
				}
	
				return url;
	
			};
	
			this.setURLModifier = function ( transform ) {
	
				urlModifier = transform;
	
				return this;
	
			};
	
			this.addHandler = function ( regex, loader ) {
	
				handlers.push( regex, loader );
	
				return this;
	
			};
	
			this.removeHandler = function ( regex ) {
	
				var index = handlers.indexOf( regex );
	
				if ( index !== - 1 ) {
	
					handlers.splice( index, 2 );
	
				}
	
				return this;
	
			};
	
			this.getHandler = function ( file ) {
	
				for ( var i = 0, l = handlers.length; i < l; i += 2 ) {
	
					var regex = handlers[ i ];
					var loader = handlers[ i + 1 ];
	
					if ( regex.global ) { regex.lastIndex = 0; } // see #17920
	
					if ( regex.test( file ) ) {
	
						return loader;
	
					}
	
				}
	
				return null;
	
			};
	
		}
	
		var DefaultLoadingManager = new LoadingManager();
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Loader( manager ) {
	
			this.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;
	
			this.crossOrigin = 'anonymous';
			this.path = '';
			this.resourcePath = '';
	
		}
	
		Object.assign( Loader.prototype, {
	
			load: function ( /* url, onLoad, onProgress, onError */ ) {},
	
			parse: function ( /* data */ ) {},
	
			setCrossOrigin: function ( crossOrigin ) {
	
				this.crossOrigin = crossOrigin;
				return this;
	
			},
	
			setPath: function ( path ) {
	
				this.path = path;
				return this;
	
			},
	
			setResourcePath: function ( resourcePath ) {
	
				this.resourcePath = resourcePath;
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var loading = {};
	
		function FileLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		FileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: FileLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				if ( url === undefined ) { url = ''; }
	
				if ( this.path !== undefined ) { url = this.path + url; }
	
				url = this.manager.resolveURL( url );
	
				var scope = this;
	
				var cached = Cache.get( url );
	
				if ( cached !== undefined ) {
	
					scope.manager.itemStart( url );
	
					setTimeout( function () {
	
						if ( onLoad ) { onLoad( cached ); }
	
						scope.manager.itemEnd( url );
	
					}, 0 );
	
					return cached;
	
				}
	
				// Check if request is duplicate
	
				if ( loading[ url ] !== undefined ) {
	
					loading[ url ].push( {
	
						onLoad: onLoad,
						onProgress: onProgress,
						onError: onError
	
					} );
	
					return;
	
				}
	
				// Check for data: URI
				var dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;
				var dataUriRegexResult = url.match( dataUriRegex );
	
				// Safari can not handle Data URIs through XMLHttpRequest so process manually
				if ( dataUriRegexResult ) {
	
					var mimeType = dataUriRegexResult[ 1 ];
					var isBase64 = !! dataUriRegexResult[ 2 ];
					var data = dataUriRegexResult[ 3 ];
	
					data = decodeURIComponent( data );
	
					if ( isBase64 ) { data = atob( data ); }
	
					try {
	
						var response;
						var responseType = ( this.responseType || '' ).toLowerCase();
	
						switch ( responseType ) {
	
							case 'arraybuffer':
							case 'blob':
	
								var view = new Uint8Array( data.length );
	
								for ( var i = 0; i < data.length; i ++ ) {
	
									view[ i ] = data.charCodeAt( i );
	
								}
	
								if ( responseType === 'blob' ) {
	
									response = new Blob( [ view.buffer ], { type: mimeType } );
	
								} else {
	
									response = view.buffer;
	
								}
	
								break;
	
							case 'document':
	
								var parser = new DOMParser();
								response = parser.parseFromString( data, mimeType );
	
								break;
	
							case 'json':
	
								response = JSON.parse( data );
	
								break;
	
							default: // 'text' or other
	
								response = data;
	
								break;
	
						}
	
						// Wait for next browser tick like standard XMLHttpRequest event dispatching does
						setTimeout( function () {
	
							if ( onLoad ) { onLoad( response ); }
	
							scope.manager.itemEnd( url );
	
						}, 0 );
	
					} catch ( error ) {
	
						// Wait for next browser tick like standard XMLHttpRequest event dispatching does
						setTimeout( function () {
	
							if ( onError ) { onError( error ); }
	
							scope.manager.itemError( url );
							scope.manager.itemEnd( url );
	
						}, 0 );
	
					}
	
				} else {
	
					// Initialise array for duplicate requests
	
					loading[ url ] = [];
	
					loading[ url ].push( {
	
						onLoad: onLoad,
						onProgress: onProgress,
						onError: onError
	
					} );
	
					var request = new XMLHttpRequest();
	
					request.open( 'GET', url, true );
	
					request.addEventListener( 'load', function ( event ) {
	
						var response = this.response;
	
						var callbacks = loading[ url ];
	
						delete loading[ url ];
	
						if ( this.status === 200 || this.status === 0 ) {
	
							// Some browsers return HTTP Status 0 when using non-http protocol
							// e.g. 'file://' or 'data://'. Handle as success.
	
							if ( this.status === 0 ) { console.warn( 'THREE.FileLoader: HTTP Status 0 received.' ); }
	
							// Add to cache only on HTTP success, so that we do not cache
							// error response bodies as proper responses to requests.
							Cache.add( url, response );
	
							for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
								var callback = callbacks[ i ];
								if ( callback.onLoad ) { callback.onLoad( response ); }
	
							}
	
							scope.manager.itemEnd( url );
	
						} else {
	
							for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
								var callback = callbacks[ i ];
								if ( callback.onError ) { callback.onError( event ); }
	
							}
	
							scope.manager.itemError( url );
							scope.manager.itemEnd( url );
	
						}
	
					}, false );
	
					request.addEventListener( 'progress', function ( event ) {
	
						var callbacks = loading[ url ];
	
						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
							var callback = callbacks[ i ];
							if ( callback.onProgress ) { callback.onProgress( event ); }
	
						}
	
					}, false );
	
					request.addEventListener( 'error', function ( event ) {
	
						var callbacks = loading[ url ];
	
						delete loading[ url ];
	
						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
							var callback = callbacks[ i ];
							if ( callback.onError ) { callback.onError( event ); }
	
						}
	
						scope.manager.itemError( url );
						scope.manager.itemEnd( url );
	
					}, false );
	
					request.addEventListener( 'abort', function ( event ) {
	
						var callbacks = loading[ url ];
	
						delete loading[ url ];
	
						for ( var i = 0, il = callbacks.length; i < il; i ++ ) {
	
							var callback = callbacks[ i ];
							if ( callback.onError ) { callback.onError( event ); }
	
						}
	
						scope.manager.itemError( url );
						scope.manager.itemEnd( url );
	
					}, false );
	
					if ( this.responseType !== undefined ) { request.responseType = this.responseType; }
					if ( this.withCredentials !== undefined ) { request.withCredentials = this.withCredentials; }
	
					if ( request.overrideMimeType ) { request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' ); }
	
					for ( var header in this.requestHeader ) {
	
						request.setRequestHeader( header, this.requestHeader[ header ] );
	
					}
	
					request.send( null );
	
				}
	
				scope.manager.itemStart( url );
	
				return request;
	
			},
	
			setResponseType: function ( value ) {
	
				this.responseType = value;
				return this;
	
			},
	
			setWithCredentials: function ( value ) {
	
				this.withCredentials = value;
				return this;
	
			},
	
			setMimeType: function ( value ) {
	
				this.mimeType = value;
				return this;
	
			},
	
			setRequestHeader: function ( value ) {
	
				this.requestHeader = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io/
		 */
	
		function AnimationLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		AnimationLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: AnimationLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new FileLoader( scope.manager );
				loader.setPath( scope.path );
				loader.load( url, function ( text ) {
	
					onLoad( scope.parse( JSON.parse( text ) ) );
	
				}, onProgress, onError );
	
			},
	
			parse: function ( json ) {
	
				var animations = [];
	
				for ( var i = 0; i < json.length; i ++ ) {
	
					var clip = AnimationClip.parse( json[ i ] );
	
					animations.push( clip );
	
				}
	
				return animations;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 *
		 * Abstract Base class to block based textures loader (dds, pvr, ...)
		 *
		 * Sub classes have to implement the parse() method which will be used in load().
		 */
	
		function CompressedTextureLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		CompressedTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: CompressedTextureLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var images = [];
	
				var texture = new CompressedTexture();
				texture.image = images;
	
				var loader = new FileLoader( this.manager );
				loader.setPath( this.path );
				loader.setResponseType( 'arraybuffer' );
	
				function loadTexture( i ) {
	
					loader.load( url[ i ], function ( buffer ) {
	
						var texDatas = scope.parse( buffer, true );
	
						images[ i ] = {
							width: texDatas.width,
							height: texDatas.height,
							format: texDatas.format,
							mipmaps: texDatas.mipmaps
						};
	
						loaded += 1;
	
						if ( loaded === 6 ) {
	
							if ( texDatas.mipmapCount === 1 )
								{ texture.minFilter = LinearFilter; }
	
							texture.format = texDatas.format;
							texture.needsUpdate = true;
	
							if ( onLoad ) { onLoad( texture ); }
	
						}
	
					}, onProgress, onError );
	
				}
	
				if ( Array.isArray( url ) ) {
	
					var loaded = 0;
	
					for ( var i = 0, il = url.length; i < il; ++ i ) {
	
						loadTexture( i );
	
					}
	
				} else {
	
					// compressed cubemap texture stored in a single DDS file
	
					loader.load( url, function ( buffer ) {
	
						var texDatas = scope.parse( buffer, true );
	
						if ( texDatas.isCubemap ) {
	
							var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
	
							for ( var f = 0; f < faces; f ++ ) {
	
								images[ f ] = { mipmaps: [] };
	
								for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {
	
									images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
									images[ f ].format = texDatas.format;
									images[ f ].width = texDatas.width;
									images[ f ].height = texDatas.height;
	
								}
	
							}
	
						} else {
	
							texture.image.width = texDatas.width;
							texture.image.height = texDatas.height;
							texture.mipmaps = texDatas.mipmaps;
	
						}
	
						if ( texDatas.mipmapCount === 1 ) {
	
							texture.minFilter = LinearFilter;
	
						}
	
						texture.format = texDatas.format;
						texture.needsUpdate = true;
	
						if ( onLoad ) { onLoad( texture ); }
	
					}, onProgress, onError );
	
				}
	
				return texture;
	
			}
	
		} );
	
		/**
		 * @author Nikos M. / https://github.com/foo123/
		 *
		 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
		 *
		 * Sub classes have to implement the parse() method which will be used in load().
		 */
	
		function DataTextureLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		DataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: DataTextureLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var texture = new DataTexture();
	
				var loader = new FileLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );
				loader.setPath( this.path );
				loader.load( url, function ( buffer ) {
	
					var texData = scope.parse( buffer );
	
					if ( ! texData ) { return; }
	
					if ( texData.image !== undefined ) {
	
						texture.image = texData.image;
	
					} else if ( texData.data !== undefined ) {
	
						texture.image.width = texData.width;
						texture.image.height = texData.height;
						texture.image.data = texData.data;
	
					}
	
					texture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;
					texture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;
	
					texture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;
					texture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;
	
					texture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;
	
					if ( texData.format !== undefined ) {
	
						texture.format = texData.format;
	
					}
					if ( texData.type !== undefined ) {
	
						texture.type = texData.type;
	
					}
	
					if ( texData.mipmaps !== undefined ) {
	
						texture.mipmaps = texData.mipmaps;
						texture.minFilter = LinearMipmapLinearFilter; // presumably...
	
					}
	
					if ( texData.mipmapCount === 1 ) {
	
						texture.minFilter = LinearFilter;
	
					}
	
					texture.needsUpdate = true;
	
					if ( onLoad ) { onLoad( texture, texData ); }
	
				}, onProgress, onError );
	
	
				return texture;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function ImageLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		ImageLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: ImageLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				if ( this.path !== undefined ) { url = this.path + url; }
	
				url = this.manager.resolveURL( url );
	
				var scope = this;
	
				var cached = Cache.get( url );
	
				if ( cached !== undefined ) {
	
					scope.manager.itemStart( url );
	
					setTimeout( function () {
	
						if ( onLoad ) { onLoad( cached ); }
	
						scope.manager.itemEnd( url );
	
					}, 0 );
	
					return cached;
	
				}
	
				var image = document.createElementNS( 'http://www.w3.org/1999/xhtml', 'img' );
	
				function onImageLoad() {
	
					image.removeEventListener( 'load', onImageLoad, false );
					image.removeEventListener( 'error', onImageError, false );
	
					Cache.add( url, this );
	
					if ( onLoad ) { onLoad( this ); }
	
					scope.manager.itemEnd( url );
	
				}
	
				function onImageError( event ) {
	
					image.removeEventListener( 'load', onImageLoad, false );
					image.removeEventListener( 'error', onImageError, false );
	
					if ( onError ) { onError( event ); }
	
					scope.manager.itemError( url );
					scope.manager.itemEnd( url );
	
				}
	
				image.addEventListener( 'load', onImageLoad, false );
				image.addEventListener( 'error', onImageError, false );
	
				if ( url.substr( 0, 5 ) !== 'data:' ) {
	
					if ( this.crossOrigin !== undefined ) { image.crossOrigin = this.crossOrigin; }
	
				}
	
				scope.manager.itemStart( url );
	
				image.src = url;
	
				return image;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
	
		function CubeTextureLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		CubeTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: CubeTextureLoader,
	
			load: function ( urls, onLoad, onProgress, onError ) {
	
				var texture = new CubeTexture();
	
				var loader = new ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setPath( this.path );
	
				var loaded = 0;
	
				function loadTexture( i ) {
	
					loader.load( urls[ i ], function ( image ) {
	
						texture.images[ i ] = image;
	
						loaded ++;
	
						if ( loaded === 6 ) {
	
							texture.needsUpdate = true;
	
							if ( onLoad ) { onLoad( texture ); }
	
						}
	
					}, undefined, onError );
	
				}
	
				for ( var i = 0; i < urls.length; ++ i ) {
	
					loadTexture( i );
	
				}
	
				return texture;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function TextureLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		TextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: TextureLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var texture = new Texture();
	
				var loader = new ImageLoader( this.manager );
				loader.setCrossOrigin( this.crossOrigin );
				loader.setPath( this.path );
	
				loader.load( url, function ( image ) {
	
					texture.image = image;
	
					// JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
					var isJPEG = url.search( /\.jpe?g($|\?)/i ) > 0 || url.search( /^data\:image\/jpeg/ ) === 0;
	
					texture.format = isJPEG ? RGBFormat : RGBAFormat;
					texture.needsUpdate = true;
	
					if ( onLoad !== undefined ) {
	
						onLoad( texture );
	
					}
	
				}, onProgress, onError );
	
				return texture;
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Extensible curve object
		 *
		 * Some common of curve methods:
		 * .getPoint( t, optionalTarget ), .getTangent( t )
		 * .getPointAt( u, optionalTarget ), .getTangentAt( u )
		 * .getPoints(), .getSpacedPoints()
		 * .getLength()
		 * .updateArcLengths()
		 *
		 * This following curves inherit from THREE.Curve:
		 *
		 * -- 2D curves --
		 * THREE.ArcCurve
		 * THREE.CubicBezierCurve
		 * THREE.EllipseCurve
		 * THREE.LineCurve
		 * THREE.QuadraticBezierCurve
		 * THREE.SplineCurve
		 *
		 * -- 3D curves --
		 * THREE.CatmullRomCurve3
		 * THREE.CubicBezierCurve3
		 * THREE.LineCurve3
		 * THREE.QuadraticBezierCurve3
		 *
		 * A series of curves can be represented as a THREE.CurvePath.
		 *
		 **/
	
		/**************************************************************
		 *	Abstract Curve base class
		 **************************************************************/
	
		function Curve() {
	
			this.type = 'Curve';
	
			this.arcLengthDivisions = 200;
	
		}
	
		Object.assign( Curve.prototype, {
	
			// Virtual base class method to overwrite and implement in subclasses
			//	- t [0 .. 1]
	
			getPoint: function ( /* t, optionalTarget */ ) {
	
				console.warn( 'THREE.Curve: .getPoint() not implemented.' );
				return null;
	
			},
	
			// Get point at relative position in curve according to arc length
			// - u [0 .. 1]
	
			getPointAt: function ( u, optionalTarget ) {
	
				var t = this.getUtoTmapping( u );
				return this.getPoint( t, optionalTarget );
	
			},
	
			// Get sequence of points using getPoint( t )
	
			getPoints: function ( divisions ) {
	
				if ( divisions === undefined ) { divisions = 5; }
	
				var points = [];
	
				for ( var d = 0; d <= divisions; d ++ ) {
	
					points.push( this.getPoint( d / divisions ) );
	
				}
	
				return points;
	
			},
	
			// Get sequence of points using getPointAt( u )
	
			getSpacedPoints: function ( divisions ) {
	
				if ( divisions === undefined ) { divisions = 5; }
	
				var points = [];
	
				for ( var d = 0; d <= divisions; d ++ ) {
	
					points.push( this.getPointAt( d / divisions ) );
	
				}
	
				return points;
	
			},
	
			// Get total curve arc length
	
			getLength: function () {
	
				var lengths = this.getLengths();
				return lengths[ lengths.length - 1 ];
	
			},
	
			// Get list of cumulative segment lengths
	
			getLengths: function ( divisions ) {
	
				if ( divisions === undefined ) { divisions = this.arcLengthDivisions; }
	
				if ( this.cacheArcLengths &&
					( this.cacheArcLengths.length === divisions + 1 ) &&
					! this.needsUpdate ) {
	
					return this.cacheArcLengths;
	
				}
	
				this.needsUpdate = false;
	
				var cache = [];
				var current, last = this.getPoint( 0 );
				var p, sum = 0;
	
				cache.push( 0 );
	
				for ( p = 1; p <= divisions; p ++ ) {
	
					current = this.getPoint( p / divisions );
					sum += current.distanceTo( last );
					cache.push( sum );
					last = current;
	
				}
	
				this.cacheArcLengths = cache;
	
				return cache; // { sums: cache, sum: sum }; Sum is in the last element.
	
			},
	
			updateArcLengths: function () {
	
				this.needsUpdate = true;
				this.getLengths();
	
			},
	
			// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
	
			getUtoTmapping: function ( u, distance ) {
	
				var arcLengths = this.getLengths();
	
				var i = 0, il = arcLengths.length;
	
				var targetArcLength; // The targeted u distance value to get
	
				if ( distance ) {
	
					targetArcLength = distance;
	
				} else {
	
					targetArcLength = u * arcLengths[ il - 1 ];
	
				}
	
				// binary search for the index with largest value smaller than target u distance
	
				var low = 0, high = il - 1, comparison;
	
				while ( low <= high ) {
	
					i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
	
					comparison = arcLengths[ i ] - targetArcLength;
	
					if ( comparison < 0 ) {
	
						low = i + 1;
	
					} else if ( comparison > 0 ) {
	
						high = i - 1;
	
					} else {
	
						high = i;
						break;
	
						// DONE
	
					}
	
				}
	
				i = high;
	
				if ( arcLengths[ i ] === targetArcLength ) {
	
					return i / ( il - 1 );
	
				}
	
				// we could get finer grain at lengths, or use simple interpolation between two points
	
				var lengthBefore = arcLengths[ i ];
				var lengthAfter = arcLengths[ i + 1 ];
	
				var segmentLength = lengthAfter - lengthBefore;
	
				// determine where we are between the 'before' and 'after' points
	
				var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
	
				// add that fractional amount to t
	
				var t = ( i + segmentFraction ) / ( il - 1 );
	
				return t;
	
			},
	
			// Returns a unit vector tangent at t
			// In case any sub curve does not implement its tangent derivation,
			// 2 points a small delta apart will be used to find its gradient
			// which seems to give a reasonable approximation
	
			getTangent: function ( t ) {
	
				var delta = 0.0001;
				var t1 = t - delta;
				var t2 = t + delta;
	
				// Capping in case of danger
	
				if ( t1 < 0 ) { t1 = 0; }
				if ( t2 > 1 ) { t2 = 1; }
	
				var pt1 = this.getPoint( t1 );
				var pt2 = this.getPoint( t2 );
	
				var vec = pt2.clone().sub( pt1 );
				return vec.normalize();
	
			},
	
			getTangentAt: function ( u ) {
	
				var t = this.getUtoTmapping( u );
				return this.getTangent( t );
	
			},
	
			computeFrenetFrames: function ( segments, closed ) {
	
				// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf
	
				var normal = new Vector3();
	
				var tangents = [];
				var normals = [];
				var binormals = [];
	
				var vec = new Vector3();
				var mat = new Matrix4();
	
				var i, u, theta;
	
				// compute the tangent vectors for each segment on the curve
	
				for ( i = 0; i <= segments; i ++ ) {
	
					u = i / segments;
	
					tangents[ i ] = this.getTangentAt( u );
					tangents[ i ].normalize();
	
				}
	
				// select an initial normal vector perpendicular to the first tangent vector,
				// and in the direction of the minimum tangent xyz component
	
				normals[ 0 ] = new Vector3();
				binormals[ 0 ] = new Vector3();
				var min = Number.MAX_VALUE;
				var tx = Math.abs( tangents[ 0 ].x );
				var ty = Math.abs( tangents[ 0 ].y );
				var tz = Math.abs( tangents[ 0 ].z );
	
				if ( tx <= min ) {
	
					min = tx;
					normal.set( 1, 0, 0 );
	
				}
	
				if ( ty <= min ) {
	
					min = ty;
					normal.set( 0, 1, 0 );
	
				}
	
				if ( tz <= min ) {
	
					normal.set( 0, 0, 1 );
	
				}
	
				vec.crossVectors( tangents[ 0 ], normal ).normalize();
	
				normals[ 0 ].crossVectors( tangents[ 0 ], vec );
				binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
	
	
				// compute the slowly-varying normal and binormal vectors for each segment on the curve
	
				for ( i = 1; i <= segments; i ++ ) {
	
					normals[ i ] = normals[ i - 1 ].clone();
	
					binormals[ i ] = binormals[ i - 1 ].clone();
	
					vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );
	
					if ( vec.length() > Number.EPSILON ) {
	
						vec.normalize();
	
						theta = Math.acos( MathUtils.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors
	
						normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
	
					}
	
					binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
	
				}
	
				// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
	
				if ( closed === true ) {
	
					theta = Math.acos( MathUtils.clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );
					theta /= segments;
	
					if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {
	
						theta = - theta;
	
					}
	
					for ( i = 1; i <= segments; i ++ ) {
	
						// twist a little...
						normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
						binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
	
					}
	
				}
	
				return {
					tangents: tangents,
					normals: normals,
					binormals: binormals
				};
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( source ) {
	
				this.arcLengthDivisions = source.arcLengthDivisions;
	
				return this;
	
			},
	
			toJSON: function () {
	
				var data = {
					metadata: {
						version: 4.5,
						type: 'Curve',
						generator: 'Curve.toJSON'
					}
				};
	
				data.arcLengthDivisions = this.arcLengthDivisions;
				data.type = this.type;
	
				return data;
	
			},
	
			fromJSON: function ( json ) {
	
				this.arcLengthDivisions = json.arcLengthDivisions;
	
				return this;
	
			}
	
		} );
	
		function EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
			Curve.call( this );
	
			this.type = 'EllipseCurve';
	
			this.aX = aX || 0;
			this.aY = aY || 0;
	
			this.xRadius = xRadius || 1;
			this.yRadius = yRadius || 1;
	
			this.aStartAngle = aStartAngle || 0;
			this.aEndAngle = aEndAngle || 2 * Math.PI;
	
			this.aClockwise = aClockwise || false;
	
			this.aRotation = aRotation || 0;
	
		}
	
		EllipseCurve.prototype = Object.create( Curve.prototype );
		EllipseCurve.prototype.constructor = EllipseCurve;
	
		EllipseCurve.prototype.isEllipseCurve = true;
	
		EllipseCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			var twoPi = Math.PI * 2;
			var deltaAngle = this.aEndAngle - this.aStartAngle;
			var samePoints = Math.abs( deltaAngle ) < Number.EPSILON;
	
			// ensures that deltaAngle is 0 .. 2 PI
			while ( deltaAngle < 0 ) { deltaAngle += twoPi; }
			while ( deltaAngle > twoPi ) { deltaAngle -= twoPi; }
	
			if ( deltaAngle < Number.EPSILON ) {
	
				if ( samePoints ) {
	
					deltaAngle = 0;
	
				} else {
	
					deltaAngle = twoPi;
	
				}
	
			}
	
			if ( this.aClockwise === true && ! samePoints ) {
	
				if ( deltaAngle === twoPi ) {
	
					deltaAngle = - twoPi;
	
				} else {
	
					deltaAngle = deltaAngle - twoPi;
	
				}
	
			}
	
			var angle = this.aStartAngle + t * deltaAngle;
			var x = this.aX + this.xRadius * Math.cos( angle );
			var y = this.aY + this.yRadius * Math.sin( angle );
	
			if ( this.aRotation !== 0 ) {
	
				var cos = Math.cos( this.aRotation );
				var sin = Math.sin( this.aRotation );
	
				var tx = x - this.aX;
				var ty = y - this.aY;
	
				// Rotate the point about the center of the ellipse.
				x = tx * cos - ty * sin + this.aX;
				y = tx * sin + ty * cos + this.aY;
	
			}
	
			return point.set( x, y );
	
		};
	
		EllipseCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.aX = source.aX;
			this.aY = source.aY;
	
			this.xRadius = source.xRadius;
			this.yRadius = source.yRadius;
	
			this.aStartAngle = source.aStartAngle;
			this.aEndAngle = source.aEndAngle;
	
			this.aClockwise = source.aClockwise;
	
			this.aRotation = source.aRotation;
	
			return this;
	
		};
	
	
		EllipseCurve.prototype.toJSON = function () {
	
			var data = Curve.prototype.toJSON.call( this );
	
			data.aX = this.aX;
			data.aY = this.aY;
	
			data.xRadius = this.xRadius;
			data.yRadius = this.yRadius;
	
			data.aStartAngle = this.aStartAngle;
			data.aEndAngle = this.aEndAngle;
	
			data.aClockwise = this.aClockwise;
	
			data.aRotation = this.aRotation;
	
			return data;
	
		};
	
		EllipseCurve.prototype.fromJSON = function ( json ) {
	
			Curve.prototype.fromJSON.call( this, json );
	
			this.aX = json.aX;
			this.aY = json.aY;
	
			this.xRadius = json.xRadius;
			this.yRadius = json.yRadius;
	
			this.aStartAngle = json.aStartAngle;
			this.aEndAngle = json.aEndAngle;
	
			this.aClockwise = json.aClockwise;
	
			this.aRotation = json.aRotation;
	
			return this;
	
		};
	
		function ArcCurve( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
			EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
	
			this.type = 'ArcCurve';
	
		}
	
		ArcCurve.prototype = Object.create( EllipseCurve.prototype );
		ArcCurve.prototype.constructor = ArcCurve;
	
		ArcCurve.prototype.isArcCurve = true;
	
		/**
		 * @author zz85 https://github.com/zz85
		 *
		 * Centripetal CatmullRom Curve - which is useful for avoiding
		 * cusps and self-intersections in non-uniform catmull rom curves.
		 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
		 *
		 * curve.type accepts centripetal(default), chordal and catmullrom
		 * curve.tension is used for catmullrom which defaults to 0.5
		 */
	
	
		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM
	
		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/
	
		function CubicPoly() {
	
			var c0 = 0, c1 = 0, c2 = 0, c3 = 0;
	
			/*
			 * Compute coefficients for a cubic polynomial
			 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
			 * such that
			 *   p(0) = x0, p(1) = x1
			 *  and
			 *   p'(0) = t0, p'(1) = t1.
			 */
			function init( x0, x1, t0, t1 ) {
	
				c0 = x0;
				c1 = t0;
				c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
				c3 = 2 * x0 - 2 * x1 + t0 + t1;
	
			}
	
			return {
	
				initCatmullRom: function ( x0, x1, x2, x3, tension ) {
	
					init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );
	
				},
	
				initNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {
	
					// compute tangents when parameterized in [t1,t2]
					var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
					var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;
	
					// rescale tangents for parametrization in [0,1]
					t1 *= dt1;
					t2 *= dt1;
	
					init( x1, x2, t1, t2 );
	
				},
	
				calc: function ( t ) {
	
					var t2 = t * t;
					var t3 = t2 * t;
					return c0 + c1 * t + c2 * t2 + c3 * t3;
	
				}
	
			};
	
		}
	
		//
	
		var tmp = new Vector3();
		var px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();
	
		function CatmullRomCurve3( points, closed, curveType, tension ) {
	
			Curve.call( this );
	
			this.type = 'CatmullRomCurve3';
	
			this.points = points || [];
			this.closed = closed || false;
			this.curveType = curveType || 'centripetal';
			this.tension = tension || 0.5;
	
		}
	
		CatmullRomCurve3.prototype = Object.create( Curve.prototype );
		CatmullRomCurve3.prototype.constructor = CatmullRomCurve3;
	
		CatmullRomCurve3.prototype.isCatmullRomCurve3 = true;
	
		CatmullRomCurve3.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector3();
	
			var points = this.points;
			var l = points.length;
	
			var p = ( l - ( this.closed ? 0 : 1 ) ) * t;
			var intPoint = Math.floor( p );
			var weight = p - intPoint;
	
			if ( this.closed ) {
	
				intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;
	
			} else if ( weight === 0 && intPoint === l - 1 ) {
	
				intPoint = l - 2;
				weight = 1;
	
			}
	
			var p0, p1, p2, p3; // 4 points
	
			if ( this.closed || intPoint > 0 ) {
	
				p0 = points[ ( intPoint - 1 ) % l ];
	
			} else {
	
				// extrapolate first point
				tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
				p0 = tmp;
	
			}
	
			p1 = points[ intPoint % l ];
			p2 = points[ ( intPoint + 1 ) % l ];
	
			if ( this.closed || intPoint + 2 < l ) {
	
				p3 = points[ ( intPoint + 2 ) % l ];
	
			} else {
	
				// extrapolate last point
				tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );
				p3 = tmp;
	
			}
	
			if ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {
	
				// init Centripetal / Chordal Catmull-Rom
				var pow = this.curveType === 'chordal' ? 0.5 : 0.25;
				var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
				var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
				var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );
	
				// safety check for repeated points
				if ( dt1 < 1e-4 ) { dt1 = 1.0; }
				if ( dt0 < 1e-4 ) { dt0 = dt1; }
				if ( dt2 < 1e-4 ) { dt2 = dt1; }
	
				px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
				py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
				pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );
	
			} else if ( this.curveType === 'catmullrom' ) {
	
				px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );
				py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );
				pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );
	
			}
	
			point.set(
				px.calc( weight ),
				py.calc( weight ),
				pz.calc( weight )
			);
	
			return point;
	
		};
	
		CatmullRomCurve3.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.points = [];
	
			for ( var i = 0, l = source.points.length; i < l; i ++ ) {
	
				var point = source.points[ i ];
	
				this.points.push( point.clone() );
	
			}
	
			this.closed = source.closed;
			this.curveType = source.curveType;
			this.tension = source.tension;
	
			return this;
	
		};
	
		CatmullRomCurve3.prototype.toJSON = function () {
	
			var data = Curve.prototype.toJSON.call( this );
	
			data.points = [];
	
			for ( var i = 0, l = this.points.length; i < l; i ++ ) {
	
				var point = this.points[ i ];
				data.points.push( point.toArray() );
	
			}
	
			data.closed = this.closed;
			data.curveType = this.curveType;
			data.tension = this.tension;
	
			return data;
	
		};
	
		CatmullRomCurve3.prototype.fromJSON = function ( json ) {
	
			Curve.prototype.fromJSON.call( this, json );
	
			this.points = [];
	
			for ( var i = 0, l = json.points.length; i < l; i ++ ) {
	
				var point = json.points[ i ];
				this.points.push( new Vector3().fromArray( point ) );
	
			}
	
			this.closed = json.closed;
			this.curveType = json.curveType;
			this.tension = json.tension;
	
			return this;
	
		};
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 * Bezier Curves formulas obtained from
		 * http://en.wikipedia.org/wiki/Bézier_curve
		 */
	
		function CatmullRom( t, p0, p1, p2, p3 ) {
	
			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
	
		}
	
		//
	
		function QuadraticBezierP0( t, p ) {
	
			var k = 1 - t;
			return k * k * p;
	
		}
	
		function QuadraticBezierP1( t, p ) {
	
			return 2 * ( 1 - t ) * t * p;
	
		}
	
		function QuadraticBezierP2( t, p ) {
	
			return t * t * p;
	
		}
	
		function QuadraticBezier( t, p0, p1, p2 ) {
	
			return QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +
				QuadraticBezierP2( t, p2 );
	
		}
	
		//
	
		function CubicBezierP0( t, p ) {
	
			var k = 1 - t;
			return k * k * k * p;
	
		}
	
		function CubicBezierP1( t, p ) {
	
			var k = 1 - t;
			return 3 * k * k * t * p;
	
		}
	
		function CubicBezierP2( t, p ) {
	
			return 3 * ( 1 - t ) * t * t * p;
	
		}
	
		function CubicBezierP3( t, p ) {
	
			return t * t * t * p;
	
		}
	
		function CubicBezier( t, p0, p1, p2, p3 ) {
	
			return CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +
				CubicBezierP3( t, p3 );
	
		}
	
		function CubicBezierCurve( v0, v1, v2, v3 ) {
	
			Curve.call( this );
	
			this.type = 'CubicBezierCurve';
	
			this.v0 = v0 || new Vector2();
			this.v1 = v1 || new Vector2();
			this.v2 = v2 || new Vector2();
			this.v3 = v3 || new Vector2();
	
		}
	
		CubicBezierCurve.prototype = Object.create( Curve.prototype );
		CubicBezierCurve.prototype.constructor = CubicBezierCurve;
	
		CubicBezierCurve.prototype.isCubicBezierCurve = true;
	
		CubicBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
	
			point.set(
				CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
				CubicBezier( t, v0.y, v1.y, v2.y, v3.y )
			);
	
			return point;
	
		};
	
		CubicBezierCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v0.copy( source.v0 );
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
			this.v3.copy( source.v3 );
	
			return this;
	
		};
	
		CubicBezierCurve.prototype.toJSON = function () {
	
			var data = Curve.prototype.toJSON.call( this );
	
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			data.v3 = this.v3.toArray();
	
			return data;
	
		};
	
		CubicBezierCurve.prototype.fromJSON = function ( json ) {
	
			Curve.prototype.fromJSON.call( this, json );
	
			this.v0.fromArray( json.v0 );
			this.v1.fromArray( json.v1 );
			this.v2.fromArray( json.v2 );
			this.v3.fromArray( json.v3 );
	
			return this;
	
		};
	
		function CubicBezierCurve3( v0, v1, v2, v3 ) {
	
			Curve.call( this );
	
			this.type = 'CubicBezierCurve3';
	
			this.v0 = v0 || new Vector3();
			this.v1 = v1 || new Vector3();
			this.v2 = v2 || new Vector3();
			this.v3 = v3 || new Vector3();
	
		}
	
		CubicBezierCurve3.prototype = Object.create( Curve.prototype );
		CubicBezierCurve3.prototype.constructor = CubicBezierCurve3;
	
		CubicBezierCurve3.prototype.isCubicBezierCurve3 = true;
	
		CubicBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector3();
	
			var v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;
	
			point.set(
				CubicBezier( t, v0.x, v1.x, v2.x, v3.x ),
				CubicBezier( t, v0.y, v1.y, v2.y, v3.y ),
				CubicBezier( t, v0.z, v1.z, v2.z, v3.z )
			);
	
			return point;
	
		};
	
		CubicBezierCurve3.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v0.copy( source.v0 );
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
			this.v3.copy( source.v3 );
	
			return this;
	
		};
	
		CubicBezierCurve3.prototype.toJSON = function () {
	
			var data = Curve.prototype.toJSON.call( this );
	
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
			data.v3 = this.v3.toArray();
	
			return data;
	
		};
	
		CubicBezierCurve3.prototype.fromJSON = function ( json ) {
	
			Curve.prototype.fromJSON.call( this, json );
	
			this.v0.fromArray( json.v0 );
			this.v1.fromArray( json.v1 );
			this.v2.fromArray( json.v2 );
			this.v3.fromArray( json.v3 );
	
			return this;
	
		};
	
		function LineCurve( v1, v2 ) {
	
			Curve.call( this );
	
			this.type = 'LineCurve';
	
			this.v1 = v1 || new Vector2();
			this.v2 = v2 || new Vector2();
	
		}
	
		LineCurve.prototype = Object.create( Curve.prototype );
		LineCurve.prototype.constructor = LineCurve;
	
		LineCurve.prototype.isLineCurve = true;
	
		LineCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			if ( t === 1 ) {
	
				point.copy( this.v2 );
	
			} else {
	
				point.copy( this.v2 ).sub( this.v1 );
				point.multiplyScalar( t ).add( this.v1 );
	
			}
	
			return point;
	
		};
	
		// Line curve is linear, so we can overwrite default getPointAt
	
		LineCurve.prototype.getPointAt = function ( u, optionalTarget ) {
	
			return this.getPoint( u, optionalTarget );
	
		};
	
		LineCurve.prototype.getTangent = function ( /* t */ ) {
	
			var tangent = this.v2.clone().sub( this.v1 );
	
			return tangent.normalize();
	
		};
	
		LineCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
	
			return this;
	
		};
	
		LineCurve.prototype.toJSON = function () {
	
			var data = Curve.prototype.toJSON.call( this );
	
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
	
			return data;
	
		};
	
		LineCurve.prototype.fromJSON = function ( json ) {
	
			Curve.prototype.fromJSON.call( this, json );
	
			this.v1.fromArray( json.v1 );
			this.v2.fromArray( json.v2 );
	
			return this;
	
		};
	
		function LineCurve3( v1, v2 ) {
	
			Curve.call( this );
	
			this.type = 'LineCurve3';
	
			this.v1 = v1 || new Vector3();
			this.v2 = v2 || new Vector3();
	
		}
	
		LineCurve3.prototype = Object.create( Curve.prototype );
		LineCurve3.prototype.constructor = LineCurve3;
	
		LineCurve3.prototype.isLineCurve3 = true;
	
		LineCurve3.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector3();
	
			if ( t === 1 ) {
	
				point.copy( this.v2 );
	
			} else {
	
				point.copy( this.v2 ).sub( this.v1 );
				point.multiplyScalar( t ).add( this.v1 );
	
			}
	
			return point;
	
		};
	
		// Line curve is linear, so we can overwrite default getPointAt
	
		LineCurve3.prototype.getPointAt = function ( u, optionalTarget ) {
	
			return this.getPoint( u, optionalTarget );
	
		};
	
		LineCurve3.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
	
			return this;
	
		};
	
		LineCurve3.prototype.toJSON = function () {
	
			var data = Curve.prototype.toJSON.call( this );
	
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
	
			return data;
	
		};
	
		LineCurve3.prototype.fromJSON = function ( json ) {
	
			Curve.prototype.fromJSON.call( this, json );
	
			this.v1.fromArray( json.v1 );
			this.v2.fromArray( json.v2 );
	
			return this;
	
		};
	
		function QuadraticBezierCurve( v0, v1, v2 ) {
	
			Curve.call( this );
	
			this.type = 'QuadraticBezierCurve';
	
			this.v0 = v0 || new Vector2();
			this.v1 = v1 || new Vector2();
			this.v2 = v2 || new Vector2();
	
		}
	
		QuadraticBezierCurve.prototype = Object.create( Curve.prototype );
		QuadraticBezierCurve.prototype.constructor = QuadraticBezierCurve;
	
		QuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;
	
		QuadraticBezierCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			var v0 = this.v0, v1 = this.v1, v2 = this.v2;
	
			point.set(
				QuadraticBezier( t, v0.x, v1.x, v2.x ),
				QuadraticBezier( t, v0.y, v1.y, v2.y )
			);
	
			return point;
	
		};
	
		QuadraticBezierCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v0.copy( source.v0 );
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
	
			return this;
	
		};
	
		QuadraticBezierCurve.prototype.toJSON = function () {
	
			var data = Curve.prototype.toJSON.call( this );
	
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
	
			return data;
	
		};
	
		QuadraticBezierCurve.prototype.fromJSON = function ( json ) {
	
			Curve.prototype.fromJSON.call( this, json );
	
			this.v0.fromArray( json.v0 );
			this.v1.fromArray( json.v1 );
			this.v2.fromArray( json.v2 );
	
			return this;
	
		};
	
		function QuadraticBezierCurve3( v0, v1, v2 ) {
	
			Curve.call( this );
	
			this.type = 'QuadraticBezierCurve3';
	
			this.v0 = v0 || new Vector3();
			this.v1 = v1 || new Vector3();
			this.v2 = v2 || new Vector3();
	
		}
	
		QuadraticBezierCurve3.prototype = Object.create( Curve.prototype );
		QuadraticBezierCurve3.prototype.constructor = QuadraticBezierCurve3;
	
		QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;
	
		QuadraticBezierCurve3.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector3();
	
			var v0 = this.v0, v1 = this.v1, v2 = this.v2;
	
			point.set(
				QuadraticBezier( t, v0.x, v1.x, v2.x ),
				QuadraticBezier( t, v0.y, v1.y, v2.y ),
				QuadraticBezier( t, v0.z, v1.z, v2.z )
			);
	
			return point;
	
		};
	
		QuadraticBezierCurve3.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.v0.copy( source.v0 );
			this.v1.copy( source.v1 );
			this.v2.copy( source.v2 );
	
			return this;
	
		};
	
		QuadraticBezierCurve3.prototype.toJSON = function () {
	
			var data = Curve.prototype.toJSON.call( this );
	
			data.v0 = this.v0.toArray();
			data.v1 = this.v1.toArray();
			data.v2 = this.v2.toArray();
	
			return data;
	
		};
	
		QuadraticBezierCurve3.prototype.fromJSON = function ( json ) {
	
			Curve.prototype.fromJSON.call( this, json );
	
			this.v0.fromArray( json.v0 );
			this.v1.fromArray( json.v1 );
			this.v2.fromArray( json.v2 );
	
			return this;
	
		};
	
		function SplineCurve( points /* array of Vector2 */ ) {
	
			Curve.call( this );
	
			this.type = 'SplineCurve';
	
			this.points = points || [];
	
		}
	
		SplineCurve.prototype = Object.create( Curve.prototype );
		SplineCurve.prototype.constructor = SplineCurve;
	
		SplineCurve.prototype.isSplineCurve = true;
	
		SplineCurve.prototype.getPoint = function ( t, optionalTarget ) {
	
			var point = optionalTarget || new Vector2();
	
			var points = this.points;
			var p = ( points.length - 1 ) * t;
	
			var intPoint = Math.floor( p );
			var weight = p - intPoint;
	
			var p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
			var p1 = points[ intPoint ];
			var p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
	
			point.set(
				CatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),
				CatmullRom( weight, p0.y, p1.y, p2.y, p3.y )
			);
	
			return point;
	
		};
	
		SplineCurve.prototype.copy = function ( source ) {
	
			Curve.prototype.copy.call( this, source );
	
			this.points = [];
	
			for ( var i = 0, l = source.points.length; i < l; i ++ ) {
	
				var point = source.points[ i ];
	
				this.points.push( point.clone() );
	
			}
	
			return this;
	
		};
	
		SplineCurve.prototype.toJSON = function () {
	
			var data = Curve.prototype.toJSON.call( this );
	
			data.points = [];
	
			for ( var i = 0, l = this.points.length; i < l; i ++ ) {
	
				var point = this.points[ i ];
				data.points.push( point.toArray() );
	
			}
	
			return data;
	
		};
	
		SplineCurve.prototype.fromJSON = function ( json ) {
	
			Curve.prototype.fromJSON.call( this, json );
	
			this.points = [];
	
			for ( var i = 0, l = json.points.length; i < l; i ++ ) {
	
				var point = json.points[ i ];
				this.points.push( new Vector2().fromArray( point ) );
	
			}
	
			return this;
	
		};
	
	
	
		var Curves = /*#__PURE__*/Object.freeze({
			__proto__: null,
			ArcCurve: ArcCurve,
			CatmullRomCurve3: CatmullRomCurve3,
			CubicBezierCurve: CubicBezierCurve,
			CubicBezierCurve3: CubicBezierCurve3,
			EllipseCurve: EllipseCurve,
			LineCurve: LineCurve,
			LineCurve3: LineCurve3,
			QuadraticBezierCurve: QuadraticBezierCurve,
			QuadraticBezierCurve3: QuadraticBezierCurve3,
			SplineCurve: SplineCurve
		});
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 *
		 **/
	
		/**************************************************************
		 *	Curved Path - a curve path is simply a array of connected
		 *  curves, but retains the api of a curve
		 **************************************************************/
	
		function CurvePath() {
	
			Curve.call( this );
	
			this.type = 'CurvePath';
	
			this.curves = [];
			this.autoClose = false; // Automatically closes the path
	
		}
	
		CurvePath.prototype = Object.assign( Object.create( Curve.prototype ), {
	
			constructor: CurvePath,
	
			add: function ( curve ) {
	
				this.curves.push( curve );
	
			},
	
			closePath: function () {
	
				// Add a line curve if start and end of lines are not connected
				var startPoint = this.curves[ 0 ].getPoint( 0 );
				var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );
	
				if ( ! startPoint.equals( endPoint ) ) {
	
					this.curves.push( new LineCurve( endPoint, startPoint ) );
	
				}
	
			},
	
			// To get accurate point with reference to
			// entire path distance at time t,
			// following has to be done:
	
			// 1. Length of each sub path have to be known
			// 2. Locate and identify type of curve
			// 3. Get t for the curve
			// 4. Return curve.getPointAt(t')
	
			getPoint: function ( t ) {
	
				var d = t * this.getLength();
				var curveLengths = this.getCurveLengths();
				var i = 0;
	
				// To think about boundaries points.
	
				while ( i < curveLengths.length ) {
	
					if ( curveLengths[ i ] >= d ) {
	
						var diff = curveLengths[ i ] - d;
						var curve = this.curves[ i ];
	
						var segmentLength = curve.getLength();
						var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
	
						return curve.getPointAt( u );
	
					}
	
					i ++;
	
				}
	
				return null;
	
				// loop where sum != 0, sum > d , sum+1 <d
	
			},
	
			// We cannot use the default THREE.Curve getPoint() with getLength() because in
			// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
			// getPoint() depends on getLength
	
			getLength: function () {
	
				var lens = this.getCurveLengths();
				return lens[ lens.length - 1 ];
	
			},
	
			// cacheLengths must be recalculated.
			updateArcLengths: function () {
	
				this.needsUpdate = true;
				this.cacheLengths = null;
				this.getCurveLengths();
	
			},
	
			// Compute lengths and cache them
			// We cannot overwrite getLengths() because UtoT mapping uses it.
	
			getCurveLengths: function () {
	
				// We use cache values if curves and cache array are same length
	
				if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {
	
					return this.cacheLengths;
	
				}
	
				// Get length of sub-curve
				// Push sums into cached array
	
				var lengths = [], sums = 0;
	
				for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
	
					sums += this.curves[ i ].getLength();
					lengths.push( sums );
	
				}
	
				this.cacheLengths = lengths;
	
				return lengths;
	
			},
	
			getSpacedPoints: function ( divisions ) {
	
				if ( divisions === undefined ) { divisions = 40; }
	
				var points = [];
	
				for ( var i = 0; i <= divisions; i ++ ) {
	
					points.push( this.getPoint( i / divisions ) );
	
				}
	
				if ( this.autoClose ) {
	
					points.push( points[ 0 ] );
	
				}
	
				return points;
	
			},
	
			getPoints: function ( divisions ) {
	
				divisions = divisions || 12;
	
				var points = [], last;
	
				for ( var i = 0, curves = this.curves; i < curves.length; i ++ ) {
	
					var curve = curves[ i ];
					var resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2
						: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1
							: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length
								: divisions;
	
					var pts = curve.getPoints( resolution );
	
					for ( var j = 0; j < pts.length; j ++ ) {
	
						var point = pts[ j ];
	
						if ( last && last.equals( point ) ) { continue; } // ensures no consecutive points are duplicates
	
						points.push( point );
						last = point;
	
					}
	
				}
	
				if ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {
	
					points.push( points[ 0 ] );
	
				}
	
				return points;
	
			},
	
			copy: function ( source ) {
	
				Curve.prototype.copy.call( this, source );
	
				this.curves = [];
	
				for ( var i = 0, l = source.curves.length; i < l; i ++ ) {
	
					var curve = source.curves[ i ];
	
					this.curves.push( curve.clone() );
	
				}
	
				this.autoClose = source.autoClose;
	
				return this;
	
			},
	
			toJSON: function () {
	
				var data = Curve.prototype.toJSON.call( this );
	
				data.autoClose = this.autoClose;
				data.curves = [];
	
				for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
	
					var curve = this.curves[ i ];
					data.curves.push( curve.toJSON() );
	
				}
	
				return data;
	
			},
	
			fromJSON: function ( json ) {
	
				Curve.prototype.fromJSON.call( this, json );
	
				this.autoClose = json.autoClose;
				this.curves = [];
	
				for ( var i = 0, l = json.curves.length; i < l; i ++ ) {
	
					var curve = json.curves[ i ];
					this.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Creates free form 2d path using series of points, lines or curves.
		 **/
	
		function Path( points ) {
	
			CurvePath.call( this );
	
			this.type = 'Path';
	
			this.currentPoint = new Vector2();
	
			if ( points ) {
	
				this.setFromPoints( points );
	
			}
	
		}
	
		Path.prototype = Object.assign( Object.create( CurvePath.prototype ), {
	
			constructor: Path,
	
			setFromPoints: function ( points ) {
	
				this.moveTo( points[ 0 ].x, points[ 0 ].y );
	
				for ( var i = 1, l = points.length; i < l; i ++ ) {
	
					this.lineTo( points[ i ].x, points[ i ].y );
	
				}
	
				return this;
	
			},
	
			moveTo: function ( x, y ) {
	
				this.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?
	
				return this;
	
			},
	
			lineTo: function ( x, y ) {
	
				var curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );
				this.curves.push( curve );
	
				this.currentPoint.set( x, y );
	
				return this;
	
			},
	
			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
	
				var curve = new QuadraticBezierCurve(
					this.currentPoint.clone(),
					new Vector2( aCPx, aCPy ),
					new Vector2( aX, aY )
				);
	
				this.curves.push( curve );
	
				this.currentPoint.set( aX, aY );
	
				return this;
	
			},
	
			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
	
				var curve = new CubicBezierCurve(
					this.currentPoint.clone(),
					new Vector2( aCP1x, aCP1y ),
					new Vector2( aCP2x, aCP2y ),
					new Vector2( aX, aY )
				);
	
				this.curves.push( curve );
	
				this.currentPoint.set( aX, aY );
	
				return this;
	
			},
	
			splineThru: function ( pts /*Array of Vector*/ ) {
	
				var npts = [ this.currentPoint.clone() ].concat( pts );
	
				var curve = new SplineCurve( npts );
				this.curves.push( curve );
	
				this.currentPoint.copy( pts[ pts.length - 1 ] );
	
				return this;
	
			},
	
			arc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;
	
				this.absarc( aX + x0, aY + y0, aRadius,
					aStartAngle, aEndAngle, aClockwise );
	
				return this;
	
			},
	
			absarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
				this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
	
				return this;
	
			},
	
			ellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
				var x0 = this.currentPoint.x;
				var y0 = this.currentPoint.y;
	
				this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
	
				return this;
	
			},
	
			absellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
				var curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
	
				if ( this.curves.length > 0 ) {
	
					// if a previous curve is present, attempt to join
					var firstPoint = curve.getPoint( 0 );
	
					if ( ! firstPoint.equals( this.currentPoint ) ) {
	
						this.lineTo( firstPoint.x, firstPoint.y );
	
					}
	
				}
	
				this.curves.push( curve );
	
				var lastPoint = curve.getPoint( 1 );
				this.currentPoint.copy( lastPoint );
	
				return this;
	
			},
	
			copy: function ( source ) {
	
				CurvePath.prototype.copy.call( this, source );
	
				this.currentPoint.copy( source.currentPoint );
	
				return this;
	
			},
	
			toJSON: function () {
	
				var data = CurvePath.prototype.toJSON.call( this );
	
				data.currentPoint = this.currentPoint.toArray();
	
				return data;
	
			},
	
			fromJSON: function ( json ) {
	
				CurvePath.prototype.fromJSON.call( this, json );
	
				this.currentPoint.fromArray( json.currentPoint );
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * Defines a 2d shape plane using paths.
		 **/
	
		// STEP 1 Create a path.
		// STEP 2 Turn path into shape.
		// STEP 3 ExtrudeGeometry takes in Shape/Shapes
		// STEP 3a - Extract points from each shape, turn to vertices
		// STEP 3b - Triangulate each shape, add faces.
	
		function Shape( points ) {
	
			Path.call( this, points );
	
			this.uuid = MathUtils.generateUUID();
	
			this.type = 'Shape';
	
			this.holes = [];
	
		}
	
		Shape.prototype = Object.assign( Object.create( Path.prototype ), {
	
			constructor: Shape,
	
			getPointsHoles: function ( divisions ) {
	
				var holesPts = [];
	
				for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
	
					holesPts[ i ] = this.holes[ i ].getPoints( divisions );
	
				}
	
				return holesPts;
	
			},
	
			// get points of shape and holes (keypoints based on segments parameter)
	
			extractPoints: function ( divisions ) {
	
				return {
	
					shape: this.getPoints( divisions ),
					holes: this.getPointsHoles( divisions )
	
				};
	
			},
	
			copy: function ( source ) {
	
				Path.prototype.copy.call( this, source );
	
				this.holes = [];
	
				for ( var i = 0, l = source.holes.length; i < l; i ++ ) {
	
					var hole = source.holes[ i ];
	
					this.holes.push( hole.clone() );
	
				}
	
				return this;
	
			},
	
			toJSON: function () {
	
				var data = Path.prototype.toJSON.call( this );
	
				data.uuid = this.uuid;
				data.holes = [];
	
				for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
	
					var hole = this.holes[ i ];
					data.holes.push( hole.toJSON() );
	
				}
	
				return data;
	
			},
	
			fromJSON: function ( json ) {
	
				Path.prototype.fromJSON.call( this, json );
	
				this.uuid = json.uuid;
				this.holes = [];
	
				for ( var i = 0, l = json.holes.length; i < l; i ++ ) {
	
					var hole = json.holes[ i ];
					this.holes.push( new Path().fromJSON( hole ) );
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Light( color, intensity ) {
	
			Object3D.call( this );
	
			this.type = 'Light';
	
			this.color = new Color( color );
			this.intensity = intensity !== undefined ? intensity : 1;
	
			this.receiveShadow = undefined;
	
		}
	
		Light.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Light,
	
			isLight: true,
	
			copy: function ( source ) {
	
				Object3D.prototype.copy.call( this, source );
	
				this.color.copy( source.color );
				this.intensity = source.intensity;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.color = this.color.getHex();
				data.object.intensity = this.intensity;
	
				if ( this.groundColor !== undefined ) { data.object.groundColor = this.groundColor.getHex(); }
	
				if ( this.distance !== undefined ) { data.object.distance = this.distance; }
				if ( this.angle !== undefined ) { data.object.angle = this.angle; }
				if ( this.decay !== undefined ) { data.object.decay = this.decay; }
				if ( this.penumbra !== undefined ) { data.object.penumbra = this.penumbra; }
	
				if ( this.shadow !== undefined ) { data.object.shadow = this.shadow.toJSON(); }
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function HemisphereLight( skyColor, groundColor, intensity ) {
	
			Light.call( this, skyColor, intensity );
	
			this.type = 'HemisphereLight';
	
			this.castShadow = undefined;
	
			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();
	
			this.groundColor = new Color( groundColor );
	
		}
	
		HemisphereLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: HemisphereLight,
	
			isHemisphereLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.groundColor.copy( source.groundColor );
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function LightShadow( camera ) {
	
			this.camera = camera;
	
			this.bias = 0;
			this.radius = 1;
	
			this.mapSize = new Vector2( 512, 512 );
	
			this.map = null;
			this.mapPass = null;
			this.matrix = new Matrix4();
	
			this._frustum = new Frustum();
			this._frameExtents = new Vector2( 1, 1 );
	
			this._viewportCount = 1;
	
			this._viewports = [
	
				new Vector4( 0, 0, 1, 1 )
	
			];
	
		}
	
		Object.assign( LightShadow.prototype, {
	
			_projScreenMatrix: new Matrix4(),
	
			_lightPositionWorld: new Vector3(),
	
			_lookTarget: new Vector3(),
	
			getViewportCount: function () {
	
				return this._viewportCount;
	
			},
	
			getFrustum: function () {
	
				return this._frustum;
	
			},
	
			updateMatrices: function ( light ) {
	
				var shadowCamera = this.camera,
					shadowMatrix = this.matrix,
					projScreenMatrix = this._projScreenMatrix,
					lookTarget = this._lookTarget,
					lightPositionWorld = this._lightPositionWorld;
	
				lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				shadowCamera.position.copy( lightPositionWorld );
	
				lookTarget.setFromMatrixPosition( light.target.matrixWorld );
				shadowCamera.lookAt( lookTarget );
				shadowCamera.updateMatrixWorld();
	
				projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
				this._frustum.setFromProjectionMatrix( projScreenMatrix );
	
				shadowMatrix.set(
					0.5, 0.0, 0.0, 0.5,
					0.0, 0.5, 0.0, 0.5,
					0.0, 0.0, 0.5, 0.5,
					0.0, 0.0, 0.0, 1.0
				);
	
				shadowMatrix.multiply( shadowCamera.projectionMatrix );
				shadowMatrix.multiply( shadowCamera.matrixWorldInverse );
	
			},
	
			getViewport: function ( viewportIndex ) {
	
				return this._viewports[ viewportIndex ];
	
			},
	
			getFrameExtents: function () {
	
				return this._frameExtents;
	
			},
	
			copy: function ( source ) {
	
				this.camera = source.camera.clone();
	
				this.bias = source.bias;
				this.radius = source.radius;
	
				this.mapSize.copy( source.mapSize );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			toJSON: function () {
	
				var object = {};
	
				if ( this.bias !== 0 ) { object.bias = this.bias; }
				if ( this.radius !== 1 ) { object.radius = this.radius; }
				if ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) { object.mapSize = this.mapSize.toArray(); }
	
				object.camera = this.camera.toJSON( false ).object;
				delete object.camera.matrix;
	
				return object;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function SpotLightShadow() {
	
			LightShadow.call( this, new PerspectiveCamera( 50, 1, 0.5, 500 ) );
	
		}
	
		SpotLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
	
			constructor: SpotLightShadow,
	
			isSpotLightShadow: true,
	
			updateMatrices: function ( light ) {
	
				var camera = this.camera;
	
				var fov = MathUtils.RAD2DEG * 2 * light.angle;
				var aspect = this.mapSize.width / this.mapSize.height;
				var far = light.distance || camera.far;
	
				if ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {
	
					camera.fov = fov;
					camera.aspect = aspect;
					camera.far = far;
					camera.updateProjectionMatrix();
	
				}
	
				LightShadow.prototype.updateMatrices.call( this, light );
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function SpotLight( color, intensity, distance, angle, penumbra, decay ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'SpotLight';
	
			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();
	
			this.target = new Object3D();
	
			Object.defineProperty( this, 'power', {
				get: function () {
	
					// intensity = power per solid angle.
					// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
					return this.intensity * Math.PI;
	
				},
				set: function ( power ) {
	
					// intensity = power per solid angle.
					// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
					this.intensity = power / Math.PI;
	
				}
			} );
	
			this.distance = ( distance !== undefined ) ? distance : 0;
			this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
			this.penumbra = ( penumbra !== undefined ) ? penumbra : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
	
			this.shadow = new SpotLightShadow();
	
		}
	
		SpotLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: SpotLight,
	
			isSpotLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.distance = source.distance;
				this.angle = source.angle;
				this.penumbra = source.penumbra;
				this.decay = source.decay;
	
				this.target = source.target.clone();
	
				this.shadow = source.shadow.clone();
	
				return this;
	
			}
	
		} );
	
		function PointLightShadow() {
	
			LightShadow.call( this, new PerspectiveCamera( 90, 1, 0.5, 500 ) );
	
			this._frameExtents = new Vector2( 4, 2 );
	
			this._viewportCount = 6;
	
			this._viewports = [
				// These viewports map a cube-map onto a 2D texture with the
				// following orientation:
				//
				//  xzXZ
				//   y Y
				//
				// X - Positive x direction
				// x - Negative x direction
				// Y - Positive y direction
				// y - Negative y direction
				// Z - Positive z direction
				// z - Negative z direction
	
				// positive X
				new Vector4( 2, 1, 1, 1 ),
				// negative X
				new Vector4( 0, 1, 1, 1 ),
				// positive Z
				new Vector4( 3, 1, 1, 1 ),
				// negative Z
				new Vector4( 1, 1, 1, 1 ),
				// positive Y
				new Vector4( 3, 0, 1, 1 ),
				// negative Y
				new Vector4( 1, 0, 1, 1 )
			];
	
			this._cubeDirections = [
				new Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),
				new Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )
			];
	
			this._cubeUps = [
				new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),
				new Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),	new Vector3( 0, 0, - 1 )
			];
	
		}
	
		PointLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
	
			constructor: PointLightShadow,
	
			isPointLightShadow: true,
	
			updateMatrices: function ( light, viewportIndex ) {
	
				if ( viewportIndex === undefined ) { viewportIndex = 0; }
	
				var camera = this.camera,
					shadowMatrix = this.matrix,
					lightPositionWorld = this._lightPositionWorld,
					lookTarget = this._lookTarget,
					projScreenMatrix = this._projScreenMatrix;
	
				lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
				camera.position.copy( lightPositionWorld );
	
				lookTarget.copy( camera.position );
				lookTarget.add( this._cubeDirections[ viewportIndex ] );
				camera.up.copy( this._cubeUps[ viewportIndex ] );
				camera.lookAt( lookTarget );
				camera.updateMatrixWorld();
	
				shadowMatrix.makeTranslation( - lightPositionWorld.x, - lightPositionWorld.y, - lightPositionWorld.z );
	
				projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
				this._frustum.setFromProjectionMatrix( projScreenMatrix );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
	
		function PointLight( color, intensity, distance, decay ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'PointLight';
	
			Object.defineProperty( this, 'power', {
				get: function () {
	
					// intensity = power per solid angle.
					// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
					return this.intensity * 4 * Math.PI;
	
				},
				set: function ( power ) {
	
					// intensity = power per solid angle.
					// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
					this.intensity = power / ( 4 * Math.PI );
	
				}
			} );
	
			this.distance = ( distance !== undefined ) ? distance : 0;
			this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
	
			this.shadow = new PointLightShadow();
	
		}
	
		PointLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: PointLight,
	
			isPointLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.distance = source.distance;
				this.decay = source.decay;
	
				this.shadow = source.shadow.clone();
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author arose / http://github.com/arose
		 */
	
		function OrthographicCamera( left, right, top, bottom, near, far ) {
	
			Camera.call( this );
	
			this.type = 'OrthographicCamera';
	
			this.zoom = 1;
			this.view = null;
	
			this.left = ( left !== undefined ) ? left : - 1;
			this.right = ( right !== undefined ) ? right : 1;
			this.top = ( top !== undefined ) ? top : 1;
			this.bottom = ( bottom !== undefined ) ? bottom : - 1;
	
			this.near = ( near !== undefined ) ? near : 0.1;
			this.far = ( far !== undefined ) ? far : 2000;
	
			this.updateProjectionMatrix();
	
		}
	
		OrthographicCamera.prototype = Object.assign( Object.create( Camera.prototype ), {
	
			constructor: OrthographicCamera,
	
			isOrthographicCamera: true,
	
			copy: function ( source, recursive ) {
	
				Camera.prototype.copy.call( this, source, recursive );
	
				this.left = source.left;
				this.right = source.right;
				this.top = source.top;
				this.bottom = source.bottom;
				this.near = source.near;
				this.far = source.far;
	
				this.zoom = source.zoom;
				this.view = source.view === null ? null : Object.assign( {}, source.view );
	
				return this;
	
			},
	
			setViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {
	
				if ( this.view === null ) {
	
					this.view = {
						enabled: true,
						fullWidth: 1,
						fullHeight: 1,
						offsetX: 0,
						offsetY: 0,
						width: 1,
						height: 1
					};
	
				}
	
				this.view.enabled = true;
				this.view.fullWidth = fullWidth;
				this.view.fullHeight = fullHeight;
				this.view.offsetX = x;
				this.view.offsetY = y;
				this.view.width = width;
				this.view.height = height;
	
				this.updateProjectionMatrix();
	
			},
	
			clearViewOffset: function () {
	
				if ( this.view !== null ) {
	
					this.view.enabled = false;
	
				}
	
				this.updateProjectionMatrix();
	
			},
	
			updateProjectionMatrix: function () {
	
				var dx = ( this.right - this.left ) / ( 2 * this.zoom );
				var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
				var cx = ( this.right + this.left ) / 2;
				var cy = ( this.top + this.bottom ) / 2;
	
				var left = cx - dx;
				var right = cx + dx;
				var top = cy + dy;
				var bottom = cy - dy;
	
				if ( this.view !== null && this.view.enabled ) {
	
					var scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
					var scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;
	
					left += scaleW * this.view.offsetX;
					right = left + scaleW * this.view.width;
					top -= scaleH * this.view.offsetY;
					bottom = top - scaleH * this.view.height;
	
				}
	
				this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );
	
				this.projectionMatrixInverse.getInverse( this.projectionMatrix );
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Object3D.prototype.toJSON.call( this, meta );
	
				data.object.zoom = this.zoom;
				data.object.left = this.left;
				data.object.right = this.right;
				data.object.top = this.top;
				data.object.bottom = this.bottom;
				data.object.near = this.near;
				data.object.far = this.far;
	
				if ( this.view !== null ) { data.object.view = Object.assign( {}, this.view ); }
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function DirectionalLightShadow() {
	
			LightShadow.call( this, new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );
	
		}
	
		DirectionalLightShadow.prototype = Object.assign( Object.create( LightShadow.prototype ), {
	
			constructor: DirectionalLightShadow,
	
			isDirectionalLightShadow: true,
	
			updateMatrices: function ( light ) {
	
				LightShadow.prototype.updateMatrices.call( this, light );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function DirectionalLight( color, intensity ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'DirectionalLight';
	
			this.position.copy( Object3D.DefaultUp );
			this.updateMatrix();
	
			this.target = new Object3D();
	
			this.shadow = new DirectionalLightShadow();
	
		}
	
		DirectionalLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: DirectionalLight,
	
			isDirectionalLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.target = source.target.clone();
	
				this.shadow = source.shadow.clone();
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AmbientLight( color, intensity ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'AmbientLight';
	
			this.castShadow = undefined;
	
		}
	
		AmbientLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: AmbientLight,
	
			isAmbientLight: true
	
		} );
	
		/**
		 * @author abelnation / http://github.com/abelnation
		 */
	
		function RectAreaLight( color, intensity, width, height ) {
	
			Light.call( this, color, intensity );
	
			this.type = 'RectAreaLight';
	
			this.width = ( width !== undefined ) ? width : 10;
			this.height = ( height !== undefined ) ? height : 10;
	
		}
	
		RectAreaLight.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: RectAreaLight,
	
			isRectAreaLight: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.width = source.width;
				this.height = source.height;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Light.prototype.toJSON.call( this, meta );
	
				data.object.width = this.width;
				data.object.height = this.height;
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function MaterialLoader( manager ) {
	
			Loader.call( this, manager );
	
			this.textures = {};
	
		}
	
		MaterialLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: MaterialLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new FileLoader( scope.manager );
				loader.setPath( scope.path );
				loader.load( url, function ( text ) {
	
					onLoad( scope.parse( JSON.parse( text ) ) );
	
				}, onProgress, onError );
	
			},
	
			parse: function ( json ) {
	
				var textures = this.textures;
	
				function getTexture( name ) {
	
					if ( textures[ name ] === undefined ) {
	
						console.warn( 'THREE.MaterialLoader: Undefined texture', name );
	
					}
	
					return textures[ name ];
	
				}
	
				var material = new Materials[ json.type ]();
	
				if ( json.uuid !== undefined ) { material.uuid = json.uuid; }
				if ( json.name !== undefined ) { material.name = json.name; }
				if ( json.color !== undefined ) { material.color.setHex( json.color ); }
				if ( json.roughness !== undefined ) { material.roughness = json.roughness; }
				if ( json.metalness !== undefined ) { material.metalness = json.metalness; }
				if ( json.sheen !== undefined ) { material.sheen = new Color().setHex( json.sheen ); }
				if ( json.emissive !== undefined ) { material.emissive.setHex( json.emissive ); }
				if ( json.specular !== undefined ) { material.specular.setHex( json.specular ); }
				if ( json.shininess !== undefined ) { material.shininess = json.shininess; }
				if ( json.clearcoat !== undefined ) { material.clearcoat = json.clearcoat; }
				if ( json.clearcoatRoughness !== undefined ) { material.clearcoatRoughness = json.clearcoatRoughness; }
				if ( json.fog !== undefined ) { material.fog = json.fog; }
				if ( json.flatShading !== undefined ) { material.flatShading = json.flatShading; }
				if ( json.blending !== undefined ) { material.blending = json.blending; }
				if ( json.combine !== undefined ) { material.combine = json.combine; }
				if ( json.side !== undefined ) { material.side = json.side; }
				if ( json.opacity !== undefined ) { material.opacity = json.opacity; }
				if ( json.transparent !== undefined ) { material.transparent = json.transparent; }
				if ( json.alphaTest !== undefined ) { material.alphaTest = json.alphaTest; }
				if ( json.depthTest !== undefined ) { material.depthTest = json.depthTest; }
				if ( json.depthWrite !== undefined ) { material.depthWrite = json.depthWrite; }
				if ( json.colorWrite !== undefined ) { material.colorWrite = json.colorWrite; }
	
				if ( json.stencilWrite !== undefined ) { material.stencilWrite = json.stencilWrite; }
				if ( json.stencilWriteMask !== undefined ) { material.stencilWriteMask = json.stencilWriteMask; }
				if ( json.stencilFunc !== undefined ) { material.stencilFunc = json.stencilFunc; }
				if ( json.stencilRef !== undefined ) { material.stencilRef = json.stencilRef; }
				if ( json.stencilFuncMask !== undefined ) { material.stencilFuncMask = json.stencilFuncMask; }
				if ( json.stencilFail !== undefined ) { material.stencilFail = json.stencilFail; }
				if ( json.stencilZFail !== undefined ) { material.stencilZFail = json.stencilZFail; }
				if ( json.stencilZPass !== undefined ) { material.stencilZPass = json.stencilZPass; }
	
				if ( json.wireframe !== undefined ) { material.wireframe = json.wireframe; }
				if ( json.wireframeLinewidth !== undefined ) { material.wireframeLinewidth = json.wireframeLinewidth; }
				if ( json.wireframeLinecap !== undefined ) { material.wireframeLinecap = json.wireframeLinecap; }
				if ( json.wireframeLinejoin !== undefined ) { material.wireframeLinejoin = json.wireframeLinejoin; }
	
				if ( json.rotation !== undefined ) { material.rotation = json.rotation; }
	
				if ( json.linewidth !== 1 ) { material.linewidth = json.linewidth; }
				if ( json.dashSize !== undefined ) { material.dashSize = json.dashSize; }
				if ( json.gapSize !== undefined ) { material.gapSize = json.gapSize; }
				if ( json.scale !== undefined ) { material.scale = json.scale; }
	
				if ( json.polygonOffset !== undefined ) { material.polygonOffset = json.polygonOffset; }
				if ( json.polygonOffsetFactor !== undefined ) { material.polygonOffsetFactor = json.polygonOffsetFactor; }
				if ( json.polygonOffsetUnits !== undefined ) { material.polygonOffsetUnits = json.polygonOffsetUnits; }
	
				if ( json.skinning !== undefined ) { material.skinning = json.skinning; }
				if ( json.morphTargets !== undefined ) { material.morphTargets = json.morphTargets; }
				if ( json.morphNormals !== undefined ) { material.morphNormals = json.morphNormals; }
				if ( json.dithering !== undefined ) { material.dithering = json.dithering; }
	
				if ( json.vertexTangents !== undefined ) { material.vertexTangents = json.vertexTangents; }
	
				if ( json.visible !== undefined ) { material.visible = json.visible; }
	
				if ( json.toneMapped !== undefined ) { material.toneMapped = json.toneMapped; }
	
				if ( json.userData !== undefined ) { material.userData = json.userData; }
	
				if ( json.vertexColors !== undefined ) {
	
					if ( typeof json.vertexColors === 'number' ) {
	
						material.vertexColors = ( json.vertexColors > 0 ) ? true : false;
	
					} else {
	
						material.vertexColors = json.vertexColors;
	
					}
	
				}
	
				// Shader Material
	
				if ( json.uniforms !== undefined ) {
	
					for ( var name in json.uniforms ) {
	
						var uniform = json.uniforms[ name ];
	
						material.uniforms[ name ] = {};
	
						switch ( uniform.type ) {
	
							case 't':
								material.uniforms[ name ].value = getTexture( uniform.value );
								break;
	
							case 'c':
								material.uniforms[ name ].value = new Color().setHex( uniform.value );
								break;
	
							case 'v2':
								material.uniforms[ name ].value = new Vector2().fromArray( uniform.value );
								break;
	
							case 'v3':
								material.uniforms[ name ].value = new Vector3().fromArray( uniform.value );
								break;
	
							case 'v4':
								material.uniforms[ name ].value = new Vector4().fromArray( uniform.value );
								break;
	
							case 'm3':
								material.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );
	
							case 'm4':
								material.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );
								break;
	
							default:
								material.uniforms[ name ].value = uniform.value;
	
						}
	
					}
	
				}
	
				if ( json.defines !== undefined ) { material.defines = json.defines; }
				if ( json.vertexShader !== undefined ) { material.vertexShader = json.vertexShader; }
				if ( json.fragmentShader !== undefined ) { material.fragmentShader = json.fragmentShader; }
	
				if ( json.extensions !== undefined ) {
	
					for ( var key in json.extensions ) {
	
						material.extensions[ key ] = json.extensions[ key ];
	
					}
	
				}
	
				// Deprecated
	
				if ( json.shading !== undefined ) { material.flatShading = json.shading === 1; } // THREE.FlatShading
	
				// for PointsMaterial
	
				if ( json.size !== undefined ) { material.size = json.size; }
				if ( json.sizeAttenuation !== undefined ) { material.sizeAttenuation = json.sizeAttenuation; }
	
				// maps
	
				if ( json.map !== undefined ) { material.map = getTexture( json.map ); }
				if ( json.matcap !== undefined ) { material.matcap = getTexture( json.matcap ); }
	
				if ( json.alphaMap !== undefined ) { material.alphaMap = getTexture( json.alphaMap ); }
	
				if ( json.bumpMap !== undefined ) { material.bumpMap = getTexture( json.bumpMap ); }
				if ( json.bumpScale !== undefined ) { material.bumpScale = json.bumpScale; }
	
				if ( json.normalMap !== undefined ) { material.normalMap = getTexture( json.normalMap ); }
				if ( json.normalMapType !== undefined ) { material.normalMapType = json.normalMapType; }
				if ( json.normalScale !== undefined ) {
	
					var normalScale = json.normalScale;
	
					if ( Array.isArray( normalScale ) === false ) {
	
						// Blender exporter used to export a scalar. See #7459
	
						normalScale = [ normalScale, normalScale ];
	
					}
	
					material.normalScale = new Vector2().fromArray( normalScale );
	
				}
	
				if ( json.displacementMap !== undefined ) { material.displacementMap = getTexture( json.displacementMap ); }
				if ( json.displacementScale !== undefined ) { material.displacementScale = json.displacementScale; }
				if ( json.displacementBias !== undefined ) { material.displacementBias = json.displacementBias; }
	
				if ( json.roughnessMap !== undefined ) { material.roughnessMap = getTexture( json.roughnessMap ); }
				if ( json.metalnessMap !== undefined ) { material.metalnessMap = getTexture( json.metalnessMap ); }
	
				if ( json.emissiveMap !== undefined ) { material.emissiveMap = getTexture( json.emissiveMap ); }
				if ( json.emissiveIntensity !== undefined ) { material.emissiveIntensity = json.emissiveIntensity; }
	
				if ( json.specularMap !== undefined ) { material.specularMap = getTexture( json.specularMap ); }
	
				if ( json.envMap !== undefined ) { material.envMap = getTexture( json.envMap ); }
				if ( json.envMapIntensity !== undefined ) { material.envMapIntensity = json.envMapIntensity; }
	
				if ( json.reflectivity !== undefined ) { material.reflectivity = json.reflectivity; }
				if ( json.refractionRatio !== undefined ) { material.refractionRatio = json.refractionRatio; }
	
				if ( json.lightMap !== undefined ) { material.lightMap = getTexture( json.lightMap ); }
				if ( json.lightMapIntensity !== undefined ) { material.lightMapIntensity = json.lightMapIntensity; }
	
				if ( json.aoMap !== undefined ) { material.aoMap = getTexture( json.aoMap ); }
				if ( json.aoMapIntensity !== undefined ) { material.aoMapIntensity = json.aoMapIntensity; }
	
				if ( json.gradientMap !== undefined ) { material.gradientMap = getTexture( json.gradientMap ); }
	
				if ( json.clearcoatNormalMap !== undefined ) { material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap ); }
				if ( json.clearcoatNormalScale !== undefined ) { material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale ); }
	
				return material;
	
			},
	
			setTextures: function ( value ) {
	
				this.textures = value;
				return this;
	
			}
	
		} );
	
		/**
		 * @author Don McCurdy / https://www.donmccurdy.com
		 */
	
		var LoaderUtils = {
	
			decodeText: function ( array ) {
	
				if ( typeof TextDecoder !== 'undefined' ) {
	
					return new TextDecoder().decode( array );
	
				}
	
				// Avoid the String.fromCharCode.apply(null, array) shortcut, which
				// throws a "maximum call stack size exceeded" error for large arrays.
	
				var s = '';
	
				for ( var i = 0, il = array.length; i < il; i ++ ) {
	
					// Implicitly assumes little-endian.
					s += String.fromCharCode( array[ i ] );
	
				}
	
				try {
	
					// merges multi-byte utf-8 characters.
	
					return decodeURIComponent( escape( s ) );
	
				} catch ( e ) { // see #16358
	
					return s;
	
				}
	
			},
	
			extractUrlBase: function ( url ) {
	
				var index = url.lastIndexOf( '/' );
	
				if ( index === - 1 ) { return './'; }
	
				return url.substr( 0, index + 1 );
	
			}
	
		};
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InstancedBufferGeometry() {
	
			BufferGeometry.call( this );
	
			this.type = 'InstancedBufferGeometry';
			this.maxInstancedCount = undefined;
	
		}
	
		InstancedBufferGeometry.prototype = Object.assign( Object.create( BufferGeometry.prototype ), {
	
			constructor: InstancedBufferGeometry,
	
			isInstancedBufferGeometry: true,
	
			copy: function ( source ) {
	
				BufferGeometry.prototype.copy.call( this, source );
	
				this.maxInstancedCount = source.maxInstancedCount;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			toJSON: function () {
	
				var data = BufferGeometry.prototype.toJSON.call( this );
	
				data.maxInstancedCount = this.maxInstancedCount;
	
				data.isInstancedBufferGeometry = true;
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InstancedBufferAttribute( array, itemSize, normalized, meshPerAttribute ) {
	
			if ( typeof ( normalized ) === 'number' ) {
	
				meshPerAttribute = normalized;
	
				normalized = false;
	
				console.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );
	
			}
	
			BufferAttribute.call( this, array, itemSize, normalized );
	
			this.meshPerAttribute = meshPerAttribute || 1;
	
		}
	
		InstancedBufferAttribute.prototype = Object.assign( Object.create( BufferAttribute.prototype ), {
	
			constructor: InstancedBufferAttribute,
	
			isInstancedBufferAttribute: true,
	
			copy: function ( source ) {
	
				BufferAttribute.prototype.copy.call( this, source );
	
				this.meshPerAttribute = source.meshPerAttribute;
	
				return this;
	
			},
	
			toJSON: function ()	{
	
				var data = BufferAttribute.prototype.toJSON.call( this );
	
				data.meshPerAttribute = this.meshPerAttribute;
	
				data.isInstancedBufferAttribute = true;
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function BufferGeometryLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		BufferGeometryLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: BufferGeometryLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new FileLoader( scope.manager );
				loader.setPath( scope.path );
				loader.load( url, function ( text ) {
	
					onLoad( scope.parse( JSON.parse( text ) ) );
	
				}, onProgress, onError );
	
			},
	
			parse: function ( json ) {
	
				var geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();
	
				var index = json.data.index;
	
				if ( index !== undefined ) {
	
					var typedArray = new TYPED_ARRAYS[ index.type ]( index.array );
					geometry.setIndex( new BufferAttribute( typedArray, 1 ) );
	
				}
	
				var attributes = json.data.attributes;
	
				for ( var key in attributes ) {
	
					var attribute = attributes[ key ];
					var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
					var bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;
					var bufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );
					if ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }
					geometry.setAttribute( key, bufferAttribute );
	
				}
	
				var morphAttributes = json.data.morphAttributes;
	
				if ( morphAttributes ) {
	
					for ( var key in morphAttributes ) {
	
						var attributeArray = morphAttributes[ key ];
	
						var array = [];
	
						for ( var i = 0, il = attributeArray.length; i < il; i ++ ) {
	
							var attribute = attributeArray[ i ];
							var typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );
	
							var bufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );
							if ( attribute.name !== undefined ) { bufferAttribute.name = attribute.name; }
							array.push( bufferAttribute );
	
						}
	
						geometry.morphAttributes[ key ] = array;
	
					}
	
				}
	
				var morphTargetsRelative = json.data.morphTargetsRelative;
	
				if ( morphTargetsRelative ) {
	
					geometry.morphTargetsRelative = true;
	
				}
	
				var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
	
				if ( groups !== undefined ) {
	
					for ( var i = 0, n = groups.length; i !== n; ++ i ) {
	
						var group = groups[ i ];
	
						geometry.addGroup( group.start, group.count, group.materialIndex );
	
					}
	
				}
	
				var boundingSphere = json.data.boundingSphere;
	
				if ( boundingSphere !== undefined ) {
	
					var center = new Vector3();
	
					if ( boundingSphere.center !== undefined ) {
	
						center.fromArray( boundingSphere.center );
	
					}
	
					geometry.boundingSphere = new Sphere( center, boundingSphere.radius );
	
				}
	
				if ( json.name ) { geometry.name = json.name; }
				if ( json.userData ) { geometry.userData = json.userData; }
	
				return geometry;
	
			}
	
		} );
	
		var TYPED_ARRAYS = {
			Int8Array: Int8Array,
			Uint8Array: Uint8Array,
			// Workaround for IE11 pre KB2929437. See #11440
			Uint8ClampedArray: typeof Uint8ClampedArray !== 'undefined' ? Uint8ClampedArray : Uint8Array,
			Int16Array: Int16Array,
			Uint16Array: Uint16Array,
			Int32Array: Int32Array,
			Uint32Array: Uint32Array,
			Float32Array: Float32Array,
			Float64Array: Float64Array
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function ObjectLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		ObjectLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: ObjectLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;
				this.resourcePath = this.resourcePath || path;
	
				var loader = new FileLoader( scope.manager );
				loader.setPath( this.path );
				loader.load( url, function ( text ) {
	
					var json = null;
	
					try {
	
						json = JSON.parse( text );
	
					} catch ( error ) {
	
						if ( onError !== undefined ) { onError( error ); }
	
						console.error( 'THREE:ObjectLoader: Can\'t parse ' + url + '.', error.message );
	
						return;
	
					}
	
					var metadata = json.metadata;
	
					if ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {
	
						console.error( 'THREE.ObjectLoader: Can\'t load ' + url );
						return;
	
					}
	
					scope.parse( json, onLoad );
	
				}, onProgress, onError );
	
			},
	
			parse: function ( json, onLoad ) {
	
				var shapes = this.parseShape( json.shapes );
				var geometries = this.parseGeometries( json.geometries, shapes );
	
				var images = this.parseImages( json.images, function () {
	
					if ( onLoad !== undefined ) { onLoad( object ); }
	
				} );
	
				var textures = this.parseTextures( json.textures, images );
				var materials = this.parseMaterials( json.materials, textures );
	
				var object = this.parseObject( json.object, geometries, materials );
	
				if ( json.animations ) {
	
					object.animations = this.parseAnimations( json.animations );
	
				}
	
				if ( json.images === undefined || json.images.length === 0 ) {
	
					if ( onLoad !== undefined ) { onLoad( object ); }
	
				}
	
				return object;
	
			},
	
			parseShape: function ( json ) {
	
				var shapes = {};
	
				if ( json !== undefined ) {
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var shape = new Shape().fromJSON( json[ i ] );
	
						shapes[ shape.uuid ] = shape;
	
					}
	
				}
	
				return shapes;
	
			},
	
			parseGeometries: function ( json, shapes ) {
	
				var geometries = {};
	
				if ( json !== undefined ) {
	
					var bufferGeometryLoader = new BufferGeometryLoader();
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var geometry;
						var data = json[ i ];
	
						switch ( data.type ) {
	
							case 'PlaneGeometry':
							case 'PlaneBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.width,
									data.height,
									data.widthSegments,
									data.heightSegments
								);
	
								break;
	
							case 'BoxGeometry':
							case 'BoxBufferGeometry':
							case 'CubeGeometry': // backwards compatible
	
								geometry = new Geometries[ data.type ](
									data.width,
									data.height,
									data.depth,
									data.widthSegments,
									data.heightSegments,
									data.depthSegments
								);
	
								break;
	
							case 'CircleGeometry':
							case 'CircleBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.segments,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'CylinderGeometry':
							case 'CylinderBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radiusTop,
									data.radiusBottom,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'ConeGeometry':
							case 'ConeBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.height,
									data.radialSegments,
									data.heightSegments,
									data.openEnded,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'SphereGeometry':
							case 'SphereBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.widthSegments,
									data.heightSegments,
									data.phiStart,
									data.phiLength,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'DodecahedronGeometry':
							case 'DodecahedronBufferGeometry':
							case 'IcosahedronGeometry':
							case 'IcosahedronBufferGeometry':
							case 'OctahedronGeometry':
							case 'OctahedronBufferGeometry':
							case 'TetrahedronGeometry':
							case 'TetrahedronBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.detail
								);
	
								break;
	
							case 'RingGeometry':
							case 'RingBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.innerRadius,
									data.outerRadius,
									data.thetaSegments,
									data.phiSegments,
									data.thetaStart,
									data.thetaLength
								);
	
								break;
	
							case 'TorusGeometry':
							case 'TorusBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.tube,
									data.radialSegments,
									data.tubularSegments,
									data.arc
								);
	
								break;
	
							case 'TorusKnotGeometry':
							case 'TorusKnotBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.radius,
									data.tube,
									data.tubularSegments,
									data.radialSegments,
									data.p,
									data.q
								);
	
								break;
	
							case 'TubeGeometry':
							case 'TubeBufferGeometry':
	
								// This only works for built-in curves (e.g. CatmullRomCurve3).
								// User defined curves or instances of CurvePath will not be deserialized.
								geometry = new Geometries[ data.type ](
									new Curves[ data.path.type ]().fromJSON( data.path ),
									data.tubularSegments,
									data.radius,
									data.radialSegments,
									data.closed
								);
	
								break;
	
							case 'LatheGeometry':
							case 'LatheBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.points,
									data.segments,
									data.phiStart,
									data.phiLength
								);
	
								break;
	
							case 'PolyhedronGeometry':
							case 'PolyhedronBufferGeometry':
	
								geometry = new Geometries[ data.type ](
									data.vertices,
									data.indices,
									data.radius,
									data.details
								);
	
								break;
	
							case 'ShapeGeometry':
							case 'ShapeBufferGeometry':
	
								var geometryShapes = [];
	
								for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {
	
									var shape = shapes[ data.shapes[ j ] ];
	
									geometryShapes.push( shape );
	
								}
	
								geometry = new Geometries[ data.type ](
									geometryShapes,
									data.curveSegments
								);
	
								break;
	
	
							case 'ExtrudeGeometry':
							case 'ExtrudeBufferGeometry':
	
								var geometryShapes = [];
	
								for ( var j = 0, jl = data.shapes.length; j < jl; j ++ ) {
	
									var shape = shapes[ data.shapes[ j ] ];
	
									geometryShapes.push( shape );
	
								}
	
								var extrudePath = data.options.extrudePath;
	
								if ( extrudePath !== undefined ) {
	
									data.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );
	
								}
	
								geometry = new Geometries[ data.type ](
									geometryShapes,
									data.options
								);
	
								break;
	
							case 'BufferGeometry':
							case 'InstancedBufferGeometry':
	
								geometry = bufferGeometryLoader.parse( data );
	
								break;
	
							case 'Geometry':
	
								console.error( 'THREE.ObjectLoader: Loading "Geometry" is not supported anymore.' );
	
								break;
	
							default:
	
								console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );
	
								continue;
	
						}
	
						geometry.uuid = data.uuid;
	
						if ( data.name !== undefined ) { geometry.name = data.name; }
						if ( geometry.isBufferGeometry === true && data.userData !== undefined ) { geometry.userData = data.userData; }
	
						geometries[ data.uuid ] = geometry;
	
					}
	
				}
	
				return geometries;
	
			},
	
			parseMaterials: function ( json, textures ) {
	
				var cache = {}; // MultiMaterial
				var materials = {};
	
				if ( json !== undefined ) {
	
					var loader = new MaterialLoader();
					loader.setTextures( textures );
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var data = json[ i ];
	
						if ( data.type === 'MultiMaterial' ) {
	
							// Deprecated
	
							var array = [];
	
							for ( var j = 0; j < data.materials.length; j ++ ) {
	
								var material = data.materials[ j ];
	
								if ( cache[ material.uuid ] === undefined ) {
	
									cache[ material.uuid ] = loader.parse( material );
	
								}
	
								array.push( cache[ material.uuid ] );
	
							}
	
							materials[ data.uuid ] = array;
	
						} else {
	
							if ( cache[ data.uuid ] === undefined ) {
	
								cache[ data.uuid ] = loader.parse( data );
	
							}
	
							materials[ data.uuid ] = cache[ data.uuid ];
	
						}
	
					}
	
				}
	
				return materials;
	
			},
	
			parseAnimations: function ( json ) {
	
				var animations = [];
	
				for ( var i = 0; i < json.length; i ++ ) {
	
					var data = json[ i ];
	
					var clip = AnimationClip.parse( data );
	
					if ( data.uuid !== undefined ) { clip.uuid = data.uuid; }
	
					animations.push( clip );
	
				}
	
				return animations;
	
			},
	
			parseImages: function ( json, onLoad ) {
	
				var scope = this;
				var images = {};
	
				function loadImage( url ) {
	
					scope.manager.itemStart( url );
	
					return loader.load( url, function () {
	
						scope.manager.itemEnd( url );
	
					}, undefined, function () {
	
						scope.manager.itemError( url );
						scope.manager.itemEnd( url );
	
					} );
	
				}
	
				if ( json !== undefined && json.length > 0 ) {
	
					var manager = new LoadingManager( onLoad );
	
					var loader = new ImageLoader( manager );
					loader.setCrossOrigin( this.crossOrigin );
	
					for ( var i = 0, il = json.length; i < il; i ++ ) {
	
						var image = json[ i ];
						var url = image.url;
	
						if ( Array.isArray( url ) ) {
	
							// load array of images e.g CubeTexture
	
							images[ image.uuid ] = [];
	
							for ( var j = 0, jl = url.length; j < jl; j ++ ) {
	
								var currentUrl = url[ j ];
	
								var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( currentUrl ) ? currentUrl : scope.resourcePath + currentUrl;
	
								images[ image.uuid ].push( loadImage( path ) );
	
							}
	
						} else {
	
							// load single image
	
							var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.resourcePath + image.url;
	
							images[ image.uuid ] = loadImage( path );
	
						}
	
					}
	
				}
	
				return images;
	
			},
	
			parseTextures: function ( json, images ) {
	
				function parseConstant( value, type ) {
	
					if ( typeof value === 'number' ) { return value; }
	
					console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );
	
					return type[ value ];
	
				}
	
				var textures = {};
	
				if ( json !== undefined ) {
	
					for ( var i = 0, l = json.length; i < l; i ++ ) {
	
						var data = json[ i ];
	
						if ( data.image === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );
	
						}
	
						if ( images[ data.image ] === undefined ) {
	
							console.warn( 'THREE.ObjectLoader: Undefined image', data.image );
	
						}
	
						var texture;
	
						if ( Array.isArray( images[ data.image ] ) ) {
	
							texture = new CubeTexture( images[ data.image ] );
	
						} else {
	
							texture = new Texture( images[ data.image ] );
	
						}
	
						texture.needsUpdate = true;
	
						texture.uuid = data.uuid;
	
						if ( data.name !== undefined ) { texture.name = data.name; }
	
						if ( data.mapping !== undefined ) { texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING ); }
	
						if ( data.offset !== undefined ) { texture.offset.fromArray( data.offset ); }
						if ( data.repeat !== undefined ) { texture.repeat.fromArray( data.repeat ); }
						if ( data.center !== undefined ) { texture.center.fromArray( data.center ); }
						if ( data.rotation !== undefined ) { texture.rotation = data.rotation; }
	
						if ( data.wrap !== undefined ) {
	
							texture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );
							texture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );
	
						}
	
						if ( data.format !== undefined ) { texture.format = data.format; }
						if ( data.type !== undefined ) { texture.type = data.type; }
						if ( data.encoding !== undefined ) { texture.encoding = data.encoding; }
	
						if ( data.minFilter !== undefined ) { texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER ); }
						if ( data.magFilter !== undefined ) { texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER ); }
						if ( data.anisotropy !== undefined ) { texture.anisotropy = data.anisotropy; }
	
						if ( data.flipY !== undefined ) { texture.flipY = data.flipY; }
	
						if ( data.premultiplyAlpha !== undefined ) { texture.premultiplyAlpha = data.premultiplyAlpha; }
						if ( data.unpackAlignment !== undefined ) { texture.unpackAlignment = data.unpackAlignment; }
	
						textures[ data.uuid ] = texture;
	
					}
	
				}
	
				return textures;
	
			},
	
			parseObject: function ( data, geometries, materials ) {
	
				var object;
	
				function getGeometry( name ) {
	
					if ( geometries[ name ] === undefined ) {
	
						console.warn( 'THREE.ObjectLoader: Undefined geometry', name );
	
					}
	
					return geometries[ name ];
	
				}
	
				function getMaterial( name ) {
	
					if ( name === undefined ) { return undefined; }
	
					if ( Array.isArray( name ) ) {
	
						var array = [];
	
						for ( var i = 0, l = name.length; i < l; i ++ ) {
	
							var uuid = name[ i ];
	
							if ( materials[ uuid ] === undefined ) {
	
								console.warn( 'THREE.ObjectLoader: Undefined material', uuid );
	
							}
	
							array.push( materials[ uuid ] );
	
						}
	
						return array;
	
					}
	
					if ( materials[ name ] === undefined ) {
	
						console.warn( 'THREE.ObjectLoader: Undefined material', name );
	
					}
	
					return materials[ name ];
	
				}
	
				switch ( data.type ) {
	
					case 'Scene':
	
						object = new Scene();
	
						if ( data.background !== undefined ) {
	
							if ( Number.isInteger( data.background ) ) {
	
								object.background = new Color( data.background );
	
							}
	
						}
	
						if ( data.fog !== undefined ) {
	
							if ( data.fog.type === 'Fog' ) {
	
								object.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );
	
							} else if ( data.fog.type === 'FogExp2' ) {
	
								object.fog = new FogExp2( data.fog.color, data.fog.density );
	
							}
	
						}
	
						break;
	
					case 'PerspectiveCamera':
	
						object = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
	
						if ( data.focus !== undefined ) { object.focus = data.focus; }
						if ( data.zoom !== undefined ) { object.zoom = data.zoom; }
						if ( data.filmGauge !== undefined ) { object.filmGauge = data.filmGauge; }
						if ( data.filmOffset !== undefined ) { object.filmOffset = data.filmOffset; }
						if ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }
	
						break;
	
					case 'OrthographicCamera':
	
						object = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
	
						if ( data.zoom !== undefined ) { object.zoom = data.zoom; }
						if ( data.view !== undefined ) { object.view = Object.assign( {}, data.view ); }
	
						break;
	
					case 'AmbientLight':
	
						object = new AmbientLight( data.color, data.intensity );
	
						break;
	
					case 'DirectionalLight':
	
						object = new DirectionalLight( data.color, data.intensity );
	
						break;
	
					case 'PointLight':
	
						object = new PointLight( data.color, data.intensity, data.distance, data.decay );
	
						break;
	
					case 'RectAreaLight':
	
						object = new RectAreaLight( data.color, data.intensity, data.width, data.height );
	
						break;
	
					case 'SpotLight':
	
						object = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );
	
						break;
	
					case 'HemisphereLight':
	
						object = new HemisphereLight( data.color, data.groundColor, data.intensity );
	
						break;
	
					case 'SkinnedMesh':
	
						console.warn( 'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.' );
	
					case 'Mesh':
	
						var geometry = getGeometry( data.geometry );
						var material = getMaterial( data.material );
	
						if ( geometry.bones && geometry.bones.length > 0 ) {
	
							object = new SkinnedMesh( geometry, material );
	
						} else {
	
							object = new Mesh( geometry, material );
	
						}
	
						break;
	
					case 'InstancedMesh':
	
						var geometry = getGeometry( data.geometry );
						var material = getMaterial( data.material );
						var count = data.count;
						var instanceMatrix = data.instanceMatrix;
	
						object = new InstancedMesh( geometry, material, count );
						object.instanceMatrix = new BufferAttribute( new Float32Array( instanceMatrix.array ), 16 );
	
						break;
	
					case 'LOD':
	
						object = new LOD();
	
						break;
	
					case 'Line':
	
						object = new Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );
	
						break;
	
					case 'LineLoop':
	
						object = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );
	
						break;
	
					case 'LineSegments':
	
						object = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );
	
						break;
	
					case 'PointCloud':
					case 'Points':
	
						object = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );
	
						break;
	
					case 'Sprite':
	
						object = new Sprite( getMaterial( data.material ) );
	
						break;
	
					case 'Group':
	
						object = new Group();
	
						break;
	
					default:
	
						object = new Object3D();
	
				}
	
				object.uuid = data.uuid;
	
				if ( data.name !== undefined ) { object.name = data.name; }
	
				if ( data.matrix !== undefined ) {
	
					object.matrix.fromArray( data.matrix );
	
					if ( data.matrixAutoUpdate !== undefined ) { object.matrixAutoUpdate = data.matrixAutoUpdate; }
					if ( object.matrixAutoUpdate ) { object.matrix.decompose( object.position, object.quaternion, object.scale ); }
	
				} else {
	
					if ( data.position !== undefined ) { object.position.fromArray( data.position ); }
					if ( data.rotation !== undefined ) { object.rotation.fromArray( data.rotation ); }
					if ( data.quaternion !== undefined ) { object.quaternion.fromArray( data.quaternion ); }
					if ( data.scale !== undefined ) { object.scale.fromArray( data.scale ); }
	
				}
	
				if ( data.castShadow !== undefined ) { object.castShadow = data.castShadow; }
				if ( data.receiveShadow !== undefined ) { object.receiveShadow = data.receiveShadow; }
	
				if ( data.shadow ) {
	
					if ( data.shadow.bias !== undefined ) { object.shadow.bias = data.shadow.bias; }
					if ( data.shadow.radius !== undefined ) { object.shadow.radius = data.shadow.radius; }
					if ( data.shadow.mapSize !== undefined ) { object.shadow.mapSize.fromArray( data.shadow.mapSize ); }
					if ( data.shadow.camera !== undefined ) { object.shadow.camera = this.parseObject( data.shadow.camera ); }
	
				}
	
				if ( data.visible !== undefined ) { object.visible = data.visible; }
				if ( data.frustumCulled !== undefined ) { object.frustumCulled = data.frustumCulled; }
				if ( data.renderOrder !== undefined ) { object.renderOrder = data.renderOrder; }
				if ( data.userData !== undefined ) { object.userData = data.userData; }
				if ( data.layers !== undefined ) { object.layers.mask = data.layers; }
	
				if ( data.children !== undefined ) {
	
					var children = data.children;
	
					for ( var i = 0; i < children.length; i ++ ) {
	
						object.add( this.parseObject( children[ i ], geometries, materials ) );
	
					}
	
				}
	
				if ( data.type === 'LOD' ) {
	
					if ( data.autoUpdate !== undefined ) { object.autoUpdate = data.autoUpdate; }
	
					var levels = data.levels;
	
					for ( var l = 0; l < levels.length; l ++ ) {
	
						var level = levels[ l ];
						var child = object.getObjectByProperty( 'uuid', level.object );
	
						if ( child !== undefined ) {
	
							object.addLevel( child, level.distance );
	
						}
	
					}
	
				}
	
				return object;
	
			}
	
		} );
	
		var TEXTURE_MAPPING = {
			UVMapping: UVMapping,
			CubeReflectionMapping: CubeReflectionMapping,
			CubeRefractionMapping: CubeRefractionMapping,
			EquirectangularReflectionMapping: EquirectangularReflectionMapping,
			EquirectangularRefractionMapping: EquirectangularRefractionMapping,
			SphericalReflectionMapping: SphericalReflectionMapping,
			CubeUVReflectionMapping: CubeUVReflectionMapping,
			CubeUVRefractionMapping: CubeUVRefractionMapping
		};
	
		var TEXTURE_WRAPPING = {
			RepeatWrapping: RepeatWrapping,
			ClampToEdgeWrapping: ClampToEdgeWrapping,
			MirroredRepeatWrapping: MirroredRepeatWrapping
		};
	
		var TEXTURE_FILTER = {
			NearestFilter: NearestFilter,
			NearestMipmapNearestFilter: NearestMipmapNearestFilter,
			NearestMipmapLinearFilter: NearestMipmapLinearFilter,
			LinearFilter: LinearFilter,
			LinearMipmapNearestFilter: LinearMipmapNearestFilter,
			LinearMipmapLinearFilter: LinearMipmapLinearFilter
		};
	
		/**
		 * @author thespite / http://clicktorelease.com/
		 */
	
	
		function ImageBitmapLoader( manager ) {
	
			if ( typeof createImageBitmap === 'undefined' ) {
	
				console.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );
	
			}
	
			if ( typeof fetch === 'undefined' ) {
	
				console.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );
	
			}
	
			Loader.call( this, manager );
	
			this.options = undefined;
	
		}
	
		ImageBitmapLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: ImageBitmapLoader,
	
			setOptions: function setOptions( options ) {
	
				this.options = options;
	
				return this;
	
			},
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				if ( url === undefined ) { url = ''; }
	
				if ( this.path !== undefined ) { url = this.path + url; }
	
				url = this.manager.resolveURL( url );
	
				var scope = this;
	
				var cached = Cache.get( url );
	
				if ( cached !== undefined ) {
	
					scope.manager.itemStart( url );
	
					setTimeout( function () {
	
						if ( onLoad ) { onLoad( cached ); }
	
						scope.manager.itemEnd( url );
	
					}, 0 );
	
					return cached;
	
				}
	
				fetch( url ).then( function ( res ) {
	
					return res.blob();
	
				} ).then( function ( blob ) {
	
					if ( scope.options === undefined ) {
	
						// Workaround for FireFox. It causes an error if you pass options.
						return createImageBitmap( blob );
	
					} else {
	
						return createImageBitmap( blob, scope.options );
	
					}
	
				} ).then( function ( imageBitmap ) {
	
					Cache.add( url, imageBitmap );
	
					if ( onLoad ) { onLoad( imageBitmap ); }
	
					scope.manager.itemEnd( url );
	
				} ).catch( function ( e ) {
	
					if ( onError ) { onError( e ); }
	
					scope.manager.itemError( url );
					scope.manager.itemEnd( url );
	
				} );
	
				scope.manager.itemStart( url );
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * minimal class for proxing functions to Path. Replaces old "extractSubpaths()"
		 **/
	
		function ShapePath() {
	
			this.type = 'ShapePath';
	
			this.color = new Color();
	
			this.subPaths = [];
			this.currentPath = null;
	
		}
	
		Object.assign( ShapePath.prototype, {
	
			moveTo: function ( x, y ) {
	
				this.currentPath = new Path();
				this.subPaths.push( this.currentPath );
				this.currentPath.moveTo( x, y );
	
				return this;
	
			},
	
			lineTo: function ( x, y ) {
	
				this.currentPath.lineTo( x, y );
	
				return this;
	
			},
	
			quadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {
	
				this.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );
	
				return this;
	
			},
	
			bezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
	
				this.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );
	
				return this;
	
			},
	
			splineThru: function ( pts ) {
	
				this.currentPath.splineThru( pts );
	
				return this;
	
			},
	
			toShapes: function ( isCCW, noHoles ) {
	
				function toShapesNoHoles( inSubpaths ) {
	
					var shapes = [];
	
					for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {
	
						var tmpPath = inSubpaths[ i ];
	
						var tmpShape = new Shape();
						tmpShape.curves = tmpPath.curves;
	
						shapes.push( tmpShape );
	
					}
	
					return shapes;
	
				}
	
				function isPointInsidePolygon( inPt, inPolygon ) {
	
					var polyLen = inPolygon.length;
	
					// inPt on polygon contour => immediate success    or
					// toggling of inside/outside at every single! intersection point of an edge
					//  with the horizontal line through inPt, left of inPt
					//  not counting lowerY endpoints of edges and whole edges on that line
					var inside = false;
					for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
	
						var edgeLowPt = inPolygon[ p ];
						var edgeHighPt = inPolygon[ q ];
	
						var edgeDx = edgeHighPt.x - edgeLowPt.x;
						var edgeDy = edgeHighPt.y - edgeLowPt.y;
	
						if ( Math.abs( edgeDy ) > Number.EPSILON ) {
	
							// not parallel
							if ( edgeDy < 0 ) {
	
								edgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;
								edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
	
							}
							if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		{ continue; }
	
							if ( inPt.y === edgeLowPt.y ) {
	
								if ( inPt.x === edgeLowPt.x )		{ return	true; }		// inPt is on contour ?
								// continue;				// no intersection or edgeLowPt => doesn't count !!!
	
							} else {
	
								var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
								if ( perpEdge === 0 )				{ return	true; }		// inPt is on contour ?
								if ( perpEdge < 0 ) 				{ continue; }
								inside = ! inside;		// true intersection left of inPt
	
							}
	
						} else {
	
							// parallel or collinear
							if ( inPt.y !== edgeLowPt.y ) 		{ continue; }			// parallel
							// edge lies on the same horizontal line as inPt
							if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
								 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		{ return	true; }	// inPt: Point on contour !
							// continue;
	
						}
	
					}
	
					return	inside;
	
				}
	
				var isClockWise = ShapeUtils.isClockWise;
	
				var subPaths = this.subPaths;
				if ( subPaths.length === 0 ) { return []; }
	
				if ( noHoles === true )	{ return	toShapesNoHoles( subPaths ); }
	
	
				var solid, tmpPath, tmpShape, shapes = [];
	
				if ( subPaths.length === 1 ) {
	
					tmpPath = subPaths[ 0 ];
					tmpShape = new Shape();
					tmpShape.curves = tmpPath.curves;
					shapes.push( tmpShape );
					return shapes;
	
				}
	
				var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
				holesFirst = isCCW ? ! holesFirst : holesFirst;
	
				// console.log("Holes first", holesFirst);
	
				var betterShapeHoles = [];
				var newShapes = [];
				var newShapeHoles = [];
				var mainIdx = 0;
				var tmpPoints;
	
				newShapes[ mainIdx ] = undefined;
				newShapeHoles[ mainIdx ] = [];
	
				for ( var i = 0, l = subPaths.length; i < l; i ++ ) {
	
					tmpPath = subPaths[ i ];
					tmpPoints = tmpPath.getPoints();
					solid = isClockWise( tmpPoints );
					solid = isCCW ? ! solid : solid;
	
					if ( solid ) {
	
						if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	{ mainIdx ++; }
	
						newShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };
						newShapes[ mainIdx ].s.curves = tmpPath.curves;
	
						if ( holesFirst )	{ mainIdx ++; }
						newShapeHoles[ mainIdx ] = [];
	
						//console.log('cw', i);
	
					} else {
	
						newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );
	
						//console.log('ccw', i);
	
					}
	
				}
	
				// only Holes? -> probably all Shapes with wrong orientation
				if ( ! newShapes[ 0 ] )	{ return	toShapesNoHoles( subPaths ); }
	
	
				if ( newShapes.length > 1 ) {
	
					var ambiguous = false;
					var toChange = [];
	
					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
	
						betterShapeHoles[ sIdx ] = [];
	
					}
	
					for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
	
						var sho = newShapeHoles[ sIdx ];
	
						for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {
	
							var ho = sho[ hIdx ];
							var hole_unassigned = true;
	
							for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
	
								if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {
	
									if ( sIdx !== s2Idx )	{ toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } ); }
									if ( hole_unassigned ) {
	
										hole_unassigned = false;
										betterShapeHoles[ s2Idx ].push( ho );
	
									} else {
	
										ambiguous = true;
	
									}
	
								}
	
							}
							if ( hole_unassigned ) {
	
								betterShapeHoles[ sIdx ].push( ho );
	
							}
	
						}
	
					}
					// console.log("ambiguous: ", ambiguous);
					if ( toChange.length > 0 ) {
	
						// console.log("to change: ", toChange);
						if ( ! ambiguous )	{ newShapeHoles = betterShapeHoles; }
	
					}
	
				}
	
				var tmpHoles;
	
				for ( var i = 0, il = newShapes.length; i < il; i ++ ) {
	
					tmpShape = newShapes[ i ].s;
					shapes.push( tmpShape );
					tmpHoles = newShapeHoles[ i ];
	
					for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
	
						tmpShape.holes.push( tmpHoles[ j ].h );
	
					}
	
				}
	
				//console.log("shape", shapes);
	
				return shapes;
	
			}
	
		} );
	
		/**
		 * @author zz85 / http://www.lab4games.net/zz85/blog
		 * @author mrdoob / http://mrdoob.com/
		 */
	
	
		function Font( data ) {
	
			this.type = 'Font';
	
			this.data = data;
	
		}
	
		Object.assign( Font.prototype, {
	
			isFont: true,
	
			generateShapes: function ( text, size ) {
	
				if ( size === undefined ) { size = 100; }
	
				var shapes = [];
				var paths = createPaths( text, size, this.data );
	
				for ( var p = 0, pl = paths.length; p < pl; p ++ ) {
	
					Array.prototype.push.apply( shapes, paths[ p ].toShapes() );
	
				}
	
				return shapes;
	
			}
	
		} );
	
		function createPaths( text, size, data ) {
	
			var chars = Array.from ? Array.from( text ) : String( text ).split( '' ); // workaround for IE11, see #13988
			var scale = size / data.resolution;
			var line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;
	
			var paths = [];
	
			var offsetX = 0, offsetY = 0;
	
			for ( var i = 0; i < chars.length; i ++ ) {
	
				var char = chars[ i ];
	
				if ( char === '\n' ) {
	
					offsetX = 0;
					offsetY -= line_height;
	
				} else {
	
					var ret = createPath( char, scale, offsetX, offsetY, data );
					offsetX += ret.offsetX;
					paths.push( ret.path );
	
				}
	
			}
	
			return paths;
	
		}
	
		function createPath( char, scale, offsetX, offsetY, data ) {
	
			var glyph = data.glyphs[ char ] || data.glyphs[ '?' ];
	
			if ( ! glyph ) {
	
				console.error( 'THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + '.' );
	
				return;
	
			}
	
			var path = new ShapePath();
	
			var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
	
			if ( glyph.o ) {
	
				var outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
	
				for ( var i = 0, l = outline.length; i < l; ) {
	
					var action = outline[ i ++ ];
	
					switch ( action ) {
	
						case 'm': // moveTo
	
							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;
	
							path.moveTo( x, y );
	
							break;
	
						case 'l': // lineTo
	
							x = outline[ i ++ ] * scale + offsetX;
							y = outline[ i ++ ] * scale + offsetY;
	
							path.lineTo( x, y );
	
							break;
	
						case 'q': // quadraticCurveTo
	
							cpx = outline[ i ++ ] * scale + offsetX;
							cpy = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;
	
							path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );
	
							break;
	
						case 'b': // bezierCurveTo
	
							cpx = outline[ i ++ ] * scale + offsetX;
							cpy = outline[ i ++ ] * scale + offsetY;
							cpx1 = outline[ i ++ ] * scale + offsetX;
							cpy1 = outline[ i ++ ] * scale + offsetY;
							cpx2 = outline[ i ++ ] * scale + offsetX;
							cpy2 = outline[ i ++ ] * scale + offsetY;
	
							path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );
	
							break;
	
					}
	
				}
	
			}
	
			return { offsetX: glyph.ha * scale, path: path };
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function FontLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		FontLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: FontLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var scope = this;
	
				var loader = new FileLoader( this.manager );
				loader.setPath( this.path );
				loader.load( url, function ( text ) {
	
					var json;
	
					try {
	
						json = JSON.parse( text );
	
					} catch ( e ) {
	
						console.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );
						json = JSON.parse( text.substring( 65, text.length - 2 ) );
	
					}
	
					var font = scope.parse( json );
	
					if ( onLoad ) { onLoad( font ); }
	
				}, onProgress, onError );
	
			},
	
			parse: function ( json ) {
	
				return new Font( json );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _context;
	
		var AudioContext = {
	
			getContext: function () {
	
				if ( _context === undefined ) {
	
					_context = new ( window.AudioContext || window.webkitAudioContext )();
	
				}
	
				return _context;
	
			},
	
			setContext: function ( value ) {
	
				_context = value;
	
			}
	
		};
	
		/**
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */
	
		function AudioLoader( manager ) {
	
			Loader.call( this, manager );
	
		}
	
		AudioLoader.prototype = Object.assign( Object.create( Loader.prototype ), {
	
			constructor: AudioLoader,
	
			load: function ( url, onLoad, onProgress, onError ) {
	
				var loader = new FileLoader( this.manager );
				loader.setResponseType( 'arraybuffer' );
				loader.setPath( this.path );
				loader.load( url, function ( buffer ) {
	
					// Create a copy of the buffer. The `decodeAudioData` method
					// detaches the buffer when complete, preventing reuse.
					var bufferCopy = buffer.slice( 0 );
	
					var context = AudioContext.getContext();
					context.decodeAudioData( bufferCopy, function ( audioBuffer ) {
	
						onLoad( audioBuffer );
	
					} );
	
				}, onProgress, onError );
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * Primary reference:
		 *   https://graphics.stanford.edu/papers/envmap/envmap.pdf
		 *
		 * Secondary reference:
		 *   https://www.ppsloan.org/publications/StupidSH36.pdf
		 */
	
		// 3-band SH defined by 9 coefficients
	
		function SphericalHarmonics3() {
	
			this.coefficients = [];
	
			for ( var i = 0; i < 9; i ++ ) {
	
				this.coefficients.push( new Vector3() );
	
			}
	
		}
	
		Object.assign( SphericalHarmonics3.prototype, {
	
			isSphericalHarmonics3: true,
	
			set: function ( coefficients ) {
	
				for ( var i = 0; i < 9; i ++ ) {
	
					this.coefficients[ i ].copy( coefficients[ i ] );
	
				}
	
				return this;
	
			},
	
			zero: function () {
	
				for ( var i = 0; i < 9; i ++ ) {
	
					this.coefficients[ i ].set( 0, 0, 0 );
	
				}
	
				return this;
	
			},
	
			// get the radiance in the direction of the normal
			// target is a Vector3
			getAt: function ( normal, target ) {
	
				// normal is assumed to be unit length
	
				var x = normal.x, y = normal.y, z = normal.z;
	
				var coeff = this.coefficients;
	
				// band 0
				target.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );
	
				// band 1
				target.addScale( coeff[ 1 ], 0.488603 * y );
				target.addScale( coeff[ 2 ], 0.488603 * z );
				target.addScale( coeff[ 3 ], 0.488603 * x );
	
				// band 2
				target.addScale( coeff[ 4 ], 1.092548 * ( x * y ) );
				target.addScale( coeff[ 5 ], 1.092548 * ( y * z ) );
				target.addScale( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );
				target.addScale( coeff[ 7 ], 1.092548 * ( x * z ) );
				target.addScale( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );
	
				return target;
	
			},
	
			// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
			// target is a Vector3
			// https://graphics.stanford.edu/papers/envmap/envmap.pdf
			getIrradianceAt: function ( normal, target ) {
	
				// normal is assumed to be unit length
	
				var x = normal.x, y = normal.y, z = normal.z;
	
				var coeff = this.coefficients;
	
				// band 0
				target.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095
	
				// band 1
				target.addScale( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603
				target.addScale( coeff[ 2 ], 2.0 * 0.511664 * z );
				target.addScale( coeff[ 3 ], 2.0 * 0.511664 * x );
	
				// band 2
				target.addScale( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548
				target.addScale( coeff[ 5 ], 2.0 * 0.429043 * y * z );
				target.addScale( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3
				target.addScale( coeff[ 7 ], 2.0 * 0.429043 * x * z );
				target.addScale( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274
	
				return target;
	
			},
	
			add: function ( sh ) {
	
				for ( var i = 0; i < 9; i ++ ) {
	
					this.coefficients[ i ].add( sh.coefficients[ i ] );
	
				}
	
				return this;
	
			},
	
	
			scale: function ( s ) {
	
				for ( var i = 0; i < 9; i ++ ) {
	
					this.coefficients[ i ].multiplyScalar( s );
	
				}
	
				return this;
	
			},
	
			lerp: function ( sh, alpha ) {
	
				for ( var i = 0; i < 9; i ++ ) {
	
					this.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );
	
				}
	
				return this;
	
			},
	
			equals: function ( sh ) {
	
				for ( var i = 0; i < 9; i ++ ) {
	
					if ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {
	
						return false;
	
					}
	
				}
	
				return true;
	
			},
	
			copy: function ( sh ) {
	
				return this.set( sh.coefficients );
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			fromArray: function ( array, offset ) {
	
				if ( offset === undefined ) { offset = 0; }
	
				var coefficients = this.coefficients;
	
				for ( var i = 0; i < 9; i ++ ) {
	
					coefficients[ i ].fromArray( array, offset + ( i * 3 ) );
	
				}
	
				return this;
	
			},
	
			toArray: function ( array, offset ) {
	
				if ( array === undefined ) { array = []; }
				if ( offset === undefined ) { offset = 0; }
	
				var coefficients = this.coefficients;
	
				for ( var i = 0; i < 9; i ++ ) {
	
					coefficients[ i ].toArray( array, offset + ( i * 3 ) );
	
				}
	
				return array;
	
			}
	
		} );
	
		Object.assign( SphericalHarmonics3, {
	
			// evaluate the basis functions
			// shBasis is an Array[ 9 ]
			getBasisAt: function ( normal, shBasis ) {
	
				// normal is assumed to be unit length
	
				var x = normal.x, y = normal.y, z = normal.z;
	
				// band 0
				shBasis[ 0 ] = 0.282095;
	
				// band 1
				shBasis[ 1 ] = 0.488603 * y;
				shBasis[ 2 ] = 0.488603 * z;
				shBasis[ 3 ] = 0.488603 * x;
	
				// band 2
				shBasis[ 4 ] = 1.092548 * x * y;
				shBasis[ 5 ] = 1.092548 * y * z;
				shBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );
				shBasis[ 7 ] = 1.092548 * x * z;
				shBasis[ 8 ] = 0.546274 * ( x * x - y * y );
	
			}
	
		} );
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * A LightProbe is a source of indirect-diffuse light
		 */
	
		function LightProbe( sh, intensity ) {
	
			Light.call( this, undefined, intensity );
	
			this.sh = ( sh !== undefined ) ? sh : new SphericalHarmonics3();
	
		}
	
		LightProbe.prototype = Object.assign( Object.create( Light.prototype ), {
	
			constructor: LightProbe,
	
			isLightProbe: true,
	
			copy: function ( source ) {
	
				Light.prototype.copy.call( this, source );
	
				this.sh.copy( source.sh );
				this.intensity = source.intensity;
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = Light.prototype.toJSON.call( this, meta );
	
				// data.sh = this.sh.toArray(); // todo
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function HemisphereLightProbe( skyColor, groundColor, intensity ) {
	
			LightProbe.call( this, undefined, intensity );
	
			var color1 = new Color().set( skyColor );
			var color2 = new Color().set( groundColor );
	
			var sky = new Vector3( color1.r, color1.g, color1.b );
			var ground = new Vector3( color2.r, color2.g, color2.b );
	
			// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );
			var c0 = Math.sqrt( Math.PI );
			var c1 = c0 * Math.sqrt( 0.75 );
	
			this.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );
			this.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );
	
		}
	
		HemisphereLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {
	
			constructor: HemisphereLightProbe,
	
			isHemisphereLightProbe: true,
	
			copy: function ( source ) { // modifying colors not currently supported
	
				LightProbe.prototype.copy.call( this, source );
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = LightProbe.prototype.toJSON.call( this, meta );
	
				// data.sh = this.sh.toArray(); // todo
	
				return data;
	
			}
	
		} );
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function AmbientLightProbe( color, intensity ) {
	
			LightProbe.call( this, undefined, intensity );
	
			var color1 = new Color().set( color );
	
			// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );
			this.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );
	
		}
	
		AmbientLightProbe.prototype = Object.assign( Object.create( LightProbe.prototype ), {
	
			constructor: AmbientLightProbe,
	
			isAmbientLightProbe: true,
	
			copy: function ( source ) { // modifying color not currently supported
	
				LightProbe.prototype.copy.call( this, source );
	
				return this;
	
			},
	
			toJSON: function ( meta ) {
	
				var data = LightProbe.prototype.toJSON.call( this, meta );
	
				// data.sh = this.sh.toArray(); // todo
	
				return data;
	
			}
	
		} );
	
		var _eyeRight = new Matrix4();
		var _eyeLeft = new Matrix4();
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function StereoCamera() {
	
			this.type = 'StereoCamera';
	
			this.aspect = 1;
	
			this.eyeSep = 0.064;
	
			this.cameraL = new PerspectiveCamera();
			this.cameraL.layers.enable( 1 );
			this.cameraL.matrixAutoUpdate = false;
	
			this.cameraR = new PerspectiveCamera();
			this.cameraR.layers.enable( 2 );
			this.cameraR.matrixAutoUpdate = false;
	
			this._cache = {
				focus: null,
				fov: null,
				aspect: null,
				near: null,
				far: null,
				zoom: null,
				eyeSep: null
			};
	
		}
	
		Object.assign( StereoCamera.prototype, {
	
			update: function ( camera ) {
	
				var cache = this._cache;
	
				var needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||
					cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||
					cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;
	
				if ( needsUpdate ) {
	
					cache.focus = camera.focus;
					cache.fov = camera.fov;
					cache.aspect = camera.aspect * this.aspect;
					cache.near = camera.near;
					cache.far = camera.far;
					cache.zoom = camera.zoom;
					cache.eyeSep = this.eyeSep;
	
					// Off-axis stereoscopic effect based on
					// http://paulbourke.net/stereographics/stereorender/
	
					var projectionMatrix = camera.projectionMatrix.clone();
					var eyeSepHalf = cache.eyeSep / 2;
					var eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;
					var ymax = ( cache.near * Math.tan( MathUtils.DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;
					var xmin, xmax;
	
					// translate xOffset
	
					_eyeLeft.elements[ 12 ] = - eyeSepHalf;
					_eyeRight.elements[ 12 ] = eyeSepHalf;
	
					// for left eye
	
					xmin = - ymax * cache.aspect + eyeSepOnProjection;
					xmax = ymax * cache.aspect + eyeSepOnProjection;
	
					projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
	
					this.cameraL.projectionMatrix.copy( projectionMatrix );
	
					// for right eye
	
					xmin = - ymax * cache.aspect - eyeSepOnProjection;
					xmax = ymax * cache.aspect - eyeSepOnProjection;
	
					projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );
					projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );
	
					this.cameraR.projectionMatrix.copy( projectionMatrix );
	
				}
	
				this.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );
				this.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function Clock( autoStart ) {
	
			this.autoStart = ( autoStart !== undefined ) ? autoStart : true;
	
			this.startTime = 0;
			this.oldTime = 0;
			this.elapsedTime = 0;
	
			this.running = false;
	
		}
	
		Object.assign( Clock.prototype, {
	
			start: function () {
	
				this.startTime = ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732
	
				this.oldTime = this.startTime;
				this.elapsedTime = 0;
				this.running = true;
	
			},
	
			stop: function () {
	
				this.getElapsedTime();
				this.running = false;
				this.autoStart = false;
	
			},
	
			getElapsedTime: function () {
	
				this.getDelta();
				return this.elapsedTime;
	
			},
	
			getDelta: function () {
	
				var diff = 0;
	
				if ( this.autoStart && ! this.running ) {
	
					this.start();
					return 0;
	
				}
	
				if ( this.running ) {
	
					var newTime = ( typeof performance === 'undefined' ? Date : performance ).now();
	
					diff = ( newTime - this.oldTime ) / 1000;
					this.oldTime = newTime;
	
					this.elapsedTime += diff;
	
				}
	
				return diff;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _position$2 = new Vector3();
		var _quaternion$3 = new Quaternion();
		var _scale$1 = new Vector3();
		var _orientation = new Vector3();
	
		function AudioListener() {
	
			Object3D.call( this );
	
			this.type = 'AudioListener';
	
			this.context = AudioContext.getContext();
	
			this.gain = this.context.createGain();
			this.gain.connect( this.context.destination );
	
			this.filter = null;
	
			this.timeDelta = 0;
	
			// private
	
			this._clock = new Clock();
	
		}
	
		AudioListener.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: AudioListener,
	
			getInput: function () {
	
				return this.gain;
	
			},
	
			removeFilter: function ( ) {
	
				if ( this.filter !== null ) {
	
					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );
					this.gain.connect( this.context.destination );
					this.filter = null;
	
				}
	
				return this;
	
			},
	
			getFilter: function () {
	
				return this.filter;
	
			},
	
			setFilter: function ( value ) {
	
				if ( this.filter !== null ) {
	
					this.gain.disconnect( this.filter );
					this.filter.disconnect( this.context.destination );
	
				} else {
	
					this.gain.disconnect( this.context.destination );
	
				}
	
				this.filter = value;
				this.gain.connect( this.filter );
				this.filter.connect( this.context.destination );
	
				return this;
	
			},
	
			getMasterVolume: function () {
	
				return this.gain.gain.value;
	
			},
	
			setMasterVolume: function ( value ) {
	
				this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
	
				return this;
	
			},
	
			updateMatrixWorld: function ( force ) {
	
				Object3D.prototype.updateMatrixWorld.call( this, force );
	
				var listener = this.context.listener;
				var up = this.up;
	
				this.timeDelta = this._clock.getDelta();
	
				this.matrixWorld.decompose( _position$2, _quaternion$3, _scale$1 );
	
				_orientation.set( 0, 0, - 1 ).applyQuaternion( _quaternion$3 );
	
				if ( listener.positionX ) {
	
					// code path for Chrome (see #14393)
	
					var endTime = this.context.currentTime + this.timeDelta;
	
					listener.positionX.linearRampToValueAtTime( _position$2.x, endTime );
					listener.positionY.linearRampToValueAtTime( _position$2.y, endTime );
					listener.positionZ.linearRampToValueAtTime( _position$2.z, endTime );
					listener.forwardX.linearRampToValueAtTime( _orientation.x, endTime );
					listener.forwardY.linearRampToValueAtTime( _orientation.y, endTime );
					listener.forwardZ.linearRampToValueAtTime( _orientation.z, endTime );
					listener.upX.linearRampToValueAtTime( up.x, endTime );
					listener.upY.linearRampToValueAtTime( up.y, endTime );
					listener.upZ.linearRampToValueAtTime( up.z, endTime );
	
				} else {
	
					listener.setPosition( _position$2.x, _position$2.y, _position$2.z );
					listener.setOrientation( _orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z );
	
				}
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Reece Aaron Lecrivain / http://reecenotes.com/
		 */
	
		function Audio( listener ) {
	
			Object3D.call( this );
	
			this.type = 'Audio';
	
			this.listener = listener;
			this.context = listener.context;
	
			this.gain = this.context.createGain();
			this.gain.connect( listener.getInput() );
	
			this.autoplay = false;
	
			this.buffer = null;
			this.detune = 0;
			this.loop = false;
			this.loopStart = 0;
			this.loopEnd = 0;
			this.offset = 0;
			this.duration = undefined;
			this.playbackRate = 1;
			this.isPlaying = false;
			this.hasPlaybackControl = true;
			this.sourceType = 'empty';
	
			this._startedAt = 0;
			this._pausedAt = 0;
	
			this.filters = [];
	
		}
	
		Audio.prototype = Object.assign( Object.create( Object3D.prototype ), {
	
			constructor: Audio,
	
			getOutput: function () {
	
				return this.gain;
	
			},
	
			setNodeSource: function ( audioNode ) {
	
				this.hasPlaybackControl = false;
				this.sourceType = 'audioNode';
				this.source = audioNode;
				this.connect();
	
				return this;
	
			},
	
			setMediaElementSource: function ( mediaElement ) {
	
				this.hasPlaybackControl = false;
				this.sourceType = 'mediaNode';
				this.source = this.context.createMediaElementSource( mediaElement );
				this.connect();
	
				return this;
	
			},
	
			setMediaStreamSource: function ( mediaStream ) {
	
				this.hasPlaybackControl = false;
				this.sourceType = 'mediaStreamNode';
				this.source = this.context.createMediaStreamSource( mediaStream );
				this.connect();
	
				return this;
	
			},
	
			setBuffer: function ( audioBuffer ) {
	
				this.buffer = audioBuffer;
				this.sourceType = 'buffer';
	
				if ( this.autoplay ) { this.play(); }
	
				return this;
	
			},
	
			play: function ( delay ) {
	
				if ( delay === undefined ) { delay = 0; }
	
				if ( this.isPlaying === true ) {
	
					console.warn( 'THREE.Audio: Audio is already playing.' );
					return;
	
				}
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this._startedAt = this.context.currentTime + delay;
	
				var source = this.context.createBufferSource();
				source.buffer = this.buffer;
				source.loop = this.loop;
				source.loopStart = this.loopStart;
				source.loopEnd = this.loopEnd;
				source.onended = this.onEnded.bind( this );
				source.start( this._startedAt, this._pausedAt + this.offset, this.duration );
	
				this.isPlaying = true;
	
				this.source = source;
	
				this.setDetune( this.detune );
				this.setPlaybackRate( this.playbackRate );
	
				return this.connect();
	
			},
	
			pause: function () {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				if ( this.isPlaying === true ) {
	
					this._pausedAt += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;
	
					this.source.stop();
					this.source.onended = null;
	
					this.isPlaying = false;
	
				}
	
				return this;
	
			},
	
			stop: function () {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this._pausedAt = 0;
	
				this.source.stop();
				this.source.onended = null;
				this.isPlaying = false;
	
				return this;
	
			},
	
			connect: function () {
	
				if ( this.filters.length > 0 ) {
	
					this.source.connect( this.filters[ 0 ] );
	
					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
	
						this.filters[ i - 1 ].connect( this.filters[ i ] );
	
					}
	
					this.filters[ this.filters.length - 1 ].connect( this.getOutput() );
	
				} else {
	
					this.source.connect( this.getOutput() );
	
				}
	
				return this;
	
			},
	
			disconnect: function () {
	
				if ( this.filters.length > 0 ) {
	
					this.source.disconnect( this.filters[ 0 ] );
	
					for ( var i = 1, l = this.filters.length; i < l; i ++ ) {
	
						this.filters[ i - 1 ].disconnect( this.filters[ i ] );
	
					}
	
					this.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );
	
				} else {
	
					this.source.disconnect( this.getOutput() );
	
				}
	
				return this;
	
			},
	
			getFilters: function () {
	
				return this.filters;
	
			},
	
			setFilters: function ( value ) {
	
				if ( ! value ) { value = []; }
	
				if ( this.isPlaying === true ) {
	
					this.disconnect();
					this.filters = value;
					this.connect();
	
				} else {
	
					this.filters = value;
	
				}
	
				return this;
	
			},
	
			setDetune: function ( value ) {
	
				this.detune = value;
	
				if ( this.source.detune === undefined ) { return; } // only set detune when available
	
				if ( this.isPlaying === true ) {
	
					this.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );
	
				}
	
				return this;
	
			},
	
			getDetune: function () {
	
				return this.detune;
	
			},
	
			getFilter: function () {
	
				return this.getFilters()[ 0 ];
	
			},
	
			setFilter: function ( filter ) {
	
				return this.setFilters( filter ? [ filter ] : [] );
	
			},
	
			setPlaybackRate: function ( value ) {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this.playbackRate = value;
	
				if ( this.isPlaying === true ) {
	
					this.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );
	
				}
	
				return this;
	
			},
	
			getPlaybackRate: function () {
	
				return this.playbackRate;
	
			},
	
			onEnded: function () {
	
				this.isPlaying = false;
	
			},
	
			getLoop: function () {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return false;
	
				}
	
				return this.loop;
	
			},
	
			setLoop: function ( value ) {
	
				if ( this.hasPlaybackControl === false ) {
	
					console.warn( 'THREE.Audio: this Audio has no playback control.' );
					return;
	
				}
	
				this.loop = value;
	
				if ( this.isPlaying === true ) {
	
					this.source.loop = this.loop;
	
				}
	
				return this;
	
			},
	
			setLoopStart: function ( value ) {
	
				this.loopStart = value;
	
				return this;
	
			},
	
			setLoopEnd: function ( value ) {
	
				this.loopEnd = value;
	
				return this;
	
			},
	
			getVolume: function () {
	
				return this.gain.gain.value;
	
			},
	
			setVolume: function ( value ) {
	
				this.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		var _position$3 = new Vector3();
		var _quaternion$4 = new Quaternion();
		var _scale$2 = new Vector3();
		var _orientation$1 = new Vector3();
	
		function PositionalAudio( listener ) {
	
			Audio.call( this, listener );
	
			this.panner = this.context.createPanner();
			this.panner.panningModel = 'HRTF';
			this.panner.connect( this.gain );
	
		}
	
		PositionalAudio.prototype = Object.assign( Object.create( Audio.prototype ), {
	
			constructor: PositionalAudio,
	
			getOutput: function () {
	
				return this.panner;
	
			},
	
			getRefDistance: function () {
	
				return this.panner.refDistance;
	
			},
	
			setRefDistance: function ( value ) {
	
				this.panner.refDistance = value;
	
				return this;
	
			},
	
			getRolloffFactor: function () {
	
				return this.panner.rolloffFactor;
	
			},
	
			setRolloffFactor: function ( value ) {
	
				this.panner.rolloffFactor = value;
	
				return this;
	
			},
	
			getDistanceModel: function () {
	
				return this.panner.distanceModel;
	
			},
	
			setDistanceModel: function ( value ) {
	
				this.panner.distanceModel = value;
	
				return this;
	
			},
	
			getMaxDistance: function () {
	
				return this.panner.maxDistance;
	
			},
	
			setMaxDistance: function ( value ) {
	
				this.panner.maxDistance = value;
	
				return this;
	
			},
	
			setDirectionalCone: function ( coneInnerAngle, coneOuterAngle, coneOuterGain ) {
	
				this.panner.coneInnerAngle = coneInnerAngle;
				this.panner.coneOuterAngle = coneOuterAngle;
				this.panner.coneOuterGain = coneOuterGain;
	
				return this;
	
			},
	
			updateMatrixWorld: function ( force ) {
	
				Object3D.prototype.updateMatrixWorld.call( this, force );
	
				if ( this.hasPlaybackControl === true && this.isPlaying === false ) { return; }
	
				this.matrixWorld.decompose( _position$3, _quaternion$4, _scale$2 );
	
				_orientation$1.set( 0, 0, 1 ).applyQuaternion( _quaternion$4 );
	
				var panner = this.panner;
	
				if ( panner.positionX ) {
	
					// code path for Chrome and Firefox (see #14393)
	
					var endTime = this.context.currentTime + this.listener.timeDelta;
	
					panner.positionX.linearRampToValueAtTime( _position$3.x, endTime );
					panner.positionY.linearRampToValueAtTime( _position$3.y, endTime );
					panner.positionZ.linearRampToValueAtTime( _position$3.z, endTime );
					panner.orientationX.linearRampToValueAtTime( _orientation$1.x, endTime );
					panner.orientationY.linearRampToValueAtTime( _orientation$1.y, endTime );
					panner.orientationZ.linearRampToValueAtTime( _orientation$1.z, endTime );
	
				} else {
	
					panner.setPosition( _position$3.x, _position$3.y, _position$3.z );
					panner.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z );
	
				}
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AudioAnalyser( audio, fftSize ) {
	
			this.analyser = audio.context.createAnalyser();
			this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;
	
			this.data = new Uint8Array( this.analyser.frequencyBinCount );
	
			audio.getOutput().connect( this.analyser );
	
		}
	
		Object.assign( AudioAnalyser.prototype, {
	
			getFrequencyData: function () {
	
				this.analyser.getByteFrequencyData( this.data );
	
				return this.data;
	
			},
	
			getAverageFrequency: function () {
	
				var value = 0, data = this.getFrequencyData();
	
				for ( var i = 0; i < data.length; i ++ ) {
	
					value += data[ i ];
	
				}
	
				return value / data.length;
	
			}
	
		} );
	
		/**
		 *
		 * Buffered scene graph property that allows weighted accumulation.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function PropertyMixer( binding, typeName, valueSize ) {
	
			this.binding = binding;
			this.valueSize = valueSize;
	
			var bufferType = Float64Array,
				mixFunction;
	
			switch ( typeName ) {
	
				case 'quaternion':
					mixFunction = this._slerp;
					break;
	
				case 'string':
				case 'bool':
					bufferType = Array;
					mixFunction = this._select;
					break;
	
				default:
					mixFunction = this._lerp;
	
			}
	
			this.buffer = new bufferType( valueSize * 4 );
			// layout: [ incoming | accu0 | accu1 | orig ]
			//
			// interpolators can use .buffer as their .result
			// the data then goes to 'incoming'
			//
			// 'accu0' and 'accu1' are used frame-interleaved for
			// the cumulative result and are compared to detect
			// changes
			//
			// 'orig' stores the original state of the property
	
			this._mixBufferRegion = mixFunction;
	
			this.cumulativeWeight = 0;
	
			this.useCount = 0;
			this.referenceCount = 0;
	
		}
	
		Object.assign( PropertyMixer.prototype, {
	
			// accumulate data in the 'incoming' region into 'accu<i>'
			accumulate: function ( accuIndex, weight ) {
	
				// note: happily accumulating nothing when weight = 0, the caller knows
				// the weight and shouldn't have made the call in the first place
	
				var buffer = this.buffer,
					stride = this.valueSize,
					offset = accuIndex * stride + stride,
	
					currentWeight = this.cumulativeWeight;
	
				if ( currentWeight === 0 ) {
	
					// accuN := incoming * weight
	
					for ( var i = 0; i !== stride; ++ i ) {
	
						buffer[ offset + i ] = buffer[ i ];
	
					}
	
					currentWeight = weight;
	
				} else {
	
					// accuN := accuN + incoming * weight
	
					currentWeight += weight;
					var mix = weight / currentWeight;
					this._mixBufferRegion( buffer, offset, 0, mix, stride );
	
				}
	
				this.cumulativeWeight = currentWeight;
	
			},
	
			// apply the state of 'accu<i>' to the binding when accus differ
			apply: function ( accuIndex ) {
	
				var stride = this.valueSize,
					buffer = this.buffer,
					offset = accuIndex * stride + stride,
	
					weight = this.cumulativeWeight,
	
					binding = this.binding;
	
				this.cumulativeWeight = 0;
	
				if ( weight < 1 ) {
	
					// accuN := accuN + original * ( 1 - cumulativeWeight )
	
					var originalValueOffset = stride * 3;
	
					this._mixBufferRegion(
						buffer, offset, originalValueOffset, 1 - weight, stride );
	
				}
	
				for ( var i = stride, e = stride + stride; i !== e; ++ i ) {
	
					if ( buffer[ i ] !== buffer[ i + stride ] ) {
	
						// value has changed -> update scene graph
	
						binding.setValue( buffer, offset );
						break;
	
					}
	
				}
	
			},
	
			// remember the state of the bound property and copy it to both accus
			saveOriginalState: function () {
	
				var binding = this.binding;
	
				var buffer = this.buffer,
					stride = this.valueSize,
	
					originalValueOffset = stride * 3;
	
				binding.getValue( buffer, originalValueOffset );
	
				// accu[0..1] := orig -- initially detect changes against the original
				for ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {
	
					buffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];
	
				}
	
				this.cumulativeWeight = 0;
	
			},
	
			// apply the state previously taken via 'saveOriginalState' to the binding
			restoreOriginalState: function () {
	
				var originalValueOffset = this.valueSize * 3;
				this.binding.setValue( this.buffer, originalValueOffset );
	
			},
	
	
			// mix functions
	
			_select: function ( buffer, dstOffset, srcOffset, t, stride ) {
	
				if ( t >= 0.5 ) {
	
					for ( var i = 0; i !== stride; ++ i ) {
	
						buffer[ dstOffset + i ] = buffer[ srcOffset + i ];
	
					}
	
				}
	
			},
	
			_slerp: function ( buffer, dstOffset, srcOffset, t ) {
	
				Quaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );
	
			},
	
			_lerp: function ( buffer, dstOffset, srcOffset, t, stride ) {
	
				var s = 1 - t;
	
				for ( var i = 0; i !== stride; ++ i ) {
	
					var j = dstOffset + i;
	
					buffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;
	
				}
	
			}
	
		} );
	
		/**
		 *
		 * A reference to a real property in the scene graph.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		// Characters [].:/ are reserved for track binding syntax.
		var _RESERVED_CHARS_RE = '\\[\\]\\.:\\/';
		var _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );
	
		// Attempts to allow node names from any language. ES5's `\w` regexp matches
		// only latin characters, and the unicode \p{L} is not yet supported. So
		// instead, we exclude reserved characters and match everything else.
		var _wordChar = '[^' + _RESERVED_CHARS_RE + ']';
		var _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\.', '' ) + ']';
	
		// Parent directories, delimited by '/' or ':'. Currently unused, but must
		// be matched to parse the rest of the track name.
		var _directoryRe = /((?:WC+[\/:])*)/.source.replace( 'WC', _wordChar );
	
		// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.
		var _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );
	
		// Object on target node, and accessor. May not contain reserved
		// characters. Accessor may contain any character except closing bracket.
		var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace( 'WC', _wordChar );
	
		// Property and accessor. May not contain reserved characters. Accessor may
		// contain any non-bracket characters.
		var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace( 'WC', _wordChar );
	
		var _trackRe = new RegExp( ''
			+ '^'
			+ _directoryRe
			+ _nodeRe
			+ _objectRe
			+ _propertyRe
			+ '$'
		);
	
		var _supportedObjectNames = [ 'material', 'materials', 'bones' ];
	
		function Composite( targetGroup, path, optionalParsedPath ) {
	
			var parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );
	
			this._targetGroup = targetGroup;
			this._bindings = targetGroup.subscribe_( path, parsedPath );
	
		}
	
		Object.assign( Composite.prototype, {
	
			getValue: function ( array, offset ) {
	
				this.bind(); // bind all binding
	
				var firstValidIndex = this._targetGroup.nCachedObjects_,
					binding = this._bindings[ firstValidIndex ];
	
				// and only call .getValue on the first
				if ( binding !== undefined ) { binding.getValue( array, offset ); }
	
			},
	
			setValue: function ( array, offset ) {
	
				var bindings = this._bindings;
	
				for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
	
					bindings[ i ].setValue( array, offset );
	
				}
	
			},
	
			bind: function () {
	
				var bindings = this._bindings;
	
				for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
	
					bindings[ i ].bind();
	
				}
	
			},
	
			unbind: function () {
	
				var bindings = this._bindings;
	
				for ( var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {
	
					bindings[ i ].unbind();
	
				}
	
			}
	
		} );
	
	
		function PropertyBinding( rootNode, path, parsedPath ) {
	
			this.path = path;
			this.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );
	
			this.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;
	
			this.rootNode = rootNode;
	
		}
	
		Object.assign( PropertyBinding, {
	
			Composite: Composite,
	
			create: function ( root, path, parsedPath ) {
	
				if ( ! ( root && root.isAnimationObjectGroup ) ) {
	
					return new PropertyBinding( root, path, parsedPath );
	
				} else {
	
					return new PropertyBinding.Composite( root, path, parsedPath );
	
				}
	
			},
	
			/**
			 * Replaces spaces with underscores and removes unsupported characters from
			 * node names, to ensure compatibility with parseTrackName().
			 *
			 * @param {string} name Node name to be sanitized.
			 * @return {string}
			 */
			sanitizeNodeName: function ( name ) {
	
				return name.replace( /\s/g, '_' ).replace( _reservedRe, '' );
	
			},
	
			parseTrackName: function ( trackName ) {
	
				var matches = _trackRe.exec( trackName );
	
				if ( ! matches ) {
	
					throw new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );
	
				}
	
				var results = {
					// directoryName: matches[ 1 ], // (tschw) currently unused
					nodeName: matches[ 2 ],
					objectName: matches[ 3 ],
					objectIndex: matches[ 4 ],
					propertyName: matches[ 5 ], // required
					propertyIndex: matches[ 6 ]
				};
	
				var lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );
	
				if ( lastDot !== undefined && lastDot !== - 1 ) {
	
					var objectName = results.nodeName.substring( lastDot + 1 );
	
					// Object names must be checked against a whitelist. Otherwise, there
					// is no way to parse 'foo.bar.baz': 'baz' must be a property, but
					// 'bar' could be the objectName, or part of a nodeName (which can
					// include '.' characters).
					if ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {
	
						results.nodeName = results.nodeName.substring( 0, lastDot );
						results.objectName = objectName;
	
					}
	
				}
	
				if ( results.propertyName === null || results.propertyName.length === 0 ) {
	
					throw new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );
	
				}
	
				return results;
	
			},
	
			findNode: function ( root, nodeName ) {
	
				if ( ! nodeName || nodeName === "" || nodeName === "." || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {
	
					return root;
	
				}
	
				// search into skeleton bones.
				if ( root.skeleton ) {
	
					var bone = root.skeleton.getBoneByName( nodeName );
	
					if ( bone !== undefined ) {
	
						return bone;
	
					}
	
				}
	
				// search into node subtree.
				if ( root.children ) {
	
					var searchNodeSubtree = function ( children ) {
	
						for ( var i = 0; i < children.length; i ++ ) {
	
							var childNode = children[ i ];
	
							if ( childNode.name === nodeName || childNode.uuid === nodeName ) {
	
								return childNode;
	
							}
	
							var result = searchNodeSubtree( childNode.children );
	
							if ( result ) { return result; }
	
						}
	
						return null;
	
					};
	
					var subTreeNode = searchNodeSubtree( root.children );
	
					if ( subTreeNode ) {
	
						return subTreeNode;
	
					}
	
				}
	
				return null;
	
			}
	
		} );
	
		Object.assign( PropertyBinding.prototype, { // prototype, continued
	
			// these are used to "bind" a nonexistent property
			_getValue_unavailable: function () {},
			_setValue_unavailable: function () {},
	
			BindingType: {
				Direct: 0,
				EntireArray: 1,
				ArrayElement: 2,
				HasFromToArray: 3
			},
	
			Versioning: {
				None: 0,
				NeedsUpdate: 1,
				MatrixWorldNeedsUpdate: 2
			},
	
			GetterByBindingType: [
	
				function getValue_direct( buffer, offset ) {
	
					buffer[ offset ] = this.node[ this.propertyName ];
	
				},
	
				function getValue_array( buffer, offset ) {
	
					var source = this.resolvedProperty;
	
					for ( var i = 0, n = source.length; i !== n; ++ i ) {
	
						buffer[ offset ++ ] = source[ i ];
	
					}
	
				},
	
				function getValue_arrayElement( buffer, offset ) {
	
					buffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];
	
				},
	
				function getValue_toArray( buffer, offset ) {
	
					this.resolvedProperty.toArray( buffer, offset );
	
				}
	
			],
	
			SetterByBindingTypeAndVersioning: [
	
				[
					// Direct
	
					function setValue_direct( buffer, offset ) {
	
						this.targetObject[ this.propertyName ] = buffer[ offset ];
	
					},
	
					function setValue_direct_setNeedsUpdate( buffer, offset ) {
	
						this.targetObject[ this.propertyName ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						this.targetObject[ this.propertyName ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				], [
	
					// EntireArray
	
					function setValue_array( buffer, offset ) {
	
						var dest = this.resolvedProperty;
	
						for ( var i = 0, n = dest.length; i !== n; ++ i ) {
	
							dest[ i ] = buffer[ offset ++ ];
	
						}
	
					},
	
					function setValue_array_setNeedsUpdate( buffer, offset ) {
	
						var dest = this.resolvedProperty;
	
						for ( var i = 0, n = dest.length; i !== n; ++ i ) {
	
							dest[ i ] = buffer[ offset ++ ];
	
						}
	
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						var dest = this.resolvedProperty;
	
						for ( var i = 0, n = dest.length; i !== n; ++ i ) {
	
							dest[ i ] = buffer[ offset ++ ];
	
						}
	
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				], [
	
					// ArrayElement
	
					function setValue_arrayElement( buffer, offset ) {
	
						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
	
					},
	
					function setValue_arrayElement_setNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				], [
	
					// HasToFromArray
	
					function setValue_fromArray( buffer, offset ) {
	
						this.resolvedProperty.fromArray( buffer, offset );
	
					},
	
					function setValue_fromArray_setNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.needsUpdate = true;
	
					},
	
					function setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {
	
						this.resolvedProperty.fromArray( buffer, offset );
						this.targetObject.matrixWorldNeedsUpdate = true;
	
					}
	
				]
	
			],
	
			getValue: function getValue_unbound( targetArray, offset ) {
	
				this.bind();
				this.getValue( targetArray, offset );
	
				// Note: This class uses a State pattern on a per-method basis:
				// 'bind' sets 'this.getValue' / 'setValue' and shadows the
				// prototype version of these methods with one that represents
				// the bound state. When the property is not found, the methods
				// become no-ops.
	
			},
	
			setValue: function getValue_unbound( sourceArray, offset ) {
	
				this.bind();
				this.setValue( sourceArray, offset );
	
			},
	
			// create getter / setter pair for a property in the scene graph
			bind: function () {
	
				var targetObject = this.node,
					parsedPath = this.parsedPath,
	
					objectName = parsedPath.objectName,
					propertyName = parsedPath.propertyName,
					propertyIndex = parsedPath.propertyIndex;
	
				if ( ! targetObject ) {
	
					targetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;
	
					this.node = targetObject;
	
				}
	
				// set fail state so we can just 'return' on error
				this.getValue = this._getValue_unavailable;
				this.setValue = this._setValue_unavailable;
	
				// ensure there is a value node
				if ( ! targetObject ) {
	
					console.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\'t found.' );
					return;
	
				}
	
				if ( objectName ) {
	
					var objectIndex = parsedPath.objectIndex;
	
					// special cases were we need to reach deeper into the hierarchy to get the face materials....
					switch ( objectName ) {
	
						case 'materials':
	
							if ( ! targetObject.material ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );
								return;
	
							}
	
							if ( ! targetObject.material.materials ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );
								return;
	
							}
	
							targetObject = targetObject.material.materials;
	
							break;
	
						case 'bones':
	
							if ( ! targetObject.skeleton ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );
								return;
	
							}
	
							// potential future optimization: skip this if propertyIndex is already an integer
							// and convert the integer string to a true integer.
	
							targetObject = targetObject.skeleton.bones;
	
							// support resolving morphTarget names into indices.
							for ( var i = 0; i < targetObject.length; i ++ ) {
	
								if ( targetObject[ i ].name === objectIndex ) {
	
									objectIndex = i;
									break;
	
								}
	
							}
	
							break;
	
						default:
	
							if ( targetObject[ objectName ] === undefined ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );
								return;
	
							}
	
							targetObject = targetObject[ objectName ];
	
					}
	
	
					if ( objectIndex !== undefined ) {
	
						if ( targetObject[ objectIndex ] === undefined ) {
	
							console.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );
							return;
	
						}
	
						targetObject = targetObject[ objectIndex ];
	
					}
	
				}
	
				// resolve property
				var nodeProperty = targetObject[ propertyName ];
	
				if ( nodeProperty === undefined ) {
	
					var nodeName = parsedPath.nodeName;
	
					console.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +
						'.' + propertyName + ' but it wasn\'t found.', targetObject );
					return;
	
				}
	
				// determine versioning scheme
				var versioning = this.Versioning.None;
	
				this.targetObject = targetObject;
	
				if ( targetObject.needsUpdate !== undefined ) { // material
	
					versioning = this.Versioning.NeedsUpdate;
	
				} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform
	
					versioning = this.Versioning.MatrixWorldNeedsUpdate;
	
				}
	
				// determine how the property gets bound
				var bindingType = this.BindingType.Direct;
	
				if ( propertyIndex !== undefined ) {
	
					// access a sub element of the property array (only primitives are supported right now)
	
					if ( propertyName === "morphTargetInfluences" ) {
	
						// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
	
						// support resolving morphTarget names into indices.
						if ( ! targetObject.geometry ) {
	
							console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );
							return;
	
						}
	
						if ( targetObject.geometry.isBufferGeometry ) {
	
							if ( ! targetObject.geometry.morphAttributes ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );
								return;
	
							}
	
							for ( var i = 0; i < this.node.geometry.morphAttributes.position.length; i ++ ) {
	
								if ( targetObject.geometry.morphAttributes.position[ i ].name === propertyIndex ) {
	
									propertyIndex = i;
									break;
	
								}
	
							}
	
	
						} else {
	
							if ( ! targetObject.geometry.morphTargets ) {
	
								console.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.', this );
								return;
	
							}
	
							for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {
	
								if ( targetObject.geometry.morphTargets[ i ].name === propertyIndex ) {
	
									propertyIndex = i;
									break;
	
								}
	
							}
	
						}
	
					}
	
					bindingType = this.BindingType.ArrayElement;
	
					this.resolvedProperty = nodeProperty;
					this.propertyIndex = propertyIndex;
	
				} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {
	
					// must use copy for Object3D.Euler/Quaternion
	
					bindingType = this.BindingType.HasFromToArray;
	
					this.resolvedProperty = nodeProperty;
	
				} else if ( Array.isArray( nodeProperty ) ) {
	
					bindingType = this.BindingType.EntireArray;
	
					this.resolvedProperty = nodeProperty;
	
				} else {
	
					this.propertyName = propertyName;
	
				}
	
				// select getter / setter
				this.getValue = this.GetterByBindingType[ bindingType ];
				this.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];
	
			},
	
			unbind: function () {
	
				this.node = null;
	
				// back to the prototype version of getValue / setValue
				// note: avoiding to mutate the shape of 'this' via 'delete'
				this.getValue = this._getValue_unbound;
				this.setValue = this._setValue_unbound;
	
			}
	
		} );
	
		//!\ DECLARE ALIAS AFTER assign prototype !
		Object.assign( PropertyBinding.prototype, {
	
			// initial state of these methods that calls 'bind'
			_getValue_unbound: PropertyBinding.prototype.getValue,
			_setValue_unbound: PropertyBinding.prototype.setValue,
	
		} );
	
		/**
		 *
		 * A group of objects that receives a shared animation state.
		 *
		 * Usage:
		 *
		 *  - Add objects you would otherwise pass as 'root' to the
		 *    constructor or the .clipAction method of AnimationMixer.
		 *
		 *  - Instead pass this object as 'root'.
		 *
		 *  - You can also add and remove objects later when the mixer
		 *    is running.
		 *
		 * Note:
		 *
		 *    Objects of this class appear as one object to the mixer,
		 *    so cache control of the individual objects must be done
		 *    on the group.
		 *
		 * Limitation:
		 *
		 *  - The animated properties must be compatible among the
		 *    all objects in the group.
		 *
		 *  - A single property can either be controlled through a
		 *    target group or directly, but not both.
		 *
		 * @author tschw
		 */
	
		function AnimationObjectGroup() {
	
			this.uuid = MathUtils.generateUUID();
	
			// cached objects followed by the active ones
			this._objects = Array.prototype.slice.call( arguments );
	
			this.nCachedObjects_ = 0; // threshold
			// note: read by PropertyBinding.Composite
	
			var indices = {};
			this._indicesByUUID = indices; // for bookkeeping
	
			for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
				indices[ arguments[ i ].uuid ] = i;
	
			}
	
			this._paths = []; // inside: string
			this._parsedPaths = []; // inside: { we don't care, here }
			this._bindings = []; // inside: Array< PropertyBinding >
			this._bindingsIndicesByPath = {}; // inside: indices in these arrays
	
			var scope = this;
	
			this.stats = {
	
				objects: {
					get total() {
	
						return scope._objects.length;
	
					},
					get inUse() {
	
						return this.total - scope.nCachedObjects_;
	
					}
				},
				get bindingsPerObject() {
	
					return scope._bindings.length;
	
				}
	
			};
	
		}
	
		Object.assign( AnimationObjectGroup.prototype, {
	
			isAnimationObjectGroup: true,
	
			add: function () {
	
				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					paths = this._paths,
					parsedPaths = this._parsedPaths,
					bindings = this._bindings,
					nBindings = bindings.length,
					knownObject = undefined;
	
				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];
	
					if ( index === undefined ) {
	
						// unknown object -> add it to the ACTIVE region
	
						index = nObjects ++;
						indicesByUUID[ uuid ] = index;
						objects.push( object );
	
						// accounting is done, now do the same for all bindings
	
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
							bindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );
	
						}
	
					} else if ( index < nCachedObjects ) {
	
						knownObject = objects[ index ];
	
						// move existing object to the ACTIVE region
	
						var firstActiveIndex = -- nCachedObjects,
							lastCachedObject = objects[ firstActiveIndex ];
	
						indicesByUUID[ lastCachedObject.uuid ] = index;
						objects[ index ] = lastCachedObject;
	
						indicesByUUID[ uuid ] = firstActiveIndex;
						objects[ firstActiveIndex ] = object;
	
						// accounting is done, now do the same for all bindings
	
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
							var bindingsForPath = bindings[ j ],
								lastCached = bindingsForPath[ firstActiveIndex ],
								binding = bindingsForPath[ index ];
	
							bindingsForPath[ index ] = lastCached;
	
							if ( binding === undefined ) {
	
								// since we do not bother to create new bindings
								// for objects that are cached, the binding may
								// or may not exist
	
								binding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );
	
							}
	
							bindingsForPath[ firstActiveIndex ] = binding;
	
						}
	
					} else if ( objects[ index ] !== knownObject ) {
	
						console.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +
							'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );
	
					} // else the object is already where we want it to be
	
				} // for arguments
	
				this.nCachedObjects_ = nCachedObjects;
	
			},
	
			remove: function () {
	
				var objects = this._objects,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;
	
				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];
	
					if ( index !== undefined && index >= nCachedObjects ) {
	
						// move existing object into the CACHED region
	
						var lastCachedIndex = nCachedObjects ++,
							firstActiveObject = objects[ lastCachedIndex ];
	
						indicesByUUID[ firstActiveObject.uuid ] = index;
						objects[ index ] = firstActiveObject;
	
						indicesByUUID[ uuid ] = lastCachedIndex;
						objects[ lastCachedIndex ] = object;
	
						// accounting is done, now do the same for all bindings
	
						for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
							var bindingsForPath = bindings[ j ],
								firstActive = bindingsForPath[ lastCachedIndex ],
								binding = bindingsForPath[ index ];
	
							bindingsForPath[ index ] = firstActive;
							bindingsForPath[ lastCachedIndex ] = binding;
	
						}
	
					}
	
				} // for arguments
	
				this.nCachedObjects_ = nCachedObjects;
	
			},
	
			// remove & forget
			uncache: function () {
	
				var objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					indicesByUUID = this._indicesByUUID,
					bindings = this._bindings,
					nBindings = bindings.length;
	
				for ( var i = 0, n = arguments.length; i !== n; ++ i ) {
	
					var object = arguments[ i ],
						uuid = object.uuid,
						index = indicesByUUID[ uuid ];
	
					if ( index !== undefined ) {
	
						delete indicesByUUID[ uuid ];
	
						if ( index < nCachedObjects ) {
	
							// object is cached, shrink the CACHED region
	
							var firstActiveIndex = -- nCachedObjects,
								lastCachedObject = objects[ firstActiveIndex ],
								lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];
	
							// last cached object takes this object's place
							indicesByUUID[ lastCachedObject.uuid ] = index;
							objects[ index ] = lastCachedObject;
	
							// last object goes to the activated slot and pop
							indicesByUUID[ lastObject.uuid ] = firstActiveIndex;
							objects[ firstActiveIndex ] = lastObject;
							objects.pop();
	
							// accounting is done, now do the same for all bindings
	
							for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
								var bindingsForPath = bindings[ j ],
									lastCached = bindingsForPath[ firstActiveIndex ],
									last = bindingsForPath[ lastIndex ];
	
								bindingsForPath[ index ] = lastCached;
								bindingsForPath[ firstActiveIndex ] = last;
								bindingsForPath.pop();
	
							}
	
						} else {
	
							// object is active, just swap with the last and pop
	
							var lastIndex = -- nObjects,
								lastObject = objects[ lastIndex ];
	
							indicesByUUID[ lastObject.uuid ] = index;
							objects[ index ] = lastObject;
							objects.pop();
	
							// accounting is done, now do the same for all bindings
	
							for ( var j = 0, m = nBindings; j !== m; ++ j ) {
	
								var bindingsForPath = bindings[ j ];
	
								bindingsForPath[ index ] = bindingsForPath[ lastIndex ];
								bindingsForPath.pop();
	
							}
	
						} // cached or active
	
					} // if object is known
	
				} // for arguments
	
				this.nCachedObjects_ = nCachedObjects;
	
			},
	
			// Internal interface used by befriended PropertyBinding.Composite:
	
			subscribe_: function ( path, parsedPath ) {
	
				// returns an array of bindings for the given path that is changed
				// according to the contained objects in the group
	
				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ],
					bindings = this._bindings;
	
				if ( index !== undefined ) { return bindings[ index ]; }
	
				var paths = this._paths,
					parsedPaths = this._parsedPaths,
					objects = this._objects,
					nObjects = objects.length,
					nCachedObjects = this.nCachedObjects_,
					bindingsForPath = new Array( nObjects );
	
				index = bindings.length;
	
				indicesByPath[ path ] = index;
	
				paths.push( path );
				parsedPaths.push( parsedPath );
				bindings.push( bindingsForPath );
	
				for ( var i = nCachedObjects, n = objects.length; i !== n; ++ i ) {
	
					var object = objects[ i ];
					bindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );
	
				}
	
				return bindingsForPath;
	
			},
	
			unsubscribe_: function ( path ) {
	
				// tells the group to forget about a property path and no longer
				// update the array previously obtained with 'subscribe_'
	
				var indicesByPath = this._bindingsIndicesByPath,
					index = indicesByPath[ path ];
	
				if ( index !== undefined ) {
	
					var paths = this._paths,
						parsedPaths = this._parsedPaths,
						bindings = this._bindings,
						lastBindingsIndex = bindings.length - 1,
						lastBindings = bindings[ lastBindingsIndex ],
						lastBindingsPath = path[ lastBindingsIndex ];
	
					indicesByPath[ lastBindingsPath ] = index;
	
					bindings[ index ] = lastBindings;
					bindings.pop();
	
					parsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];
					parsedPaths.pop();
	
					paths[ index ] = paths[ lastBindingsIndex ];
					paths.pop();
	
				}
	
			}
	
		} );
	
		/**
		 *
		 * Action provided by AnimationMixer for scheduling clip playback on specific
		 * objects.
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 *
		 */
	
		function AnimationAction( mixer, clip, localRoot ) {
	
			this._mixer = mixer;
			this._clip = clip;
			this._localRoot = localRoot || null;
	
			var tracks = clip.tracks,
				nTracks = tracks.length,
				interpolants = new Array( nTracks );
	
			var interpolantSettings = {
				endingStart: ZeroCurvatureEnding,
				endingEnd: ZeroCurvatureEnding
			};
	
			for ( var i = 0; i !== nTracks; ++ i ) {
	
				var interpolant = tracks[ i ].createInterpolant( null );
				interpolants[ i ] = interpolant;
				interpolant.settings = interpolantSettings;
	
			}
	
			this._interpolantSettings = interpolantSettings;
	
			this._interpolants = interpolants; // bound by the mixer
	
			// inside: PropertyMixer (managed by the mixer)
			this._propertyBindings = new Array( nTracks );
	
			this._cacheIndex = null; // for the memory manager
			this._byClipCacheIndex = null; // for the memory manager
	
			this._timeScaleInterpolant = null;
			this._weightInterpolant = null;
	
			this.loop = LoopRepeat;
			this._loopCount = - 1;
	
			// global mixer time when the action is to be started
			// it's set back to 'null' upon start of the action
			this._startTime = null;
	
			// scaled local time of the action
			// gets clamped or wrapped to 0..clip.duration according to loop
			this.time = 0;
	
			this.timeScale = 1;
			this._effectiveTimeScale = 1;
	
			this.weight = 1;
			this._effectiveWeight = 1;
	
			this.repetitions = Infinity; // no. of repetitions when looping
	
			this.paused = false; // true -> zero effective time scale
			this.enabled = true; // false -> zero effective weight
	
			this.clampWhenFinished = false;// keep feeding the last frame?
	
			this.zeroSlopeAtStart = true;// for smooth interpolation w/o separate
			this.zeroSlopeAtEnd = true;// clips for start, loop and end
	
		}
	
		Object.assign( AnimationAction.prototype, {
	
			// State & Scheduling
	
			play: function () {
	
				this._mixer._activateAction( this );
	
				return this;
	
			},
	
			stop: function () {
	
				this._mixer._deactivateAction( this );
	
				return this.reset();
	
			},
	
			reset: function () {
	
				this.paused = false;
				this.enabled = true;
	
				this.time = 0; // restart clip
				this._loopCount = - 1;// forget previous loops
				this._startTime = null;// forget scheduling
	
				return this.stopFading().stopWarping();
	
			},
	
			isRunning: function () {
	
				return this.enabled && ! this.paused && this.timeScale !== 0 &&
					this._startTime === null && this._mixer._isActiveAction( this );
	
			},
	
			// return true when play has been called
			isScheduled: function () {
	
				return this._mixer._isActiveAction( this );
	
			},
	
			startAt: function ( time ) {
	
				this._startTime = time;
	
				return this;
	
			},
	
			setLoop: function ( mode, repetitions ) {
	
				this.loop = mode;
				this.repetitions = repetitions;
	
				return this;
	
			},
	
			// Weight
	
			// set the weight stopping any scheduled fading
			// although .enabled = false yields an effective weight of zero, this
			// method does *not* change .enabled, because it would be confusing
			setEffectiveWeight: function ( weight ) {
	
				this.weight = weight;
	
				// note: same logic as when updated at runtime
				this._effectiveWeight = this.enabled ? weight : 0;
	
				return this.stopFading();
	
			},
	
			// return the weight considering fading and .enabled
			getEffectiveWeight: function () {
	
				return this._effectiveWeight;
	
			},
	
			fadeIn: function ( duration ) {
	
				return this._scheduleFading( duration, 0, 1 );
	
			},
	
			fadeOut: function ( duration ) {
	
				return this._scheduleFading( duration, 1, 0 );
	
			},
	
			crossFadeFrom: function ( fadeOutAction, duration, warp ) {
	
				fadeOutAction.fadeOut( duration );
				this.fadeIn( duration );
	
				if ( warp ) {
	
					var fadeInDuration = this._clip.duration,
						fadeOutDuration = fadeOutAction._clip.duration,
	
						startEndRatio = fadeOutDuration / fadeInDuration,
						endStartRatio = fadeInDuration / fadeOutDuration;
	
					fadeOutAction.warp( 1.0, startEndRatio, duration );
					this.warp( endStartRatio, 1.0, duration );
	
				}
	
				return this;
	
			},
	
			crossFadeTo: function ( fadeInAction, duration, warp ) {
	
				return fadeInAction.crossFadeFrom( this, duration, warp );
	
			},
	
			stopFading: function () {
	
				var weightInterpolant = this._weightInterpolant;
	
				if ( weightInterpolant !== null ) {
	
					this._weightInterpolant = null;
					this._mixer._takeBackControlInterpolant( weightInterpolant );
	
				}
	
				return this;
	
			},
	
			// Time Scale Control
	
			// set the time scale stopping any scheduled warping
			// although .paused = true yields an effective time scale of zero, this
			// method does *not* change .paused, because it would be confusing
			setEffectiveTimeScale: function ( timeScale ) {
	
				this.timeScale = timeScale;
				this._effectiveTimeScale = this.paused ? 0 : timeScale;
	
				return this.stopWarping();
	
			},
	
			// return the time scale considering warping and .paused
			getEffectiveTimeScale: function () {
	
				return this._effectiveTimeScale;
	
			},
	
			setDuration: function ( duration ) {
	
				this.timeScale = this._clip.duration / duration;
	
				return this.stopWarping();
	
			},
	
			syncWith: function ( action ) {
	
				this.time = action.time;
				this.timeScale = action.timeScale;
	
				return this.stopWarping();
	
			},
	
			halt: function ( duration ) {
	
				return this.warp( this._effectiveTimeScale, 0, duration );
	
			},
	
			warp: function ( startTimeScale, endTimeScale, duration ) {
	
				var mixer = this._mixer, now = mixer.time,
					interpolant = this._timeScaleInterpolant,
	
					timeScale = this.timeScale;
	
				if ( interpolant === null ) {
	
					interpolant = mixer._lendControlInterpolant();
					this._timeScaleInterpolant = interpolant;
	
				}
	
				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;
	
				times[ 0 ] = now;
				times[ 1 ] = now + duration;
	
				values[ 0 ] = startTimeScale / timeScale;
				values[ 1 ] = endTimeScale / timeScale;
	
				return this;
	
			},
	
			stopWarping: function () {
	
				var timeScaleInterpolant = this._timeScaleInterpolant;
	
				if ( timeScaleInterpolant !== null ) {
	
					this._timeScaleInterpolant = null;
					this._mixer._takeBackControlInterpolant( timeScaleInterpolant );
	
				}
	
				return this;
	
			},
	
			// Object Accessors
	
			getMixer: function () {
	
				return this._mixer;
	
			},
	
			getClip: function () {
	
				return this._clip;
	
			},
	
			getRoot: function () {
	
				return this._localRoot || this._mixer._root;
	
			},
	
			// Interna
	
			_update: function ( time, deltaTime, timeDirection, accuIndex ) {
	
				// called by the mixer
	
				if ( ! this.enabled ) {
	
					// call ._updateWeight() to update ._effectiveWeight
	
					this._updateWeight( time );
					return;
	
				}
	
				var startTime = this._startTime;
	
				if ( startTime !== null ) {
	
					// check for scheduled start of action
	
					var timeRunning = ( time - startTime ) * timeDirection;
					if ( timeRunning < 0 || timeDirection === 0 ) {
	
						return; // yet to come / don't decide when delta = 0
	
					}
	
					// start
	
					this._startTime = null; // unschedule
					deltaTime = timeDirection * timeRunning;
	
				}
	
				// apply time scale and advance time
	
				deltaTime *= this._updateTimeScale( time );
				var clipTime = this._updateTime( deltaTime );
	
				// note: _updateTime may disable the action resulting in
				// an effective weight of 0
	
				var weight = this._updateWeight( time );
	
				if ( weight > 0 ) {
	
					var interpolants = this._interpolants;
					var propertyMixers = this._propertyBindings;
	
					for ( var j = 0, m = interpolants.length; j !== m; ++ j ) {
	
						interpolants[ j ].evaluate( clipTime );
						propertyMixers[ j ].accumulate( accuIndex, weight );
	
					}
	
				}
	
			},
	
			_updateWeight: function ( time ) {
	
				var weight = 0;
	
				if ( this.enabled ) {
	
					weight = this.weight;
					var interpolant = this._weightInterpolant;
	
					if ( interpolant !== null ) {
	
						var interpolantValue = interpolant.evaluate( time )[ 0 ];
	
						weight *= interpolantValue;
	
						if ( time > interpolant.parameterPositions[ 1 ] ) {
	
							this.stopFading();
	
							if ( interpolantValue === 0 ) {
	
								// faded out, disable
								this.enabled = false;
	
							}
	
						}
	
					}
	
				}
	
				this._effectiveWeight = weight;
				return weight;
	
			},
	
			_updateTimeScale: function ( time ) {
	
				var timeScale = 0;
	
				if ( ! this.paused ) {
	
					timeScale = this.timeScale;
	
					var interpolant = this._timeScaleInterpolant;
	
					if ( interpolant !== null ) {
	
						var interpolantValue = interpolant.evaluate( time )[ 0 ];
	
						timeScale *= interpolantValue;
	
						if ( time > interpolant.parameterPositions[ 1 ] ) {
	
							this.stopWarping();
	
							if ( timeScale === 0 ) {
	
								// motion has halted, pause
								this.paused = true;
	
							} else {
	
								// warp done - apply final time scale
								this.timeScale = timeScale;
	
							}
	
						}
	
					}
	
				}
	
				this._effectiveTimeScale = timeScale;
				return timeScale;
	
			},
	
			_updateTime: function ( deltaTime ) {
	
				var time = this.time + deltaTime;
				var duration = this._clip.duration;
				var loop = this.loop;
				var loopCount = this._loopCount;
	
				var pingPong = ( loop === LoopPingPong );
	
				if ( deltaTime === 0 ) {
	
					if ( loopCount === - 1 ) { return time; }
	
					return ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;
	
				}
	
				if ( loop === LoopOnce ) {
	
					if ( loopCount === - 1 ) {
	
						// just started
	
						this._loopCount = 0;
						this._setEndings( true, true, false );
	
					}
	
					handle_stop: {
	
						if ( time >= duration ) {
	
							time = duration;
	
						} else if ( time < 0 ) {
	
							time = 0;
	
						} else {
	
							this.time = time;
	
							break handle_stop;
	
						}
	
						if ( this.clampWhenFinished ) { this.paused = true; }
						else { this.enabled = false; }
	
						this.time = time;
	
						this._mixer.dispatchEvent( {
							type: 'finished', action: this,
							direction: deltaTime < 0 ? - 1 : 1
						} );
	
					}
	
				} else { // repetitive Repeat or PingPong
	
					if ( loopCount === - 1 ) {
	
						// just started
	
						if ( deltaTime >= 0 ) {
	
							loopCount = 0;
	
							this._setEndings( true, this.repetitions === 0, pingPong );
	
						} else {
	
							// when looping in reverse direction, the initial
							// transition through zero counts as a repetition,
							// so leave loopCount at -1
	
							this._setEndings( this.repetitions === 0, true, pingPong );
	
						}
	
					}
	
					if ( time >= duration || time < 0 ) {
	
						// wrap around
	
						var loopDelta = Math.floor( time / duration ); // signed
						time -= duration * loopDelta;
	
						loopCount += Math.abs( loopDelta );
	
						var pending = this.repetitions - loopCount;
	
						if ( pending <= 0 ) {
	
							// have to stop (switch state, clamp time, fire event)
	
							if ( this.clampWhenFinished ) { this.paused = true; }
							else { this.enabled = false; }
	
							time = deltaTime > 0 ? duration : 0;
	
							this.time = time;
	
							this._mixer.dispatchEvent( {
								type: 'finished', action: this,
								direction: deltaTime > 0 ? 1 : - 1
							} );
	
						} else {
	
							// keep running
	
							if ( pending === 1 ) {
	
								// entering the last round
	
								var atStart = deltaTime < 0;
								this._setEndings( atStart, ! atStart, pingPong );
	
							} else {
	
								this._setEndings( false, false, pingPong );
	
							}
	
							this._loopCount = loopCount;
	
							this.time = time;
	
							this._mixer.dispatchEvent( {
								type: 'loop', action: this, loopDelta: loopDelta
							} );
	
						}
	
					} else {
	
						this.time = time;
	
					}
	
					if ( pingPong && ( loopCount & 1 ) === 1 ) {
	
						// invert time for the "pong round"
	
						return duration - time;
	
					}
	
				}
	
				return time;
	
			},
	
			_setEndings: function ( atStart, atEnd, pingPong ) {
	
				var settings = this._interpolantSettings;
	
				if ( pingPong ) {
	
					settings.endingStart = ZeroSlopeEnding;
					settings.endingEnd = ZeroSlopeEnding;
	
				} else {
	
					// assuming for LoopOnce atStart == atEnd == true
	
					if ( atStart ) {
	
						settings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;
	
					} else {
	
						settings.endingStart = WrapAroundEnding;
	
					}
	
					if ( atEnd ) {
	
						settings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;
	
					} else {
	
						settings.endingEnd 	 = WrapAroundEnding;
	
					}
	
				}
	
			},
	
			_scheduleFading: function ( duration, weightNow, weightThen ) {
	
				var mixer = this._mixer, now = mixer.time,
					interpolant = this._weightInterpolant;
	
				if ( interpolant === null ) {
	
					interpolant = mixer._lendControlInterpolant();
					this._weightInterpolant = interpolant;
	
				}
	
				var times = interpolant.parameterPositions,
					values = interpolant.sampleValues;
	
				times[ 0 ] = now;
				values[ 0 ] = weightNow;
				times[ 1 ] = now + duration;
				values[ 1 ] = weightThen;
	
				return this;
	
			}
	
		} );
	
		/**
		 *
		 * Player for AnimationClips.
		 *
		 *
		 * @author Ben Houston / http://clara.io/
		 * @author David Sarno / http://lighthaus.us/
		 * @author tschw
		 */
	
		function AnimationMixer( root ) {
	
			this._root = root;
			this._initMemoryManager();
			this._accuIndex = 0;
	
			this.time = 0;
	
			this.timeScale = 1.0;
	
		}
	
		AnimationMixer.prototype = Object.assign( Object.create( EventDispatcher.prototype ), {
	
			constructor: AnimationMixer,
	
			_bindAction: function ( action, prototypeAction ) {
	
				var root = action._localRoot || this._root,
					tracks = action._clip.tracks,
					nTracks = tracks.length,
					bindings = action._propertyBindings,
					interpolants = action._interpolants,
					rootUuid = root.uuid,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingsByName = bindingsByRoot[ rootUuid ];
	
				if ( bindingsByName === undefined ) {
	
					bindingsByName = {};
					bindingsByRoot[ rootUuid ] = bindingsByName;
	
				}
	
				for ( var i = 0; i !== nTracks; ++ i ) {
	
					var track = tracks[ i ],
						trackName = track.name,
						binding = bindingsByName[ trackName ];
	
					if ( binding !== undefined ) {
	
						bindings[ i ] = binding;
	
					} else {
	
						binding = bindings[ i ];
	
						if ( binding !== undefined ) {
	
							// existing binding, make sure the cache knows
	
							if ( binding._cacheIndex === null ) {
	
								++ binding.referenceCount;
								this._addInactiveBinding( binding, rootUuid, trackName );
	
							}
	
							continue;
	
						}
	
						var path = prototypeAction && prototypeAction.
							_propertyBindings[ i ].binding.parsedPath;
	
						binding = new PropertyMixer(
							PropertyBinding.create( root, trackName, path ),
							track.ValueTypeName, track.getValueSize() );
	
						++ binding.referenceCount;
						this._addInactiveBinding( binding, rootUuid, trackName );
	
						bindings[ i ] = binding;
	
					}
	
					interpolants[ i ].resultBuffer = binding.buffer;
	
				}
	
			},
	
			_activateAction: function ( action ) {
	
				if ( ! this._isActiveAction( action ) ) {
	
					if ( action._cacheIndex === null ) {
	
						// this action has been forgotten by the cache, but the user
						// appears to be still using it -> rebind
	
						var rootUuid = ( action._localRoot || this._root ).uuid,
							clipUuid = action._clip.uuid,
							actionsForClip = this._actionsByClip[ clipUuid ];
	
						this._bindAction( action,
							actionsForClip && actionsForClip.knownActions[ 0 ] );
	
						this._addInactiveAction( action, clipUuid, rootUuid );
	
					}
	
					var bindings = action._propertyBindings;
	
					// increment reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
	
						var binding = bindings[ i ];
	
						if ( binding.useCount ++ === 0 ) {
	
							this._lendBinding( binding );
							binding.saveOriginalState();
	
						}
	
					}
	
					this._lendAction( action );
	
				}
	
			},
	
			_deactivateAction: function ( action ) {
	
				if ( this._isActiveAction( action ) ) {
	
					var bindings = action._propertyBindings;
	
					// decrement reference counts / sort out state
					for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
	
						var binding = bindings[ i ];
	
						if ( -- binding.useCount === 0 ) {
	
							binding.restoreOriginalState();
							this._takeBackBinding( binding );
	
						}
	
					}
	
					this._takeBackAction( action );
	
				}
	
			},
	
			// Memory manager
	
			_initMemoryManager: function () {
	
				this._actions = []; // 'nActiveActions' followed by inactive ones
				this._nActiveActions = 0;
	
				this._actionsByClip = {};
				// inside:
				// {
				// 	knownActions: Array< AnimationAction > - used as prototypes
				// 	actionByRoot: AnimationAction - lookup
				// }
	
	
				this._bindings = []; // 'nActiveBindings' followed by inactive ones
				this._nActiveBindings = 0;
	
				this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >
	
	
				this._controlInterpolants = []; // same game as above
				this._nActiveControlInterpolants = 0;
	
				var scope = this;
	
				this.stats = {
	
					actions: {
						get total() {
	
							return scope._actions.length;
	
						},
						get inUse() {
	
							return scope._nActiveActions;
	
						}
					},
					bindings: {
						get total() {
	
							return scope._bindings.length;
	
						},
						get inUse() {
	
							return scope._nActiveBindings;
	
						}
					},
					controlInterpolants: {
						get total() {
	
							return scope._controlInterpolants.length;
	
						},
						get inUse() {
	
							return scope._nActiveControlInterpolants;
	
						}
					}
	
				};
	
			},
	
			// Memory management for AnimationAction objects
	
			_isActiveAction: function ( action ) {
	
				var index = action._cacheIndex;
				return index !== null && index < this._nActiveActions;
	
			},
	
			_addInactiveAction: function ( action, clipUuid, rootUuid ) {
	
				var actions = this._actions,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];
	
				if ( actionsForClip === undefined ) {
	
					actionsForClip = {
	
						knownActions: [ action ],
						actionByRoot: {}
	
					};
	
					action._byClipCacheIndex = 0;
	
					actionsByClip[ clipUuid ] = actionsForClip;
	
				} else {
	
					var knownActions = actionsForClip.knownActions;
	
					action._byClipCacheIndex = knownActions.length;
					knownActions.push( action );
	
				}
	
				action._cacheIndex = actions.length;
				actions.push( action );
	
				actionsForClip.actionByRoot[ rootUuid ] = action;
	
			},
	
			_removeInactiveAction: function ( action ) {
	
				var actions = this._actions,
					lastInactiveAction = actions[ actions.length - 1 ],
					cacheIndex = action._cacheIndex;
	
				lastInactiveAction._cacheIndex = cacheIndex;
				actions[ cacheIndex ] = lastInactiveAction;
				actions.pop();
	
				action._cacheIndex = null;
	
	
				var clipUuid = action._clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ],
					knownActionsForClip = actionsForClip.knownActions,
	
					lastKnownAction =
						knownActionsForClip[ knownActionsForClip.length - 1 ],
	
					byClipCacheIndex = action._byClipCacheIndex;
	
				lastKnownAction._byClipCacheIndex = byClipCacheIndex;
				knownActionsForClip[ byClipCacheIndex ] = lastKnownAction;
				knownActionsForClip.pop();
	
				action._byClipCacheIndex = null;
	
	
				var actionByRoot = actionsForClip.actionByRoot,
					rootUuid = ( action._localRoot || this._root ).uuid;
	
				delete actionByRoot[ rootUuid ];
	
				if ( knownActionsForClip.length === 0 ) {
	
					delete actionsByClip[ clipUuid ];
	
				}
	
				this._removeInactiveBindingsForAction( action );
	
			},
	
			_removeInactiveBindingsForAction: function ( action ) {
	
				var bindings = action._propertyBindings;
				for ( var i = 0, n = bindings.length; i !== n; ++ i ) {
	
					var binding = bindings[ i ];
	
					if ( -- binding.referenceCount === 0 ) {
	
						this._removeInactiveBinding( binding );
	
					}
	
				}
	
			},
	
			_lendAction: function ( action ) {
	
				// [ active actions |  inactive actions  ]
				// [  active actions >| inactive actions ]
				//                 s        a
				//                  <-swap->
				//                 a        s
	
				var actions = this._actions,
					prevIndex = action._cacheIndex,
	
					lastActiveIndex = this._nActiveActions ++,
	
					firstInactiveAction = actions[ lastActiveIndex ];
	
				action._cacheIndex = lastActiveIndex;
				actions[ lastActiveIndex ] = action;
	
				firstInactiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = firstInactiveAction;
	
			},
	
			_takeBackAction: function ( action ) {
	
				// [  active actions  | inactive actions ]
				// [ active actions |< inactive actions  ]
				//        a        s
				//         <-swap->
				//        s        a
	
				var actions = this._actions,
					prevIndex = action._cacheIndex,
	
					firstInactiveIndex = -- this._nActiveActions,
	
					lastActiveAction = actions[ firstInactiveIndex ];
	
				action._cacheIndex = firstInactiveIndex;
				actions[ firstInactiveIndex ] = action;
	
				lastActiveAction._cacheIndex = prevIndex;
				actions[ prevIndex ] = lastActiveAction;
	
			},
	
			// Memory management for PropertyMixer objects
	
			_addInactiveBinding: function ( binding, rootUuid, trackName ) {
	
				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],
	
					bindings = this._bindings;
	
				if ( bindingByName === undefined ) {
	
					bindingByName = {};
					bindingsByRoot[ rootUuid ] = bindingByName;
	
				}
	
				bindingByName[ trackName ] = binding;
	
				binding._cacheIndex = bindings.length;
				bindings.push( binding );
	
			},
	
			_removeInactiveBinding: function ( binding ) {
	
				var bindings = this._bindings,
					propBinding = binding.binding,
					rootUuid = propBinding.rootNode.uuid,
					trackName = propBinding.path,
					bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ],
	
					lastInactiveBinding = bindings[ bindings.length - 1 ],
					cacheIndex = binding._cacheIndex;
	
				lastInactiveBinding._cacheIndex = cacheIndex;
				bindings[ cacheIndex ] = lastInactiveBinding;
				bindings.pop();
	
				delete bindingByName[ trackName ];
	
				if ( Object.keys( bindingByName ).length === 0 ) {
	
					delete bindingsByRoot[ rootUuid ];
	
				}
	
			},
	
			_lendBinding: function ( binding ) {
	
				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,
	
					lastActiveIndex = this._nActiveBindings ++,
	
					firstInactiveBinding = bindings[ lastActiveIndex ];
	
				binding._cacheIndex = lastActiveIndex;
				bindings[ lastActiveIndex ] = binding;
	
				firstInactiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = firstInactiveBinding;
	
			},
	
			_takeBackBinding: function ( binding ) {
	
				var bindings = this._bindings,
					prevIndex = binding._cacheIndex,
	
					firstInactiveIndex = -- this._nActiveBindings,
	
					lastActiveBinding = bindings[ firstInactiveIndex ];
	
				binding._cacheIndex = firstInactiveIndex;
				bindings[ firstInactiveIndex ] = binding;
	
				lastActiveBinding._cacheIndex = prevIndex;
				bindings[ prevIndex ] = lastActiveBinding;
	
			},
	
	
			// Memory management of Interpolants for weight and time scale
	
			_lendControlInterpolant: function () {
	
				var interpolants = this._controlInterpolants,
					lastActiveIndex = this._nActiveControlInterpolants ++,
					interpolant = interpolants[ lastActiveIndex ];
	
				if ( interpolant === undefined ) {
	
					interpolant = new LinearInterpolant(
						new Float32Array( 2 ), new Float32Array( 2 ),
						1, this._controlInterpolantsResultBuffer );
	
					interpolant.__cacheIndex = lastActiveIndex;
					interpolants[ lastActiveIndex ] = interpolant;
	
				}
	
				return interpolant;
	
			},
	
			_takeBackControlInterpolant: function ( interpolant ) {
	
				var interpolants = this._controlInterpolants,
					prevIndex = interpolant.__cacheIndex,
	
					firstInactiveIndex = -- this._nActiveControlInterpolants,
	
					lastActiveInterpolant = interpolants[ firstInactiveIndex ];
	
				interpolant.__cacheIndex = firstInactiveIndex;
				interpolants[ firstInactiveIndex ] = interpolant;
	
				lastActiveInterpolant.__cacheIndex = prevIndex;
				interpolants[ prevIndex ] = lastActiveInterpolant;
	
			},
	
			_controlInterpolantsResultBuffer: new Float32Array( 1 ),
	
			// return an action for a clip optionally using a custom root target
			// object (this method allocates a lot of dynamic memory in case a
			// previously unknown clip/root combination is specified)
			clipAction: function ( clip, optionalRoot ) {
	
				var root = optionalRoot || this._root,
					rootUuid = root.uuid,
	
					clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,
	
					clipUuid = clipObject !== null ? clipObject.uuid : clip,
	
					actionsForClip = this._actionsByClip[ clipUuid ],
					prototypeAction = null;
	
				if ( actionsForClip !== undefined ) {
	
					var existingAction =
							actionsForClip.actionByRoot[ rootUuid ];
	
					if ( existingAction !== undefined ) {
	
						return existingAction;
	
					}
	
					// we know the clip, so we don't have to parse all
					// the bindings again but can just copy
					prototypeAction = actionsForClip.knownActions[ 0 ];
	
					// also, take the clip from the prototype action
					if ( clipObject === null )
						{ clipObject = prototypeAction._clip; }
	
				}
	
				// clip must be known when specified via string
				if ( clipObject === null ) { return null; }
	
				// allocate all resources required to run it
				var newAction = new AnimationAction( this, clipObject, optionalRoot );
	
				this._bindAction( newAction, prototypeAction );
	
				// and make the action known to the memory manager
				this._addInactiveAction( newAction, clipUuid, rootUuid );
	
				return newAction;
	
			},
	
			// get an existing action
			existingAction: function ( clip, optionalRoot ) {
	
				var root = optionalRoot || this._root,
					rootUuid = root.uuid,
	
					clipObject = typeof clip === 'string' ?
						AnimationClip.findByName( root, clip ) : clip,
	
					clipUuid = clipObject ? clipObject.uuid : clip,
	
					actionsForClip = this._actionsByClip[ clipUuid ];
	
				if ( actionsForClip !== undefined ) {
	
					return actionsForClip.actionByRoot[ rootUuid ] || null;
	
				}
	
				return null;
	
			},
	
			// deactivates all previously scheduled actions
			stopAllAction: function () {
	
				var actions = this._actions,
					nActions = this._nActiveActions,
					bindings = this._bindings,
					nBindings = this._nActiveBindings;
	
				this._nActiveActions = 0;
				this._nActiveBindings = 0;
	
				for ( var i = 0; i !== nActions; ++ i ) {
	
					actions[ i ].reset();
	
				}
	
				for ( var i = 0; i !== nBindings; ++ i ) {
	
					bindings[ i ].useCount = 0;
	
				}
	
				return this;
	
			},
	
			// advance the time and update apply the animation
			update: function ( deltaTime ) {
	
				deltaTime *= this.timeScale;
	
				var actions = this._actions,
					nActions = this._nActiveActions,
	
					time = this.time += deltaTime,
					timeDirection = Math.sign( deltaTime ),
	
					accuIndex = this._accuIndex ^= 1;
	
				// run active actions
	
				for ( var i = 0; i !== nActions; ++ i ) {
	
					var action = actions[ i ];
	
					action._update( time, deltaTime, timeDirection, accuIndex );
	
				}
	
				// update scene graph
	
				var bindings = this._bindings,
					nBindings = this._nActiveBindings;
	
				for ( var i = 0; i !== nBindings; ++ i ) {
	
					bindings[ i ].apply( accuIndex );
	
				}
	
				return this;
	
			},
	
			// Allows you to seek to a specific time in an animation.
			setTime: function ( timeInSeconds ) {
	
				this.time = 0; // Zero out time attribute for AnimationMixer object;
				for ( var i = 0; i < this._actions.length; i ++ ) {
	
					this._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.
	
				}
	
				return this.update( timeInSeconds ); // Update used to set exact time. Returns "this" AnimationMixer object.
	
			},
	
			// return this mixer's root target object
			getRoot: function () {
	
				return this._root;
	
			},
	
			// free all resources specific to a particular clip
			uncacheClip: function ( clip ) {
	
				var actions = this._actions,
					clipUuid = clip.uuid,
					actionsByClip = this._actionsByClip,
					actionsForClip = actionsByClip[ clipUuid ];
	
				if ( actionsForClip !== undefined ) {
	
					// note: just calling _removeInactiveAction would mess up the
					// iteration state and also require updating the state we can
					// just throw away
	
					var actionsToRemove = actionsForClip.knownActions;
	
					for ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {
	
						var action = actionsToRemove[ i ];
	
						this._deactivateAction( action );
	
						var cacheIndex = action._cacheIndex,
							lastInactiveAction = actions[ actions.length - 1 ];
	
						action._cacheIndex = null;
						action._byClipCacheIndex = null;
	
						lastInactiveAction._cacheIndex = cacheIndex;
						actions[ cacheIndex ] = lastInactiveAction;
						actions.pop();
	
						this._removeInactiveBindingsForAction( action );
	
					}
	
					delete actionsByClip[ clipUuid ];
	
				}
	
			},
	
			// free all resources specific to a particular root target object
			uncacheRoot: function ( root ) {
	
				var rootUuid = root.uuid,
					actionsByClip = this._actionsByClip;
	
				for ( var clipUuid in actionsByClip ) {
	
					var actionByRoot = actionsByClip[ clipUuid ].actionByRoot,
						action = actionByRoot[ rootUuid ];
	
					if ( action !== undefined ) {
	
						this._deactivateAction( action );
						this._removeInactiveAction( action );
	
					}
	
				}
	
				var bindingsByRoot = this._bindingsByRootAndName,
					bindingByName = bindingsByRoot[ rootUuid ];
	
				if ( bindingByName !== undefined ) {
	
					for ( var trackName in bindingByName ) {
	
						var binding = bindingByName[ trackName ];
						binding.restoreOriginalState();
						this._removeInactiveBinding( binding );
	
					}
	
				}
	
			},
	
			// remove a targeted clip from the cache
			uncacheAction: function ( clip, optionalRoot ) {
	
				var action = this.existingAction( clip, optionalRoot );
	
				if ( action !== null ) {
	
					this._deactivateAction( action );
					this._removeInactiveAction( action );
	
				}
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Uniform( value ) {
	
			if ( typeof value === 'string' ) {
	
				console.warn( 'THREE.Uniform: Type parameter is no longer needed.' );
				value = arguments[ 1 ];
	
			}
	
			this.value = value;
	
		}
	
		Uniform.prototype.clone = function () {
	
			return new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );
	
		};
	
		/**
		 * @author benaadams / https://twitter.com/ben_a_adams
		 */
	
		function InstancedInterleavedBuffer( array, stride, meshPerAttribute ) {
	
			InterleavedBuffer.call( this, array, stride );
	
			this.meshPerAttribute = meshPerAttribute || 1;
	
		}
	
		InstancedInterleavedBuffer.prototype = Object.assign( Object.create( InterleavedBuffer.prototype ), {
	
			constructor: InstancedInterleavedBuffer,
	
			isInstancedInterleavedBuffer: true,
	
			copy: function ( source ) {
	
				InterleavedBuffer.prototype.copy.call( this, source );
	
				this.meshPerAttribute = source.meshPerAttribute;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author bhouston / http://clara.io/
		 * @author stephomi / http://stephaneginier.com/
		 */
	
		function Raycaster( origin, direction, near, far ) {
	
			this.ray = new Ray( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)
	
			this.near = near || 0;
			this.far = far || Infinity;
			this.camera = null;
			this.layers = new Layers();
	
			this.params = {
				Mesh: {},
				Line: { threshold: 1 },
				LOD: {},
				Points: { threshold: 1 },
				Sprite: {}
			};
	
			Object.defineProperties( this.params, {
				PointCloud: {
					get: function () {
	
						console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
						return this.Points;
	
					}
				}
			} );
	
		}
	
		function ascSort( a, b ) {
	
			return a.distance - b.distance;
	
		}
	
		function intersectObject( object, raycaster, intersects, recursive ) {
	
			if ( object.layers.test( raycaster.layers ) ) {
	
				object.raycast( raycaster, intersects );
	
			}
	
			if ( recursive === true ) {
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					intersectObject( children[ i ], raycaster, intersects, true );
	
				}
	
			}
	
		}
	
		Object.assign( Raycaster.prototype, {
	
			set: function ( origin, direction ) {
	
				// direction is assumed to be normalized (for accurate distance calculations)
	
				this.ray.set( origin, direction );
	
			},
	
			setFromCamera: function ( coords, camera ) {
	
				if ( ( camera && camera.isPerspectiveCamera ) ) {
	
					this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
					this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
					this.camera = camera;
	
				} else if ( ( camera && camera.isOrthographicCamera ) ) {
	
					this.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera
					this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
					this.camera = camera;
	
				} else {
	
					console.error( 'THREE.Raycaster: Unsupported camera type.' );
	
				}
	
			},
	
			intersectObject: function ( object, recursive, optionalTarget ) {
	
				var intersects = optionalTarget || [];
	
				intersectObject( object, this, intersects, recursive );
	
				intersects.sort( ascSort );
	
				return intersects;
	
			},
	
			intersectObjects: function ( objects, recursive, optionalTarget ) {
	
				var intersects = optionalTarget || [];
	
				if ( Array.isArray( objects ) === false ) {
	
					console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
					return intersects;
	
				}
	
				for ( var i = 0, l = objects.length; i < l; i ++ ) {
	
					intersectObject( objects[ i ], this, intersects, recursive );
	
				}
	
				intersects.sort( ascSort );
	
				return intersects;
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 * @author WestLangley / http://github.com/WestLangley
		 *
		 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
		 *
		 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
		 * The azimuthal angle (theta) is measured from the positive z-axis.
		 */
	
		function Spherical( radius, phi, theta ) {
	
			this.radius = ( radius !== undefined ) ? radius : 1.0;
			this.phi = ( phi !== undefined ) ? phi : 0; // polar angle
			this.theta = ( theta !== undefined ) ? theta : 0; // azimuthal angle
	
			return this;
	
		}
	
		Object.assign( Spherical.prototype, {
	
			set: function ( radius, phi, theta ) {
	
				this.radius = radius;
				this.phi = phi;
				this.theta = theta;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( other ) {
	
				this.radius = other.radius;
				this.phi = other.phi;
				this.theta = other.theta;
	
				return this;
	
			},
	
			// restrict phi to be betwee EPS and PI-EPS
			makeSafe: function () {
	
				var EPS = 0.000001;
				this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );
	
				return this;
	
			},
	
			setFromVector3: function ( v ) {
	
				return this.setFromCartesianCoords( v.x, v.y, v.z );
	
			},
	
			setFromCartesianCoords: function ( x, y, z ) {
	
				this.radius = Math.sqrt( x * x + y * y + z * z );
	
				if ( this.radius === 0 ) {
	
					this.theta = 0;
					this.phi = 0;
	
				} else {
	
					this.theta = Math.atan2( x, z );
					this.phi = Math.acos( MathUtils.clamp( y / this.radius, - 1, 1 ) );
	
				}
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system
		 *
		 */
	
		function Cylindrical( radius, theta, y ) {
	
			this.radius = ( radius !== undefined ) ? radius : 1.0; // distance from the origin to a point in the x-z plane
			this.theta = ( theta !== undefined ) ? theta : 0; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis
			this.y = ( y !== undefined ) ? y : 0; // height above the x-z plane
	
			return this;
	
		}
	
		Object.assign( Cylindrical.prototype, {
	
			set: function ( radius, theta, y ) {
	
				this.radius = radius;
				this.theta = theta;
				this.y = y;
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( other ) {
	
				this.radius = other.radius;
				this.theta = other.theta;
				this.y = other.y;
	
				return this;
	
			},
	
			setFromVector3: function ( v ) {
	
				return this.setFromCartesianCoords( v.x, v.y, v.z );
	
			},
	
			setFromCartesianCoords: function ( x, y, z ) {
	
				this.radius = Math.sqrt( x * x + z * z );
				this.theta = Math.atan2( x, z );
				this.y = y;
	
				return this;
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		var _vector$7 = new Vector2();
	
		function Box2( min, max ) {
	
			this.min = ( min !== undefined ) ? min : new Vector2( + Infinity, + Infinity );
			this.max = ( max !== undefined ) ? max : new Vector2( - Infinity, - Infinity );
	
		}
	
		Object.assign( Box2.prototype, {
	
			set: function ( min, max ) {
	
				this.min.copy( min );
				this.max.copy( max );
	
				return this;
	
			},
	
			setFromPoints: function ( points ) {
	
				this.makeEmpty();
	
				for ( var i = 0, il = points.length; i < il; i ++ ) {
	
					this.expandByPoint( points[ i ] );
	
				}
	
				return this;
	
			},
	
			setFromCenterAndSize: function ( center, size ) {
	
				var halfSize = _vector$7.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( box ) {
	
				this.min.copy( box.min );
				this.max.copy( box.max );
	
				return this;
	
			},
	
			makeEmpty: function () {
	
				this.min.x = this.min.y = + Infinity;
				this.max.x = this.max.y = - Infinity;
	
				return this;
	
			},
	
			isEmpty: function () {
	
				// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
	
				return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
	
			},
	
			getCenter: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Box2: .getCenter() target is now required' );
					target = new Vector2();
	
				}
	
				return this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
	
			},
	
			getSize: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Box2: .getSize() target is now required' );
					target = new Vector2();
	
				}
	
				return this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );
	
			},
	
			expandByPoint: function ( point ) {
	
				this.min.min( point );
				this.max.max( point );
	
				return this;
	
			},
	
			expandByVector: function ( vector ) {
	
				this.min.sub( vector );
				this.max.add( vector );
	
				return this;
	
			},
	
			expandByScalar: function ( scalar ) {
	
				this.min.addScalar( - scalar );
				this.max.addScalar( scalar );
	
				return this;
	
			},
	
			containsPoint: function ( point ) {
	
				return point.x < this.min.x || point.x > this.max.x ||
					point.y < this.min.y || point.y > this.max.y ? false : true;
	
			},
	
			containsBox: function ( box ) {
	
				return this.min.x <= box.min.x && box.max.x <= this.max.x &&
					this.min.y <= box.min.y && box.max.y <= this.max.y;
	
			},
	
			getParameter: function ( point, target ) {
	
				// This can potentially have a divide by zero if the box
				// has a size dimension of 0.
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Box2: .getParameter() target is now required' );
					target = new Vector2();
	
				}
	
				return target.set(
					( point.x - this.min.x ) / ( this.max.x - this.min.x ),
					( point.y - this.min.y ) / ( this.max.y - this.min.y )
				);
	
			},
	
			intersectsBox: function ( box ) {
	
				// using 4 splitting planes to rule out intersections
	
				return box.max.x < this.min.x || box.min.x > this.max.x ||
					box.max.y < this.min.y || box.min.y > this.max.y ? false : true;
	
			},
	
			clampPoint: function ( point, target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Box2: .clampPoint() target is now required' );
					target = new Vector2();
	
				}
	
				return target.copy( point ).clamp( this.min, this.max );
	
			},
	
			distanceToPoint: function ( point ) {
	
				var clampedPoint = _vector$7.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();
	
			},
	
			intersect: function ( box ) {
	
				this.min.max( box.min );
				this.max.min( box.max );
	
				return this;
	
			},
	
			union: function ( box ) {
	
				this.min.min( box.min );
				this.max.max( box.max );
	
				return this;
	
			},
	
			translate: function ( offset ) {
	
				this.min.add( offset );
				this.max.add( offset );
	
				return this;
	
			},
	
			equals: function ( box ) {
	
				return box.min.equals( this.min ) && box.max.equals( this.max );
	
			}
	
		} );
	
		/**
		 * @author bhouston / http://clara.io
		 */
	
		var _startP = new Vector3();
		var _startEnd = new Vector3();
	
		function Line3( start, end ) {
	
			this.start = ( start !== undefined ) ? start : new Vector3();
			this.end = ( end !== undefined ) ? end : new Vector3();
	
		}
	
		Object.assign( Line3.prototype, {
	
			set: function ( start, end ) {
	
				this.start.copy( start );
				this.end.copy( end );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			},
	
			copy: function ( line ) {
	
				this.start.copy( line.start );
				this.end.copy( line.end );
	
				return this;
	
			},
	
			getCenter: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Line3: .getCenter() target is now required' );
					target = new Vector3();
	
				}
	
				return target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
	
			},
	
			delta: function ( target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Line3: .delta() target is now required' );
					target = new Vector3();
	
				}
	
				return target.subVectors( this.end, this.start );
	
			},
	
			distanceSq: function () {
	
				return this.start.distanceToSquared( this.end );
	
			},
	
			distance: function () {
	
				return this.start.distanceTo( this.end );
	
			},
	
			at: function ( t, target ) {
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Line3: .at() target is now required' );
					target = new Vector3();
	
				}
	
				return this.delta( target ).multiplyScalar( t ).add( this.start );
	
			},
	
			closestPointToPointParameter: function ( point, clampToLine ) {
	
				_startP.subVectors( point, this.start );
				_startEnd.subVectors( this.end, this.start );
	
				var startEnd2 = _startEnd.dot( _startEnd );
				var startEnd_startP = _startEnd.dot( _startP );
	
				var t = startEnd_startP / startEnd2;
	
				if ( clampToLine ) {
	
					t = MathUtils.clamp( t, 0, 1 );
	
				}
	
				return t;
	
			},
	
			closestPointToPoint: function ( point, clampToLine, target ) {
	
				var t = this.closestPointToPointParameter( point, clampToLine );
	
				if ( target === undefined ) {
	
					console.warn( 'THREE.Line3: .closestPointToPoint() target is now required' );
					target = new Vector3();
	
				}
	
				return this.delta( target ).multiplyScalar( t ).add( this.start );
	
			},
	
			applyMatrix4: function ( matrix ) {
	
				this.start.applyMatrix4( matrix );
				this.end.applyMatrix4( matrix );
	
				return this;
	
			},
	
			equals: function ( line ) {
	
				return line.start.equals( this.start ) && line.end.equals( this.end );
	
			}
	
		} );
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 */
	
		function ImmediateRenderObject( material ) {
	
			Object3D.call( this );
	
			this.material = material;
			this.render = function ( /* renderCallback */ ) {};
	
		}
	
		ImmediateRenderObject.prototype = Object.create( Object3D.prototype );
		ImmediateRenderObject.prototype.constructor = ImmediateRenderObject;
	
		ImmediateRenderObject.prototype.isImmediateRenderObject = true;
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		var _vector$8 = new Vector3();
	
		function SpotLightHelper( light, color ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.color = color;
	
			var geometry = new BufferGeometry();
	
			var positions = [
				0, 0, 0, 	0, 0, 1,
				0, 0, 0, 	1, 0, 1,
				0, 0, 0,	- 1, 0, 1,
				0, 0, 0, 	0, 1, 1,
				0, 0, 0, 	0, - 1, 1
			];
	
			for ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {
	
				var p1 = ( i / l ) * Math.PI * 2;
				var p2 = ( j / l ) * Math.PI * 2;
	
				positions.push(
					Math.cos( p1 ), Math.sin( p1 ), 1,
					Math.cos( p2 ), Math.sin( p2 ), 1
				);
	
			}
	
			geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
	
			var material = new LineBasicMaterial( { fog: false } );
	
			this.cone = new LineSegments( geometry, material );
			this.add( this.cone );
	
			this.update();
	
		}
	
		SpotLightHelper.prototype = Object.create( Object3D.prototype );
		SpotLightHelper.prototype.constructor = SpotLightHelper;
	
		SpotLightHelper.prototype.dispose = function () {
	
			this.cone.geometry.dispose();
			this.cone.material.dispose();
	
		};
	
		SpotLightHelper.prototype.update = function () {
	
			this.light.updateMatrixWorld();
	
			var coneLength = this.light.distance ? this.light.distance : 1000;
			var coneWidth = coneLength * Math.tan( this.light.angle );
	
			this.cone.scale.set( coneWidth, coneWidth, coneLength );
	
			_vector$8.setFromMatrixPosition( this.light.target.matrixWorld );
	
			this.cone.lookAt( _vector$8 );
	
			if ( this.color !== undefined ) {
	
				this.cone.material.color.set( this.color );
	
			} else {
	
				this.cone.material.color.copy( this.light.color );
	
			}
	
		};
	
		/**
		 * @author Sean Griffin / http://twitter.com/sgrif
		 * @author Michael Guerrero / http://realitymeltdown.com
		 * @author mrdoob / http://mrdoob.com/
		 * @author ikerr / http://verold.com
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		var _vector$9 = new Vector3();
		var _boneMatrix = new Matrix4();
		var _matrixWorldInv = new Matrix4();
	
		function getBoneList( object ) {
	
			var boneList = [];
	
			if ( object && object.isBone ) {
	
				boneList.push( object );
	
			}
	
			for ( var i = 0; i < object.children.length; i ++ ) {
	
				boneList.push.apply( boneList, getBoneList( object.children[ i ] ) );
	
			}
	
			return boneList;
	
		}
	
		function SkeletonHelper( object ) {
	
			var bones = getBoneList( object );
	
			var geometry = new BufferGeometry();
	
			var vertices = [];
			var colors = [];
	
			var color1 = new Color( 0, 0, 1 );
			var color2 = new Color( 0, 1, 0 );
	
			for ( var i = 0; i < bones.length; i ++ ) {
	
				var bone = bones[ i ];
	
				if ( bone.parent && bone.parent.isBone ) {
	
					vertices.push( 0, 0, 0 );
					vertices.push( 0, 0, 0 );
					colors.push( color1.r, color1.g, color1.b );
					colors.push( color2.r, color2.g, color2.b );
	
				}
	
			}
	
			geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, transparent: true } );
	
			LineSegments.call( this, geometry, material );
	
			this.root = object;
			this.bones = bones;
	
			this.matrix = object.matrixWorld;
			this.matrixAutoUpdate = false;
	
		}
	
		SkeletonHelper.prototype = Object.create( LineSegments.prototype );
		SkeletonHelper.prototype.constructor = SkeletonHelper;
	
		SkeletonHelper.prototype.isSkeletonHelper = true;
	
		SkeletonHelper.prototype.updateMatrixWorld = function ( force ) {
	
			var bones = this.bones;
	
			var geometry = this.geometry;
			var position = geometry.getAttribute( 'position' );
	
			_matrixWorldInv.getInverse( this.root.matrixWorld );
	
			for ( var i = 0, j = 0; i < bones.length; i ++ ) {
	
				var bone = bones[ i ];
	
				if ( bone.parent && bone.parent.isBone ) {
	
					_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );
					_vector$9.setFromMatrixPosition( _boneMatrix );
					position.setXYZ( j, _vector$9.x, _vector$9.y, _vector$9.z );
	
					_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );
					_vector$9.setFromMatrixPosition( _boneMatrix );
					position.setXYZ( j + 1, _vector$9.x, _vector$9.y, _vector$9.z );
	
					j += 2;
	
				}
	
			}
	
			geometry.getAttribute( 'position' ).needsUpdate = true;
	
			Object3D.prototype.updateMatrixWorld.call( this, force );
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function PointLightHelper( light, sphereSize, color ) {
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.color = color;
	
			var geometry = new SphereBufferGeometry( sphereSize, 4, 2 );
			var material = new MeshBasicMaterial( { wireframe: true, fog: false } );
	
			Mesh.call( this, geometry, material );
	
			this.matrix = this.light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.update();
	
	
			/*
			var distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );
			var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
	
			this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
			this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
	
			var d = light.distance;
	
			if ( d === 0.0 ) {
	
				this.lightDistance.visible = false;
	
			} else {
	
				this.lightDistance.scale.set( d, d, d );
	
			}
	
			this.add( this.lightDistance );
			*/
	
		}
	
		PointLightHelper.prototype = Object.create( Mesh.prototype );
		PointLightHelper.prototype.constructor = PointLightHelper;
	
		PointLightHelper.prototype.dispose = function () {
	
			this.geometry.dispose();
			this.material.dispose();
	
		};
	
		PointLightHelper.prototype.update = function () {
	
			if ( this.color !== undefined ) {
	
				this.material.color.set( this.color );
	
			} else {
	
				this.material.color.copy( this.light.color );
	
			}
	
			/*
			var d = this.light.distance;
	
			if ( d === 0.0 ) {
	
				this.lightDistance.visible = false;
	
			} else {
	
				this.lightDistance.visible = true;
				this.lightDistance.scale.set( d, d, d );
	
			}
			*/
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 */
	
		var _vector$a = new Vector3();
		var _color1 = new Color();
		var _color2 = new Color();
	
		function HemisphereLightHelper( light, size, color ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.color = color;
	
			var geometry = new OctahedronBufferGeometry( size );
			geometry.rotateY( Math.PI * 0.5 );
	
			this.material = new MeshBasicMaterial( { wireframe: true, fog: false } );
			if ( this.color === undefined ) { this.material.vertexColors = true; }
	
			var position = geometry.getAttribute( 'position' );
			var colors = new Float32Array( position.count * 3 );
	
			geometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );
	
			this.add( new Mesh( geometry, this.material ) );
	
			this.update();
	
		}
	
		HemisphereLightHelper.prototype = Object.create( Object3D.prototype );
		HemisphereLightHelper.prototype.constructor = HemisphereLightHelper;
	
		HemisphereLightHelper.prototype.dispose = function () {
	
			this.children[ 0 ].geometry.dispose();
			this.children[ 0 ].material.dispose();
	
		};
	
		HemisphereLightHelper.prototype.update = function () {
	
			var mesh = this.children[ 0 ];
	
			if ( this.color !== undefined ) {
	
				this.material.color.set( this.color );
	
			} else {
	
				var colors = mesh.geometry.getAttribute( 'color' );
	
				_color1.copy( this.light.color );
				_color2.copy( this.light.groundColor );
	
				for ( var i = 0, l = colors.count; i < l; i ++ ) {
	
					var color = ( i < ( l / 2 ) ) ? _color1 : _color2;
	
					colors.setXYZ( i, color.r, color.g, color.b );
	
				}
	
				colors.needsUpdate = true;
	
			}
	
			mesh.lookAt( _vector$a.setFromMatrixPosition( this.light.matrixWorld ).negate() );
	
		};
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function GridHelper( size, divisions, color1, color2 ) {
	
			size = size || 10;
			divisions = divisions || 10;
			color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
			color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
	
			var center = divisions / 2;
			var step = size / divisions;
			var halfSize = size / 2;
	
			var vertices = [], colors = [];
	
			for ( var i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {
	
				vertices.push( - halfSize, 0, k, halfSize, 0, k );
				vertices.push( k, 0, - halfSize, k, 0, halfSize );
	
				var color = i === center ? color1 : color2;
	
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
				color.toArray( colors, j ); j += 3;
	
			}
	
			var geometry = new BufferGeometry();
			geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: true } );
	
			LineSegments.call( this, geometry, material );
	
		}
	
		GridHelper.prototype = Object.assign( Object.create( LineSegments.prototype ), {
	
			constructor: GridHelper,
	
			copy: function ( source ) {
	
				LineSegments.prototype.copy.call( this, source );
	
				this.geometry.copy( source.geometry );
				this.material.copy( source.material );
	
				return this;
	
			},
	
			clone: function () {
	
				return new this.constructor().copy( this );
	
			}
	
		} );
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / http://github.com/Mugen87
		 * @author Hectate / http://www.github.com/Hectate
		 */
	
		function PolarGridHelper( radius, radials, circles, divisions, color1, color2 ) {
	
			radius = radius || 10;
			radials = radials || 16;
			circles = circles || 8;
			divisions = divisions || 64;
			color1 = new Color( color1 !== undefined ? color1 : 0x444444 );
			color2 = new Color( color2 !== undefined ? color2 : 0x888888 );
	
			var vertices = [];
			var colors = [];
	
			var x, z;
			var v, i, j, r, color;
	
			// create the radials
	
			for ( i = 0; i <= radials; i ++ ) {
	
				v = ( i / radials ) * ( Math.PI * 2 );
	
				x = Math.sin( v ) * radius;
				z = Math.cos( v ) * radius;
	
				vertices.push( 0, 0, 0 );
				vertices.push( x, 0, z );
	
				color = ( i & 1 ) ? color1 : color2;
	
				colors.push( color.r, color.g, color.b );
				colors.push( color.r, color.g, color.b );
	
			}
	
			// create the circles
	
			for ( i = 0; i <= circles; i ++ ) {
	
				color = ( i & 1 ) ? color1 : color2;
	
				r = radius - ( radius / circles * i );
	
				for ( j = 0; j < divisions; j ++ ) {
	
					// first vertex
	
					v = ( j / divisions ) * ( Math.PI * 2 );
	
					x = Math.sin( v ) * r;
					z = Math.cos( v ) * r;
	
					vertices.push( x, 0, z );
					colors.push( color.r, color.g, color.b );
	
					// second vertex
	
					v = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );
	
					x = Math.sin( v ) * r;
					z = Math.cos( v ) * r;
	
					vertices.push( x, 0, z );
					colors.push( color.r, color.g, color.b );
	
				}
	
			}
	
			var geometry = new BufferGeometry();
			geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: true } );
	
			LineSegments.call( this, geometry, material );
	
		}
	
		PolarGridHelper.prototype = Object.create( LineSegments.prototype );
		PolarGridHelper.prototype.constructor = PolarGridHelper;
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author mrdoob / http://mrdoob.com/
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		var _v1$5 = new Vector3();
		var _v2$3 = new Vector3();
		var _v3$1 = new Vector3();
	
		function DirectionalLightHelper( light, size, color ) {
	
			Object3D.call( this );
	
			this.light = light;
			this.light.updateMatrixWorld();
	
			this.matrix = light.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.color = color;
	
			if ( size === undefined ) { size = 1; }
	
			var geometry = new BufferGeometry();
			geometry.setAttribute( 'position', new Float32BufferAttribute( [
				- size, size, 0,
				size, size, 0,
				size, - size, 0,
				- size, - size, 0,
				- size, size, 0
			], 3 ) );
	
			var material = new LineBasicMaterial( { fog: false } );
	
			this.lightPlane = new Line( geometry, material );
			this.add( this.lightPlane );
	
			geometry = new BufferGeometry();
			geometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );
	
			this.targetLine = new Line( geometry, material );
			this.add( this.targetLine );
	
			this.update();
	
		}
	
		DirectionalLightHelper.prototype = Object.create( Object3D.prototype );
		DirectionalLightHelper.prototype.constructor = DirectionalLightHelper;
	
		DirectionalLightHelper.prototype.dispose = function () {
	
			this.lightPlane.geometry.dispose();
			this.lightPlane.material.dispose();
			this.targetLine.geometry.dispose();
			this.targetLine.material.dispose();
	
		};
	
		DirectionalLightHelper.prototype.update = function () {
	
			_v1$5.setFromMatrixPosition( this.light.matrixWorld );
			_v2$3.setFromMatrixPosition( this.light.target.matrixWorld );
			_v3$1.subVectors( _v2$3, _v1$5 );
	
			this.lightPlane.lookAt( _v2$3 );
	
			if ( this.color !== undefined ) {
	
				this.lightPlane.material.color.set( this.color );
				this.targetLine.material.color.set( this.color );
	
			} else {
	
				this.lightPlane.material.color.copy( this.light.color );
				this.targetLine.material.color.copy( this.light.color );
	
			}
	
			this.targetLine.lookAt( _v2$3 );
			this.targetLine.scale.z = _v3$1.length();
	
		};
	
		/**
		 * @author alteredq / http://alteredqualia.com/
		 * @author Mugen87 / https://github.com/Mugen87
		 *
		 *	- shows frustum, line of sight and up of the camera
		 *	- suitable for fast updates
		 * 	- based on frustum visualization in lightgl.js shadowmap example
		 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
		 */
	
		var _vector$b = new Vector3();
		var _camera = new Camera();
	
		function CameraHelper( camera ) {
	
			var geometry = new BufferGeometry();
			var material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true } );
	
			var vertices = [];
			var colors = [];
	
			var pointMap = {};
	
			// colors
	
			var colorFrustum = new Color( 0xffaa00 );
			var colorCone = new Color( 0xff0000 );
			var colorUp = new Color( 0x00aaff );
			var colorTarget = new Color( 0xffffff );
			var colorCross = new Color( 0x333333 );
	
			// near
	
			addLine( 'n1', 'n2', colorFrustum );
			addLine( 'n2', 'n4', colorFrustum );
			addLine( 'n4', 'n3', colorFrustum );
			addLine( 'n3', 'n1', colorFrustum );
	
			// far
	
			addLine( 'f1', 'f2', colorFrustum );
			addLine( 'f2', 'f4', colorFrustum );
			addLine( 'f4', 'f3', colorFrustum );
			addLine( 'f3', 'f1', colorFrustum );
	
			// sides
	
			addLine( 'n1', 'f1', colorFrustum );
			addLine( 'n2', 'f2', colorFrustum );
			addLine( 'n3', 'f3', colorFrustum );
			addLine( 'n4', 'f4', colorFrustum );
	
			// cone
	
			addLine( 'p', 'n1', colorCone );
			addLine( 'p', 'n2', colorCone );
			addLine( 'p', 'n3', colorCone );
			addLine( 'p', 'n4', colorCone );
	
			// up
	
			addLine( 'u1', 'u2', colorUp );
			addLine( 'u2', 'u3', colorUp );
			addLine( 'u3', 'u1', colorUp );
	
			// target
	
			addLine( 'c', 't', colorTarget );
			addLine( 'p', 'c', colorCross );
	
			// cross
	
			addLine( 'cn1', 'cn2', colorCross );
			addLine( 'cn3', 'cn4', colorCross );
	
			addLine( 'cf1', 'cf2', colorCross );
			addLine( 'cf3', 'cf4', colorCross );
	
			function addLine( a, b, color ) {
	
				addPoint( a, color );
				addPoint( b, color );
	
			}
	
			function addPoint( id, color ) {
	
				vertices.push( 0, 0, 0 );
				colors.push( color.r, color.g, color.b );
	
				if ( pointMap[ id ] === undefined ) {
	
					pointMap[ id ] = [];
	
				}
	
				pointMap[ id ].push( ( vertices.length / 3 ) - 1 );
	
			}
	
			geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			LineSegments.call( this, geometry, material );
	
			this.camera = camera;
			if ( this.camera.updateProjectionMatrix ) { this.camera.updateProjectionMatrix(); }
	
			this.matrix = camera.matrixWorld;
			this.matrixAutoUpdate = false;
	
			this.pointMap = pointMap;
	
			this.update();
	
		}
	
		CameraHelper.prototype = Object.create( LineSegments.prototype );
		CameraHelper.prototype.constructor = CameraHelper;
	
		CameraHelper.prototype.update = function () {
	
			var geometry = this.geometry;
			var pointMap = this.pointMap;
	
			var w = 1, h = 1;
	
			// we need just camera projection matrix inverse
			// world matrix must be identity
	
			_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );
	
			// center / target
	
			setPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );
			setPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );
	
			// near
	
			setPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );
			setPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );
			setPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );
			setPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );
	
			// far
	
			setPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );
			setPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );
			setPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );
			setPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );
	
			// up
	
			setPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );
			setPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );
			setPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );
	
			// cross
	
			setPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );
			setPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );
			setPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );
			setPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );
	
			setPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );
			setPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );
			setPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );
			setPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );
	
			geometry.getAttribute( 'position' ).needsUpdate = true;
	
		};
	
		function setPoint( point, pointMap, geometry, camera, x, y, z ) {
	
			_vector$b.set( x, y, z ).unproject( camera );
	
			var points = pointMap[ point ];
	
			if ( points !== undefined ) {
	
				var position = geometry.getAttribute( 'position' );
	
				for ( var i = 0, l = points.length; i < l; i ++ ) {
	
					position.setXYZ( points[ i ], _vector$b.x, _vector$b.y, _vector$b.z );
	
				}
	
			}
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 * @author Mugen87 / http://github.com/Mugen87
		 */
	
		var _box$3 = new Box3();
	
		function BoxHelper( object, color ) {
	
			this.object = object;
	
			if ( color === undefined ) { color = 0xffff00; }
	
			var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
			var positions = new Float32Array( 8 * 3 );
	
			var geometry = new BufferGeometry();
			geometry.setIndex( new BufferAttribute( indices, 1 ) );
			geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );
	
			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
	
			this.matrixAutoUpdate = false;
	
			this.update();
	
		}
	
		BoxHelper.prototype = Object.create( LineSegments.prototype );
		BoxHelper.prototype.constructor = BoxHelper;
	
		BoxHelper.prototype.update = function ( object ) {
	
			if ( object !== undefined ) {
	
				console.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );
	
			}
	
			if ( this.object !== undefined ) {
	
				_box$3.setFromObject( this.object );
	
			}
	
			if ( _box$3.isEmpty() ) { return; }
	
			var min = _box$3.min;
			var max = _box$3.max;
	
			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/
	
			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/
	
			var position = this.geometry.attributes.position;
			var array = position.array;
	
			array[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;
			array[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;
			array[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;
			array[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;
	
			position.needsUpdate = true;
	
			this.geometry.computeBoundingSphere();
	
	
		};
	
		BoxHelper.prototype.setFromObject = function ( object ) {
	
			this.object = object;
			this.update();
	
			return this;
	
		};
	
		BoxHelper.prototype.copy = function ( source ) {
	
			LineSegments.prototype.copy.call( this, source );
	
			this.object = source.object;
	
			return this;
	
		};
	
		BoxHelper.prototype.clone = function () {
	
			return new this.constructor().copy( this );
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function Box3Helper( box, color ) {
	
			this.type = 'Box3Helper';
	
			this.box = box;
	
			color = color || 0xffff00;
	
			var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
	
			var positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];
	
			var geometry = new BufferGeometry();
	
			geometry.setIndex( new BufferAttribute( indices, 1 ) );
	
			geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
	
			LineSegments.call( this, geometry, new LineBasicMaterial( { color: color } ) );
	
			this.geometry.computeBoundingSphere();
	
		}
	
		Box3Helper.prototype = Object.create( LineSegments.prototype );
		Box3Helper.prototype.constructor = Box3Helper;
	
		Box3Helper.prototype.updateMatrixWorld = function ( force ) {
	
			var box = this.box;
	
			if ( box.isEmpty() ) { return; }
	
			box.getCenter( this.position );
	
			box.getSize( this.scale );
	
			this.scale.multiplyScalar( 0.5 );
	
			Object3D.prototype.updateMatrixWorld.call( this, force );
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 */
	
		function PlaneHelper( plane, size, hex ) {
	
			this.type = 'PlaneHelper';
	
			this.plane = plane;
	
			this.size = ( size === undefined ) ? 1 : size;
	
			var color = ( hex !== undefined ) ? hex : 0xffff00;
	
			var positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];
	
			var geometry = new BufferGeometry();
			geometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );
			geometry.computeBoundingSphere();
	
			Line.call( this, geometry, new LineBasicMaterial( { color: color } ) );
	
			//
	
			var positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];
	
			var geometry2 = new BufferGeometry();
			geometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );
			geometry2.computeBoundingSphere();
	
			this.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false } ) ) );
	
		}
	
		PlaneHelper.prototype = Object.create( Line.prototype );
		PlaneHelper.prototype.constructor = PlaneHelper;
	
		PlaneHelper.prototype.updateMatrixWorld = function ( force ) {
	
			var scale = - this.plane.constant;
	
			if ( Math.abs( scale ) < 1e-8 ) { scale = 1e-8; } // sign does not matter
	
			this.scale.set( 0.5 * this.size, 0.5 * this.size, scale );
	
			this.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here
	
			this.lookAt( this.plane.normal );
	
			Object3D.prototype.updateMatrixWorld.call( this, force );
	
		};
	
		/**
		 * @author WestLangley / http://github.com/WestLangley
		 * @author zz85 / http://github.com/zz85
		 * @author bhouston / http://clara.io
		 *
		 * Creates an arrow for visualizing directions
		 *
		 * Parameters:
		 *  dir - Vector3
		 *  origin - Vector3
		 *  length - Number
		 *  color - color in hex value
		 *  headLength - Number
		 *  headWidth - Number
		 */
	
		var _axis = new Vector3();
		var _lineGeometry, _coneGeometry;
	
		function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {
	
			// dir is assumed to be normalized
	
			Object3D.call( this );
	
			if ( dir === undefined ) { dir = new Vector3( 0, 0, 1 ); }
			if ( origin === undefined ) { origin = new Vector3( 0, 0, 0 ); }
			if ( length === undefined ) { length = 1; }
			if ( color === undefined ) { color = 0xffff00; }
			if ( headLength === undefined ) { headLength = 0.2 * length; }
			if ( headWidth === undefined ) { headWidth = 0.2 * headLength; }
	
			if ( _lineGeometry === undefined ) {
	
				_lineGeometry = new BufferGeometry();
				_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );
	
				_coneGeometry = new CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );
				_coneGeometry.translate( 0, - 0.5, 0 );
	
			}
	
			this.position.copy( origin );
	
			this.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color } ) );
			this.line.matrixAutoUpdate = false;
			this.add( this.line );
	
			this.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color } ) );
			this.cone.matrixAutoUpdate = false;
			this.add( this.cone );
	
			this.setDirection( dir );
			this.setLength( length, headLength, headWidth );
	
		}
	
		ArrowHelper.prototype = Object.create( Object3D.prototype );
		ArrowHelper.prototype.constructor = ArrowHelper;
	
		ArrowHelper.prototype.setDirection = function ( dir ) {
	
			// dir is assumed to be normalized
	
			if ( dir.y > 0.99999 ) {
	
				this.quaternion.set( 0, 0, 0, 1 );
	
			} else if ( dir.y < - 0.99999 ) {
	
				this.quaternion.set( 1, 0, 0, 0 );
	
			} else {
	
				_axis.set( dir.z, 0, - dir.x ).normalize();
	
				var radians = Math.acos( dir.y );
	
				this.quaternion.setFromAxisAngle( _axis, radians );
	
			}
	
		};
	
		ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {
	
			if ( headLength === undefined ) { headLength = 0.2 * length; }
			if ( headWidth === undefined ) { headWidth = 0.2 * headLength; }
	
			this.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458
			this.line.updateMatrix();
	
			this.cone.scale.set( headWidth, headLength, headWidth );
			this.cone.position.y = length;
			this.cone.updateMatrix();
	
		};
	
		ArrowHelper.prototype.setColor = function ( color ) {
	
			this.line.material.color.set( color );
			this.cone.material.color.set( color );
	
		};
	
		ArrowHelper.prototype.copy = function ( source ) {
	
			Object3D.prototype.copy.call( this, source, false );
	
			this.line.copy( source.line );
			this.cone.copy( source.cone );
	
			return this;
	
		};
	
		ArrowHelper.prototype.clone = function () {
	
			return new this.constructor().copy( this );
	
		};
	
		/**
		 * @author sroucheray / http://sroucheray.org/
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function AxesHelper( size ) {
	
			size = size || 1;
	
			var vertices = [
				0, 0, 0,	size, 0, 0,
				0, 0, 0,	0, size, 0,
				0, 0, 0,	0, 0, size
			];
	
			var colors = [
				1, 0, 0,	1, 0.6, 0,
				0, 1, 0,	0.6, 1, 0,
				0, 0, 1,	0, 0.6, 1
			];
	
			var geometry = new BufferGeometry();
			geometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			geometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );
	
			var material = new LineBasicMaterial( { vertexColors: true } );
	
			LineSegments.call( this, geometry, material );
	
		}
	
		AxesHelper.prototype = Object.create( LineSegments.prototype );
		AxesHelper.prototype.constructor = AxesHelper;
	
		/**
		 * @author Emmett Lalish / elalish
		 *
		 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
		 * (PMREM) from a cubeMap environment texture. This allows different levels of
		 * blur to be quickly accessed based on material roughness. It is packed into a
		 * special CubeUV format that allows us to perform custom interpolation so that
		 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
		 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
		 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
		 * higher roughness levels. In this way we maintain resolution to smoothly
		 * interpolate diffuse lighting while limiting sampling computation.
		 */
	
		var LOD_MIN = 4;
		var LOD_MAX = 8;
		var SIZE_MAX = Math.pow( 2, LOD_MAX );
		// The standard deviations (radians) associated with the extra mips. These are
		// chosen to approximate a Trowbridge-Reitz distribution function times the
		// geometric shadowing function. These sigma values squared must match the
		// variance #defines in cube_uv_reflection_fragment.glsl.js.
		var EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];
		var TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
		// The maximum length of the blur for loop. Smaller sigmas will use fewer
		// samples and exit early, but not recompile the shader.
		var MAX_SAMPLES = 20;
		var ENCODINGS = {};
		ENCODINGS[ LinearEncoding ] = 0;
		ENCODINGS[ sRGBEncoding ] = 1;
		ENCODINGS[ RGBEEncoding ] = 2;
		ENCODINGS[ RGBM7Encoding ] = 3;
		ENCODINGS[ RGBM16Encoding ] = 4;
		ENCODINGS[ RGBDEncoding ] = 5;
		ENCODINGS[ GammaEncoding ] = 6;
	
		var _flatCamera = new OrthographicCamera();
		var _blurMaterial = _getBlurShader( MAX_SAMPLES );
		var _equirectShader = null;
		var _cubemapShader = null;
	
		var ref = _createPlanes();
		var _lodPlanes = ref._lodPlanes;
		var _sizeLods = ref._sizeLods;
		var _sigmas = ref._sigmas;
		var _pingPongRenderTarget = null;
		var _renderer = null;
	
		var _oldTarget = null;
	
		// Golden Ratio
		var PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
		var INV_PHI = 1 / PHI;
		// Vertices of a dodecahedron (except the opposites, which represent the
		// same axis), used as axis directions evenly spread on a sphere.
		var _axisDirections = [
			new Vector3( 1, 1, 1 ),
			new Vector3( - 1, 1, 1 ),
			new Vector3( 1, 1, - 1 ),
			new Vector3( - 1, 1, - 1 ),
			new Vector3( 0, PHI, INV_PHI ),
			new Vector3( 0, PHI, - INV_PHI ),
			new Vector3( INV_PHI, 0, PHI ),
			new Vector3( - INV_PHI, 0, PHI ),
			new Vector3( PHI, INV_PHI, 0 ),
			new Vector3( - PHI, INV_PHI, 0 ) ];
	
		function PMREMGenerator( renderer ) {
	
			_renderer = renderer;
			_compileMaterial( _blurMaterial );
	
		}
	
		PMREMGenerator.prototype = {
	
			constructor: PMREMGenerator,
	
			/**
			 * Generates a PMREM from a supplied Scene, which can be faster than using an
			 * image if networking bandwidth is low. Optional sigma specifies a blur radius
			 * in radians to be applied to the scene before PMREM generation. Optional near
			 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
			 * is placed at the origin).
			 */
			fromScene: function ( scene, sigma, near, far ) {
				if ( sigma === void 0 ) sigma = 0;
				if ( near === void 0 ) near = 0.1;
				if ( far === void 0 ) far = 100;
	
	
				_oldTarget = _renderer.getRenderTarget();
				var cubeUVRenderTarget = _allocateTargets();
				_sceneToCubeUV( scene, near, far, cubeUVRenderTarget );
				if ( sigma > 0 ) {
	
					_blur( cubeUVRenderTarget, 0, 0, sigma );
	
				}
				_applyPMREM( cubeUVRenderTarget );
				_cleanup( cubeUVRenderTarget );
	
				return cubeUVRenderTarget;
	
			},
	
			/**
			 * Generates a PMREM from an equirectangular texture, which can be either LDR
			 * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),
			 * as this matches best with the 256 x 256 cubemap output.
			 */
			fromEquirectangular: function ( equirectangular ) {
	
				equirectangular.magFilter = NearestFilter;
				equirectangular.minFilter = NearestFilter;
				equirectangular.generateMipmaps = false;
	
				return this.fromCubemap( equirectangular );
	
			},
	
			/**
			 * Generates a PMREM from an cubemap texture, which can be either LDR
			 * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,
			 * as this matches best with the 256 x 256 cubemap output.
			 */
			fromCubemap: function ( cubemap ) {
	
				_oldTarget = _renderer.getRenderTarget();
				var cubeUVRenderTarget = _allocateTargets( cubemap );
				_textureToCubeUV( cubemap, cubeUVRenderTarget );
				_applyPMREM( cubeUVRenderTarget );
				_cleanup( cubeUVRenderTarget );
	
				return cubeUVRenderTarget;
	
			},
	
			/**
			 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
			 * your texture's network fetch for increased concurrency.
			 */
			compileCubemapShader: function () {
	
				if ( _cubemapShader == null ) {
	
					_cubemapShader = _getCubemapShader();
					_compileMaterial( _cubemapShader );
	
				}
	
			},
	
			/**
			 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
			 * your texture's network fetch for increased concurrency.
			 */
			compileEquirectangularShader: function () {
	
				if ( _equirectShader == null ) {
	
					_equirectShader = _getEquirectShader();
					_compileMaterial( _equirectShader );
	
				}
	
			},
	
			/**
			 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
			 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
			 * one of them will cause any others to also become unusable.
			 */
			dispose: function () {
	
				_blurMaterial.dispose();
	
				if ( _cubemapShader != null ) { _cubemapShader.dispose(); }
				if ( _equirectShader != null ) { _equirectShader.dispose(); }
	
				for ( var i = 0; i < _lodPlanes.length; i ++ ) {
	
					_lodPlanes[ i ].dispose();
	
				}
	
			},
	
		};
	
		function _createPlanes() {
	
			var _lodPlanes = [];
			var _sizeLods = [];
			var _sigmas = [];
	
			var lod = LOD_MAX;
			for ( var i = 0; i < TOTAL_LODS; i ++ ) {
	
				var sizeLod = Math.pow( 2, lod );
				_sizeLods.push( sizeLod );
				var sigma = 1.0 / sizeLod;
				if ( i > LOD_MAX - LOD_MIN ) {
	
					sigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];
	
				} else if ( i == 0 ) {
	
					sigma = 0;
	
				}
				_sigmas.push( sigma );
	
				var texelSize = 1.0 / ( sizeLod - 1 );
				var min = - texelSize / 2;
				var max = 1 + texelSize / 2;
				var uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];
	
				var cubeFaces = 6;
				var vertices = 6;
				var positionSize = 3;
				var uvSize = 2;
				var faceIndexSize = 1;
	
				var position = new Float32Array( positionSize * vertices * cubeFaces );
				var uv = new Float32Array( uvSize * vertices * cubeFaces );
				var faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );
	
				for ( var face = 0; face < cubeFaces; face ++ ) {
	
					var x = ( face % 3 ) * 2 / 3 - 1;
					var y = face > 2 ? 0 : - 1;
					var coordinates = [
						x, y, 0,
						x + 2 / 3, y, 0,
						x + 2 / 3, y + 1, 0,
						x, y, 0,
						x + 2 / 3, y + 1, 0,
						x, y + 1, 0
					];
					position.set( coordinates, positionSize * vertices * face );
					uv.set( uv1, uvSize * vertices * face );
					var fill = [ face, face, face, face, face, face ];
					faceIndex.set( fill, faceIndexSize * vertices * face );
	
				}
				var planes = new BufferGeometry();
				planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
				planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
				planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
				_lodPlanes.push( planes );
	
				if ( lod > LOD_MIN ) {
	
					lod --;
	
				}
	
			}
			return { _lodPlanes: _lodPlanes, _sizeLods: _sizeLods, _sigmas: _sigmas };
	
		}
	
		function _allocateTargets( equirectangular ) {
	
			var params = {
				magFilter: NearestFilter,
				minFilter: NearestFilter,
				generateMipmaps: false,
				type: equirectangular ? equirectangular.type : UnsignedByteType,
				format: equirectangular ? equirectangular.format : RGBEFormat,
				encoding: equirectangular ? equirectangular.encoding : RGBEEncoding,
				depthBuffer: false,
				stencilBuffer: false
			};
			var cubeUVRenderTarget = _createRenderTarget( params );
			cubeUVRenderTarget.depthBuffer = equirectangular ? false : true;
			_pingPongRenderTarget = _createRenderTarget( params );
			return cubeUVRenderTarget;
	
		}
	
		function _cleanup( outputTarget ) {
	
			_pingPongRenderTarget.dispose();
			_renderer.setRenderTarget( _oldTarget );
			outputTarget.scissorTest = false;
			// reset viewport and scissor
			outputTarget.setSize( outputTarget.width, outputTarget.height );
	
		}
	
		function _sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {
	
			var fov = 90;
			var aspect = 1;
			var cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
			var upSign = [ 1, 1, 1, 1, - 1, 1 ];
			var forwardSign = [ 1, 1, - 1, - 1, - 1, 1 ];
	
			var outputEncoding = _renderer.outputEncoding;
			var toneMapping = _renderer.toneMapping;
			var toneMappingExposure = _renderer.toneMappingExposure;
			var clearColor = _renderer.getClearColor();
			var clearAlpha = _renderer.getClearAlpha();
	
			_renderer.toneMapping = LinearToneMapping;
			_renderer.toneMappingExposure = 1.0;
			_renderer.outputEncoding = LinearEncoding;
			scene.scale.z *= - 1;
	
			var background = scene.background;
			if ( background && background.isColor ) {
	
				background.convertSRGBToLinear();
				// Convert linear to RGBE
				var maxComponent = Math.max( background.r, background.g, background.b );
				var fExp = Math.min( Math.max( Math.ceil( Math.log2( maxComponent ) ), - 128.0 ), 127.0 );
				background = background.multiplyScalar( Math.pow( 2.0, - fExp ) );
				var alpha = ( fExp + 128.0 ) / 255.0;
				_renderer.setClearColor( background, alpha );
				scene.background = null;
	
			}
	
			for ( var i = 0; i < 6; i ++ ) {
	
				var col = i % 3;
				if ( col == 0 ) {
	
					cubeCamera.up.set( 0, upSign[ i ], 0 );
					cubeCamera.lookAt( forwardSign[ i ], 0, 0 );
	
				} else if ( col == 1 ) {
	
					cubeCamera.up.set( 0, 0, upSign[ i ] );
					cubeCamera.lookAt( 0, forwardSign[ i ], 0 );
	
				} else {
	
					cubeCamera.up.set( 0, upSign[ i ], 0 );
					cubeCamera.lookAt( 0, 0, forwardSign[ i ] );
	
				}
				_setViewport( cubeUVRenderTarget,
					col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );
				_renderer.setRenderTarget( cubeUVRenderTarget );
				_renderer.render( scene, cubeCamera );
	
			}
	
			_renderer.toneMapping = toneMapping;
			_renderer.toneMappingExposure = toneMappingExposure;
			_renderer.outputEncoding = outputEncoding;
			_renderer.setClearColor( clearColor, clearAlpha );
			scene.scale.z *= - 1;
	
		}
	
		function _textureToCubeUV( texture, cubeUVRenderTarget ) {
	
			var scene = new Scene();
			if ( texture.isCubeTexture ) {
	
				if ( _cubemapShader == null ) {
	
					_cubemapShader = _getCubemapShader();
	
				}
	
			} else {
	
				if ( _equirectShader == null ) {
	
					_equirectShader = _getEquirectShader();
	
				}
	
			}
			var material = texture.isCubeTexture ? _cubemapShader : _equirectShader;
			scene.add( new Mesh( _lodPlanes[ 0 ], material ) );
			var uniforms = material.uniforms;
	
			uniforms[ 'envMap' ].value = texture;
			if ( ! texture.isCubeTexture ) {
	
				uniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );
	
			}
			uniforms[ 'inputEncoding' ].value = ENCODINGS[ texture.encoding ];
			uniforms[ 'outputEncoding' ].value = ENCODINGS[ texture.encoding ];
	
			_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );
			_renderer.setRenderTarget( cubeUVRenderTarget );
			_renderer.render( scene, _flatCamera );
	
		}
	
		function _compileMaterial( material ) {
	
			var tmpScene = new Scene();
			tmpScene.add( new Mesh( _lodPlanes[ 0 ], material ) );
			_renderer.compile( tmpScene, _flatCamera );
	
		}
	
		function _createRenderTarget( params ) {
	
			var cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );
			cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
			cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
			cubeUVRenderTarget.scissorTest = true;
			return cubeUVRenderTarget;
	
		}
	
		function _setViewport( target, x, y, width, height ) {
	
			target.viewport.set( x, y, width, height );
			target.scissor.set( x, y, width, height );
	
		}
	
		function _applyPMREM( cubeUVRenderTarget ) {
	
			var autoClear = _renderer.autoClear;
			_renderer.autoClear = false;
	
			for ( var i = 1; i < TOTAL_LODS; i ++ ) {
	
				var sigma = Math.sqrt(
					_sigmas[ i ] * _sigmas[ i ] -
				_sigmas[ i - 1 ] * _sigmas[ i - 1 ] );
				var poleAxis =
				_axisDirections[ ( i - 1 ) % _axisDirections.length ];
				_blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );
	
			}
	
			_renderer.autoClear = autoClear;
	
		}
	
		/**
		 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
		 * vertically and horizontally, but this breaks down on a cube. Here we apply
		 * the blur latitudinally (around the poles), and then longitudinally (towards
		 * the poles) to approximate the orthogonally-separable blur. It is least
		 * accurate at the poles, but still does a decent job.
		 */
		function _blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {
	
			_halfBlur(
				cubeUVRenderTarget,
				_pingPongRenderTarget,
				lodIn,
				lodOut,
				sigma,
				'latitudinal',
				poleAxis );
	
			_halfBlur(
				_pingPongRenderTarget,
				cubeUVRenderTarget,
				lodOut,
				lodOut,
				sigma,
				'longitudinal',
				poleAxis );
	
		}
	
		function _halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {
	
			if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {
	
				console.error(
					'blur direction must be either latitudinal or longitudinal!' );
	
			}
	
			// Number of standard deviations at which to cut off the discrete approximation.
			var STANDARD_DEVIATIONS = 3;
	
			var blurScene = new Scene();
			blurScene.add( new Mesh( _lodPlanes[ lodOut ], _blurMaterial ) );
			var blurUniforms = _blurMaterial.uniforms;
	
			var pixels = _sizeLods[ lodIn ] - 1;
			var radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
			var sigmaPixels = sigmaRadians / radiansPerPixel;
			var samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;
	
			if ( samples > MAX_SAMPLES ) {
	
				console.warn( ("sigmaRadians, " + sigmaRadians + ", is too large and will clip, as it requested " + samples + " samples when the maximum is set to " + MAX_SAMPLES) );
	
			}
	
			var weights = [];
			var sum = 0;
	
			for ( var i = 0; i < MAX_SAMPLES; ++ i ) {
	
				var x = i / sigmaPixels;
				var weight = Math.exp( - x * x / 2 );
				weights.push( weight );
	
				if ( i == 0 ) {
	
					sum += weight;
	
				} else if ( i < samples ) {
	
					sum += 2 * weight;
	
				}
	
			}
	
			for ( var i = 0; i < weights.length; i ++ ) {
	
				weights[ i ] = weights[ i ] / sum;
	
			}
	
			blurUniforms[ 'envMap' ].value = targetIn.texture;
			blurUniforms[ 'samples' ].value = samples;
			blurUniforms[ 'weights' ].value = weights;
			blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';
			if ( poleAxis ) {
	
				blurUniforms[ 'poleAxis' ].value = poleAxis;
	
			}
			blurUniforms[ 'dTheta' ].value = radiansPerPixel;
			blurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;
			blurUniforms[ 'inputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];
			blurUniforms[ 'outputEncoding' ].value = ENCODINGS[ targetIn.texture.encoding ];
	
			var outputSize = _sizeLods[ lodOut ];
			var x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );
			var y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) +
			2 * outputSize *
				( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );
	
			_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
			_renderer.setRenderTarget( targetOut );
			_renderer.render( blurScene, _flatCamera );
	
		}
	
		function _getBlurShader( maxSamples ) {
	
			var weights = new Float32Array( maxSamples );
			var poleAxis = new Vector3( 0, 1, 0 );
			var shaderMaterial = new RawShaderMaterial( {
	
				defines: { 'n': maxSamples },
	
				uniforms: {
					'envMap': { value: null },
					'samples': { value: 1 },
					'weights': { value: weights },
					'latitudinal': { value: false },
					'dTheta': { value: 0 },
					'mipInt': { value: 0 },
					'poleAxis': { value: poleAxis },
					'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },
					'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }
				},
	
				vertexShader: _getCommonVertexShader(),
	
				fragmentShader: ("\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform int samples;\nuniform float weights[n];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;\n\n" + (_getEncodings()) + "\n\n#define ENVMAP_TYPE_CUBE_UV\n#include <cube_uv_reflection_fragment>\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tfor (int i = 0; i < n; i++) {\n\t\tif (i >= samples)\n\t\t\tbreak;\n\t\tfor (int dir = -1; dir < 2; dir += 2) {\n\t\t\tif (i == 0 && dir == 1)\n\t\t\t\tcontinue;\n\t\t\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\n\t\t\tif (all(equal(axis, vec3(0.0))))\n\t\t\t\taxis = cross(vec3(0.0, 1.0, 0.0), vOutputDirection);\n\t\t\taxis = normalize(axis);\n\t\t\tfloat theta = dTheta * float(dir * i);\n\t\t\tfloat cosTheta = cos(theta);\n\t\t\t// Rodrigues' axis-angle rotation\n\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross(axis, vOutputDirection) * sin(theta)\n\t\t\t\t\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\n\t\t\tgl_FragColor.rgb +=\n\t\t\t\t\tweights[i] * bilinearCubeUV(envMap, sampleDirection, mipInt);\n\t\t}\n\t}\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t"),
	
				blending: NoBlending,
				depthTest: false,
				depthWrite: false
	
			} );
	
			shaderMaterial.type = 'SphericalGaussianBlur';
	
			return shaderMaterial;
	
		}
	
		function _getEquirectShader() {
	
			var texelSize = new Vector2( 1, 1 );
			var shaderMaterial = new RawShaderMaterial( {
	
				uniforms: {
					'envMap': { value: null },
					'texelSize': { value: texelSize },
					'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },
					'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }
				},
	
				vertexShader: _getCommonVertexShader(),
	
				fragmentShader: ("\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform vec2 texelSize;\n\n" + (_getEncodings()) + "\n\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tvec3 outputDirection = normalize(vOutputDirection);\n\tvec2 uv;\n\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\n\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\n\tvec2 f = fract(uv / texelSize - 0.5);\n\tuv -= f * texelSize;\n\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x += texelSize.x;\n\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.y += texelSize.y;\n\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x -= texelSize.x;\n\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tvec3 tm = mix(tl, tr, f.x);\n\tvec3 bm = mix(bl, br, f.x);\n\tgl_FragColor.rgb = mix(tm, bm, f.y);\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t"),
	
				blending: NoBlending,
				depthTest: false,
				depthWrite: false
	
			} );
	
			shaderMaterial.type = 'EquirectangularToCubeUV';
	
			return shaderMaterial;
	
		}
	
		function _getCubemapShader() {
	
			var shaderMaterial = new RawShaderMaterial( {
	
				uniforms: {
					'envMap': { value: null },
					'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },
					'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }
				},
	
				vertexShader: _getCommonVertexShader(),
	
				fragmentShader: ("\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform samplerCube envMap;\n\n" + (_getEncodings()) + "\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t"),
	
				blending: NoBlending,
				depthTest: false,
				depthWrite: false
	
			} );
	
			shaderMaterial.type = 'CubemapToCubeUV';
	
			return shaderMaterial;
	
		}
	
		function _getCommonVertexShader() {
	
			return "\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\nvec3 getDirection(vec2 uv, float face) {\n\tuv = 2.0 * uv - 1.0;\n\tvec3 direction = vec3(uv, 1.0);\n\tif (face == 0.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 1.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 3.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.x *= -1.0;\n\t} else if (face == 4.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.y *= -1.0;\n\t} else if (face == 5.0) {\n\t\tdirection.xz *= -1.0;\n\t}\n\treturn direction;\n}\nvoid main() {\n\tvOutputDirection = getDirection(uv, faceIndex);\n\tgl_Position = vec4( position, 1.0 );\n}\n\t";
	
		}
	
		function _getEncodings() {
	
			return "\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n\tif(inputEncoding == 0){\n\t\treturn value;\n\t}else if(inputEncoding == 1){\n\t\treturn sRGBToLinear(value);\n\t}else if(inputEncoding == 2){\n\t\treturn RGBEToLinear(value);\n\t}else if(inputEncoding == 3){\n\t\treturn RGBMToLinear(value, 7.0);\n\t}else if(inputEncoding == 4){\n\t\treturn RGBMToLinear(value, 16.0);\n\t}else if(inputEncoding == 5){\n\t\treturn RGBDToLinear(value, 256.0);\n\t}else{\n\t\treturn GammaToLinear(value, 2.2);\n\t}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n\tif(outputEncoding == 0){\n\t\treturn value;\n\t}else if(outputEncoding == 1){\n\t\treturn LinearTosRGB(value);\n\t}else if(outputEncoding == 2){\n\t\treturn LinearToRGBE(value);\n\t}else if(outputEncoding == 3){\n\t\treturn LinearToRGBM(value, 7.0);\n\t}else if(outputEncoding == 4){\n\t\treturn LinearToRGBM(value, 16.0);\n\t}else if(outputEncoding == 5){\n\t\treturn LinearToRGBD(value, 256.0);\n\t}else{\n\t\treturn LinearToGamma(value, 2.2);\n\t}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n\treturn inputTexelToLinear(color);\n}\n\t";
	
		}
	
		/**
		 * @author mrdoob / http://mrdoob.com/
		 */
	
		function Face4( a, b, c, d, normal, color, materialIndex ) {
	
			console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
			return new Face3( a, b, c, normal, color, materialIndex );
	
		}
	
		var LineStrip = 0;
		var LinePieces = 1;
		var NoColors = 0;
		var FaceColors = 1;
		var VertexColors = 2;
	
		function MeshFaceMaterial( materials ) {
	
			console.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );
			return materials;
	
		}
	
		function MultiMaterial( materials ) {
	
			if ( materials === undefined ) { materials = []; }
	
			console.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );
			materials.isMultiMaterial = true;
			materials.materials = materials;
			materials.clone = function () {
	
				return materials.slice();
	
			};
			return materials;
	
		}
	
		function PointCloud( geometry, material ) {
	
			console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
			return new Points( geometry, material );
	
		}
	
		function Particle( material ) {
	
			console.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );
			return new Sprite( material );
	
		}
	
		function ParticleSystem( geometry, material ) {
	
			console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
			return new Points( geometry, material );
	
		}
	
		function PointCloudMaterial( parameters ) {
	
			console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );
	
		}
	
		function ParticleBasicMaterial( parameters ) {
	
			console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );
	
		}
	
		function ParticleSystemMaterial( parameters ) {
	
			console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
			return new PointsMaterial( parameters );
	
		}
	
		function Vertex( x, y, z ) {
	
			console.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );
			return new Vector3( x, y, z );
	
		}
	
		//
	
		function DynamicBufferAttribute( array, itemSize ) {
	
			console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );
			return new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );
	
		}
	
		function Int8Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );
			return new Int8BufferAttribute( array, itemSize );
	
		}
	
		function Uint8Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );
			return new Uint8BufferAttribute( array, itemSize );
	
		}
	
		function Uint8ClampedAttribute( array, itemSize ) {
	
			console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );
			return new Uint8ClampedBufferAttribute( array, itemSize );
	
		}
	
		function Int16Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );
			return new Int16BufferAttribute( array, itemSize );
	
		}
	
		function Uint16Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );
			return new Uint16BufferAttribute( array, itemSize );
	
		}
	
		function Int32Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );
			return new Int32BufferAttribute( array, itemSize );
	
		}
	
		function Uint32Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );
			return new Uint32BufferAttribute( array, itemSize );
	
		}
	
		function Float32Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );
			return new Float32BufferAttribute( array, itemSize );
	
		}
	
		function Float64Attribute( array, itemSize ) {
	
			console.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );
			return new Float64BufferAttribute( array, itemSize );
	
		}
	
		//
	
		Curve.create = function ( construct, getPoint ) {
	
			console.log( 'THREE.Curve.create() has been deprecated' );
	
			construct.prototype = Object.create( Curve.prototype );
			construct.prototype.constructor = construct;
			construct.prototype.getPoint = getPoint;
	
			return construct;
	
		};
	
		//
	
		Object.assign( CurvePath.prototype, {
	
			createPointsGeometry: function ( divisions ) {
	
				console.warn( 'THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
	
				// generate geometry from path points (for Line or Points objects)
	
				var pts = this.getPoints( divisions );
				return this.createGeometry( pts );
	
			},
	
			createSpacedPointsGeometry: function ( divisions ) {
	
				console.warn( 'THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
	
				// generate geometry from equidistant sampling along the path
	
				var pts = this.getSpacedPoints( divisions );
				return this.createGeometry( pts );
	
			},
	
			createGeometry: function ( points ) {
	
				console.warn( 'THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.' );
	
				var geometry = new Geometry();
	
				for ( var i = 0, l = points.length; i < l; i ++ ) {
	
					var point = points[ i ];
					geometry.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );
	
				}
	
				return geometry;
	
			}
	
		} );
	
		//
	
		Object.assign( Path.prototype, {
	
			fromPoints: function ( points ) {
	
				console.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );
				return this.setFromPoints( points );
	
			}
	
		} );
	
		//
	
		function ClosedSplineCurve3( points ) {
	
			console.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );
	
			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';
			this.closed = true;
	
		}
	
		ClosedSplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );
	
		//
	
		function SplineCurve3( points ) {
	
			console.warn( 'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.' );
	
			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';
	
		}
	
		SplineCurve3.prototype = Object.create( CatmullRomCurve3.prototype );
	
		//
	
		function Spline( points ) {
	
			console.warn( 'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.' );
	
			CatmullRomCurve3.call( this, points );
			this.type = 'catmullrom';
	
		}
	
		Spline.prototype = Object.create( CatmullRomCurve3.prototype );
	
		Object.assign( Spline.prototype, {
	
			initFromArray: function ( /* a */ ) {
	
				console.error( 'THREE.Spline: .initFromArray() has been removed.' );
	
			},
			getControlPointsArray: function ( /* optionalTarget */ ) {
	
				console.error( 'THREE.Spline: .getControlPointsArray() has been removed.' );
	
			},
			reparametrizeByArcLength: function ( /* samplingCoef */ ) {
	
				console.error( 'THREE.Spline: .reparametrizeByArcLength() has been removed.' );
	
			}
	
		} );
	
		//
	
		function AxisHelper( size ) {
	
			console.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );
			return new AxesHelper( size );
	
		}
	
		function BoundingBoxHelper( object, color ) {
	
			console.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );
			return new BoxHelper( object, color );
	
		}
	
		function EdgesHelper( object, hex ) {
	
			console.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );
			return new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	
		}
	
		GridHelper.prototype.setColors = function () {
	
			console.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );
	
		};
	
		SkeletonHelper.prototype.update = function () {
	
			console.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );
	
		};
	
		function WireframeHelper( object, hex ) {
	
			console.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );
			return new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );
	
		}
	
		//
	
		Object.assign( Loader.prototype, {
	
			extractUrlBase: function ( url ) {
	
				console.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );
				return LoaderUtils.extractUrlBase( url );
	
			}
	
		} );
	
		Loader.Handlers = {
	
			add: function ( /* regex, loader */ ) {
	
				console.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );
	
			},
	
			get: function ( /* file */ ) {
	
				console.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );
	
			}
	
		};
	
		function XHRLoader( manager ) {
	
			console.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );
			return new FileLoader( manager );
	
		}
	
		function BinaryTextureLoader( manager ) {
	
			console.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );
			return new DataTextureLoader( manager );
	
		}
	
		Object.assign( ObjectLoader.prototype, {
	
			setTexturePath: function ( value ) {
	
				console.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );
				return this.setResourcePath( value );
	
			}
	
		} );
	
		//
	
		Object.assign( Box2.prototype, {
	
			center: function ( optionalTarget ) {
	
				console.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );
				return this.getCenter( optionalTarget );
	
			},
			empty: function () {
	
				console.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
	
			},
			isIntersectionBox: function ( box ) {
	
				console.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
	
			},
			size: function ( optionalTarget ) {
	
				console.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );
				return this.getSize( optionalTarget );
	
			}
		} );
	
		Object.assign( Box3.prototype, {
	
			center: function ( optionalTarget ) {
	
				console.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );
				return this.getCenter( optionalTarget );
	
			},
			empty: function () {
	
				console.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );
				return this.isEmpty();
	
			},
			isIntersectionBox: function ( box ) {
	
				console.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
	
			},
			isIntersectionSphere: function ( sphere ) {
	
				console.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
	
			},
			size: function ( optionalTarget ) {
	
				console.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );
				return this.getSize( optionalTarget );
	
			}
		} );
	
		Frustum.prototype.setFromMatrix = function ( m ) {
	
			console.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );
			return this.setFromProjectionMatrix( m );
	
		};
	
		Line3.prototype.center = function ( optionalTarget ) {
	
			console.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );
			return this.getCenter( optionalTarget );
	
		};
	
		Object.assign( MathUtils, {
	
			random16: function () {
	
				console.warn( 'THREE.Math: .random16() has been deprecated. Use Math.random() instead.' );
				return Math.random();
	
			},
	
			nearestPowerOfTwo: function ( value ) {
	
				console.warn( 'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().' );
				return MathUtils.floorPowerOfTwo( value );
	
			},
	
			nextPowerOfTwo: function ( value ) {
	
				console.warn( 'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().' );
				return MathUtils.ceilPowerOfTwo( value );
	
			}
	
		} );
	
		Object.assign( Matrix3.prototype, {
	
			flattenToArrayOffset: function ( array, offset ) {
	
				console.warn( "THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
				return this.toArray( array, offset );
	
			},
			multiplyVector3: function ( vector ) {
	
				console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
				return vector.applyMatrix3( this );
	
			},
			multiplyVector3Array: function ( /* a */ ) {
	
				console.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );
	
			},
			applyToBufferAttribute: function ( attribute ) {
	
				console.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );
				return attribute.applyMatrix3( this );
	
			},
			applyToVector3Array: function ( /* array, offset, length */ ) {
	
				console.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );
	
			}
	
		} );
	
		Object.assign( Matrix4.prototype, {
	
			extractPosition: function ( m ) {
	
				console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
				return this.copyPosition( m );
	
			},
			flattenToArrayOffset: function ( array, offset ) {
	
				console.warn( "THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead." );
				return this.toArray( array, offset );
	
			},
			getPosition: function () {
	
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
				return new Vector3().setFromMatrixColumn( this, 3 );
	
			},
			setRotationFromQuaternion: function ( q ) {
	
				console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
				return this.makeRotationFromQuaternion( q );
	
			},
			multiplyToArray: function () {
	
				console.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );
	
			},
			multiplyVector3: function ( vector ) {
	
				console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
	
			},
			multiplyVector4: function ( vector ) {
	
				console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
	
			},
			multiplyVector3Array: function ( /* a */ ) {
	
				console.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );
	
			},
			rotateAxis: function ( v ) {
	
				console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
				v.transformDirection( this );
	
			},
			crossVector: function ( vector ) {
	
				console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
				return vector.applyMatrix4( this );
	
			},
			translate: function () {
	
				console.error( 'THREE.Matrix4: .translate() has been removed.' );
	
			},
			rotateX: function () {
	
				console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
	
			},
			rotateY: function () {
	
				console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
	
			},
			rotateZ: function () {
	
				console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
	
			},
			rotateByAxis: function () {
	
				console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
	
			},
			applyToBufferAttribute: function ( attribute ) {
	
				console.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );
				return attribute.applyMatrix4( this );
	
			},
			applyToVector3Array: function ( /* array, offset, length */ ) {
	
				console.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );
	
			},
			makeFrustum: function ( left, right, bottom, top, near, far ) {
	
				console.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );
				return this.makePerspective( left, right, top, bottom, near, far );
	
			}
	
		} );
	
		Plane.prototype.isIntersectionLine = function ( line ) {
	
			console.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );
			return this.intersectsLine( line );
	
		};
	
		Quaternion.prototype.multiplyVector3 = function ( vector ) {
	
			console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
			return vector.applyQuaternion( this );
	
		};
	
		Object.assign( Ray.prototype, {
	
			isIntersectionBox: function ( box ) {
	
				console.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );
				return this.intersectsBox( box );
	
			},
			isIntersectionPlane: function ( plane ) {
	
				console.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );
				return this.intersectsPlane( plane );
	
			},
			isIntersectionSphere: function ( sphere ) {
	
				console.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );
				return this.intersectsSphere( sphere );
	
			}
	
		} );
	
		Object.assign( Triangle.prototype, {
	
			area: function () {
	
				console.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );
				return this.getArea();
	
			},
			barycoordFromPoint: function ( point, target ) {
	
				console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
				return this.getBarycoord( point, target );
	
			},
			midpoint: function ( target ) {
	
				console.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );
				return this.getMidpoint( target );
	
			},
			normal: function ( target ) {
	
				console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
				return this.getNormal( target );
	
			},
			plane: function ( target ) {
	
				console.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );
				return this.getPlane( target );
	
			}
	
		} );
	
		Object.assign( Triangle, {
	
			barycoordFromPoint: function ( point, a, b, c, target ) {
	
				console.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );
				return Triangle.getBarycoord( point, a, b, c, target );
	
			},
			normal: function ( a, b, c, target ) {
	
				console.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );
				return Triangle.getNormal( a, b, c, target );
	
			}
	
		} );
	
		Object.assign( Shape.prototype, {
	
			extractAllPoints: function ( divisions ) {
	
				console.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );
				return this.extractPoints( divisions );
	
			},
			extrude: function ( options ) {
	
				console.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );
				return new ExtrudeGeometry( this, options );
	
			},
			makeGeometry: function ( options ) {
	
				console.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );
				return new ShapeGeometry( this, options );
	
			}
	
		} );
	
		Object.assign( Vector2.prototype, {
	
			fromAttribute: function ( attribute, index, offset ) {
	
				console.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );
				return this.fromBufferAttribute( attribute, index, offset );
	
			},
			distanceToManhattan: function ( v ) {
	
				console.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
				return this.manhattanDistanceTo( v );
	
			},
			lengthManhattan: function () {
	
				console.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );
				return this.manhattanLength();
	
			}
	
		} );
	
		Object.assign( Vector3.prototype, {
	
			setEulerFromRotationMatrix: function () {
	
				console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
	
			},
			setEulerFromQuaternion: function () {
	
				console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
	
			},
			getPositionFromMatrix: function ( m ) {
	
				console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
				return this.setFromMatrixPosition( m );
	
			},
			getScaleFromMatrix: function ( m ) {
	
				console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
				return this.setFromMatrixScale( m );
	
			},
			getColumnFromMatrix: function ( index, matrix ) {
	
				console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
				return this.setFromMatrixColumn( matrix, index );
	
			},
			applyProjection: function ( m ) {
	
				console.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );
				return this.applyMatrix4( m );
	
			},
			fromAttribute: function ( attribute, index, offset ) {
	
				console.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );
				return this.fromBufferAttribute( attribute, index, offset );
	
			},
			distanceToManhattan: function ( v ) {
	
				console.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );
				return this.manhattanDistanceTo( v );
	
			},
			lengthManhattan: function () {
	
				console.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );
				return this.manhattanLength();
	
			}
	
		} );
	
		Object.assign( Vector4.prototype, {
	
			fromAttribute: function ( attribute, index, offset ) {
	
				console.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );
				return this.fromBufferAttribute( attribute, index, offset );
	
			},
			lengthManhattan: function () {
	
				console.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );
				return this.manhattanLength();
	
			}
	
		} );
	
		//
	
		Object.assign( Geometry.prototype, {
	
			computeTangents: function () {
	
				console.error( 'THREE.Geometry: .computeTangents() has been removed.' );
	
			},
			computeLineDistances: function () {
	
				console.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );
	
			},
			applyMatrix: function ( matrix ) {
	
				console.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );
				return this.applyMatrix4( matrix );
	
			}
	
		} );
	
		Object.assign( Object3D.prototype, {
	
			getChildByName: function ( name ) {
	
				console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
				return this.getObjectByName( name );
	
			},
			renderDepth: function () {
	
				console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
	
			},
			translate: function ( distance, axis ) {
	
				console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
				return this.translateOnAxis( axis, distance );
	
			},
			getWorldRotation: function () {
	
				console.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );
	
			},
			applyMatrix: function ( matrix ) {
	
				console.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );
				return this.applyMatrix4( matrix );
	
			}
	
		} );
	
		Object.defineProperties( Object3D.prototype, {
	
			eulerOrder: {
				get: function () {
	
					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					return this.rotation.order;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
					this.rotation.order = value;
	
				}
			},
			useQuaternion: {
				get: function () {
	
					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
	
				},
				set: function () {
	
					console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
	
				}
			}
	
		} );
	
		Object.assign( Mesh.prototype, {
	
			setDrawMode: function () {
	
				console.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );
	
			},
	
		} );
	
		Object.defineProperties( Mesh.prototype, {
	
			drawMode: {
				get: function () {
	
					console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );
					return TrianglesDrawMode;
	
				},
				set: function () {
	
					console.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );
	
				}
			}
	
		} );
	
		Object.defineProperties( LOD.prototype, {
	
			objects: {
				get: function () {
	
					console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
					return this.levels;
	
				}
			}
	
		} );
	
		Object.defineProperty( Skeleton.prototype, 'useVertexTexture', {
	
			get: function () {
	
				console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
	
			},
			set: function () {
	
				console.warn( 'THREE.Skeleton: useVertexTexture has been removed.' );
	
			}
	
		} );
	
		SkinnedMesh.prototype.initBones = function () {
	
			console.error( 'THREE.SkinnedMesh: initBones() has been removed.' );
	
		};
	
		Object.defineProperty( Curve.prototype, '__arcLengthDivisions', {
	
			get: function () {
	
				console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
				return this.arcLengthDivisions;
	
			},
			set: function ( value ) {
	
				console.warn( 'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.' );
				this.arcLengthDivisions = value;
	
			}
	
		} );
	
		//
	
		PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {
	
			console.warn( "THREE.PerspectiveCamera.setLens is deprecated. " +
					"Use .setFocalLength and .filmGauge for a photographic setup." );
	
			if ( filmGauge !== undefined ) { this.filmGauge = filmGauge; }
			this.setFocalLength( focalLength );
	
		};
	
		//
	
		Object.defineProperties( Light.prototype, {
			onlyShadow: {
				set: function () {
	
					console.warn( 'THREE.Light: .onlyShadow has been removed.' );
	
				}
			},
			shadowCameraFov: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );
					this.shadow.camera.fov = value;
	
				}
			},
			shadowCameraLeft: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );
					this.shadow.camera.left = value;
	
				}
			},
			shadowCameraRight: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );
					this.shadow.camera.right = value;
	
				}
			},
			shadowCameraTop: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );
					this.shadow.camera.top = value;
	
				}
			},
			shadowCameraBottom: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );
					this.shadow.camera.bottom = value;
	
				}
			},
			shadowCameraNear: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );
					this.shadow.camera.near = value;
	
				}
			},
			shadowCameraFar: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );
					this.shadow.camera.far = value;
	
				}
			},
			shadowCameraVisible: {
				set: function () {
	
					console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );
	
				}
			},
			shadowBias: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );
					this.shadow.bias = value;
	
				}
			},
			shadowDarkness: {
				set: function () {
	
					console.warn( 'THREE.Light: .shadowDarkness has been removed.' );
	
				}
			},
			shadowMapWidth: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );
					this.shadow.mapSize.width = value;
	
				}
			},
			shadowMapHeight: {
				set: function ( value ) {
	
					console.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );
					this.shadow.mapSize.height = value;
	
				}
			}
		} );
	
		//
	
		Object.defineProperties( BufferAttribute.prototype, {
	
			length: {
				get: function () {
	
					console.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );
					return this.array.length;
	
				}
			},
			dynamic: {
				get: function () {
	
					console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
					return this.usage === DynamicDrawUsage;
	
				},
				set: function ( /* value */ ) {
	
					console.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );
					this.setUsage( DynamicDrawUsage );
	
				}
			}
	
		} );
	
		Object.assign( BufferAttribute.prototype, {
			setDynamic: function ( value ) {
	
				console.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );
				this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
				return this;
	
			},
			copyIndicesArray: function ( /* indices */ ) {
	
				console.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );
	
			},
			setArray: function ( /* array */ ) {
	
				console.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );
	
			}
		} );
	
		Object.assign( BufferGeometry.prototype, {
	
			addIndex: function ( index ) {
	
				console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
				this.setIndex( index );
	
			},
			addAttribute: function ( name, attribute ) {
	
				console.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );
	
				if ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {
	
					console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );
	
					return this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );
	
				}
	
				if ( name === 'index' ) {
	
					console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
					this.setIndex( attribute );
	
					return this;
	
				}
	
				return this.setAttribute( name, attribute );
	
			},
			addDrawCall: function ( start, count, indexOffset ) {
	
				if ( indexOffset !== undefined ) {
	
					console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
	
				}
				console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
				this.addGroup( start, count );
	
			},
			clearDrawCalls: function () {
	
				console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
				this.clearGroups();
	
			},
			computeTangents: function () {
	
				console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
	
			},
			computeOffsets: function () {
	
				console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );
	
			},
			removeAttribute: function ( name ) {
	
				console.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );
	
				return this.deleteAttribute( name );
	
			},
			applyMatrix: function ( matrix ) {
	
				console.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );
				return this.applyMatrix4( matrix );
	
			}
	
		} );
	
		Object.defineProperties( BufferGeometry.prototype, {
	
			drawcalls: {
				get: function () {
	
					console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
					return this.groups;
	
				}
			},
			offsets: {
				get: function () {
	
					console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
					return this.groups;
	
				}
			}
	
		} );
	
		Object.defineProperties( Raycaster.prototype, {
	
			linePrecision: {
				get: function () {
	
					console.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );
					return this.params.Line.threshold;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.' );
					this.params.Line.threshold = value;
	
				}
			}
	
		} );
	
		Object.defineProperties( InterleavedBuffer.prototype, {
	
			dynamic: {
				get: function () {
	
					console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
					return this.usage === DynamicDrawUsage;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.' );
					this.setUsage( value );
	
				}
			}
	
		} );
	
		Object.assign( InterleavedBuffer.prototype, {
			setDynamic: function ( value ) {
	
				console.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );
				this.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );
				return this;
	
			},
			setArray: function ( /* array */ ) {
	
				console.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );
	
			}
		} );
	
		//
	
		Object.assign( ExtrudeBufferGeometry.prototype, {
	
			getArrays: function () {
	
				console.error( 'THREE.ExtrudeBufferGeometry: .getArrays() has been removed.' );
	
			},
	
			addShapeList: function () {
	
				console.error( 'THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.' );
	
			},
	
			addShape: function () {
	
				console.error( 'THREE.ExtrudeBufferGeometry: .addShape() has been removed.' );
	
			}
	
		} );
	
		//
	
		Object.defineProperties( Uniform.prototype, {
	
			dynamic: {
				set: function () {
	
					console.warn( 'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.' );
	
				}
			},
			onUpdate: {
				value: function () {
	
					console.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );
					return this;
	
				}
			}
	
		} );
	
		//
	
		Object.defineProperties( Material.prototype, {
	
			wrapAround: {
				get: function () {
	
					console.warn( 'THREE.Material: .wrapAround has been removed.' );
	
				},
				set: function () {
	
					console.warn( 'THREE.Material: .wrapAround has been removed.' );
	
				}
			},
	
			overdraw: {
				get: function () {
	
					console.warn( 'THREE.Material: .overdraw has been removed.' );
	
				},
				set: function () {
	
					console.warn( 'THREE.Material: .overdraw has been removed.' );
	
				}
			},
	
			wrapRGB: {
				get: function () {
	
					console.warn( 'THREE.Material: .wrapRGB has been removed.' );
					return new Color();
	
				}
			},
	
			shading: {
				get: function () {
	
					console.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );
					this.flatShading = ( value === FlatShading );
	
				}
			},
	
			stencilMask: {
				get: function () {
	
					console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
					return this.stencilFuncMask;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );
					this.stencilFuncMask = value;
	
				}
			}
	
		} );
	
		Object.defineProperties( MeshPhongMaterial.prototype, {
	
			metal: {
				get: function () {
	
					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );
					return false;
	
				},
				set: function () {
	
					console.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );
	
				}
			}
	
		} );
	
		Object.defineProperties( ShaderMaterial.prototype, {
	
			derivatives: {
				get: function () {
	
					console.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					return this.extensions.derivatives;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );
					this.extensions.derivatives = value;
	
				}
			}
	
		} );
	
		//
	
		Object.assign( WebGLRenderer.prototype, {
	
			clearTarget: function ( renderTarget, color, depth, stencil ) {
	
				console.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );
				this.setRenderTarget( renderTarget );
				this.clear( color, depth, stencil );
	
			},
			animate: function ( callback ) {
	
				console.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );
				this.setAnimationLoop( callback );
	
			},
			getCurrentRenderTarget: function () {
	
				console.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );
				return this.getRenderTarget();
	
			},
			getMaxAnisotropy: function () {
	
				console.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );
				return this.capabilities.getMaxAnisotropy();
	
			},
			getPrecision: function () {
	
				console.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );
				return this.capabilities.precision;
	
			},
			resetGLState: function () {
	
				console.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );
				return this.state.reset();
	
			},
			supportsFloatTextures: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
				return this.extensions.get( 'OES_texture_float' );
	
			},
			supportsHalfFloatTextures: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
				return this.extensions.get( 'OES_texture_half_float' );
	
			},
			supportsStandardDerivatives: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
				return this.extensions.get( 'OES_standard_derivatives' );
	
			},
			supportsCompressedTextureS3TC: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_s3tc' );
	
			},
			supportsCompressedTexturePVRTC: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
				return this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );
	
			},
			supportsBlendMinMax: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
				return this.extensions.get( 'EXT_blend_minmax' );
	
			},
			supportsVertexTextures: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );
				return this.capabilities.vertexTextures;
	
			},
			supportsInstancedArrays: function () {
	
				console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
				return this.extensions.get( 'ANGLE_instanced_arrays' );
	
			},
			enableScissorTest: function ( boolean ) {
	
				console.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );
				this.setScissorTest( boolean );
	
			},
			initMaterial: function () {
	
				console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
	
			},
			addPrePlugin: function () {
	
				console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
	
			},
			addPostPlugin: function () {
	
				console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
	
			},
			updateShadowMap: function () {
	
				console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
	
			},
			setFaceCulling: function () {
	
				console.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );
	
			},
			allocTextureUnit: function () {
	
				console.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );
	
			},
			setTexture: function () {
	
				console.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );
	
			},
			setTexture2D: function () {
	
				console.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );
	
			},
			setTextureCube: function () {
	
				console.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );
	
			},
			getActiveMipMapLevel: function () {
	
				console.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );
				return this.getActiveMipmapLevel();
	
			}
	
		} );
	
		Object.defineProperties( WebGLRenderer.prototype, {
	
			shadowMapEnabled: {
				get: function () {
	
					return this.shadowMap.enabled;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
					this.shadowMap.enabled = value;
	
				}
			},
			shadowMapType: {
				get: function () {
	
					return this.shadowMap.type;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
					this.shadowMap.type = value;
	
				}
			},
			shadowMapCullFace: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
					return undefined;
	
				},
				set: function ( /* value */ ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );
	
				}
			},
			context: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );
					return this.getContext();
	
				}
			},
			vr: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );
					return this.xr;
	
				}
			},
			gammaInput: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );
					return false;
	
				},
				set: function () {
	
					console.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );
	
				}
			},
			gammaOutput: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
					return false;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );
					this.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;
	
				}
			}
	
		} );
	
		Object.defineProperties( WebGLShadowMap.prototype, {
	
			cullFace: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
					return undefined;
	
				},
				set: function ( /* cullFace */ ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );
	
				}
			},
			renderReverseSided: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
					return undefined;
	
				},
				set: function () {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );
	
				}
			},
			renderSingleSided: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
					return undefined;
	
				},
				set: function () {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );
	
				}
			}
	
		} );
	
		function WebGLRenderTargetCube( width, height, options ) {
	
			console.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );
			return new WebGLCubeRenderTarget( width, options );
	
		}
	
		//
	
		Object.defineProperties( WebGLRenderTarget.prototype, {
	
			wrapS: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					return this.texture.wrapS;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
					this.texture.wrapS = value;
	
				}
			},
			wrapT: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					return this.texture.wrapT;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
					this.texture.wrapT = value;
	
				}
			},
			magFilter: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					return this.texture.magFilter;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
					this.texture.magFilter = value;
	
				}
			},
			minFilter: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					return this.texture.minFilter;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
					this.texture.minFilter = value;
	
				}
			},
			anisotropy: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					return this.texture.anisotropy;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
					this.texture.anisotropy = value;
	
				}
			},
			offset: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					return this.texture.offset;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
					this.texture.offset = value;
	
				}
			},
			repeat: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					return this.texture.repeat;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
					this.texture.repeat = value;
	
				}
			},
			format: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					return this.texture.format;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
					this.texture.format = value;
	
				}
			},
			type: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					return this.texture.type;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
					this.texture.type = value;
	
				}
			},
			generateMipmaps: {
				get: function () {
	
					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					return this.texture.generateMipmaps;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
					this.texture.generateMipmaps = value;
	
				}
			}
	
		} );
	
		//
	
		Object.defineProperties( Audio.prototype, {
	
			load: {
				value: function ( file ) {
	
					console.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );
					var scope = this;
					var audioLoader = new AudioLoader();
					audioLoader.load( file, function ( buffer ) {
	
						scope.setBuffer( buffer );
	
					} );
					return this;
	
				}
			},
			startTime: {
				set: function () {
	
					console.warn( 'THREE.Audio: .startTime is now .play( delay ).' );
	
				}
			}
	
		} );
	
		AudioAnalyser.prototype.getData = function () {
	
			console.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );
			return this.getFrequencyData();
	
		};
	
		//
	
		CubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {
	
			console.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );
			return this.update( renderer, scene );
	
		};
	
		//
	
		var GeometryUtils = {
	
			merge: function ( geometry1, geometry2, materialIndexOffset ) {
	
				console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
				var matrix;
	
				if ( geometry2.isMesh ) {
	
					geometry2.matrixAutoUpdate && geometry2.updateMatrix();
	
					matrix = geometry2.matrix;
					geometry2 = geometry2.geometry;
	
				}
	
				geometry1.merge( geometry2, matrix, materialIndexOffset );
	
			},
	
			center: function ( geometry ) {
	
				console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
				return geometry.center();
	
			}
	
		};
	
		ImageUtils.crossOrigin = undefined;
	
		ImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {
	
			console.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );
	
			var loader = new TextureLoader();
			loader.setCrossOrigin( this.crossOrigin );
	
			var texture = loader.load( url, onLoad, undefined, onError );
	
			if ( mapping ) { texture.mapping = mapping; }
	
			return texture;
	
		};
	
		ImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {
	
			console.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );
	
			var loader = new CubeTextureLoader();
			loader.setCrossOrigin( this.crossOrigin );
	
			var texture = loader.load( urls, onLoad, undefined, onError );
	
			if ( mapping ) { texture.mapping = mapping; }
	
			return texture;
	
		};
	
		ImageUtils.loadCompressedTexture = function () {
	
			console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );
	
		};
	
		ImageUtils.loadCompressedTextureCube = function () {
	
			console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );
	
		};
	
		//
	
		function CanvasRenderer() {
	
			console.error( 'THREE.CanvasRenderer has been removed' );
	
		}
	
		//
	
		function JSONLoader() {
	
			console.error( 'THREE.JSONLoader has been removed.' );
	
		}
	
		//
	
		var SceneUtils = {
	
			createMultiMaterialObject: function ( /* geometry, materials */ ) {
	
				console.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );
	
			},
	
			detach: function ( /* child, parent, scene */ ) {
	
				console.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );
	
			},
	
			attach: function ( /* child, scene, parent */ ) {
	
				console.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );
	
			}
	
		};
	
		//
	
		function LensFlare() {
	
			console.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );
	
		}
	
		if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {
	
			/* eslint-disable no-undef */
			__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
				revision: REVISION,
			} } ) );
			/* eslint-enable no-undef */
	
		}
	
		exports.ACESFilmicToneMapping = ACESFilmicToneMapping;
		exports.AddEquation = AddEquation;
		exports.AddOperation = AddOperation;
		exports.AdditiveBlending = AdditiveBlending;
		exports.AlphaFormat = AlphaFormat;
		exports.AlwaysDepth = AlwaysDepth;
		exports.AlwaysStencilFunc = AlwaysStencilFunc;
		exports.AmbientLight = AmbientLight;
		exports.AmbientLightProbe = AmbientLightProbe;
		exports.AnimationClip = AnimationClip;
		exports.AnimationLoader = AnimationLoader;
		exports.AnimationMixer = AnimationMixer;
		exports.AnimationObjectGroup = AnimationObjectGroup;
		exports.AnimationUtils = AnimationUtils;
		exports.ArcCurve = ArcCurve;
		exports.ArrayCamera = ArrayCamera;
		exports.ArrowHelper = ArrowHelper;
		exports.Audio = Audio;
		exports.AudioAnalyser = AudioAnalyser;
		exports.AudioContext = AudioContext;
		exports.AudioListener = AudioListener;
		exports.AudioLoader = AudioLoader;
		exports.AxesHelper = AxesHelper;
		exports.AxisHelper = AxisHelper;
		exports.BackSide = BackSide;
		exports.BasicDepthPacking = BasicDepthPacking;
		exports.BasicShadowMap = BasicShadowMap;
		exports.BinaryTextureLoader = BinaryTextureLoader;
		exports.Bone = Bone;
		exports.BooleanKeyframeTrack = BooleanKeyframeTrack;
		exports.BoundingBoxHelper = BoundingBoxHelper;
		exports.Box2 = Box2;
		exports.Box3 = Box3;
		exports.Box3Helper = Box3Helper;
		exports.BoxBufferGeometry = BoxBufferGeometry;
		exports.BoxGeometry = BoxGeometry;
		exports.BoxHelper = BoxHelper;
		exports.BufferAttribute = BufferAttribute;
		exports.BufferGeometry = BufferGeometry;
		exports.BufferGeometryLoader = BufferGeometryLoader;
		exports.ByteType = ByteType;
		exports.Cache = Cache;
		exports.Camera = Camera;
		exports.CameraHelper = CameraHelper;
		exports.CanvasRenderer = CanvasRenderer;
		exports.CanvasTexture = CanvasTexture;
		exports.CatmullRomCurve3 = CatmullRomCurve3;
		exports.CineonToneMapping = CineonToneMapping;
		exports.CircleBufferGeometry = CircleBufferGeometry;
		exports.CircleGeometry = CircleGeometry;
		exports.ClampToEdgeWrapping = ClampToEdgeWrapping;
		exports.Clock = Clock;
		exports.ClosedSplineCurve3 = ClosedSplineCurve3;
		exports.Color = Color;
		exports.ColorKeyframeTrack = ColorKeyframeTrack;
		exports.CompressedTexture = CompressedTexture;
		exports.CompressedTextureLoader = CompressedTextureLoader;
		exports.ConeBufferGeometry = ConeBufferGeometry;
		exports.ConeGeometry = ConeGeometry;
		exports.CubeCamera = CubeCamera;
		exports.CubeGeometry = BoxGeometry;
		exports.CubeReflectionMapping = CubeReflectionMapping;
		exports.CubeRefractionMapping = CubeRefractionMapping;
		exports.CubeTexture = CubeTexture;
		exports.CubeTextureLoader = CubeTextureLoader;
		exports.CubeUVReflectionMapping = CubeUVReflectionMapping;
		exports.CubeUVRefractionMapping = CubeUVRefractionMapping;
		exports.CubicBezierCurve = CubicBezierCurve;
		exports.CubicBezierCurve3 = CubicBezierCurve3;
		exports.CubicInterpolant = CubicInterpolant;
		exports.CullFaceBack = CullFaceBack;
		exports.CullFaceFront = CullFaceFront;
		exports.CullFaceFrontBack = CullFaceFrontBack;
		exports.CullFaceNone = CullFaceNone;
		exports.Curve = Curve;
		exports.CurvePath = CurvePath;
		exports.CustomBlending = CustomBlending;
		exports.CylinderBufferGeometry = CylinderBufferGeometry;
		exports.CylinderGeometry = CylinderGeometry;
		exports.Cylindrical = Cylindrical;
		exports.DataTexture = DataTexture;
		exports.DataTexture2DArray = DataTexture2DArray;
		exports.DataTexture3D = DataTexture3D;
		exports.DataTextureLoader = DataTextureLoader;
		exports.DecrementStencilOp = DecrementStencilOp;
		exports.DecrementWrapStencilOp = DecrementWrapStencilOp;
		exports.DefaultLoadingManager = DefaultLoadingManager;
		exports.DepthFormat = DepthFormat;
		exports.DepthStencilFormat = DepthStencilFormat;
		exports.DepthTexture = DepthTexture;
		exports.DirectionalLight = DirectionalLight;
		exports.DirectionalLightHelper = DirectionalLightHelper;
		exports.DirectionalLightShadow = DirectionalLightShadow;
		exports.DiscreteInterpolant = DiscreteInterpolant;
		exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;
		exports.DodecahedronGeometry = DodecahedronGeometry;
		exports.DoubleSide = DoubleSide;
		exports.DstAlphaFactor = DstAlphaFactor;
		exports.DstColorFactor = DstColorFactor;
		exports.DynamicBufferAttribute = DynamicBufferAttribute;
		exports.DynamicCopyUsage = DynamicCopyUsage;
		exports.DynamicDrawUsage = DynamicDrawUsage;
		exports.DynamicReadUsage = DynamicReadUsage;
		exports.EdgesGeometry = EdgesGeometry;
		exports.EdgesHelper = EdgesHelper;
		exports.EllipseCurve = EllipseCurve;
		exports.EqualDepth = EqualDepth;
		exports.EqualStencilFunc = EqualStencilFunc;
		exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;
		exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;
		exports.Euler = Euler;
		exports.EventDispatcher = EventDispatcher;
		exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;
		exports.ExtrudeGeometry = ExtrudeGeometry;
		exports.Face3 = Face3;
		exports.Face4 = Face4;
		exports.FaceColors = FaceColors;
		exports.FileLoader = FileLoader;
		exports.FlatShading = FlatShading;
		exports.Float32Attribute = Float32Attribute;
		exports.Float32BufferAttribute = Float32BufferAttribute;
		exports.Float64Attribute = Float64Attribute;
		exports.Float64BufferAttribute = Float64BufferAttribute;
		exports.FloatType = FloatType;
		exports.Fog = Fog;
		exports.FogExp2 = FogExp2;
		exports.Font = Font;
		exports.FontLoader = FontLoader;
		exports.FrontFaceDirectionCCW = FrontFaceDirectionCCW;
		exports.FrontFaceDirectionCW = FrontFaceDirectionCW;
		exports.FrontSide = FrontSide;
		exports.Frustum = Frustum;
		exports.GammaEncoding = GammaEncoding;
		exports.Geometry = Geometry;
		exports.GeometryUtils = GeometryUtils;
		exports.GreaterDepth = GreaterDepth;
		exports.GreaterEqualDepth = GreaterEqualDepth;
		exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;
		exports.GreaterStencilFunc = GreaterStencilFunc;
		exports.GridHelper = GridHelper;
		exports.Group = Group;
		exports.HalfFloatType = HalfFloatType;
		exports.HemisphereLight = HemisphereLight;
		exports.HemisphereLightHelper = HemisphereLightHelper;
		exports.HemisphereLightProbe = HemisphereLightProbe;
		exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;
		exports.IcosahedronGeometry = IcosahedronGeometry;
		exports.ImageBitmapLoader = ImageBitmapLoader;
		exports.ImageLoader = ImageLoader;
		exports.ImageUtils = ImageUtils;
		exports.ImmediateRenderObject = ImmediateRenderObject;
		exports.IncrementStencilOp = IncrementStencilOp;
		exports.IncrementWrapStencilOp = IncrementWrapStencilOp;
		exports.InstancedBufferAttribute = InstancedBufferAttribute;
		exports.InstancedBufferGeometry = InstancedBufferGeometry;
		exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;
		exports.InstancedMesh = InstancedMesh;
		exports.Int16Attribute = Int16Attribute;
		exports.Int16BufferAttribute = Int16BufferAttribute;
		exports.Int32Attribute = Int32Attribute;
		exports.Int32BufferAttribute = Int32BufferAttribute;
		exports.Int8Attribute = Int8Attribute;
		exports.Int8BufferAttribute = Int8BufferAttribute;
		exports.IntType = IntType;
		exports.InterleavedBuffer = InterleavedBuffer;
		exports.InterleavedBufferAttribute = InterleavedBufferAttribute;
		exports.Interpolant = Interpolant;
		exports.InterpolateDiscrete = InterpolateDiscrete;
		exports.InterpolateLinear = InterpolateLinear;
		exports.InterpolateSmooth = InterpolateSmooth;
		exports.InvertStencilOp = InvertStencilOp;
		exports.JSONLoader = JSONLoader;
		exports.KeepStencilOp = KeepStencilOp;
		exports.KeyframeTrack = KeyframeTrack;
		exports.LOD = LOD;
		exports.LatheBufferGeometry = LatheBufferGeometry;
		exports.LatheGeometry = LatheGeometry;
		exports.Layers = Layers;
		exports.LensFlare = LensFlare;
		exports.LessDepth = LessDepth;
		exports.LessEqualDepth = LessEqualDepth;
		exports.LessEqualStencilFunc = LessEqualStencilFunc;
		exports.LessStencilFunc = LessStencilFunc;
		exports.Light = Light;
		exports.LightProbe = LightProbe;
		exports.LightShadow = LightShadow;
		exports.Line = Line;
		exports.Line3 = Line3;
		exports.LineBasicMaterial = LineBasicMaterial;
		exports.LineCurve = LineCurve;
		exports.LineCurve3 = LineCurve3;
		exports.LineDashedMaterial = LineDashedMaterial;
		exports.LineLoop = LineLoop;
		exports.LinePieces = LinePieces;
		exports.LineSegments = LineSegments;
		exports.LineStrip = LineStrip;
		exports.LinearEncoding = LinearEncoding;
		exports.LinearFilter = LinearFilter;
		exports.LinearInterpolant = LinearInterpolant;
		exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;
		exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;
		exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;
		exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;
		exports.LinearToneMapping = LinearToneMapping;
		exports.Loader = Loader;
		exports.LoaderUtils = LoaderUtils;
		exports.LoadingManager = LoadingManager;
		exports.LogLuvEncoding = LogLuvEncoding;
		exports.LoopOnce = LoopOnce;
		exports.LoopPingPong = LoopPingPong;
		exports.LoopRepeat = LoopRepeat;
		exports.LuminanceAlphaFormat = LuminanceAlphaFormat;
		exports.LuminanceFormat = LuminanceFormat;
		exports.MOUSE = MOUSE;
		exports.Material = Material;
		exports.MaterialLoader = MaterialLoader;
		exports.Math = MathUtils;
		exports.MathUtils = MathUtils;
		exports.Matrix3 = Matrix3;
		exports.Matrix4 = Matrix4;
		exports.MaxEquation = MaxEquation;
		exports.Mesh = Mesh;
		exports.MeshBasicMaterial = MeshBasicMaterial;
		exports.MeshDepthMaterial = MeshDepthMaterial;
		exports.MeshDistanceMaterial = MeshDistanceMaterial;
		exports.MeshFaceMaterial = MeshFaceMaterial;
		exports.MeshLambertMaterial = MeshLambertMaterial;
		exports.MeshMatcapMaterial = MeshMatcapMaterial;
		exports.MeshNormalMaterial = MeshNormalMaterial;
		exports.MeshPhongMaterial = MeshPhongMaterial;
		exports.MeshPhysicalMaterial = MeshPhysicalMaterial;
		exports.MeshStandardMaterial = MeshStandardMaterial;
		exports.MeshToonMaterial = MeshToonMaterial;
		exports.MinEquation = MinEquation;
		exports.MirroredRepeatWrapping = MirroredRepeatWrapping;
		exports.MixOperation = MixOperation;
		exports.MultiMaterial = MultiMaterial;
		exports.MultiplyBlending = MultiplyBlending;
		exports.MultiplyOperation = MultiplyOperation;
		exports.NearestFilter = NearestFilter;
		exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;
		exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;
		exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;
		exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;
		exports.NeverDepth = NeverDepth;
		exports.NeverStencilFunc = NeverStencilFunc;
		exports.NoBlending = NoBlending;
		exports.NoColors = NoColors;
		exports.NoToneMapping = NoToneMapping;
		exports.NormalBlending = NormalBlending;
		exports.NotEqualDepth = NotEqualDepth;
		exports.NotEqualStencilFunc = NotEqualStencilFunc;
		exports.NumberKeyframeTrack = NumberKeyframeTrack;
		exports.Object3D = Object3D;
		exports.ObjectLoader = ObjectLoader;
		exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;
		exports.OctahedronBufferGeometry = OctahedronBufferGeometry;
		exports.OctahedronGeometry = OctahedronGeometry;
		exports.OneFactor = OneFactor;
		exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;
		exports.OneMinusDstColorFactor = OneMinusDstColorFactor;
		exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;
		exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;
		exports.OrthographicCamera = OrthographicCamera;
		exports.PCFShadowMap = PCFShadowMap;
		exports.PCFSoftShadowMap = PCFSoftShadowMap;
		exports.PMREMGenerator = PMREMGenerator;
		exports.ParametricBufferGeometry = ParametricBufferGeometry;
		exports.ParametricGeometry = ParametricGeometry;
		exports.Particle = Particle;
		exports.ParticleBasicMaterial = ParticleBasicMaterial;
		exports.ParticleSystem = ParticleSystem;
		exports.ParticleSystemMaterial = ParticleSystemMaterial;
		exports.Path = Path;
		exports.PerspectiveCamera = PerspectiveCamera;
		exports.Plane = Plane;
		exports.PlaneBufferGeometry = PlaneBufferGeometry;
		exports.PlaneGeometry = PlaneGeometry;
		exports.PlaneHelper = PlaneHelper;
		exports.PointCloud = PointCloud;
		exports.PointCloudMaterial = PointCloudMaterial;
		exports.PointLight = PointLight;
		exports.PointLightHelper = PointLightHelper;
		exports.Points = Points;
		exports.PointsMaterial = PointsMaterial;
		exports.PolarGridHelper = PolarGridHelper;
		exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;
		exports.PolyhedronGeometry = PolyhedronGeometry;
		exports.PositionalAudio = PositionalAudio;
		exports.PropertyBinding = PropertyBinding;
		exports.PropertyMixer = PropertyMixer;
		exports.QuadraticBezierCurve = QuadraticBezierCurve;
		exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;
		exports.Quaternion = Quaternion;
		exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;
		exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;
		exports.REVISION = REVISION;
		exports.RGBADepthPacking = RGBADepthPacking;
		exports.RGBAFormat = RGBAFormat;
		exports.RGBAIntegerFormat = RGBAIntegerFormat;
		exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;
		exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;
		exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;
		exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;
		exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;
		exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;
		exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;
		exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;
		exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;
		exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;
		exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;
		exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;
		exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;
		exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;
		exports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;
		exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;
		exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;
		exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;
		exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;
		exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;
		exports.RGBDEncoding = RGBDEncoding;
		exports.RGBEEncoding = RGBEEncoding;
		exports.RGBEFormat = RGBEFormat;
		exports.RGBFormat = RGBFormat;
		exports.RGBIntegerFormat = RGBIntegerFormat;
		exports.RGBM16Encoding = RGBM16Encoding;
		exports.RGBM7Encoding = RGBM7Encoding;
		exports.RGB_ETC1_Format = RGB_ETC1_Format;
		exports.RGB_ETC2_Format = RGB_ETC2_Format;
		exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;
		exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;
		exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;
		exports.RGFormat = RGFormat;
		exports.RGIntegerFormat = RGIntegerFormat;
		exports.RawShaderMaterial = RawShaderMaterial;
		exports.Ray = Ray;
		exports.Raycaster = Raycaster;
		exports.RectAreaLight = RectAreaLight;
		exports.RedFormat = RedFormat;
		exports.RedIntegerFormat = RedIntegerFormat;
		exports.ReinhardToneMapping = ReinhardToneMapping;
		exports.RepeatWrapping = RepeatWrapping;
		exports.ReplaceStencilOp = ReplaceStencilOp;
		exports.ReverseSubtractEquation = ReverseSubtractEquation;
		exports.RingBufferGeometry = RingBufferGeometry;
		exports.RingGeometry = RingGeometry;
		exports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;
		exports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;
		exports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;
		exports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;
		exports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;
		exports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;
		exports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;
		exports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;
		exports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;
		exports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;
		exports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;
		exports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;
		exports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;
		exports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;
		exports.Scene = Scene;
		exports.SceneUtils = SceneUtils;
		exports.ShaderChunk = ShaderChunk;
		exports.ShaderLib = ShaderLib;
		exports.ShaderMaterial = ShaderMaterial;
		exports.ShadowMaterial = ShadowMaterial;
		exports.Shape = Shape;
		exports.ShapeBufferGeometry = ShapeBufferGeometry;
		exports.ShapeGeometry = ShapeGeometry;
		exports.ShapePath = ShapePath;
		exports.ShapeUtils = ShapeUtils;
		exports.ShortType = ShortType;
		exports.Skeleton = Skeleton;
		exports.SkeletonHelper = SkeletonHelper;
		exports.SkinnedMesh = SkinnedMesh;
		exports.SmoothShading = SmoothShading;
		exports.Sphere = Sphere;
		exports.SphereBufferGeometry = SphereBufferGeometry;
		exports.SphereGeometry = SphereGeometry;
		exports.Spherical = Spherical;
		exports.SphericalHarmonics3 = SphericalHarmonics3;
		exports.SphericalReflectionMapping = SphericalReflectionMapping;
		exports.Spline = Spline;
		exports.SplineCurve = SplineCurve;
		exports.SplineCurve3 = SplineCurve3;
		exports.SpotLight = SpotLight;
		exports.SpotLightHelper = SpotLightHelper;
		exports.SpotLightShadow = SpotLightShadow;
		exports.Sprite = Sprite;
		exports.SpriteMaterial = SpriteMaterial;
		exports.SrcAlphaFactor = SrcAlphaFactor;
		exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;
		exports.SrcColorFactor = SrcColorFactor;
		exports.StaticCopyUsage = StaticCopyUsage;
		exports.StaticDrawUsage = StaticDrawUsage;
		exports.StaticReadUsage = StaticReadUsage;
		exports.StereoCamera = StereoCamera;
		exports.StreamCopyUsage = StreamCopyUsage;
		exports.StreamDrawUsage = StreamDrawUsage;
		exports.StreamReadUsage = StreamReadUsage;
		exports.StringKeyframeTrack = StringKeyframeTrack;
		exports.SubtractEquation = SubtractEquation;
		exports.SubtractiveBlending = SubtractiveBlending;
		exports.TOUCH = TOUCH;
		exports.TangentSpaceNormalMap = TangentSpaceNormalMap;
		exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;
		exports.TetrahedronGeometry = TetrahedronGeometry;
		exports.TextBufferGeometry = TextBufferGeometry;
		exports.TextGeometry = TextGeometry;
		exports.Texture = Texture;
		exports.TextureLoader = TextureLoader;
		exports.TorusBufferGeometry = TorusBufferGeometry;
		exports.TorusGeometry = TorusGeometry;
		exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;
		exports.TorusKnotGeometry = TorusKnotGeometry;
		exports.Triangle = Triangle;
		exports.TriangleFanDrawMode = TriangleFanDrawMode;
		exports.TriangleStripDrawMode = TriangleStripDrawMode;
		exports.TrianglesDrawMode = TrianglesDrawMode;
		exports.TubeBufferGeometry = TubeBufferGeometry;
		exports.TubeGeometry = TubeGeometry;
		exports.UVMapping = UVMapping;
		exports.Uint16Attribute = Uint16Attribute;
		exports.Uint16BufferAttribute = Uint16BufferAttribute;
		exports.Uint32Attribute = Uint32Attribute;
		exports.Uint32BufferAttribute = Uint32BufferAttribute;
		exports.Uint8Attribute = Uint8Attribute;
		exports.Uint8BufferAttribute = Uint8BufferAttribute;
		exports.Uint8ClampedAttribute = Uint8ClampedAttribute;
		exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;
		exports.Uncharted2ToneMapping = Uncharted2ToneMapping;
		exports.Uniform = Uniform;
		exports.UniformsLib = UniformsLib;
		exports.UniformsUtils = UniformsUtils;
		exports.UnsignedByteType = UnsignedByteType;
		exports.UnsignedInt248Type = UnsignedInt248Type;
		exports.UnsignedIntType = UnsignedIntType;
		exports.UnsignedShort4444Type = UnsignedShort4444Type;
		exports.UnsignedShort5551Type = UnsignedShort5551Type;
		exports.UnsignedShort565Type = UnsignedShort565Type;
		exports.UnsignedShortType = UnsignedShortType;
		exports.VSMShadowMap = VSMShadowMap;
		exports.Vector2 = Vector2;
		exports.Vector3 = Vector3;
		exports.Vector4 = Vector4;
		exports.VectorKeyframeTrack = VectorKeyframeTrack;
		exports.Vertex = Vertex;
		exports.VertexColors = VertexColors;
		exports.VideoTexture = VideoTexture;
		exports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;
		exports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;
		exports.WebGLRenderTarget = WebGLRenderTarget;
		exports.WebGLRenderTargetCube = WebGLRenderTargetCube;
		exports.WebGLRenderer = WebGLRenderer;
		exports.WebGLUtils = WebGLUtils;
		exports.WireframeGeometry = WireframeGeometry;
		exports.WireframeHelper = WireframeHelper;
		exports.WrapAroundEnding = WrapAroundEnding;
		exports.XHRLoader = XHRLoader;
		exports.ZeroCurvatureEnding = ZeroCurvatureEnding;
		exports.ZeroFactor = ZeroFactor;
		exports.ZeroSlopeEnding = ZeroSlopeEnding;
		exports.ZeroStencilOp = ZeroStencilOp;
		exports.sRGBEncoding = sRGBEncoding;
	
		Object.defineProperty(exports, '__esModule', { value: true });
	
	})));


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	if (true) {
	  module.exports = __webpack_require__(66);
	} else {
	  module.exports = require("./emotion.cjs.dev.js");
	}


/***/ },
/* 6 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
	    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
	  ) {
	    return;
	  }
	  if (false) {
	    // This branch is unreachable because this function is only called
	    // in production, but the condition is true only in development.
	    // Therefore if the branch is still here, dead code elimination wasn't
	    // properly applied.
	    // Don't change the message. React DevTools relies on it. Also make sure
	    // this message doesn't occur elsewhere in this function, or it will cause
	    // a false positive.
	    throw new Error('^_^');
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}
	
	if (true) {
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  module.exports = __webpack_require__(73);
	} else {
	  module.exports = require('./cjs/react-dom.development.js');
	}


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	var settle = __webpack_require__(43);
	var buildURL = __webpack_require__(15);
	var buildFullPath = __webpack_require__(40);
	var parseHeaders = __webpack_require__(50);
	var isURLSameOrigin = __webpack_require__(48);
	var createError = __webpack_require__(11);
	
	module.exports = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;
	
	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }
	
	    var request = new XMLHttpRequest();
	
	    // HTTP basic authentication
	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password || '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }
	
	    var fullPath = buildFullPath(config.baseURL, config.url);
	    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
	
	    // Set the request timeout in MS
	    request.timeout = config.timeout;
	
	    // Listen for ready state
	    request.onreadystatechange = function handleLoad() {
	      if (!request || request.readyState !== 4) {
	        return;
	      }
	
	      // The request errored out and we didn't get a response, this will be
	      // handled by onerror instead
	      // With one exception: request that using file: protocol, most browsers
	      // will return status as 0 even though it's a successful request
	      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	        return;
	      }
	
	      // Prepare the response
	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };
	
	      settle(resolve, reject, response);
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle browser request cancellation (as opposed to a manual cancellation)
	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }
	
	      reject(createError('Request aborted', config, 'ECONNABORTED', request));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle low level network errors
	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Handle timeout
	    request.ontimeout = function handleTimeout() {
	      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
	      if (config.timeoutErrorMessage) {
	        timeoutErrorMessage = config.timeoutErrorMessage;
	      }
	      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
	        request));
	
	      // Clean up request
	      request = null;
	    };
	
	    // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.
	    if (utils.isStandardBrowserEnv()) {
	      var cookies = __webpack_require__(46);
	
	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
	        cookies.read(config.xsrfCookieName) :
	        undefined;
	
	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    }
	
	    // Add headers to the request
	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    }
	
	    // Add withCredentials to request if needed
	    if (!utils.isUndefined(config.withCredentials)) {
	      request.withCredentials = !!config.withCredentials;
	    }
	
	    // Add responseType to request if needed
	    if (config.responseType) {
	      try {
	        request.responseType = config.responseType;
	      } catch (e) {
	        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
	        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
	        if (config.responseType !== 'json') {
	          throw e;
	        }
	      }
	    }
	
	    // Handle progress if needed
	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    }
	
	    // Not all browsers support upload events
	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }
	
	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }
	
	        request.abort();
	        reject(cancel);
	        // Clean up request
	        request = null;
	      });
	    }
	
	    if (requestData === undefined) {
	      requestData = null;
	    }
	
	    // Send the request
	    request.send(requestData);
	  });
	};


/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */
	function Cancel(message) {
	  this.message = message;
	}
	
	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};
	
	Cancel.prototype.__CANCEL__ = true;
	
	module.exports = Cancel;


/***/ },
/* 10 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var enhanceError = __webpack_require__(42);
	
	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */
	module.exports = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	
	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 * @returns {Object} New object resulting from merging config2 to config1
	 */
	module.exports = function mergeConfig(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  var config = {};
	
	  var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
	  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
	  var defaultToConfig2Keys = [
	    'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
	    'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
	    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
	    'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
	    'httpsAgent', 'cancelToken', 'socketPath'
	  ];
	
	  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
	    if (typeof config2[prop] !== 'undefined') {
	      config[prop] = config2[prop];
	    }
	  });
	
	  utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
	    if (utils.isObject(config2[prop])) {
	      config[prop] = utils.deepMerge(config1[prop], config2[prop]);
	    } else if (typeof config2[prop] !== 'undefined') {
	      config[prop] = config2[prop];
	    } else if (utils.isObject(config1[prop])) {
	      config[prop] = utils.deepMerge(config1[prop]);
	    } else if (typeof config1[prop] !== 'undefined') {
	      config[prop] = config1[prop];
	    }
	  });
	
	  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
	    if (typeof config2[prop] !== 'undefined') {
	      config[prop] = config2[prop];
	    } else if (typeof config1[prop] !== 'undefined') {
	      config[prop] = config1[prop];
	    }
	  });
	
	  var axiosKeys = valueFromConfig2Keys
	    .concat(mergeDeepPropertiesKeys)
	    .concat(defaultToConfig2Keys);
	
	  var otherKeys = Object
	    .keys(config2)
	    .filter(function filterAxiosKeys(key) {
	      return axiosKeys.indexOf(key) === -1;
	    });
	
	  utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
	    if (typeof config2[prop] !== 'undefined') {
	      config[prop] = config2[prop];
	    } else if (typeof config1[prop] !== 'undefined') {
	      config[prop] = config1[prop];
	    }
	  });
	
	  return config;
	};


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var utils = __webpack_require__(1);
	var normalizeHeaderName = __webpack_require__(49);
	
	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};
	
	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}
	
	function getDefaultAdapter() {
	  var adapter;
	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = __webpack_require__(8);
	  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
	    // For node use HTTP adapter
	    adapter = __webpack_require__(8);
	  }
	  return adapter;
	}
	
	var defaults = {
	  adapter: getDefaultAdapter(),
	
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Accept');
	    normalizeHeaderName(headers, 'Content-Type');
	    if (utils.isFormData(data) ||
	      utils.isArrayBuffer(data) ||
	      utils.isBuffer(data) ||
	      utils.isStream(data) ||
	      utils.isFile(data) ||
	      utils.isBlob(data)
	    ) {
	      return data;
	    }
	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }
	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }
	    if (utils.isObject(data)) {
	      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
	      return JSON.stringify(data);
	    }
	    return data;
	  }],
	
	  transformResponse: [function transformResponse(data) {
	    /*eslint no-param-reassign:0*/
	    if (typeof data === 'string') {
	      try {
	        data = JSON.parse(data);
	      } catch (e) { /* Ignore */ }
	    }
	    return data;
	  }],
	
	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,
	
	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',
	
	  maxContentLength: -1,
	
	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};
	
	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};
	
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});
	
	module.exports = defaults;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    return fn.apply(thisArg, args);
	  };
	};


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	
	function encode(val) {
	  return encodeURIComponent(val).
	    replace(/%40/gi, '@').
	    replace(/%3A/gi, ':').
	    replace(/%24/g, '$').
	    replace(/%2C/gi, ',').
	    replace(/%20/g, '+').
	    replace(/%5B/gi, '[').
	    replace(/%5D/gi, ']');
	}
	
	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */
	module.exports = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }
	
	  var serializedParams;
	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];
	
	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }
	
	      if (utils.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }
	
	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }
	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });
	
	    serializedParams = parts.join('&');
	  }
	
	  if (serializedParams) {
	    var hashmarkIndex = url.indexOf('#');
	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }
	
	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }
	
	  return url;
	};


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-time/ v1.1.0 Copyright 2019 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.d3 = global.d3 || {}));
	}(this, function (exports) { 'use strict';
	
	var t0 = new Date,
	    t1 = new Date;
	
	function newInterval(floori, offseti, count, field) {
	
	  function interval(date) {
	    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
	  }
	
	  interval.floor = function(date) {
	    return floori(date = new Date(+date)), date;
	  };
	
	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };
	
	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };
	
	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };
	
	  interval.range = function(start, stop, step) {
	    var range = [], previous;
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
	    while (previous < start && start < stop);
	    return range;
	  };
	
	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) {
	        if (step < 0) while (++step <= 0) {
	          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
	        } else while (--step >= 0) {
	          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
	        }
	      }
	    });
	  };
	
	  if (count) {
	    interval.count = function(start, end) {
	      t0.setTime(+start), t1.setTime(+end);
	      floori(t0), floori(t1);
	      return Math.floor(count(t0, t1));
	    };
	
	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }
	
	  return interval;
	}
	
	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});
	
	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};
	var milliseconds = millisecond.range;
	
	var durationSecond = 1e3;
	var durationMinute = 6e4;
	var durationHour = 36e5;
	var durationDay = 864e5;
	var durationWeek = 6048e5;
	
	var second = newInterval(function(date) {
	  date.setTime(date - date.getMilliseconds());
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond);
	}, function(start, end) {
	  return (end - start) / durationSecond;
	}, function(date) {
	  return date.getUTCSeconds();
	});
	var seconds = second.range;
	
	var minute = newInterval(function(date) {
	  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getMinutes();
	});
	var minutes = minute.range;
	
	var hour = newInterval(function(date) {
	  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getHours();
	});
	var hours = hour.range;
	
	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
	}, function(date) {
	  return date.getDate() - 1;
	});
	var days = day.range;
	
	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
	  });
	}
	
	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);
	
	var sundays = sunday.range;
	var mondays = monday.range;
	var tuesdays = tuesday.range;
	var wednesdays = wednesday.range;
	var thursdays = thursday.range;
	var fridays = friday.range;
	var saturdays = saturday.range;
	
	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});
	var months = month.range;
	
	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});
	
	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};
	var years = year.range;
	
	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getUTCMinutes();
	});
	var utcMinutes = utcMinute.range;
	
	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getUTCHours();
	});
	var utcHours = utcHour.range;
	
	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});
	var utcDays = utcDay.range;
	
	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek;
	  });
	}
	
	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);
	
	var utcSundays = utcSunday.range;
	var utcMondays = utcMonday.range;
	var utcTuesdays = utcTuesday.range;
	var utcWednesdays = utcWednesday.range;
	var utcThursdays = utcThursday.range;
	var utcFridays = utcFriday.range;
	var utcSaturdays = utcSaturday.range;
	
	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});
	var utcMonths = utcMonth.range;
	
	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});
	
	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};
	var utcYears = utcYear.range;
	
	exports.timeDay = day;
	exports.timeDays = days;
	exports.timeFriday = friday;
	exports.timeFridays = fridays;
	exports.timeHour = hour;
	exports.timeHours = hours;
	exports.timeInterval = newInterval;
	exports.timeMillisecond = millisecond;
	exports.timeMilliseconds = milliseconds;
	exports.timeMinute = minute;
	exports.timeMinutes = minutes;
	exports.timeMonday = monday;
	exports.timeMondays = mondays;
	exports.timeMonth = month;
	exports.timeMonths = months;
	exports.timeSaturday = saturday;
	exports.timeSaturdays = saturdays;
	exports.timeSecond = second;
	exports.timeSeconds = seconds;
	exports.timeSunday = sunday;
	exports.timeSundays = sundays;
	exports.timeThursday = thursday;
	exports.timeThursdays = thursdays;
	exports.timeTuesday = tuesday;
	exports.timeTuesdays = tuesdays;
	exports.timeWednesday = wednesday;
	exports.timeWednesdays = wednesdays;
	exports.timeWeek = sunday;
	exports.timeWeeks = sundays;
	exports.timeYear = year;
	exports.timeYears = years;
	exports.utcDay = utcDay;
	exports.utcDays = utcDays;
	exports.utcFriday = utcFriday;
	exports.utcFridays = utcFridays;
	exports.utcHour = utcHour;
	exports.utcHours = utcHours;
	exports.utcMillisecond = millisecond;
	exports.utcMilliseconds = milliseconds;
	exports.utcMinute = utcMinute;
	exports.utcMinutes = utcMinutes;
	exports.utcMonday = utcMonday;
	exports.utcMondays = utcMondays;
	exports.utcMonth = utcMonth;
	exports.utcMonths = utcMonths;
	exports.utcSaturday = utcSaturday;
	exports.utcSaturdays = utcSaturdays;
	exports.utcSecond = second;
	exports.utcSeconds = seconds;
	exports.utcSunday = utcSunday;
	exports.utcSundays = utcSundays;
	exports.utcThursday = utcThursday;
	exports.utcThursdays = utcThursdays;
	exports.utcTuesday = utcTuesday;
	exports.utcTuesdays = utcTuesdays;
	exports.utcWednesday = utcWednesday;
	exports.utcWednesdays = utcWednesdays;
	exports.utcWeek = utcSunday;
	exports.utcWeeks = utcSundays;
	exports.utcYear = utcYear;
	exports.utcYears = utcYears;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	}));


/***/ },
/* 17 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var asap = __webpack_require__(34);
	
	function noop() {}
	
	// States:
	//
	// 0 - pending
	// 1 - fulfilled with _value
	// 2 - rejected with _value
	// 3 - adopted the state of another promise, _value
	//
	// once the state is no longer pending (0) it is immutable
	
	// All `_` prefixed properties will be reduced to `_{random number}`
	// at build time to obfuscate them and discourage their use.
	// We don't use symbols or Object.defineProperty to fully hide them
	// because the performance isn't good enough.
	
	
	// to avoid using try/catch inside critical functions, we
	// extract them to here.
	var LAST_ERROR = null;
	var IS_ERROR = {};
	function getThen(obj) {
	  try {
	    return obj.then;
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	
	function tryCallOne(fn, a) {
	  try {
	    return fn(a);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	function tryCallTwo(fn, a, b) {
	  try {
	    fn(a, b);
	  } catch (ex) {
	    LAST_ERROR = ex;
	    return IS_ERROR;
	  }
	}
	
	module.exports = Promise;
	
	function Promise(fn) {
	  if (typeof this !== 'object') {
	    throw new TypeError('Promises must be constructed via new');
	  }
	  if (typeof fn !== 'function') {
	    throw new TypeError('not a function');
	  }
	  this._45 = 0;
	  this._81 = 0;
	  this._65 = null;
	  this._54 = null;
	  if (fn === noop) return;
	  doResolve(fn, this);
	}
	Promise._10 = null;
	Promise._97 = null;
	Promise._61 = noop;
	
	Promise.prototype.then = function(onFulfilled, onRejected) {
	  if (this.constructor !== Promise) {
	    return safeThen(this, onFulfilled, onRejected);
	  }
	  var res = new Promise(noop);
	  handle(this, new Handler(onFulfilled, onRejected, res));
	  return res;
	};
	
	function safeThen(self, onFulfilled, onRejected) {
	  return new self.constructor(function (resolve, reject) {
	    var res = new Promise(noop);
	    res.then(resolve, reject);
	    handle(self, new Handler(onFulfilled, onRejected, res));
	  });
	};
	function handle(self, deferred) {
	  while (self._81 === 3) {
	    self = self._65;
	  }
	  if (Promise._10) {
	    Promise._10(self);
	  }
	  if (self._81 === 0) {
	    if (self._45 === 0) {
	      self._45 = 1;
	      self._54 = deferred;
	      return;
	    }
	    if (self._45 === 1) {
	      self._45 = 2;
	      self._54 = [self._54, deferred];
	      return;
	    }
	    self._54.push(deferred);
	    return;
	  }
	  handleResolved(self, deferred);
	}
	
	function handleResolved(self, deferred) {
	  asap(function() {
	    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
	    if (cb === null) {
	      if (self._81 === 1) {
	        resolve(deferred.promise, self._65);
	      } else {
	        reject(deferred.promise, self._65);
	      }
	      return;
	    }
	    var ret = tryCallOne(cb, self._65);
	    if (ret === IS_ERROR) {
	      reject(deferred.promise, LAST_ERROR);
	    } else {
	      resolve(deferred.promise, ret);
	    }
	  });
	}
	function resolve(self, newValue) {
	  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
	  if (newValue === self) {
	    return reject(
	      self,
	      new TypeError('A promise cannot be resolved with itself.')
	    );
	  }
	  if (
	    newValue &&
	    (typeof newValue === 'object' || typeof newValue === 'function')
	  ) {
	    var then = getThen(newValue);
	    if (then === IS_ERROR) {
	      return reject(self, LAST_ERROR);
	    }
	    if (
	      then === self.then &&
	      newValue instanceof Promise
	    ) {
	      self._81 = 3;
	      self._65 = newValue;
	      finale(self);
	      return;
	    } else if (typeof then === 'function') {
	      doResolve(then.bind(newValue), self);
	      return;
	    }
	  }
	  self._81 = 1;
	  self._65 = newValue;
	  finale(self);
	}
	
	function reject(self, newValue) {
	  self._81 = 2;
	  self._65 = newValue;
	  if (Promise._97) {
	    Promise._97(self, newValue);
	  }
	  finale(self);
	}
	function finale(self) {
	  if (self._45 === 1) {
	    handle(self, self._54);
	    self._54 = null;
	  }
	  if (self._45 === 2) {
	    for (var i = 0; i < self._54.length; i++) {
	      handle(self, self._54[i]);
	    }
	    self._54 = null;
	  }
	}
	
	function Handler(onFulfilled, onRejected, promise){
	  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
	  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
	  this.promise = promise;
	}
	
	/**
	 * Take a potentially misbehaving resolver function and make sure
	 * onFulfilled and onRejected are only called once.
	 *
	 * Makes no guarantees about asynchrony.
	 */
	function doResolve(fn, promise) {
	  var done = false;
	  var res = tryCallTwo(fn, function (value) {
	    if (done) return;
	    done = true;
	    resolve(promise, value);
	  }, function (reason) {
	    if (done) return;
	    done = true;
	    reject(promise, reason);
	  })
	  if (!done && res === IS_ERROR) {
	    done = true;
	    reject(promise, LAST_ERROR);
	  }
	}


/***/ },
/* 19 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	function componentWillMount() {
	  // Call this.constructor.gDSFP to support sub-classes.
	  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
	  if (state !== null && state !== undefined) {
	    this.setState(state);
	  }
	}
	
	function componentWillReceiveProps(nextProps) {
	  // Call this.constructor.gDSFP to support sub-classes.
	  // Use the setState() updater to ensure state isn't stale in certain edge cases.
	  function updater(prevState) {
	    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
	    return state !== null && state !== undefined ? state : null;
	  }
	  // Binding "this" is important for shallow renderer support.
	  this.setState(updater.bind(this));
	}
	
	function componentWillUpdate(nextProps, nextState) {
	  try {
	    var prevProps = this.props;
	    var prevState = this.state;
	    this.props = nextProps;
	    this.state = nextState;
	    this.__reactInternalSnapshotFlag = true;
	    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
	      prevProps,
	      prevState
	    );
	  } finally {
	    this.props = prevProps;
	    this.state = prevState;
	  }
	}
	
	// React may warn about cWM/cWRP/cWU methods being deprecated.
	// Add a flag to suppress these warnings for this special case.
	componentWillMount.__suppressDeprecationWarning = true;
	componentWillReceiveProps.__suppressDeprecationWarning = true;
	componentWillUpdate.__suppressDeprecationWarning = true;
	
	function polyfill(Component) {
	  var prototype = Component.prototype;
	
	  if (!prototype || !prototype.isReactComponent) {
	    throw new Error('Can only polyfill class components');
	  }
	
	  if (
	    typeof Component.getDerivedStateFromProps !== 'function' &&
	    typeof prototype.getSnapshotBeforeUpdate !== 'function'
	  ) {
	    return Component;
	  }
	
	  // If new component APIs are defined, "unsafe" lifecycles won't be called.
	  // Error if any of these lifecycles are present,
	  // Because they would work differently between older and newer (16.3+) versions of React.
	  var foundWillMountName = null;
	  var foundWillReceivePropsName = null;
	  var foundWillUpdateName = null;
	  if (typeof prototype.componentWillMount === 'function') {
	    foundWillMountName = 'componentWillMount';
	  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
	    foundWillMountName = 'UNSAFE_componentWillMount';
	  }
	  if (typeof prototype.componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'componentWillReceiveProps';
	  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	  }
	  if (typeof prototype.componentWillUpdate === 'function') {
	    foundWillUpdateName = 'componentWillUpdate';
	  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
	    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	  }
	  if (
	    foundWillMountName !== null ||
	    foundWillReceivePropsName !== null ||
	    foundWillUpdateName !== null
	  ) {
	    var componentName = Component.displayName || Component.name;
	    var newApiName =
	      typeof Component.getDerivedStateFromProps === 'function'
	        ? 'getDerivedStateFromProps()'
	        : 'getSnapshotBeforeUpdate()';
	
	    throw Error(
	      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
	        componentName +
	        ' uses ' +
	        newApiName +
	        ' but also contains the following legacy lifecycles:' +
	        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
	        (foundWillReceivePropsName !== null
	          ? '\n  ' + foundWillReceivePropsName
	          : '') +
	        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
	        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
	        'https://fb.me/react-async-component-lifecycle-hooks'
	    );
	  }
	
	  // React <= 16.2 does not support static getDerivedStateFromProps.
	  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
	  // Newer versions of React will ignore these lifecycles if gDSFP exists.
	  if (typeof Component.getDerivedStateFromProps === 'function') {
	    prototype.componentWillMount = componentWillMount;
	    prototype.componentWillReceiveProps = componentWillReceiveProps;
	  }
	
	  // React <= 16.2 does not support getSnapshotBeforeUpdate.
	  // As a workaround, use cWU to invoke the new lifecycle.
	  // Newer versions of React will ignore that lifecycle if gSBU exists.
	  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
	    if (typeof prototype.componentDidUpdate !== 'function') {
	      throw new Error(
	        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
	      );
	    }
	
	    prototype.componentWillUpdate = componentWillUpdate;
	
	    var componentDidUpdate = prototype.componentDidUpdate;
	
	    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
	      prevProps,
	      prevState,
	      maybeSnapshot
	    ) {
	      // 16.3+ will not execute our will-update method;
	      // It will pass a snapshot value to did-update though.
	      // Older versions will require our polyfilled will-update value.
	      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
	      // Because for <= 15.x versions this might be a "prevContext" object.
	      // We also can't just check "__reactInternalSnapshot",
	      // Because get-snapshot might return a falsy value.
	      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
	      var snapshot = this.__reactInternalSnapshotFlag
	        ? this.__reactInternalSnapshot
	        : maybeSnapshot;
	
	      componentDidUpdate.call(this, prevProps, prevState, snapshot);
	    };
	  }
	
	  return Component;
	}
	
	exports.polyfill = polyfill;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;
	
	var PropTypes = _interopRequireWildcard(__webpack_require__(3));
	
	var _react = _interopRequireDefault(__webpack_require__(2));
	
	var _reactDom = _interopRequireDefault(__webpack_require__(7));
	
	var _reactLifecyclesCompat = __webpack_require__(19);
	
	var _PropTypes = __webpack_require__(22);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
	
	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	
	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
	
	var UNMOUNTED = 'unmounted';
	exports.UNMOUNTED = UNMOUNTED;
	var EXITED = 'exited';
	exports.EXITED = EXITED;
	var ENTERING = 'entering';
	exports.ENTERING = ENTERING;
	var ENTERED = 'entered';
	exports.ENTERED = ENTERED;
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 0 },
	 *   entered:  { opacity: 1 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */
	
	exports.EXITING = EXITING;
	
	var Transition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);
	
	  function Transition(props, context) {
	    var _this;
	
	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears
	
	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;
	
	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }
	
	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }
	
	  var _proto = Transition.prototype;
	
	  _proto.getChildContext = function getChildContext() {
	    return {
	      transitionGroup: null // allows for nested Transitions
	
	    };
	  };
	
	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;
	
	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }
	
	    return null;
	  }; // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	
	
	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };
	
	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;
	
	    if (prevProps !== this.props) {
	      var status = this.state.status;
	
	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }
	
	    this.updateStatus(false, nextStatus);
	  };
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };
	
	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;
	
	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major
	
	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }
	
	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };
	
	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }
	
	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();
	
	      var node = _reactDom.default.findDOMNode(this);
	
	      if (nextStatus === ENTERING) {
	        this.performEnter(node, mounting);
	      } else {
	        this.performExit(node);
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };
	
	  _proto.performEnter = function performEnter(node, mounting) {
	    var _this2 = this;
	
	    var enter = this.props.enter;
	    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set
	
	    if (!mounting && !enter) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(node);
	      });
	      return;
	    }
	
	    this.props.onEnter(node, appearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(node, appearing);
	
	      _this2.onTransitionEnd(node, enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(node, appearing);
	        });
	      });
	    });
	  };
	
	  _proto.performExit = function performExit(node) {
	    var _this3 = this;
	
	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED
	
	    if (!exit) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(node);
	      });
	      return;
	    }
	
	    this.props.onExit(node);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(node);
	
	      _this3.onTransitionEnd(node, timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };
	
	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };
	
	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };
	
	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;
	
	    var active = true;
	
	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };
	
	    this.nextCallback.cancel = function () {
	      active = false;
	    };
	
	    return this.nextCallback;
	  };
	
	  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
	    this.setNextCallback(handler);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
	
	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }
	
	    if (this.props.addEndListener) {
	      this.props.addEndListener(node, this.nextCallback);
	    }
	
	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };
	
	  _proto.render = function render() {
	    var status = this.state.status;
	
	    if (status === UNMOUNTED) {
	      return null;
	    }
	
	    var _this$props = this.props,
	        children = _this$props.children,
	        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition
	
	
	    delete childProps.in;
	    delete childProps.mountOnEnter;
	    delete childProps.unmountOnExit;
	    delete childProps.appear;
	    delete childProps.enter;
	    delete childProps.exit;
	    delete childProps.timeout;
	    delete childProps.addEndListener;
	    delete childProps.onEnter;
	    delete childProps.onEntering;
	    delete childProps.onEntered;
	    delete childProps.onExit;
	    delete childProps.onExiting;
	    delete childProps.onExited;
	
	    if (typeof children === 'function') {
	      return children(status, childProps);
	    }
	
	    var child = _react.default.Children.only(children);
	
	    return _react.default.cloneElement(child, childProps);
	  };
	
	  return Transition;
	}(_react.default.Component);
	
	Transition.contextTypes = {
	  transitionGroup: PropTypes.object
	};
	Transition.childContextTypes = {
	  transitionGroup: function transitionGroup() {}
	};
	Transition.propTypes =  false ? {
	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,
	
	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: PropTypes.bool,
	
	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: PropTypes.bool,
	
	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: PropTypes.bool,
	
	  /**
	   * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
	   * If you want to transition on the first mount set `appear` to `true`, and the
	   * component will transition in as soon as the `<Transition>` mounts.
	   *
	   * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
	   */
	  appear: PropTypes.bool,
	
	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: PropTypes.bool,
	
	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: PropTypes.bool,
	
	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = _PropTypes.timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;
	
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    return pt.apply(void 0, [props].concat(args));
	  },
	
	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. **Note:** Timeouts are still used as a fallback if provided.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: PropTypes.func,
	
	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: PropTypes.func,
	
	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes.func,
	
	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: PropTypes.func,
	
	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: PropTypes.func,
	
	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: PropTypes.func,
	
	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: PropTypes.func // Name the function so it is clearer in the documentation
	
	} : {};
	
	function noop() {}
	
	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};
	Transition.UNMOUNTED = 0;
	Transition.EXITED = 1;
	Transition.ENTERING = 2;
	Transition.ENTERED = 3;
	Transition.EXITING = 4;
	
	var _default = (0, _reactLifecyclesCompat.polyfill)(Transition);
	
	exports.default = _default;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = void 0;
	
	var _propTypes = _interopRequireDefault(__webpack_require__(3));
	
	var _react = _interopRequireDefault(__webpack_require__(2));
	
	var _reactLifecyclesCompat = __webpack_require__(19);
	
	var _ChildMapping = __webpack_require__(81);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	
	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
	
	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
	
	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
	
	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};
	
	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	  /**
	   * The `<TransitionGroup>` component manages a set of transition components
	   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	   * components, `<TransitionGroup>` is a state machine for managing the mounting
	   * and unmounting of components over time.
	   *
	   * Consider the example below. As items are removed or added to the TodoList the
	   * `in` prop is toggled automatically by the `<TransitionGroup>`.
	   *
	   * Note that `<TransitionGroup>`  does not define any animation behavior!
	   * Exactly _how_ a list item animates is up to the individual transition
	   * component. This means you can mix and match animations across different list
	   * items.
	   */
	
	};
	
	var TransitionGroup =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);
	
	  function TransitionGroup(props, context) {
	    var _this;
	
	    _this = _React$Component.call(this, props, context) || this;
	
	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear
	
	
	    _this.state = {
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }
	
	  var _proto = TransitionGroup.prototype;
	
	  _proto.getChildContext = function getChildContext() {
	    return {
	      transitionGroup: {
	        isMounting: !this.appeared
	      }
	    };
	  };
	
	  _proto.componentDidMount = function componentDidMount() {
	    this.appeared = true;
	    this.mounted = true;
	  };
	
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };
	
	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  };
	
	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
	    if (child.key in currentChildMapping) return;
	
	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }
	
	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);
	
	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };
	
	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
	
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;
	
	    if (Component === null) {
	      return children;
	    }
	
	    return _react.default.createElement(Component, props, children);
	  };
	
	  return TransitionGroup;
	}(_react.default.Component);
	
	TransitionGroup.childContextTypes = {
	  transitionGroup: _propTypes.default.object.isRequired
	};
	TransitionGroup.propTypes =  false ? {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: _propTypes.default.any,
	
	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: _propTypes.default.node,
	
	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: _propTypes.default.bool,
	
	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: _propTypes.default.bool,
	
	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: _propTypes.default.bool,
	
	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: _propTypes.default.func
	} : {};
	TransitionGroup.defaultProps = defaultProps;
	
	var _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);
	
	exports.default = _default;
	module.exports = exports["default"];

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.classNamesShape = exports.timeoutsShape = void 0;
	
	var _propTypes = _interopRequireDefault(__webpack_require__(3));
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var timeoutsShape =  false ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
	  enter: _propTypes.default.number,
	  exit: _propTypes.default.number,
	  appear: _propTypes.default.number
	}).isRequired]) : null;
	exports.timeoutsShape = timeoutsShape;
	var classNamesShape =  false ? _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
	  enter: _propTypes.default.string,
	  exit: _propTypes.default.string,
	  active: _propTypes.default.string
	}), _propTypes.default.shape({
	  enter: _propTypes.default.string,
	  enterDone: _propTypes.default.string,
	  enterActive: _propTypes.default.string,
	  exit: _propTypes.default.string,
	  exitDone: _propTypes.default.string,
	  exitActive: _propTypes.default.string
	})]) : null;
	exports.classNamesShape = classNamesShape;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	if (typeof Promise === 'undefined') {
	  // Rejection tracking prevents a common issue where React gets into an
	  // inconsistent state due to an error, but it gets swallowed by a Promise,
	  // and the user has no idea what causes React's erratic future behavior.
	  __webpack_require__(70).enable();
	  window.Promise = __webpack_require__(69);
	}
	
	// fetch() polyfill for making API calls.
	__webpack_require__(90);
	
	// Object.assign() is commonly used with React.
	// It will use the native implementation if it's present and isn't buggy.
	Object.assign = __webpack_require__(6);


/***/ },
/* 24 */
/***/ function(module, exports) {

	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}
	
	module.exports = _interopRequireDefault;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var sheet = __webpack_require__(29);
	var Stylis = _interopDefault(__webpack_require__(30));
	__webpack_require__(33);
	
	// https://github.com/thysultan/stylis.js/tree/master/plugins/rule-sheet
	// inlined to avoid umd wrapper and peerDep warnings/installing stylis
	// since we use stylis after closure compiler
	var delimiter = '/*|*/';
	var needle = delimiter + '}';
	
	function toSheet(block) {
	  if (block) {
	    Sheet.current.insert(block + '}');
	  }
	}
	
	var Sheet = {
	  current: null
	};
	var ruleSheet = function ruleSheet(context, content, selectors, parents, line, column, length, ns, depth, at) {
	  switch (context) {
	    // property
	    case 1:
	      {
	        switch (content.charCodeAt(0)) {
	          case 64:
	            {
	              // @import
	              Sheet.current.insert(content + ';');
	              return '';
	            }
	          // charcode for l
	
	          case 108:
	            {
	              // charcode for b
	              // this ignores label
	              if (content.charCodeAt(2) === 98) {
	                return '';
	              }
	            }
	        }
	
	        break;
	      }
	    // selector
	
	    case 2:
	      {
	        if (ns === 0) return content + delimiter;
	        break;
	      }
	    // at-rule
	
	    case 3:
	      {
	        switch (ns) {
	          // @font-face, @page
	          case 102:
	          case 112:
	            {
	              Sheet.current.insert(selectors[0] + content);
	              return '';
	            }
	
	          default:
	            {
	              return content + (at === 0 ? delimiter : '');
	            }
	        }
	      }
	
	    case -2:
	      {
	        content.split(needle).forEach(toSheet);
	      }
	  }
	};
	
	var createCache = function createCache(options) {
	  if (options === undefined) options = {};
	  var key = options.key || 'css';
	  var stylisOptions;
	
	  if (options.prefix !== undefined) {
	    stylisOptions = {
	      prefix: options.prefix
	    };
	  }
	
	  var stylis = new Stylis(stylisOptions);
	
	  if (false) {
	    // $FlowFixMe
	    if (/[^a-z-]/.test(key)) {
	      throw new Error("Emotion key must only contain lower case alphabetical characters and - but \"" + key + "\" was passed");
	    }
	  }
	
	  var inserted = {}; // $FlowFixMe
	
	  var container;
	
	  {
	    container = options.container || document.head;
	    var nodes = document.querySelectorAll("style[data-emotion-" + key + "]");
	    Array.prototype.forEach.call(nodes, function (node) {
	      var attrib = node.getAttribute("data-emotion-" + key); // $FlowFixMe
	
	      attrib.split(' ').forEach(function (id) {
	        inserted[id] = true;
	      });
	
	      if (node.parentNode !== container) {
	        container.appendChild(node);
	      }
	    });
	  }
	
	  var _insert;
	
	  {
	    stylis.use(options.stylisPlugins)(ruleSheet);
	
	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      var name = serialized.name;
	      Sheet.current = sheet;
	
	      if (false) {
	        var map = serialized.map;
	        Sheet.current = {
	          insert: function insert(rule) {
	            sheet.insert(rule + map);
	          }
	        };
	      }
	
	      stylis(selector, serialized.styles);
	
	      if (shouldCache) {
	        cache.inserted[name] = true;
	      }
	    };
	  }
	
	  if (false) {
	    // https://esbench.com/bench/5bf7371a4cd7e6009ef61d0a
	    var commentStart = /\/\*/g;
	    var commentEnd = /\*\//g;
	    stylis.use(function (context, content) {
	      switch (context) {
	        case -1:
	          {
	            while (commentStart.test(content)) {
	              commentEnd.lastIndex = commentStart.lastIndex;
	
	              if (commentEnd.test(content)) {
	                commentStart.lastIndex = commentEnd.lastIndex;
	                continue;
	              }
	
	              throw new Error('Your styles have an unterminated comment ("/*" without corresponding "*/").');
	            }
	
	            commentStart.lastIndex = 0;
	            break;
	          }
	      }
	    });
	    stylis.use(function (context, content, selectors) {
	      switch (context) {
	        case -1:
	          {
	            var flag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';
	            var unsafePseudoClasses = content.match(/(:first|:nth|:nth-last)-child/g);
	
	            if (unsafePseudoClasses && cache.compat !== true) {
	              unsafePseudoClasses.forEach(function (unsafePseudoClass) {
	                var ignoreRegExp = new RegExp(unsafePseudoClass + ".*\\/\\* " + flag + " \\*\\/");
	                var ignore = ignoreRegExp.test(content);
	
	                if (unsafePseudoClass && !ignore) {
	                  console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
	                }
	              });
	            }
	
	            break;
	          }
	      }
	    });
	  }
	
	  var cache = {
	    key: key,
	    sheet: new sheet.StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  return cache;
	};
	
	exports.default = createCache;


/***/ },
/* 26 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash
	
	  var k,
	      i = 0,
	      len = str.length;
	
	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^=
	    /* k >>> r: */
	    k >>> 24;
	    h =
	    /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
	    /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array
	
	
	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
	
	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
	
	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h =
	      /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.
	
	
	  h ^= h >>> 13;
	  h =
	  /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}
	
	exports.default = murmur2;


/***/ },
/* 27 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function memoize(fn) {
	  var cache = {};
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}
	
	exports.default = memoize;


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var hashString = _interopDefault(__webpack_require__(26));
	var unitless = _interopDefault(__webpack_require__(31));
	var memoize = _interopDefault(__webpack_require__(27));
	
	var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
	var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
	
	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};
	
	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};
	
	var processStyleName = memoize(function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});
	
	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }
	
	  if (unitless[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }
	
	  return value;
	};
	
	if (false) {
	  var contentValuePattern = /(attr|calc|counters?|url)\(/;
	  var contentValues = ['normal', 'none', 'counter', 'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote', 'initial', 'inherit', 'unset'];
	  var oldProcessStyleValue = processStyleValue;
	  var msPattern = /^-ms-/;
	  var hyphenPattern = /-(.)/g;
	  var hyphenatedCache = {};
	
	  processStyleValue = function processStyleValue(key, value) {
	    if (key === 'content') {
	      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
	        console.error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
	      }
	    }
	
	    var processed = oldProcessStyleValue(key, value);
	
	    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {
	      hyphenatedCache[key] = true;
	      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {
	        return _char.toUpperCase();
	      }) + "?");
	    }
	
	    return processed;
	  };
	}
	
	var shouldWarnAboutInterpolatingClassNameFromCss = true;
	
	function handleInterpolation(mergedProps, registered, interpolation, couldBeSelectorInterpolation) {
	  if (interpolation == null) {
	    return '';
	  }
	
	  if (interpolation.__emotion_styles !== undefined) {
	    if (false) {
	      throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
	    }
	
	    return interpolation;
	  }
	
	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }
	
	    case 'object':
	      {
	        if (interpolation.anim === 1) {
	          cursor = {
	            name: interpolation.name,
	            styles: interpolation.styles,
	            next: cursor
	          };
	          return interpolation.name;
	        }
	
	        if (interpolation.styles !== undefined) {
	          var next = interpolation.next;
	
	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }
	
	          var styles = interpolation.styles + ";";
	
	          if (false) {
	            styles += interpolation.map;
	          }
	
	          return styles;
	        }
	
	        return createStringFromObject(mergedProps, registered, interpolation);
	      }
	
	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result, couldBeSelectorInterpolation);
	        } else if (false) {
	          console.error('Functions that are interpolated in css calls will be stringified.\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\n' + 'It can be called directly with props or interpolated in a styled call like this\n' + "let SomeComponent = styled('div')`${dynamicStyle}`");
	        }
	
	        break;
	      }
	
	    case 'string':
	      if (false) {
	        var matched = [];
	        var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {
	          var fakeVarName = "animation" + matched.length;
	          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, '') + "`");
	          return "${" + fakeVarName + "}";
	        });
	
	        if (matched.length) {
	          console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\n' + 'Instead of doing this:\n\n' + [].concat(matched, ["`" + replaced + "`"]).join('\n') + '\n\nYou should wrap it with `css` like this:\n\n' + ("css`" + replaced + "`"));
	        }
	      }
	
	      break;
	  } // finalize string values (regular strings and functions interpolated into css calls)
	
	
	  if (registered == null) {
	    return interpolation;
	  }
	
	  var cached = registered[interpolation];
	
	  if (false) {
	    console.error('Interpolating a className from css`` is not recommended and will cause problems with composition.\n' + 'Interpolating a className from css`` will be completely unsupported in a future major version of Emotion');
	    shouldWarnAboutInterpolatingClassNameFromCss = false;
	  }
	
	  return cached !== undefined && !couldBeSelectorInterpolation ? cached : interpolation;
	}
	
	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';
	
	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i], false);
	    }
	  } else {
	    for (var _key in obj) {
	      var value = obj[_key];
	
	      if (typeof value !== 'object') {
	        if (registered != null && registered[value] !== undefined) {
	          string += _key + "{" + registered[value] + "}";
	        } else if (isProcessableValue(value)) {
	          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
	        }
	      } else {
	        if (_key === 'NO_COMPONENT_SELECTOR' && ("production") !== 'production') {
	          throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
	        }
	
	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value, false);
	
	          switch (_key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(_key) + ":" + interpolated + ";";
	                break;
	              }
	
	            default:
	              {
	                if (false) {
	                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
	                }
	
	                string += _key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }
	
	  return string;
	}
	
	var labelPattern = /label:\s*([^\s;\n{]+)\s*;/g;
	var sourceMapPattern;
	
	if (false) {
	  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//;
	} // this is the cursor for keyframes
	// keyframes are stored on the SerializedStyles object as a linked list
	
	
	var cursor;
	var serializeStyles = function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }
	
	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];
	
	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings, false);
	  } else {
	    if (false) {
	      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	    }
	
	    styles += strings[0];
	  } // we start at 1 since we've already handled the first arg
	
	
	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i], styles.charCodeAt(styles.length - 1) === 46);
	
	    if (stringMode) {
	      if (false) {
	        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
	      }
	
	      styles += strings[i];
	    }
	  }
	
	  var sourceMap;
	
	  if (false) {
	    styles = styles.replace(sourceMapPattern, function (match) {
	      sourceMap = match;
	      return '';
	    });
	  } // using a global regex with .exec is stateful so lastIndex has to be reset each time
	
	
	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5
	
	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' + // $FlowFixMe we know it's not null
	    match[1];
	  }
	
	  var name = hashString(styles) + identifierName;
	
	  if (false) {
	    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)
	    return {
	      name: name,
	      styles: styles,
	      map: sourceMap,
	      next: cursor,
	      toString: function toString() {
	        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
	      }
	    };
	  }
	
	  return {
	    name: name,
	    styles: styles,
	    next: cursor
	  };
	};
	
	exports.serializeStyles = serializeStyles;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	/*
	
	Based off glamor's StyleSheet, thanks Sunil ❤️
	
	high performance StyleSheet for css-in-js systems
	
	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance
	
	// usage
	
	import { StyleSheet } from '@emotion/sheet'
	
	let styleSheet = new StyleSheet({ key: '', container: document.head })
	
	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet
	
	styleSheet.flush()
	- empties the stylesheet of all its contents
	
	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox
	
	  /* istanbul ignore next */
	
	
	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}
	
	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);
	
	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }
	
	  tag.appendChild(document.createTextNode(''));
	  return tag;
	}
	
	var StyleSheet =
	/*#__PURE__*/
	function () {
	  function StyleSheet(options) {
	    this.isSpeedy = options.speedy === undefined ? ("production") === 'production' : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets
	
	    this.key = options.key;
	    this.container = options.container;
	    this.before = null;
	  }
	
	  var _proto = StyleSheet.prototype;
	
	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      var _tag = createStyleElement(this);
	
	      var before;
	
	      if (this.tags.length === 0) {
	        before = this.before;
	      } else {
	        before = this.tags[this.tags.length - 1].nextSibling;
	      }
	
	      this.container.insertBefore(_tag, before);
	      this.tags.push(_tag);
	    }
	
	    var tag = this.tags[this.tags.length - 1];
	
	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);
	
	      try {
	        // this is a really hot path
	        // we check the second character first because having "i"
	        // as the second character will happen less often than
	        // having "@" as the first character
	        var isImportRule = rule.charCodeAt(1) === 105 && rule.charCodeAt(0) === 64; // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	
	        sheet.insertRule(rule, // we need to insert @import rules before anything else
	        // otherwise there will be an error
	        // technically this means that the @import rules will
	        // _usually_(not always since there could be multiple style tags)
	        // be the first ones in prod and generally later in dev
	        // this shouldn't really matter in the real world though
	        // @import is generally only used for font faces from google fonts and etc.
	        // so while this could be technically correct then it would be slower and larger
	        // for a tiny bit of correctness that won't matter in the real world
	        isImportRule ? 0 : sheet.cssRules.length);
	      } catch (e) {
	        if (false) {
	          console.warn("There was a problem inserting the following rule: \"" + rule + "\"", e);
	        }
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }
	
	    this.ctr++;
	  };
	
	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;
	  };
	
	  return StyleSheet;
	}();
	
	exports.StyleSheet = StyleSheet;


/***/ },
/* 30 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function stylis_min (W) {
	  function M(d, c, e, h, a) {
	    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
	      g = e.charCodeAt(l);
	      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);
	
	      if (0 === b + n + v + m) {
	        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
	          switch (g) {
	            case 32:
	            case 9:
	            case 59:
	            case 13:
	            case 10:
	              break;
	
	            default:
	              f += e.charAt(l);
	          }
	
	          g = 59;
	        }
	
	        switch (g) {
	          case 123:
	            f = f.trim();
	            q = f.charCodeAt(0);
	            k = 1;
	
	            for (t = ++l; l < B;) {
	              switch (g = e.charCodeAt(l)) {
	                case 123:
	                  k++;
	                  break;
	
	                case 125:
	                  k--;
	                  break;
	
	                case 47:
	                  switch (g = e.charCodeAt(l + 1)) {
	                    case 42:
	                    case 47:
	                      a: {
	                        for (u = l + 1; u < J; ++u) {
	                          switch (e.charCodeAt(u)) {
	                            case 47:
	                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
	                                l = u + 1;
	                                break a;
	                              }
	
	                              break;
	
	                            case 10:
	                              if (47 === g) {
	                                l = u + 1;
	                                break a;
	                              }
	
	                          }
	                        }
	
	                        l = u;
	                      }
	
	                  }
	
	                  break;
	
	                case 91:
	                  g++;
	
	                case 40:
	                  g++;
	
	                case 34:
	                case 39:
	                  for (; l++ < J && e.charCodeAt(l) !== g;) {
	                  }
	
	              }
	
	              if (0 === k) break;
	              l++;
	            }
	
	            k = e.substring(t, l);
	            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));
	
	            switch (q) {
	              case 64:
	                0 < r && (f = f.replace(N, ''));
	                g = f.charCodeAt(1);
	
	                switch (g) {
	                  case 100:
	                  case 109:
	                  case 115:
	                  case 45:
	                    r = c;
	                    break;
	
	                  default:
	                    r = O;
	                }
	
	                k = M(c, r, k, g, a + 1);
	                t = k.length;
	                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
	                if (0 < t) switch (g) {
	                  case 115:
	                    f = f.replace(da, ea);
	
	                  case 100:
	                  case 109:
	                  case 45:
	                    k = f + '{' + k + '}';
	                    break;
	
	                  case 107:
	                    f = f.replace(fa, '$1 $2');
	                    k = f + '{' + k + '}';
	                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
	                    break;
	
	                  default:
	                    k = f + k, 112 === h && (k = (p += k, ''));
	                } else k = '';
	                break;
	
	              default:
	                k = M(c, X(c, f, I), k, h, a + 1);
	            }
	
	            F += k;
	            k = I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	            break;
	
	          case 125:
	          case 59:
	            f = (0 < r ? f.replace(N, '') : f).trim();
	            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
	              case 0:
	                break;
	
	              case 64:
	                if (105 === g || 99 === g) {
	                  G += f + e.charAt(l);
	                  break;
	                }
	
	              default:
	                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
	            }
	            I = r = u = q = 0;
	            f = '';
	            g = e.charCodeAt(++l);
	        }
	      }
	
	      switch (g) {
	        case 13:
	        case 10:
	          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
	          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
	          z = 1;
	          D++;
	          break;
	
	        case 59:
	        case 125:
	          if (0 === b + n + v + m) {
	            z++;
	            break;
	          }
	
	        default:
	          z++;
	          y = e.charAt(l);
	
	          switch (g) {
	            case 9:
	            case 32:
	              if (0 === n + m + b) switch (x) {
	                case 44:
	                case 58:
	                case 9:
	                case 32:
	                  y = '';
	                  break;
	
	                default:
	                  32 !== g && (y = ' ');
	              }
	              break;
	
	            case 0:
	              y = '\\0';
	              break;
	
	            case 12:
	              y = '\\f';
	              break;
	
	            case 11:
	              y = '\\v';
	              break;
	
	            case 38:
	              0 === n + b + m && (r = I = 1, y = '\f' + y);
	              break;
	
	            case 108:
	              if (0 === n + b + m + E && 0 < u) switch (l - u) {
	                case 2:
	                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);
	
	                case 8:
	                  111 === K && (E = K);
	              }
	              break;
	
	            case 58:
	              0 === n + b + m && (u = l);
	              break;
	
	            case 44:
	              0 === b + v + n + m && (r = 1, y += '\r');
	              break;
	
	            case 34:
	            case 39:
	              0 === b && (n = n === g ? 0 : 0 === n ? g : n);
	              break;
	
	            case 91:
	              0 === n + b + v && m++;
	              break;
	
	            case 93:
	              0 === n + b + v && m--;
	              break;
	
	            case 41:
	              0 === n + b + m && v--;
	              break;
	
	            case 40:
	              if (0 === n + b + m) {
	                if (0 === q) switch (2 * x + 3 * K) {
	                  case 533:
	                    break;
	
	                  default:
	                    q = 1;
	                }
	                v++;
	              }
	
	              break;
	
	            case 64:
	              0 === b + v + n + m + u + k && (k = 1);
	              break;
	
	            case 42:
	            case 47:
	              if (!(0 < n + m + v)) switch (b) {
	                case 0:
	                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {
	                    case 235:
	                      b = 47;
	                      break;
	
	                    case 220:
	                      t = l, b = 42;
	                  }
	
	                  break;
	
	                case 42:
	                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
	              }
	          }
	
	          0 === b && (f += y);
	      }
	
	      K = x;
	      x = g;
	      l++;
	    }
	
	    t = p.length;
	
	    if (0 < t) {
	      r = c;
	      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
	      p = r.join(',') + '{' + p + '}';
	
	      if (0 !== w * E) {
	        2 !== w || L(p, 2) || (E = 0);
	
	        switch (E) {
	          case 111:
	            p = p.replace(ha, ':-moz-$1') + p;
	            break;
	
	          case 112:
	            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
	        }
	
	        E = 0;
	      }
	    }
	
	    return G + p + F;
	  }
	
	  function X(d, c, e) {
	    var h = c.trim().split(ia);
	    c = h;
	    var a = h.length,
	        m = d.length;
	
	    switch (m) {
	      case 0:
	      case 1:
	        var b = 0;
	
	        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
	          c[b] = Z(d, c[b], e).trim();
	        }
	
	        break;
	
	      default:
	        var v = b = 0;
	
	        for (c = []; b < a; ++b) {
	          for (var n = 0; n < m; ++n) {
	            c[v++] = Z(d[n] + ' ', h[b], e).trim();
	          }
	        }
	
	    }
	
	    return c;
	  }
	
	  function Z(d, c, e) {
	    var h = c.charCodeAt(0);
	    33 > h && (h = (c = c.trim()).charCodeAt(0));
	
	    switch (h) {
	      case 38:
	        return c.replace(F, '$1' + d.trim());
	
	      case 58:
	        return d.trim() + c.replace(F, '$1' + d.trim());
	
	      default:
	        if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
	    }
	
	    return d + c;
	  }
	
	  function P(d, c, e, h) {
	    var a = d + ';',
	        m = 2 * c + 3 * e + 4 * h;
	
	    if (944 === m) {
	      d = a.indexOf(':', 9) + 1;
	      var b = a.substring(d, a.length - 1).trim();
	      b = a.substring(0, d).trim() + b + ';';
	      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
	    }
	
	    if (0 === w || 2 === w && !L(a, 1)) return a;
	
	    switch (m) {
	      case 1015:
	        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;
	
	      case 951:
	        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;
	
	      case 963:
	        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;
	
	      case 1009:
	        if (100 !== a.charCodeAt(4)) break;
	
	      case 969:
	      case 942:
	        return '-webkit-' + a + a;
	
	      case 978:
	        return '-webkit-' + a + '-moz-' + a + a;
	
	      case 1019:
	      case 983:
	        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;
	
	      case 883:
	        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
	        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
	        break;
	
	      case 932:
	        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
	          case 103:
	            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;
	
	          case 115:
	            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;
	
	          case 98:
	            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
	        }
	        return '-webkit-' + a + '-ms-' + a + a;
	
	      case 964:
	        return '-webkit-' + a + '-ms-flex-' + a + a;
	
	      case 1023:
	        if (99 !== a.charCodeAt(8)) break;
	        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
	        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;
	
	      case 1005:
	        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;
	
	      case 1e3:
	        b = a.substring(13).trim();
	        c = b.indexOf('-') + 1;
	
	        switch (b.charCodeAt(0) + b.charCodeAt(c)) {
	          case 226:
	            b = a.replace(G, 'tb');
	            break;
	
	          case 232:
	            b = a.replace(G, 'tb-rl');
	            break;
	
	          case 220:
	            b = a.replace(G, 'lr');
	            break;
	
	          default:
	            return a;
	        }
	
	        return '-webkit-' + a + '-ms-' + b + a;
	
	      case 1017:
	        if (-1 === a.indexOf('sticky', 9)) break;
	
	      case 975:
	        c = (a = d).length - 10;
	        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();
	
	        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
	          case 203:
	            if (111 > b.charCodeAt(8)) break;
	
	          case 115:
	            a = a.replace(b, '-webkit-' + b) + ';' + a;
	            break;
	
	          case 207:
	          case 102:
	            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
	        }
	
	        return a + ';';
	
	      case 938:
	        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
	          case 105:
	            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;
	
	          case 115:
	            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;
	
	          default:
	            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
	        }
	        break;
	
	      case 973:
	      case 989:
	        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;
	
	      case 931:
	      case 953:
	        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
	        break;
	
	      case 962:
	        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
	    }
	
	    return a;
	  }
	
	  function L(d, c) {
	    var e = d.indexOf(1 === c ? ':' : '{'),
	        h = d.substring(0, 3 !== c ? e : 10);
	    e = d.substring(e + 1, d.length - 1);
	    return R(2 !== c ? h : h.replace(na, '$1'), e, c);
	  }
	
	  function ea(d, c) {
	    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
	    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
	  }
	
	  function H(d, c, e, h, a, m, b, v, n, q) {
	    for (var g = 0, x = c, w; g < A; ++g) {
	      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
	        case void 0:
	        case !1:
	        case !0:
	        case null:
	          break;
	
	        default:
	          x = w;
	      }
	    }
	
	    if (x !== c) return x;
	  }
	
	  function T(d) {
	    switch (d) {
	      case void 0:
	      case null:
	        A = S.length = 0;
	        break;
	
	      default:
	        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
	          T(d[c]);
	        } else Y = !!d | 0;
	    }
	
	    return T;
	  }
	
	  function U(d) {
	    d = d.prefix;
	    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
	    return U;
	  }
	
	  function B(d, c) {
	    var e = d;
	    33 > e.charCodeAt(0) && (e = e.trim());
	    V = e;
	    e = [V];
	
	    if (0 < A) {
	      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
	      void 0 !== h && 'string' === typeof h && (c = h);
	    }
	
	    var a = M(O, e, c, 0, 0);
	    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
	    V = '';
	    E = 0;
	    z = D = 1;
	    return a;
	  }
	
	  var ca = /^\0+/g,
	      N = /[\0\r\f]/g,
	      aa = /: */g,
	      ka = /zoo|gra/,
	      ma = /([,: ])(transform)/g,
	      ia = /,\r+?/g,
	      F = /([\t\r\n ])*\f?&/g,
	      fa = /@(k\w+)\s*(\S*)\s*/,
	      Q = /::(place)/g,
	      ha = /:(read-only)/g,
	      G = /[svh]\w+-[tblr]{2}/,
	      da = /\(\s*(.*)\s*\)/g,
	      oa = /([\s\S]*?);/g,
	      ba = /-self|flex-/g,
	      na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
	      la = /stretch|:\s*\w+\-(?:conte|avail)/,
	      ja = /([^-])(image-set\()/,
	      z = 1,
	      D = 1,
	      E = 0,
	      w = 1,
	      O = [],
	      S = [],
	      A = 0,
	      R = null,
	      Y = 0,
	      V = '';
	  B.use = T;
	  B.set = U;
	  void 0 !== W && U(W);
	  return B;
	}
	
	exports.default = stylis_min;


/***/ },
/* 31 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var unitlessKeys = {
	  animationIterationCount: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};
	
	exports.default = unitlessKeys;


/***/ },
/* 32 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var isBrowser = "object" !== 'undefined';
	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className]);
	    } else {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;
	
	  if ( // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false || // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }
	
	  if (cache.inserted[serialized.name] === undefined) {
	    var current = serialized;
	
	    do {
	      var maybeStyles = cache.insert("." + className, current, cache.sheet, true);
	
	      current = current.next;
	    } while (current !== undefined);
	  }
	};
	
	exports.getRegisteredStyles = getRegisteredStyles;
	exports.insertStyles = insertStyles;


/***/ },
/* 33 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var weakMemoize = function weakMemoize(func) {
	  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
	  var cache = new WeakMap();
	  return function (arg) {
	    if (cache.has(arg)) {
	      // $FlowFixMe
	      return cache.get(arg);
	    }
	
	    var ret = func(arg);
	    cache.set(arg, ret);
	    return ret;
	  };
	};
	
	exports.default = weakMemoize;


/***/ },
/* 34 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	// Use the fastest means possible to execute a task in its own turn, with
	// priority over other events including IO, animation, reflow, and redraw
	// events in browsers.
	//
	// An exception thrown by a task will permanently interrupt the processing of
	// subsequent tasks. The higher level `asap` function ensures that if an
	// exception is thrown by a task, that the task queue will continue flushing as
	// soon as possible, but if you use `rawAsap` directly, you are responsible to
	// either ensure that no exceptions are thrown from your task, or to manually
	// call `rawAsap.requestFlush` if an exception is thrown.
	module.exports = rawAsap;
	function rawAsap(task) {
	    if (!queue.length) {
	        requestFlush();
	        flushing = true;
	    }
	    // Equivalent to push, but avoids a function call.
	    queue[queue.length] = task;
	}
	
	var queue = [];
	// Once a flush has been requested, no further calls to `requestFlush` are
	// necessary until the next `flush` completes.
	var flushing = false;
	// `requestFlush` is an implementation-specific method that attempts to kick
	// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
	// the event queue before yielding to the browser's own event loop.
	var requestFlush;
	// The position of the next task to execute in the task queue. This is
	// preserved between calls to `flush` so that it can be resumed if
	// a task throws an exception.
	var index = 0;
	// If a task schedules additional tasks recursively, the task queue can grow
	// unbounded. To prevent memory exhaustion, the task queue will periodically
	// truncate already-completed tasks.
	var capacity = 1024;
	
	// The flush function processes all tasks that have been scheduled with
	// `rawAsap` unless and until one of those tasks throws an exception.
	// If a task throws an exception, `flush` ensures that its state will remain
	// consistent and will resume where it left off when called again.
	// However, `flush` does not make any arrangements to be called again if an
	// exception is thrown.
	function flush() {
	    while (index < queue.length) {
	        var currentIndex = index;
	        // Advance the index before calling the task. This ensures that we will
	        // begin flushing on the next task the task throws an error.
	        index = index + 1;
	        queue[currentIndex].call();
	        // Prevent leaking memory for long chains of recursive calls to `asap`.
	        // If we call `asap` within tasks scheduled by `asap`, the queue will
	        // grow, but to avoid an O(n) walk for every task we execute, we don't
	        // shift tasks off the queue after they have been executed.
	        // Instead, we periodically shift 1024 tasks off the queue.
	        if (index > capacity) {
	            // Manually shift all values starting at the index back to the
	            // beginning of the queue.
	            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
	                queue[scan] = queue[scan + index];
	            }
	            queue.length -= index;
	            index = 0;
	        }
	    }
	    queue.length = 0;
	    index = 0;
	    flushing = false;
	}
	
	// `requestFlush` is implemented using a strategy based on data collected from
	// every available SauceLabs Selenium web driver worker at time of writing.
	// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593
	
	// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
	// have WebKitMutationObserver but not un-prefixed MutationObserver.
	// Must use `global` or `self` instead of `window` to work in both frames and web
	// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
	
	/* globals self */
	var scope = typeof global !== "undefined" ? global : self;
	var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;
	
	// MutationObservers are desirable because they have high priority and work
	// reliably everywhere they are implemented.
	// They are implemented in all modern browsers.
	//
	// - Android 4-4.3
	// - Chrome 26-34
	// - Firefox 14-29
	// - Internet Explorer 11
	// - iPad Safari 6-7.1
	// - iPhone Safari 7-7.1
	// - Safari 6-7
	if (typeof BrowserMutationObserver === "function") {
	    requestFlush = makeRequestCallFromMutationObserver(flush);
	
	// MessageChannels are desirable because they give direct access to the HTML
	// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
	// 11-12, and in web workers in many engines.
	// Although message channels yield to any queued rendering and IO tasks, they
	// would be better than imposing the 4ms delay of timers.
	// However, they do not work reliably in Internet Explorer or Safari.
	
	// Internet Explorer 10 is the only browser that has setImmediate but does
	// not have MutationObservers.
	// Although setImmediate yields to the browser's renderer, it would be
	// preferrable to falling back to setTimeout since it does not have
	// the minimum 4ms penalty.
	// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
	// Desktop to a lesser extent) that renders both setImmediate and
	// MessageChannel useless for the purposes of ASAP.
	// https://github.com/kriskowal/q/issues/396
	
	// Timers are implemented universally.
	// We fall back to timers in workers in most engines, and in foreground
	// contexts in the following browsers.
	// However, note that even this simple case requires nuances to operate in a
	// broad spectrum of browsers.
	//
	// - Firefox 3-13
	// - Internet Explorer 6-9
	// - iPad Safari 4.3
	// - Lynx 2.8.7
	} else {
	    requestFlush = makeRequestCallFromTimer(flush);
	}
	
	// `requestFlush` requests that the high priority event queue be flushed as
	// soon as possible.
	// This is useful to prevent an error thrown in a task from stalling the event
	// queue if the exception handled by Node.js’s
	// `process.on("uncaughtException")` or by a domain.
	rawAsap.requestFlush = requestFlush;
	
	// To request a high priority event, we induce a mutation observer by toggling
	// the text of a text node between "1" and "-1".
	function makeRequestCallFromMutationObserver(callback) {
	    var toggle = 1;
	    var observer = new BrowserMutationObserver(callback);
	    var node = document.createTextNode("");
	    observer.observe(node, {characterData: true});
	    return function requestCall() {
	        toggle = -toggle;
	        node.data = toggle;
	    };
	}
	
	// The message channel technique was discovered by Malte Ubl and was the
	// original foundation for this library.
	// http://www.nonblocking.io/2011/06/windownexttick.html
	
	// Safari 6.0.5 (at least) intermittently fails to create message ports on a
	// page's first load. Thankfully, this version of Safari supports
	// MutationObservers, so we don't need to fall back in that case.
	
	// function makeRequestCallFromMessageChannel(callback) {
	//     var channel = new MessageChannel();
	//     channel.port1.onmessage = callback;
	//     return function requestCall() {
	//         channel.port2.postMessage(0);
	//     };
	// }
	
	// For reasons explained above, we are also unable to use `setImmediate`
	// under any circumstances.
	// Even if we were, there is another bug in Internet Explorer 10.
	// It is not sufficient to assign `setImmediate` to `requestFlush` because
	// `setImmediate` must be called *by name* and therefore must be wrapped in a
	// closure.
	// Never forget.
	
	// function makeRequestCallFromSetImmediate(callback) {
	//     return function requestCall() {
	//         setImmediate(callback);
	//     };
	// }
	
	// Safari 6.0 has a problem where timers will get lost while the user is
	// scrolling. This problem does not impact ASAP because Safari 6.0 supports
	// mutation observers, so that implementation is used instead.
	// However, if we ever elect to use timers in Safari, the prevalent work-around
	// is to add a scroll event listener that calls for a flush.
	
	// `setTimeout` does not call the passed callback if the delay is less than
	// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
	// even then.
	
	function makeRequestCallFromTimer(callback) {
	    return function requestCall() {
	        // We dispatch a timeout with a specified delay of 0 for engines that
	        // can reliably accommodate that request. This will usually be snapped
	        // to a 4 milisecond delay, but once we're flushing, there's no delay
	        // between events.
	        var timeoutHandle = setTimeout(handleTimer, 0);
	        // However, since this timer gets frequently dropped in Firefox
	        // workers, we enlist an interval handle that will try to fire
	        // an event 20 times per second until it succeeds.
	        var intervalHandle = setInterval(handleTimer, 50);
	
	        function handleTimer() {
	            // Whichever timer succeeds will cancel both timers and
	            // execute the callback.
	            clearTimeout(timeoutHandle);
	            clearInterval(intervalHandle);
	            callback();
	        }
	    };
	}
	
	// This is for `asap.js` only.
	// Its name will be periodically randomized to break any code that depends on
	// its existence.
	rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;
	
	// ASAP was originally a nextTick shim included in Q. This was factored out
	// into this ASAP package. It was later adapted to RSVP which made further
	// amendments. These decisions, particularly to marginalize MessageChannel and
	// to capture the MutationObserver implementation in a closure, were integrated
	// back into ASAP proper.
	// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(36);

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	var bind = __webpack_require__(14);
	var Axios = __webpack_require__(38);
	var mergeConfig = __webpack_require__(12);
	var defaults = __webpack_require__(13);
	
	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */
	function createInstance(defaultConfig) {
	  var context = new Axios(defaultConfig);
	  var instance = bind(Axios.prototype.request, context);
	
	  // Copy axios.prototype to instance
	  utils.extend(instance, Axios.prototype, context);
	
	  // Copy context to instance
	  utils.extend(instance, context);
	
	  return instance;
	}
	
	// Create the default instance to be exported
	var axios = createInstance(defaults);
	
	// Expose Axios class to allow class inheritance
	axios.Axios = Axios;
	
	// Factory for creating new instances
	axios.create = function create(instanceConfig) {
	  return createInstance(mergeConfig(axios.defaults, instanceConfig));
	};
	
	// Expose Cancel & CancelToken
	axios.Cancel = __webpack_require__(9);
	axios.CancelToken = __webpack_require__(37);
	axios.isCancel = __webpack_require__(10);
	
	// Expose all/spread
	axios.all = function all(promises) {
	  return Promise.all(promises);
	};
	axios.spread = __webpack_require__(51);
	
	module.exports = axios;
	
	// Allow use of default import syntax in TypeScript
	module.exports.default = axios;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Cancel = __webpack_require__(9);
	
	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */
	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }
	
	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });
	
	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }
	
	    token.reason = new Cancel(message);
	    resolvePromise(token.reason);
	  });
	}
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};
	
	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */
	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};
	
	module.exports = CancelToken;


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	var buildURL = __webpack_require__(15);
	var InterceptorManager = __webpack_require__(39);
	var dispatchRequest = __webpack_require__(41);
	var mergeConfig = __webpack_require__(12);
	
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */
	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager(),
	    response: new InterceptorManager()
	  };
	}
	
	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */
	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = arguments[1] || {};
	    config.url = arguments[0];
	  } else {
	    config = config || {};
	  }
	
	  config = mergeConfig(this.defaults, config);
	
	  // Set config.method
	  if (config.method) {
	    config.method = config.method.toLowerCase();
	  } else if (this.defaults.method) {
	    config.method = this.defaults.method.toLowerCase();
	  } else {
	    config.method = 'get';
	  }
	
	  // Hook up interceptors middleware
	  var chain = [dispatchRequest, undefined];
	  var promise = Promise.resolve(config);
	
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    chain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    chain.push(interceptor.fulfilled, interceptor.rejected);
	  });
	
	  while (chain.length) {
	    promise = promise.then(chain.shift(), chain.shift());
	  }
	
	  return promise;
	};
	
	Axios.prototype.getUri = function getUri(config) {
	  config = mergeConfig(this.defaults, config);
	  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
	};
	
	// Provide aliases for supported request methods
	utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url
	    }));
	  };
	});
	
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function(url, data, config) {
	    return this.request(utils.merge(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});
	
	module.exports = Axios;


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	
	function InterceptorManager() {
	  this.handlers = [];
	}
	
	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */
	InterceptorManager.prototype.use = function use(fulfilled, rejected) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected
	  });
	  return this.handlers.length - 1;
	};
	
	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */
	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};
	
	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */
	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};
	
	module.exports = InterceptorManager;


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isAbsoluteURL = __webpack_require__(47);
	var combineURLs = __webpack_require__(45);
	
	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 * @returns {string} The combined full path
	 */
	module.exports = function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }
	  return requestedURL;
	};


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	var transformData = __webpack_require__(44);
	var isCancel = __webpack_require__(10);
	var defaults = __webpack_require__(13);
	
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */
	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}
	
	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */
	module.exports = function dispatchRequest(config) {
	  throwIfCancellationRequested(config);
	
	  // Ensure headers exist
	  config.headers = config.headers || {};
	
	  // Transform request data
	  config.data = transformData(
	    config.data,
	    config.headers,
	    config.transformRequest
	  );
	
	  // Flatten headers
	  config.headers = utils.merge(
	    config.headers.common || {},
	    config.headers[config.method] || {},
	    config.headers
	  );
	
	  utils.forEach(
	    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
	    function cleanHeaderConfig(method) {
	      delete config.headers[method];
	    }
	  );
	
	  var adapter = config.adapter || defaults.adapter;
	
	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config);
	
	    // Transform response data
	    response.data = transformData(
	      response.data,
	      response.headers,
	      config.transformResponse
	    );
	
	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config);
	
	      // Transform response data
	      if (reason && reason.response) {
	        reason.response.data = transformData(
	          reason.response.data,
	          reason.response.headers,
	          config.transformResponse
	        );
	      }
	    }
	
	    return Promise.reject(reason);
	  });
	};


/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */
	module.exports = function enhanceError(error, config, code, request, response) {
	  error.config = config;
	  if (code) {
	    error.code = code;
	  }
	
	  error.request = request;
	  error.response = response;
	  error.isAxiosError = true;
	
	  error.toJSON = function() {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: this.config,
	      code: this.code
	    };
	  };
	  return error;
	};


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var createError = __webpack_require__(11);
	
	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */
	module.exports = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;
	  if (!validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError(
	      'Request failed with status code ' + response.status,
	      response.config,
	      null,
	      response.request,
	      response
	    ));
	  }
	};


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	
	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */
	module.exports = function transformData(data, headers, fns) {
	  /*eslint no-param-reassign:0*/
	  utils.forEach(fns, function transform(fn) {
	    data = fn(data, headers);
	  });
	
	  return data;
	};


/***/ },
/* 45 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */
	module.exports = function combineURLs(baseURL, relativeURL) {
	  return relativeURL
	    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
	    : baseURL;
	};


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs support document.cookie
	    (function standardBrowserEnv() {
	      return {
	        write: function write(name, value, expires, path, domain, secure) {
	          var cookie = [];
	          cookie.push(name + '=' + encodeURIComponent(value));
	
	          if (utils.isNumber(expires)) {
	            cookie.push('expires=' + new Date(expires).toGMTString());
	          }
	
	          if (utils.isString(path)) {
	            cookie.push('path=' + path);
	          }
	
	          if (utils.isString(domain)) {
	            cookie.push('domain=' + domain);
	          }
	
	          if (secure === true) {
	            cookie.push('secure');
	          }
	
	          document.cookie = cookie.join('; ');
	        },
	
	        read: function read(name) {
	          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	          return (match ? decodeURIComponent(match[3]) : null);
	        },
	
	        remove: function remove(name) {
	          this.write(name, '', Date.now() - 86400000);
	        }
	      };
	    })() :
	
	  // Non standard browser env (web workers, react-native) lack needed support.
	    (function nonStandardBrowserEnv() {
	      return {
	        write: function write() {},
	        read: function read() { return null; },
	        remove: function remove() {}
	      };
	    })()
	);


/***/ },
/* 47 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */
	module.exports = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	
	module.exports = (
	  utils.isStandardBrowserEnv() ?
	
	  // Standard browser envs have full support of the APIs needed to test
	  // whether the request URL is of the same origin as current location.
	    (function standardBrowserEnv() {
	      var msie = /(msie|trident)/i.test(navigator.userAgent);
	      var urlParsingNode = document.createElement('a');
	      var originURL;
	
	      /**
	    * Parse a URL to discover it's components
	    *
	    * @param {String} url The URL to be parsed
	    * @returns {Object}
	    */
	      function resolveURL(url) {
	        var href = url;
	
	        if (msie) {
	        // IE needs attribute set twice to normalize properties
	          urlParsingNode.setAttribute('href', href);
	          href = urlParsingNode.href;
	        }
	
	        urlParsingNode.setAttribute('href', href);
	
	        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	        return {
	          href: urlParsingNode.href,
	          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	          host: urlParsingNode.host,
	          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	          hostname: urlParsingNode.hostname,
	          port: urlParsingNode.port,
	          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
	            urlParsingNode.pathname :
	            '/' + urlParsingNode.pathname
	        };
	      }
	
	      originURL = resolveURL(window.location.href);
	
	      /**
	    * Determine if a URL shares the same origin as the current location
	    *
	    * @param {String} requestURL The URL to test
	    * @returns {boolean} True if URL shares the same origin, otherwise false
	    */
	      return function isURLSameOrigin(requestURL) {
	        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
	        return (parsed.protocol === originURL.protocol &&
	            parsed.host === originURL.host);
	      };
	    })() :
	
	  // Non standard browser envs (web workers, react-native) lack needed support.
	    (function nonStandardBrowserEnv() {
	      return function isURLSameOrigin() {
	        return true;
	      };
	    })()
	);


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	
	module.exports = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(1);
	
	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers
	var ignoreDuplicateOf = [
	  'age', 'authorization', 'content-length', 'content-type', 'etag',
	  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
	  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
	  'referer', 'retry-after', 'user-agent'
	];
	
	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */
	module.exports = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;
	
	  if (!headers) { return parsed; }
	
	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));
	
	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }
	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });
	
	  return parsed;
	};


/***/ },
/* 51 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */
	module.exports = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _regenerator = __webpack_require__(53);
	
	var _regenerator2 = _interopRequireDefault(_regenerator);
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _react = __webpack_require__(2);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(7);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reactGlobe = __webpack_require__(74);
	
	var _reactGlobe2 = _interopRequireDefault(_reactGlobe);
	
	var _axios = __webpack_require__(35);
	
	var _axios2 = _interopRequireDefault(_axios);
	
	var _reactLoadingOverlay = __webpack_require__(75);
	
	var _reactLoadingOverlay2 = _interopRequireDefault(_reactLoadingOverlay);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }
	
	function getTooltipContent(marker) {
	  return marker.country + ': ' + (marker.province ? marker.province : '') + '  Infected: ' + marker.value + ',\n    Death: ' + marker.deaths + '\n    Correlation: ' + marker.correlation.toFixed(2) + '%';
	}
	
	function App() {
	  var getLocations = function () {
	    var _ref = _asyncToGenerator(_regenerator2.default.mark(function _callee() {
	      var resp;
	      return _regenerator2.default.wrap(function _callee$(_context) {
	        while (1) {
	          switch (_context.prev = _context.next) {
	            case 0:
	              _context.prev = 0;
	              _context.next = 3;
	              return _axios2.default.get('https://coronavirus-tracker-api.herokuapp.com/v2/locations');
	
	            case 3:
	              resp = _context.sent;
	
	              resp = resp.data;
	              formatLocations(resp.locations);
	              _context.next = 11;
	              break;
	
	            case 8:
	              _context.prev = 8;
	              _context.t0 = _context['catch'](0);
	
	              console.log(_context.t0);
	
	            case 11:
	            case 'end':
	              return _context.stop();
	          }
	        }
	      }, _callee, this, [[0, 8]]);
	    }));
	
	    return function getLocations() {
	      return _ref.apply(this, arguments);
	    };
	  }();
	
	  var _useState = (0, _react.useState)([]),
	      _useState2 = _slicedToArray(_useState, 2),
	      markers = _useState2[0],
	      setMarkers = _useState2[1];
	
	  var _useState3 = (0, _react.useState)(null),
	      _useState4 = _slicedToArray(_useState3, 2),
	      event = _useState4[0],
	      setEvent = _useState4[1];
	
	  var _useState5 = (0, _react.useState)(null),
	      _useState6 = _slicedToArray(_useState5, 2),
	      details = _useState6[0],
	      setDetails = _useState6[1];
	
	  function onClickMarker(marker, markerObject, event) {
	    setEvent({
	      type: 'CLICK',
	      marker: marker,
	      markerObjectID: markerObject.uuid,
	      pointerEventPosition: { x: event.clientX, y: event.clientY }
	    });
	    setDetails(getTooltipContent(marker));
	  }
	  function onDefocus(previousCoordinates, event) {
	    setEvent({
	      type: 'DEFOCUS',
	      previousCoordinates: previousCoordinates,
	      pointerEventPosition: { x: event.clientX, y: event.clientY }
	    });
	    setDetails(null);
	  }
	
	
	  function formatLocations(locations) {
	    var markers = locations.map(function (l) {
	      return {
	        coordinates: Object.values(l.coordinates),
	        country: l.country,
	        province: l.province ? l.province : null,
	        value: l.latest.confirmed,
	        deaths: l.latest.deaths,
	        correlation: l.latest.deaths / l.latest.confirmed * 100,
	        color: l.latest.deaths / l.latest.confirmed * 100 > 5 ? 'darkred' : l.latest.deaths / l.latest.confirmed * 100 > 2 ? 'red' : 'yellow'
	      };
	    });
	    setMarkers(markers);
	  }
	  (0, _react.useEffect)(function () {
	    getLocations();
	  }, []);
	
	  return _react2.default.createElement(
	    _reactLoadingOverlay2.default,
	    {
	      active: markers.length === 0,
	      spinner: true,
	      text: 'Loading COVID-19 contamination data...'
	    },
	    _react2.default.createElement(
	      'div',
	      { style: { width: '100vw', height: '100vh' } },
	      _react2.default.createElement(_reactGlobe2.default, {
	        markers: markers,
	        markerOptions: {
	          getTooltipContent: getTooltipContent,
	          activeScale: 1.2,
	          radiusScaleRange: [0.01, 0.05]
	        },
	        onClickMarker: onClickMarker,
	        onDefocus: onDefocus,
	        lightOptions: {
	          ambientLightColor: 'red',
	          ambientLightIntensity: 1
	        }
	      }),
	      details && _react2.default.createElement(
	        'div',
	        {
	          style: {
	            background: 'black',
	            position: 'absolute',
	            fontSize: 20,
	            top: 0,
	            right: 0,
	            padding: 12,
	            opacity: 0.8,
	            color: 'white',
	            borderRadius: '5px'
	          }
	        },
	        _react2.default.createElement(
	          'p',
	          null,
	          details
	        )
	      )
	    )
	  );
	}
	
	var rootElement = document.getElementById('root');
	_reactDom2.default.render(_react2.default.createElement(App, null), rootElement);

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(54);


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be
	// kept identical to the way it is obtained in runtime.js
	var g =
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this;
	
	// Use `getOwnPropertyNames` because not all browsers support calling
	// `hasOwnProperty` on the global `self` object in a worker. See #183.
	var hadRuntime = g.regeneratorRuntime &&
	  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
	
	// Save the old regeneratorRuntime in case it needs to be restored later.
	var oldRuntime = hadRuntime && g.regeneratorRuntime;
	
	// Force reevalutation of runtime.js.
	g.regeneratorRuntime = undefined;
	
	module.exports = __webpack_require__(55);
	
	if (hadRuntime) {
	  // Restore the original runtime.
	  g.regeneratorRuntime = oldRuntime;
	} else {
	  // Remove the global property added by runtime.js.
	  try {
	    delete g.regeneratorRuntime;
	  } catch(e) {
	    g.regeneratorRuntime = undefined;
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 55 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);
	
	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };
	
	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }
	
	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunctionPrototype[toStringTagSymbol] =
	    GeneratorFunction.displayName = "GeneratorFunction";
	
	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      prototype[method] = function(arg) {
	        return this._invoke(method, arg);
	      };
	    });
	  }
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      if (!(toStringTagSymbol in genFun)) {
	        genFun[toStringTagSymbol] = "GeneratorFunction";
	      }
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  runtime.awrap = function(arg) {
	    return { __await: arg };
	  };
	
	  function AsyncIterator(generator) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return Promise.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }
	
	        return Promise.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration. If the Promise is rejected, however, the
	          // result for this iteration will be rejected with the same
	          // reason. Note that rejections of yielded Promises are not
	          // thrown back into the generator function, as is the case
	          // when an awaited Promise is rejected. This difference in
	          // behavior between yield and await is important, because it
	          // allows the consumer to decide what to do with the yielded
	          // rejection (swallow it and continue, manually .throw it back
	          // into the generator, abandon iteration, whatever). With
	          // await, by contrast, there is no opportunity to examine the
	          // rejection reason outside the generator function, so the
	          // only option is to throw it from the await expression, and
	          // let the generator function handle the exception.
	          result.value = unwrapped;
	          resolve(result);
	        }, reject);
	      }
	    }
	
	    if (typeof global.process === "object" && global.process.domain) {
	      invoke = global.process.domain.bind(invoke);
	    }
	
	    var previousPromise;
	
	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new Promise(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }
	
	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }
	
	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }
	
	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  runtime.AsyncIterator = AsyncIterator;
	
	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList)
	    );
	
	    return runtime.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }
	
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      context.method = method;
	      context.arg = arg;
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }
	
	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;
	
	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }
	
	          context.dispatchException(context.arg);
	
	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          if (record.arg === ContinueSentinel) {
	            continue;
	          }
	
	          return {
	            value: record.arg,
	            done: context.done
	          };
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }
	
	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;
	
	      if (context.method === "throw") {
	        if (delegate.iterator.return) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined;
	          maybeInvokeDelegate(delegate, context);
	
	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }
	
	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }
	
	      return ContinueSentinel;
	    }
	
	    var record = tryCatch(method, delegate.iterator, context.arg);
	
	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    var info = record.arg;
	
	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }
	
	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;
	
	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;
	
	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined;
	      }
	
	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }
	
	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }
	
	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);
	
	  Gp[toStringTagSymbol] = "Generator";
	
	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.method = "next";
	      this.arg = undefined;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined;
	          }
	        }
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	
	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined;
	        }
	
	        return !! caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }
	
	      return this.complete(record);
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	
	      return ContinueSentinel;
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined;
	      }
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var createCache = _interopDefault(__webpack_require__(25));
	var serialize = __webpack_require__(28);
	var utils = __webpack_require__(32);
	
	function insertWithoutScoping(cache, serialized) {
	  if (cache.inserted[serialized.name] === undefined) {
	    return cache.insert('', serialized, cache.sheet, true);
	  }
	}
	
	function merge(registered, css, className) {
	  var registeredStyles = [];
	  var rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className);
	
	  if (registeredStyles.length < 2) {
	    return className;
	  }
	
	  return rawClassName + css(registeredStyles);
	}
	
	var createEmotion = function createEmotion(options) {
	  var cache = createCache(options); // $FlowFixMe
	
	  cache.sheet.speedy = function (value) {
	    if (false) {
	      throw new Error('speedy must be changed before any rules are inserted');
	    }
	
	    this.isSpeedy = value;
	  };
	
	  cache.compat = true;
	
	  var css = function css() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var serialized = serialize.serializeStyles(args, cache.registered, undefined);
	    utils.insertStyles(cache, serialized, false);
	    return cache.key + "-" + serialized.name;
	  };
	
	  var keyframes = function keyframes() {
	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }
	
	    var serialized = serialize.serializeStyles(args, cache.registered);
	    var animation = "animation-" + serialized.name;
	    insertWithoutScoping(cache, {
	      name: serialized.name,
	      styles: "@keyframes " + animation + "{" + serialized.styles + "}"
	    });
	    return animation;
	  };
	
	  var injectGlobal = function injectGlobal() {
	    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }
	
	    var serialized = serialize.serializeStyles(args, cache.registered);
	    insertWithoutScoping(cache, serialized);
	  };
	
	  var cx = function cx() {
	    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	      args[_key4] = arguments[_key4];
	    }
	
	    return merge(cache.registered, css, classnames(args));
	  };
	
	  return {
	    css: css,
	    cx: cx,
	    injectGlobal: injectGlobal,
	    keyframes: keyframes,
	    hydrate: function hydrate(ids) {
	      ids.forEach(function (key) {
	        cache.inserted[key] = true;
	      });
	    },
	    flush: function flush() {
	      cache.registered = {};
	      cache.inserted = {};
	      cache.sheet.flush();
	    },
	    // $FlowFixMe
	    sheet: cache.sheet,
	    cache: cache,
	    getRegisteredStyles: utils.getRegisteredStyles.bind(null, cache.registered),
	    merge: merge.bind(null, cache.registered, css)
	  };
	};
	
	var classnames = function classnames(args) {
	  var cls = '';
	
	  for (var i = 0; i < args.length; i++) {
	    var arg = args[i];
	    if (arg == null) continue;
	    var toAdd = void 0;
	
	    switch (typeof arg) {
	      case 'boolean':
	        break;
	
	      case 'object':
	        {
	          if (Array.isArray(arg)) {
	            toAdd = classnames(arg);
	          } else {
	            toAdd = '';
	
	            for (var k in arg) {
	              if (arg[k] && k) {
	                toAdd && (toAdd += ' ');
	                toAdd += k;
	              }
	            }
	          }
	
	          break;
	        }
	
	      default:
	        {
	          toAdd = arg;
	        }
	    }
	
	    if (toAdd) {
	      cls && (cls += ' ');
	      cls += toAdd;
	    }
	  }
	
	  return cls;
	};
	
	exports.default = createEmotion;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-array/ v2.4.0 Copyright 2019 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.d3 = global.d3 || {}));
	}(this, function (exports) { 'use strict';
	
	function ascending(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}
	
	function bisector(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	}
	
	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}
	
	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;
	
	function count(values, valueof) {
	  let count = 0;
	  if (valueof === undefined) {
	    for (let value of values) {
	      if (value != null && (value = +value) >= value) {
	        ++count;
	      }
	    }
	  } else {
	    let index = -1;
	    for (let value of values) {
	      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
	        ++count;
	      }
	    }
	  }
	  return count;
	}
	
	function length(array) {
	  return array.length | 0;
	}
	
	function empty(length) {
	  return !(length > 0);
	}
	
	function arrayify(values) {
	  return typeof values !== "object" || "length" in values ? values : Array.from(values);
	}
	
	function reducer(reduce) {
	  return values => reduce(...values);
	}
	
	function cross(...values) {
	  const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
	  values = values.map(arrayify);
	  const lengths = values.map(length);
	  const j = values.length - 1;
	  const index = new Array(j + 1).fill(0);
	  const product = [];
	  if (j < 0 || lengths.some(empty)) return product;
	  while (true) {
	    product.push(index.map((j, i) => values[i][j]));
	    let i = j;
	    while (++index[i] === lengths[i]) {
	      if (i === 0) return reduce ? product.map(reduce) : product;
	      index[i--] = 0;
	    }
	  }
	}
	
	function cumsum(values, valueof) {
	  var sum = 0, index = 0;
	  return Float64Array.from(values, valueof === undefined
	    ? v => (sum += +v || 0)
	    : v => (sum += +valueof(v, index++, values) || 0));
	}
	
	function descending(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	}
	
	function variance(values, valueof) {
	  let count = 0;
	  let delta;
	  let mean = 0;
	  let sum = 0;
	  if (valueof === undefined) {
	    for (let value of values) {
	      if (value != null && (value = +value) >= value) {
	        delta = value - mean;
	        mean += delta / ++count;
	        sum += delta * (value - mean);
	      }
	    }
	  } else {
	    let index = -1;
	    for (let value of values) {
	      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
	        delta = value - mean;
	        mean += delta / ++count;
	        sum += delta * (value - mean);
	      }
	    }
	  }
	  if (count > 1) return sum / (count - 1);
	}
	
	function deviation(values, valueof) {
	  const v = variance(values, valueof);
	  return v ? Math.sqrt(v) : v;
	}
	
	function extent(values, valueof) {
	  let min;
	  let max;
	  if (valueof === undefined) {
	    for (const value of values) {
	      if (value != null) {
	        if (min === undefined) {
	          if (value >= value) min = max = value;
	        } else {
	          if (min > value) min = value;
	          if (max < value) max = value;
	        }
	      }
	    }
	  } else {
	    let index = -1;
	    for (let value of values) {
	      if ((value = valueof(value, ++index, values)) != null) {
	        if (min === undefined) {
	          if (value >= value) min = max = value;
	        } else {
	          if (min > value) min = value;
	          if (max < value) max = value;
	        }
	      }
	    }
	  }
	  return [min, max];
	}
	
	function identity(x) {
	  return x;
	}
	
	function group(values, ...keys) {
	  return nest(values, identity, identity, keys);
	}
	
	function groups(values, ...keys) {
	  return nest(values, Array.from, identity, keys);
	}
	
	function rollup(values, reduce, ...keys) {
	  return nest(values, identity, reduce, keys);
	}
	
	function rollups(values, reduce, ...keys) {
	  return nest(values, Array.from, reduce, keys);
	}
	
	function nest(values, map, reduce, keys) {
	  return (function regroup(values, i) {
	    if (i >= keys.length) return reduce(values);
	    const groups = new Map();
	    const keyof = keys[i++];
	    let index = -1;
	    for (const value of values) {
	      const key = keyof(value, ++index, values);
	      const group = groups.get(key);
	      if (group) group.push(value);
	      else groups.set(key, [value]);
	    }
	    for (const [key, values] of groups) {
	      groups.set(key, regroup(values, i));
	    }
	    return map(groups);
	  })(values, 0);
	}
	
	var array = Array.prototype;
	
	var slice = array.slice;
	
	function constant(x) {
	  return function() {
	    return x;
	  };
	}
	
	function range(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
	
	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);
	
	  while (++i < n) {
	    range[i] = start + i * step;
	  }
	
	  return range;
	}
	
	var e10 = Math.sqrt(50),
	    e5 = Math.sqrt(10),
	    e2 = Math.sqrt(2);
	
	function ticks(start, stop, count) {
	  var reverse,
	      i = -1,
	      n,
	      ticks,
	      step;
	
	  stop = +stop, start = +start, count = +count;
	  if (start === stop && count > 0) return [start];
	  if (reverse = stop < start) n = start, start = stop, stop = n;
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];
	
	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));
	    while (++i < n) ticks[i] = (start + i) * step;
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));
	    while (++i < n) ticks[i] = (start - i) / step;
	  }
	
	  if (reverse) ticks.reverse();
	
	  return ticks;
	}
	
	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0
	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}
	
	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}
	
	function sturges(values) {
	  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;
	}
	
	function bin() {
	  var value = identity,
	      domain = extent,
	      threshold = sturges;
	
	  function histogram(data) {
	    if (!Array.isArray(data)) data = Array.from(data);
	
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);
	
	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }
	
	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1);
	
	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      tz = tickStep(x0, x1, tz);
	      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
	    }
	
	    // Remove any thresholds outside the domain.
	    var m = tz.length;
	    while (tz[0] <= x0) tz.shift(), --m;
	    while (tz[m - 1] > x1) tz.pop(), --m;
	
	    var bins = new Array(m + 1),
	        bin;
	
	    // Initialize bins.
	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    }
	
	    // Assign data to bins by value, ignoring any outside the domain.
	    for (i = 0; i < n; ++i) {
	      x = values[i];
	      if (x0 <= x && x <= x1) {
	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
	      }
	    }
	
	    return bins;
	  }
	
	  histogram.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
	  };
	
	  histogram.domain = function(_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
	  };
	
	  histogram.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
	  };
	
	  return histogram;
	}
	
	function max(values, valueof) {
	  let max;
	  if (valueof === undefined) {
	    for (const value of values) {
	      if (value != null
	          && (max < value || (max === undefined && value >= value))) {
	        max = value;
	      }
	    }
	  } else {
	    let index = -1;
	    for (let value of values) {
	      if ((value = valueof(value, ++index, values)) != null
	          && (max < value || (max === undefined && value >= value))) {
	        max = value;
	      }
	    }
	  }
	  return max;
	}
	
	function min(values, valueof) {
	  let min;
	  if (valueof === undefined) {
	    for (const value of values) {
	      if (value != null
	          && (min > value || (min === undefined && value >= value))) {
	        min = value;
	      }
	    }
	  } else {
	    let index = -1;
	    for (let value of values) {
	      if ((value = valueof(value, ++index, values)) != null
	          && (min > value || (min === undefined && value >= value))) {
	        min = value;
	      }
	    }
	  }
	  return min;
	}
	
	// Based on https://github.com/mourner/quickselect
	// ISC license, Copyright 2018 Vladimir Agafonkin.
	function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {
	  while (right > left) {
	    if (right - left > 600) {
	      const n = right - left + 1;
	      const m = k - left + 1;
	      const z = Math.log(n);
	      const s = 0.5 * Math.exp(2 * z / 3);
	      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
	      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
	      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
	      quickselect(array, k, newLeft, newRight, compare);
	    }
	
	    const t = array[k];
	    let i = left;
	    let j = right;
	
	    swap(array, left, k);
	    if (compare(array[right], t) > 0) swap(array, left, right);
	
	    while (i < j) {
	      swap(array, i, j), ++i, --j;
	      while (compare(array[i], t) < 0) ++i;
	      while (compare(array[j], t) > 0) --j;
	    }
	
	    if (compare(array[left], t) === 0) swap(array, left, j);
	    else ++j, swap(array, j, right);
	
	    if (j <= k) left = j + 1;
	    if (k <= j) right = j - 1;
	  }
	  return array;
	}
	
	function swap(array, i, j) {
	  const t = array[i];
	  array[i] = array[j];
	  array[j] = t;
	}
	
	function number(x) {
	  return x === null ? NaN : +x;
	}
	
	function* numbers(values, valueof) {
	  if (valueof === undefined) {
	    for (let value of values) {
	      if (value != null && (value = +value) >= value) {
	        yield value;
	      }
	    }
	  } else {
	    let index = -1;
	    for (let value of values) {
	      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
	        yield value;
	      }
	    }
	  }
	}
	
	function quantile(values, p, valueof) {
	  values = Float64Array.from(numbers(values, valueof));
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return min(values);
	  if (p >= 1) return max(values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),
	      value1 = min(values.subarray(i0 + 1));
	  return value0 + (value1 - value0) * (i - i0);
	}
	
	function quantileSorted(values, p, valueof = number) {
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = +valueof(values[i0], i0, values),
	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
	  return value0 + (value1 - value0) * (i - i0);
	}
	
	function freedmanDiaconis(values, min, max) {
	  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));
	}
	
	function scott(values, min, max) {
	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));
	}
	
	function maxIndex(values, valueof) {
	  let max;
	  let maxIndex = -1;
	  let index = -1;
	  if (valueof === undefined) {
	    for (const value of values) {
	      ++index;
	      if (value != null
	          && (max < value || (max === undefined && value >= value))) {
	        max = value, maxIndex = index;
	      }
	    }
	  } else {
	    for (let value of values) {
	      if ((value = valueof(value, ++index, values)) != null
	          && (max < value || (max === undefined && value >= value))) {
	        max = value, maxIndex = index;
	      }
	    }
	  }
	  return maxIndex;
	}
	
	function mean(values, valueof) {
	  let count = 0;
	  let sum = 0;
	  if (valueof === undefined) {
	    for (let value of values) {
	      if (value != null && (value = +value) >= value) {
	        ++count, sum += value;
	      }
	    }
	  } else {
	    let index = -1;
	    for (let value of values) {
	      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
	        ++count, sum += value;
	      }
	    }
	  }
	  if (count) return sum / count;
	}
	
	function median(values, valueof) {
	  return quantile(values, 0.5, valueof);
	}
	
	function* flatten(arrays) {
	  for (const array of arrays) {
	    yield* array;
	  }
	}
	
	function merge(arrays) {
	  return Array.from(flatten(arrays));
	}
	
	function minIndex(values, valueof) {
	  let min;
	  let minIndex = -1;
	  let index = -1;
	  if (valueof === undefined) {
	    for (const value of values) {
	      ++index;
	      if (value != null
	          && (min > value || (min === undefined && value >= value))) {
	        min = value, minIndex = index;
	      }
	    }
	  } else {
	    for (let value of values) {
	      if ((value = valueof(value, ++index, values)) != null
	          && (min > value || (min === undefined && value >= value))) {
	        min = value, minIndex = index;
	      }
	    }
	  }
	  return minIndex;
	}
	
	function pairs(values, pairof = pair) {
	  const pairs = [];
	  let previous;
	  let first = false;
	  for (const value of values) {
	    if (first) pairs.push(pairof(previous, value));
	    previous = value;
	    first = true;
	  }
	  return pairs;
	}
	
	function pair(a, b) {
	  return [a, b];
	}
	
	function permute(source, keys) {
	  return Array.from(keys, key => source[key]);
	}
	
	function least(values, compare = ascending) {
	  let min;
	  let defined = false;
	  if (compare.length === 1) {
	    let minValue;
	    for (const element of values) {
	      const value = compare(element);
	      if (defined
	          ? ascending(value, minValue) < 0
	          : ascending(value, value) === 0) {
	        min = element;
	        minValue = value;
	        defined = true;
	      }
	    }
	  } else {
	    for (const value of values) {
	      if (defined
	          ? compare(value, min) < 0
	          : compare(value, value) === 0) {
	        min = value;
	        defined = true;
	      }
	    }
	  }
	  return min;
	}
	
	function leastIndex(values, compare = ascending) {
	  if (compare.length === 1) return minIndex(values, compare);
	  let minValue;
	  let min = -1;
	  let index = -1;
	  for (const value of values) {
	    ++index;
	    if (min < 0
	        ? compare(value, value) === 0
	        : compare(value, minValue) < 0) {
	      minValue = value;
	      min = index;
	    }
	  }
	  return min;
	}
	
	function greatest(values, compare = ascending) {
	  let max;
	  let defined = false;
	  if (compare.length === 1) {
	    let maxValue;
	    for (const element of values) {
	      const value = compare(element);
	      if (defined
	          ? ascending(value, maxValue) > 0
	          : ascending(value, value) === 0) {
	        max = element;
	        maxValue = value;
	        defined = true;
	      }
	    }
	  } else {
	    for (const value of values) {
	      if (defined
	          ? compare(value, max) > 0
	          : compare(value, value) === 0) {
	        max = value;
	        defined = true;
	      }
	    }
	  }
	  return max;
	}
	
	function greatestIndex(values, compare = ascending) {
	  if (compare.length === 1) return maxIndex(values, compare);
	  let maxValue;
	  let max = -1;
	  let index = -1;
	  for (const value of values) {
	    ++index;
	    if (max < 0
	        ? compare(value, value) === 0
	        : compare(value, maxValue) > 0) {
	      maxValue = value;
	      max = index;
	    }
	  }
	  return max;
	}
	
	function scan(values, compare) {
	  const index = leastIndex(values, compare);
	  return index < 0 ? undefined : index;
	}
	
	function shuffle(array, i0 = 0, i1 = array.length) {
	  var m = i1 - (i0 = +i0),
	      t,
	      i;
	
	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m + i0];
	    array[m + i0] = array[i + i0];
	    array[i + i0] = t;
	  }
	
	  return array;
	}
	
	function sum(values, valueof) {
	  let sum = 0;
	  if (valueof === undefined) {
	    for (let value of values) {
	      if (value = +value) {
	        sum += value;
	      }
	    }
	  } else {
	    let index = -1;
	    for (let value of values) {
	      if (value = +valueof(value, ++index, values)) {
	        sum += value;
	      }
	    }
	  }
	  return sum;
	}
	
	function transpose(matrix) {
	  if (!(n = matrix.length)) return [];
	  for (var i = -1, m = min(matrix, length$1), transpose = new Array(m); ++i < m;) {
	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
	      row[j] = matrix[j][i];
	    }
	  }
	  return transpose;
	}
	
	function length$1(d) {
	  return d.length;
	}
	
	function zip() {
	  return transpose(arguments);
	}
	
	exports.ascending = ascending;
	exports.bin = bin;
	exports.bisect = bisectRight;
	exports.bisectLeft = bisectLeft;
	exports.bisectRight = bisectRight;
	exports.bisector = bisector;
	exports.count = count;
	exports.cross = cross;
	exports.cumsum = cumsum;
	exports.descending = descending;
	exports.deviation = deviation;
	exports.extent = extent;
	exports.greatest = greatest;
	exports.greatestIndex = greatestIndex;
	exports.group = group;
	exports.groups = groups;
	exports.histogram = bin;
	exports.least = least;
	exports.leastIndex = leastIndex;
	exports.max = max;
	exports.maxIndex = maxIndex;
	exports.mean = mean;
	exports.median = median;
	exports.merge = merge;
	exports.min = min;
	exports.minIndex = minIndex;
	exports.pairs = pairs;
	exports.permute = permute;
	exports.quantile = quantile;
	exports.quantileSorted = quantileSorted;
	exports.quickselect = quickselect;
	exports.range = range;
	exports.rollup = rollup;
	exports.rollups = rollups;
	exports.scan = scan;
	exports.shuffle = shuffle;
	exports.sum = sum;
	exports.thresholdFreedmanDiaconis = freedmanDiaconis;
	exports.thresholdScott = scott;
	exports.thresholdSturges = sturges;
	exports.tickIncrement = tickIncrement;
	exports.tickStep = tickStep;
	exports.ticks = ticks;
	exports.transpose = transpose;
	exports.variance = variance;
	exports.zip = zip;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	}));


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-color/ v1.4.0 Copyright 2019 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.d3 = global.d3 || {}));
	}(this, function (exports) { 'use strict';
	
	function define(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	}
	
	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}
	
	function Color() {}
	
	var darker = 0.7;
	var brighter = 1 / darker;
	
	var reI = "\\s*([+-]?\\d+)\\s*",
	    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	    reHex = /^#([0-9a-f]{3,8})$/,
	    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
	
	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};
	
	define(Color, color, {
	  copy: function(channels) {
	    return Object.assign(new this.constructor, this, channels);
	  },
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  hex: color_formatHex, // Deprecated! Use color.formatHex.
	  formatHex: color_formatHex,
	  formatHsl: color_formatHsl,
	  formatRgb: color_formatRgb,
	  toString: color_formatRgb
	});
	
	function color_formatHex() {
	  return this.rgb().formatHex();
	}
	
	function color_formatHsl() {
	  return hslConvert(this).formatHsl();
	}
	
	function color_formatRgb() {
	  return this.rgb().formatRgb();
	}
	
	function color(format) {
	  var m, l;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
	      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00
	      : l === 8 ? new Rgb(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
	      : l === 4 ? new Rgb((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000
	      : null) // invalid hex
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}
	
	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}
	
	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}
	
	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}
	
	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}
	
	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Rgb, rgb, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (-0.5 <= this.r && this.r < 255.5)
	        && (-0.5 <= this.g && this.g < 255.5)
	        && (-0.5 <= this.b && this.b < 255.5)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  hex: rgb_formatHex, // Deprecated! Use color.formatHex.
	  formatHex: rgb_formatHex,
	  formatRgb: rgb_formatRgb,
	  toString: rgb_formatRgb
	}));
	
	function rgb_formatHex() {
	  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
	}
	
	function rgb_formatRgb() {
	  var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	  return (a === 1 ? "rgb(" : "rgba(")
	      + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	      + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	      + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	      + (a === 1 ? ")" : ", " + a + ")");
	}
	
	function hex(value) {
	  value = Math.max(0, Math.min(255, Math.round(value) || 0));
	  return (value < 16 ? "0" : "") + value.toString(16);
	}
	
	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}
	
	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}
	
	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Hsl, hsl, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  formatHsl: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "hsl(" : "hsla(")
	        + (this.h || 0) + ", "
	        + (this.s || 0) * 100 + "%, "
	        + (this.l || 0) * 100 + "%"
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));
	
	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}
	
	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;
	
	// https://observablehq.com/@mbostock/lab-and-rgb
	var K = 18,
	    Xn = 0.96422,
	    Yn = 1,
	    Zn = 0.82521,
	    t0 = 4 / 29,
	    t1 = 6 / 29,
	    t2 = 3 * t1 * t1,
	    t3 = t1 * t1 * t1;
	
	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) return hcl2lab(o);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = rgb2lrgb(o.r),
	      g = rgb2lrgb(o.g),
	      b = rgb2lrgb(o.b),
	      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
	  if (r === g && g === b) x = z = y; else {
	    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
	    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
	  }
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}
	
	function gray(l, opacity) {
	  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
	}
	
	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}
	
	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}
	
	define(Lab, lab, extend(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    x = Xn * lab2xyz(x);
	    y = Yn * lab2xyz(y);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
	      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
	      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
	      this.opacity
	    );
	  }
	}));
	
	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}
	
	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}
	
	function lrgb2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}
	
	function rgb2lrgb(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}
	
	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}
	
	function lch(l, c, h, opacity) {
	  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}
	
	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}
	
	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	function hcl2lab(o) {
	  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
	  var h = o.h * deg2rad;
	  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	}
	
	define(Hcl, hcl, extend(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return hcl2lab(this).rgb();
	  }
	}));
	
	var A = -0.14861,
	    B = +1.78277,
	    C = -0.29227,
	    D = -0.90649,
	    E = +1.97294,
	    ED = E * D,
	    EB = E * B,
	    BC_DA = B * C - D * A;
	
	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}
	
	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}
	
	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}
	
	define(Cubehelix, cubehelix, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));
	
	exports.color = color;
	exports.cubehelix = cubehelix;
	exports.gray = gray;
	exports.hcl = hcl;
	exports.hsl = hsl;
	exports.lab = lab;
	exports.lch = lch;
	exports.rgb = rgb;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	}));


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-format/ v1.4.3 Copyright 2019 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = global || self, factory(global.d3 = global.d3 || {}));
	}(this, function (exports) { 'use strict';
	
	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	function formatDecimal(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);
	
	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	}
	
	function exponent(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	}
	
	function formatGroup(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;
	
	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }
	
	    return t.reverse().join(thousands);
	  };
	}
	
	function formatNumerals(numerals) {
	  return function(value) {
	    return value.replace(/[0-9]/g, function(i) {
	      return numerals[+i];
	    });
	  };
	}
	
	// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
	var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
	
	function formatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
	  var match;
	  return new FormatSpecifier({
	    fill: match[1],
	    align: match[2],
	    sign: match[3],
	    symbol: match[4],
	    zero: match[5],
	    width: match[6],
	    comma: match[7],
	    precision: match[8] && match[8].slice(1),
	    trim: match[9],
	    type: match[10]
	  });
	}
	
	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof
	
	function FormatSpecifier(specifier) {
	  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
	  this.align = specifier.align === undefined ? ">" : specifier.align + "";
	  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
	  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
	  this.zero = !!specifier.zero;
	  this.width = specifier.width === undefined ? undefined : +specifier.width;
	  this.comma = !!specifier.comma;
	  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
	  this.trim = !!specifier.trim;
	  this.type = specifier.type === undefined ? "" : specifier.type + "";
	}
	
	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
	      + (this.trim ? "~" : "")
	      + this.type;
	};
	
	// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
	function formatTrim(s) {
	  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (s[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
	    }
	  }
	  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
	}
	
	var prefixExponent;
	
	function formatPrefixAuto(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	}
	
	function formatRounded(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	}
	
	var formatTypes = {
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};
	
	function identity(x) {
	  return x;
	}
	
	var map = Array.prototype.map,
	    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];
	
	function formatLocale(locale) {
	  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
	      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
	      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
	      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
	      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
	      percent = locale.percent === undefined ? "%" : locale.percent + "",
	      minus = locale.minus === undefined ? "-" : locale.minus + "",
	      nan = locale.nan === undefined ? "NaN" : locale.nan + "";
	
	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);
	
	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        trim = specifier.trim,
	        type = specifier.type;
	
	    // The "n" type is an alias for ",g".
	    if (type === "n") comma = true, type = "g";
	
	    // The "" type, and any invalid type, is an alias for ".12~g".
	    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";
	
	    // If zero fill is specified, padding goes after sign and before digits.
	    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";
	
	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
	
	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = /[defgprs%]/.test(type);
	
	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision === undefined ? 6
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));
	
	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;
	
	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;
	
	        // Perform the initial formatting.
	        var valueNegative = value < 0;
	        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
	
	        // Trim insignificant zeros.
	        if (trim) value = formatTrim(value);
	
	        // If a negative value rounds to zero during formatting, treat as positive.
	        if (valueNegative && +value === 0) valueNegative = false;
	
	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	
	        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
	
	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }
	
	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);
	
	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";
	
	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
	
	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": value = valuePrefix + value + valueSuffix + padding; break;
	        case "=": value = valuePrefix + padding + value + valueSuffix; break;
	        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
	        default: value = padding + valuePrefix + value + valueSuffix; break;
	      }
	
	      return numerals(value);
	    }
	
	    format.toString = function() {
	      return specifier + "";
	    };
	
	    return format;
	  }
	
	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }
	
	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	}
	
	var locale;
	
	defaultLocale({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""],
	  minus: "-"
	});
	
	function defaultLocale(definition) {
	  locale = formatLocale(definition);
	  exports.format = locale.format;
	  exports.formatPrefix = locale.formatPrefix;
	  return locale;
	}
	
	function precisionFixed(step) {
	  return Math.max(0, -exponent(Math.abs(step)));
	}
	
	function precisionPrefix(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
	}
	
	function precisionRound(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent(max) - exponent(step)) + 1;
	}
	
	exports.FormatSpecifier = FormatSpecifier;
	exports.formatDefaultLocale = defaultLocale;
	exports.formatLocale = formatLocale;
	exports.formatSpecifier = formatSpecifier;
	exports.precisionFixed = precisionFixed;
	exports.precisionPrefix = precisionPrefix;
	exports.precisionRound = precisionRound;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	}));


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-interpolate/ v1.4.0 Copyright 2019 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports, __webpack_require__(58)) :
	typeof define === 'function' && define.amd ? define(['exports', 'd3-color'], factory) :
	(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
	}(this, function (exports, d3Color) { 'use strict';
	
	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1, t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
	      + (4 - 6 * t2 + 3 * t3) * v1
	      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
	      + t3 * v3) / 6;
	}
	
	function basis$1(values) {
	  var n = values.length - 1;
	  return function(t) {
	    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	}
	
	function basisClosed(values) {
	  var n = values.length;
	  return function(t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	}
	
	function constant(x) {
	  return function() {
	    return x;
	  };
	}
	
	function linear(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}
	
	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}
	
	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
	}
	
	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
	  };
	}
	
	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
	}
	
	var rgb = (function rgbGamma(y) {
	  var color = gamma(y);
	
	  function rgb(start, end) {
	    var r = color((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r),
	        g = color(start.g, end.g),
	        b = color(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	
	  rgb.gamma = rgbGamma;
	
	  return rgb;
	})(1);
	
	function rgbSpline(spline) {
	  return function(colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i, color;
	    for (i = 0; i < n; ++i) {
	      color = d3Color.rgb(colors[i]);
	      r[i] = color.r || 0;
	      g[i] = color.g || 0;
	      b[i] = color.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color.opacity = 1;
	    return function(t) {
	      color.r = r(t);
	      color.g = g(t);
	      color.b = b(t);
	      return color + "";
	    };
	  };
	}
	
	var rgbBasis = rgbSpline(basis$1);
	var rgbBasisClosed = rgbSpline(basisClosed);
	
	function numberArray(a, b) {
	  if (!b) b = [];
	  var n = a ? Math.min(b.length, a.length) : 0,
	      c = b.slice(),
	      i;
	  return function(t) {
	    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
	    return c;
	  };
	}
	
	function isNumberArray(x) {
	  return ArrayBuffer.isView(x) && !(x instanceof DataView);
	}
	
	function array(a, b) {
	  return (isNumberArray(b) ? numberArray : genericArray)(a, b);
	}
	
	function genericArray(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(na),
	      c = new Array(nb),
	      i;
	
	  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];
	
	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	}
	
	function date(a, b) {
	  var d = new Date;
	  return a = +a, b = +b, function(t) {
	    return d.setTime(a * (1 - t) + b * t), d;
	  };
	}
	
	function number(a, b) {
	  return a = +a, b = +b, function(t) {
	    return a * (1 - t) + b * t;
	  };
	}
	
	function object(a, b) {
	  var i = {},
	      c = {},
	      k;
	
	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};
	
	  for (k in b) {
	    if (k in a) {
	      i[k] = value(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }
	
	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	}
	
	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	    reB = new RegExp(reA.source, "g");
	
	function zero(b) {
	  return function() {
	    return b;
	  };
	}
	
	function one(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}
	
	function string(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators
	
	  // Coerce inputs to strings.
	  a = a + "", b = b + "";
	
	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: number(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }
	
	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }
	
	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one(q[0].x)
	      : zero(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	}
	
	function value(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant(b)
	      : (t === "number" ? number
	      : t === "string" ? ((c = d3Color.color(b)) ? (b = c, rgb) : string)
	      : b instanceof d3Color.color ? rgb
	      : b instanceof Date ? date
	      : isNumberArray(b) ? numberArray
	      : Array.isArray(b) ? genericArray
	      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
	      : number)(a, b);
	}
	
	function discrete(range) {
	  var n = range.length;
	  return function(t) {
	    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
	  };
	}
	
	function hue$1(a, b) {
	  var i = hue(+a, +b);
	  return function(t) {
	    var x = i(t);
	    return x - 360 * Math.floor(x / 360);
	  };
	}
	
	function round(a, b) {
	  return a = +a, b = +b, function(t) {
	    return Math.round(a * (1 - t) + b * t);
	  };
	}
	
	var degrees = 180 / Math.PI;
	
	var identity = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};
	
	function decompose(a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	}
	
	var cssNode,
	    cssRoot,
	    cssView,
	    svgNode;
	
	function parseCss(value) {
	  if (value === "none") return identity;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}
	
	function parseSvg(value) {
	  if (value == null) return identity;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}
	
	function interpolateTransform(parse, pxComma, pxParen, degParen) {
	
	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }
	
	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }
	
	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
	      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }
	
	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }
	
	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }
	
	  return function(a, b) {
	    var s = [], // string constants and placeholders
	        q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  };
	}
	
	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
	
	var rho = Math.SQRT2,
	    rho2 = 2,
	    rho4 = 4,
	    epsilon2 = 1e-12;
	
	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}
	
	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}
	
	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}
	
	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	function zoom(p0, p1) {
	  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
	      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;
	
	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function(t) {
	      return [
	        ux0 + t * dx,
	        uy0 + t * dy,
	        w0 * Math.exp(rho * t * S)
	      ];
	    };
	  }
	
	  // General case.
	  else {
	    var d1 = Math.sqrt(d2),
	        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	    S = (r1 - r0) / rho;
	    i = function(t) {
	      var s = t * S,
	          coshr0 = cosh(r0),
	          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	      return [
	        ux0 + u * dx,
	        uy0 + u * dy,
	        w0 * coshr0 / cosh(rho * s + r0)
	      ];
	    };
	  }
	
	  i.duration = S * 1000;
	
	  return i;
	}
	
	function hsl(hue) {
	  return function(start, end) {
	    var h = hue((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h),
	        s = nogamma(start.s, end.s),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hsl$1 = hsl(hue);
	var hslLong = hsl(nogamma);
	
	function lab(start, end) {
	  var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l),
	      a = nogamma(start.a, end.a),
	      b = nogamma(start.b, end.b),
	      opacity = nogamma(start.opacity, end.opacity);
	  return function(t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}
	
	function hcl(hue) {
	  return function(start, end) {
	    var h = hue((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h),
	        c = nogamma(start.c, end.c),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}
	
	var hcl$1 = hcl(hue);
	var hclLong = hcl(nogamma);
	
	function cubehelix(hue) {
	  return (function cubehelixGamma(y) {
	    y = +y;
	
	    function cubehelix(start, end) {
	      var h = hue((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h),
	          s = nogamma(start.s, end.s),
	          l = nogamma(start.l, end.l),
	          opacity = nogamma(start.opacity, end.opacity);
	      return function(t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }
	
	    cubehelix.gamma = cubehelixGamma;
	
	    return cubehelix;
	  })(1);
	}
	
	var cubehelix$1 = cubehelix(hue);
	var cubehelixLong = cubehelix(nogamma);
	
	function piecewise(interpolate, values) {
	  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
	  while (i < n) I[i] = interpolate(v, v = values[++i]);
	  return function(t) {
	    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
	    return I[i](t - i);
	  };
	}
	
	function quantize(interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
	  return samples;
	}
	
	exports.interpolate = value;
	exports.interpolateArray = array;
	exports.interpolateBasis = basis$1;
	exports.interpolateBasisClosed = basisClosed;
	exports.interpolateCubehelix = cubehelix$1;
	exports.interpolateCubehelixLong = cubehelixLong;
	exports.interpolateDate = date;
	exports.interpolateDiscrete = discrete;
	exports.interpolateHcl = hcl$1;
	exports.interpolateHclLong = hclLong;
	exports.interpolateHsl = hsl$1;
	exports.interpolateHslLong = hslLong;
	exports.interpolateHue = hue$1;
	exports.interpolateLab = lab;
	exports.interpolateNumber = number;
	exports.interpolateNumberArray = numberArray;
	exports.interpolateObject = object;
	exports.interpolateRgb = rgb;
	exports.interpolateRgbBasis = rgbBasis;
	exports.interpolateRgbBasisClosed = rgbBasisClosed;
	exports.interpolateRound = round;
	exports.interpolateString = string;
	exports.interpolateTransformCss = interpolateTransformCss;
	exports.interpolateTransformSvg = interpolateTransformSvg;
	exports.interpolateZoom = zoom;
	exports.piecewise = piecewise;
	exports.quantize = quantize;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	}));


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-scale/ v3.2.1 Copyright 2019 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports, __webpack_require__(57), __webpack_require__(60), __webpack_require__(59), __webpack_require__(16), __webpack_require__(62)) :
	typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) :
	(global = global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3, global.d3, global.d3, global.d3));
	}(this, function (exports, d3Array, d3Interpolate, d3Format, d3Time, d3TimeFormat) { 'use strict';
	
	function initRange(domain, range) {
	  switch (arguments.length) {
	    case 0: break;
	    case 1: this.range(domain); break;
	    default: this.range(range).domain(domain); break;
	  }
	  return this;
	}
	
	function initInterpolator(domain, interpolator) {
	  switch (arguments.length) {
	    case 0: break;
	    case 1: {
	      if (typeof domain === "function") this.interpolator(domain);
	      else this.range(domain);
	      break;
	    }
	    default: {
	      this.domain(domain);
	      if (typeof interpolator === "function") this.interpolator(interpolator);
	      else this.range(interpolator);
	      break;
	    }
	  }
	  return this;
	}
	
	const implicit = Symbol("implicit");
	
	function ordinal() {
	  var index = new Map(),
	      domain = [],
	      range = [],
	      unknown = implicit;
	
	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range[(i - 1) % range.length];
	  }
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = new Map();
	    for (const value of _) {
	      const key = value + "";
	      if (index.has(key)) continue;
	      index.set(key, domain.push(value));
	    }
	    return scale;
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = Array.from(_), scale) : range.slice();
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  scale.copy = function() {
	    return ordinal(domain, range).unknown(unknown);
	  };
	
	  initRange.apply(scale, arguments);
	
	  return scale;
	}
	
	function band() {
	  var scale = ordinal().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      r0 = 0,
	      r1 = 1,
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;
	
	  delete scale.unknown;
	
	  function rescale() {
	    var n = domain().length,
	        reverse = r1 < r0,
	        start = reverse ? r1 : r0,
	        stop = reverse ? r0 : r1;
	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
	    if (round) step = Math.floor(step);
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
	    var values = d3Array.range(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
	  };
	
	  scale.rangeRound = function(_) {
	    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
	  };
	
	  scale.bandwidth = function() {
	    return bandwidth;
	  };
	
	  scale.step = function() {
	    return step;
	  };
	
	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, rescale()) : round;
	  };
	
	  scale.padding = function(_) {
	    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
	  };
	
	  scale.paddingInner = function(_) {
	    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
	  };
	
	  scale.paddingOuter = function(_) {
	    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
	  };
	
	  scale.align = function(_) {
	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
	  };
	
	  scale.copy = function() {
	    return band(domain(), [r0, r1])
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };
	
	  return initRange.apply(rescale(), arguments);
	}
	
	function pointish(scale) {
	  var copy = scale.copy;
	
	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	  delete scale.paddingOuter;
	
	  scale.copy = function() {
	    return pointish(copy());
	  };
	
	  return scale;
	}
	
	function point() {
	  return pointish(band.apply(null, arguments).paddingInner(1));
	}
	
	function constant(x) {
	  return function() {
	    return x;
	  };
	}
	
	function number(x) {
	  return +x;
	}
	
	var unit = [0, 1];
	
	function identity(x) {
	  return x;
	}
	
	function normalize(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant(isNaN(b) ? NaN : 0.5);
	}
	
	function clamper(a, b) {
	  var t;
	  if (a > b) t = a, a = b, b = t;
	  return function(x) { return Math.max(a, Math.min(b, x)); };
	}
	
	// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
	function bimap(domain, range, interpolate) {
	  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
	  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
	  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}
	
	function polymap(domain, range, interpolate) {
	  var j = Math.min(domain.length, range.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;
	
	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range = range.slice().reverse();
	  }
	
	  while (++i < j) {
	    d[i] = normalize(domain[i], domain[i + 1]);
	    r[i] = interpolate(range[i], range[i + 1]);
	  }
	
	  return function(x) {
	    var i = d3Array.bisect(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}
	
	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp())
	      .unknown(source.unknown());
	}
	
	function transformer() {
	  var domain = unit,
	      range = unit,
	      interpolate = d3Interpolate.interpolate,
	      transform,
	      untransform,
	      unknown,
	      clamp = identity,
	      piecewise,
	      output,
	      input;
	
	  function rescale() {
	    var n = Math.min(domain.length, range.length);
	    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
	    piecewise = n > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }
	
	  function scale(x) {
	    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
	  }
	
	  scale.invert = function(y) {
	    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), d3Interpolate.interpolateNumber)))(y)));
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
	  };
	
	  scale.rangeRound = function(_) {
	    return range = Array.from(_), interpolate = d3Interpolate.interpolateRound, rescale();
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
	  };
	
	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate = _, rescale()) : interpolate;
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  return function(t, u) {
	    transform = t, untransform = u;
	    return rescale();
	  };
	}
	
	function continuous() {
	  return transformer()(identity, identity);
	}
	
	function tickFormat(start, stop, count, specifier) {
	  var step = d3Array.tickStep(start, stop, count),
	      precision;
	  specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;
	      return d3Format.formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return d3Format.format(specifier);
	}
	
	function linearish(scale) {
	  var domain = scale.domain;
	
	  scale.ticks = function(count) {
	    var d = domain();
	    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    var d = domain();
	    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
	  };
	
	  scale.nice = function(count) {
	    if (count == null) count = 10;
	
	    var d = domain(),
	        i0 = 0,
	        i1 = d.length - 1,
	        start = d[i0],
	        stop = d[i1],
	        step;
	
	    if (stop < start) {
	      step = start, start = stop, stop = step;
	      step = i0, i0 = i1, i1 = step;
	    }
	
	    step = d3Array.tickIncrement(start, stop, count);
	
	    if (step > 0) {
	      start = Math.floor(start / step) * step;
	      stop = Math.ceil(stop / step) * step;
	      step = d3Array.tickIncrement(start, stop, count);
	    } else if (step < 0) {
	      start = Math.ceil(start * step) / step;
	      stop = Math.floor(stop * step) / step;
	      step = d3Array.tickIncrement(start, stop, count);
	    }
	
	    if (step > 0) {
	      d[i0] = Math.floor(start / step) * step;
	      d[i1] = Math.ceil(stop / step) * step;
	      domain(d);
	    } else if (step < 0) {
	      d[i0] = Math.ceil(start * step) / step;
	      d[i1] = Math.floor(stop * step) / step;
	      domain(d);
	    }
	
	    return scale;
	  };
	
	  return scale;
	}
	
	function linear() {
	  var scale = continuous();
	
	  scale.copy = function() {
	    return copy(scale, linear());
	  };
	
	  initRange.apply(scale, arguments);
	
	  return linearish(scale);
	}
	
	function identity$1(domain) {
	  var unknown;
	
	  function scale(x) {
	    return isNaN(x = +x) ? unknown : x;
	  }
	
	  scale.invert = scale;
	
	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = Array.from(_, number), scale) : domain.slice();
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  scale.copy = function() {
	    return identity$1(domain).unknown(unknown);
	  };
	
	  domain = arguments.length ? Array.from(domain, number) : [0, 1];
	
	  return linearish(scale);
	}
	
	function nice(domain, interval) {
	  domain = domain.slice();
	
	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;
	
	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }
	
	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	}
	
	function transformLog(x) {
	  return Math.log(x);
	}
	
	function transformExp(x) {
	  return Math.exp(x);
	}
	
	function transformLogn(x) {
	  return -Math.log(-x);
	}
	
	function transformExpn(x) {
	  return -Math.exp(-x);
	}
	
	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}
	
	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}
	
	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}
	
	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}
	
	function loggish(transform) {
	  var scale = transform(transformLog, transformExp),
	      domain = scale.domain,
	      base = 10,
	      logs,
	      pows;
	
	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) {
	      logs = reflect(logs), pows = reflect(pows);
	      transform(transformLogn, transformExpn);
	    } else {
	      transform(transformLog, transformExp);
	    }
	    return scale;
	  }
	
	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };
	
	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;
	
	    if (r = v < u) i = u, u = v, v = i;
	
	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];
	
	    if (!(base % 1) && j - i < n) {
	      i = Math.floor(i), j = Math.ceil(j);
	      if (u > 0) for (; i <= j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i <= j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	      if (z.length * 2 < n) z = d3Array.ticks(u, v, n);
	    } else {
	      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
	    }
	
	    return r ? z.reverse() : z;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = d3Format.format(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };
	
	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };
	
	  return scale;
	}
	
	function log() {
	  var scale = loggish(transformer()).domain([1, 10]);
	
	  scale.copy = function() {
	    return copy(scale, log()).base(scale.base());
	  };
	
	  initRange.apply(scale, arguments);
	
	  return scale;
	}
	
	function transformSymlog(c) {
	  return function(x) {
	    return Math.sign(x) * Math.log1p(Math.abs(x / c));
	  };
	}
	
	function transformSymexp(c) {
	  return function(x) {
	    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
	  };
	}
	
	function symlogish(transform) {
	  var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));
	
	  scale.constant = function(_) {
	    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
	  };
	
	  return linearish(scale);
	}
	
	function symlog() {
	  var scale = symlogish(transformer());
	
	  scale.copy = function() {
	    return copy(scale, symlog()).constant(scale.constant());
	  };
	
	  return initRange.apply(scale, arguments);
	}
	
	function transformPow(exponent) {
	  return function(x) {
	    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	  };
	}
	
	function transformSqrt(x) {
	  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
	}
	
	function transformSquare(x) {
	  return x < 0 ? -x * x : x * x;
	}
	
	function powish(transform) {
	  var scale = transform(identity, identity),
	      exponent = 1;
	
	  function rescale() {
	    return exponent === 1 ? transform(identity, identity)
	        : exponent === 0.5 ? transform(transformSqrt, transformSquare)
	        : transform(transformPow(exponent), transformPow(1 / exponent));
	  }
	
	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, rescale()) : exponent;
	  };
	
	  return linearish(scale);
	}
	
	function pow() {
	  var scale = powish(transformer());
	
	  scale.copy = function() {
	    return copy(scale, pow()).exponent(scale.exponent());
	  };
	
	  initRange.apply(scale, arguments);
	
	  return scale;
	}
	
	function sqrt() {
	  return pow.apply(null, arguments).exponent(0.5);
	}
	
	function square(x) {
	  return Math.sign(x) * x * x;
	}
	
	function unsquare(x) {
	  return Math.sign(x) * Math.sqrt(Math.abs(x));
	}
	
	function radial() {
	  var squared = continuous(),
	      range = [0, 1],
	      round = false,
	      unknown;
	
	  function scale(x) {
	    var y = unsquare(squared(x));
	    return isNaN(y) ? unknown : round ? Math.round(y) : y;
	  }
	
	  scale.invert = function(y) {
	    return squared.invert(square(y));
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? (squared.domain(_), scale) : squared.domain();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (squared.range((range = Array.from(_, number)).map(square)), scale) : range.slice();
	  };
	
	  scale.rangeRound = function(_) {
	    return scale.range(_).round(true);
	  };
	
	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, scale) : round;
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  scale.copy = function() {
	    return radial(squared.domain(), range)
	        .round(round)
	        .clamp(squared.clamp())
	        .unknown(unknown);
	  };
	
	  initRange.apply(scale, arguments);
	
	  return linearish(scale);
	}
	
	function quantile() {
	  var domain = [],
	      range = [],
	      thresholds = [],
	      unknown;
	
	  function rescale() {
	    var i = 0, n = Math.max(1, range.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = d3Array.quantile(domain, i / n);
	    return scale;
	  }
	
	  function scale(x) {
	    return isNaN(x = +x) ? unknown : range[d3Array.bisect(thresholds, x)];
	  }
	
	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(d3Array.ascending);
	    return rescale();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  scale.quantiles = function() {
	    return thresholds.slice();
	  };
	
	  scale.copy = function() {
	    return quantile()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };
	
	  return initRange.apply(scale, arguments);
	}
	
	function quantize() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range = [0, 1],
	      unknown;
	
	  function scale(x) {
	    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
	  }
	
	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : scale;
	  };
	
	  scale.thresholds = function() {
	    return domain.slice();
	  };
	
	  scale.copy = function() {
	    return quantize()
	        .domain([x0, x1])
	        .range(range)
	        .unknown(unknown);
	  };
	
	  return initRange.apply(linearish(scale), arguments);
	}
	
	function threshold() {
	  var domain = [0.5],
	      range = [0, 1],
	      unknown,
	      n = 1;
	
	  function scale(x) {
	    return x <= x ? range[d3Array.bisect(domain, x, 0, n)] : unknown;
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
	  };
	
	  scale.range = function(_) {
	    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
	  };
	
	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  scale.copy = function() {
	    return threshold()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };
	
	  return initRange.apply(scale, arguments);
	}
	
	var durationSecond = 1000,
	    durationMinute = durationSecond * 60,
	    durationHour = durationMinute * 60,
	    durationDay = durationHour * 24,
	    durationWeek = durationDay * 7,
	    durationMonth = durationDay * 30,
	    durationYear = durationDay * 365;
	
	function date(t) {
	  return new Date(t);
	}
	
	function number$1(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}
	
	function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
	  var scale = continuous(),
	      invert = scale.invert,
	      domain = scale.domain;
	
	  var formatMillisecond = format(".%L"),
	      formatSecond = format(":%S"),
	      formatMinute = format("%I:%M"),
	      formatHour = format("%I %p"),
	      formatDay = format("%a %d"),
	      formatWeek = format("%b %d"),
	      formatMonth = format("%B"),
	      formatYear = format("%Y");
	
	  var tickIntervals = [
	    [second,  1,      durationSecond],
	    [second,  5,  5 * durationSecond],
	    [second, 15, 15 * durationSecond],
	    [second, 30, 30 * durationSecond],
	    [minute,  1,      durationMinute],
	    [minute,  5,  5 * durationMinute],
	    [minute, 15, 15 * durationMinute],
	    [minute, 30, 30 * durationMinute],
	    [  hour,  1,      durationHour  ],
	    [  hour,  3,  3 * durationHour  ],
	    [  hour,  6,  6 * durationHour  ],
	    [  hour, 12, 12 * durationHour  ],
	    [   day,  1,      durationDay   ],
	    [   day,  2,  2 * durationDay   ],
	    [  week,  1,      durationWeek  ],
	    [ month,  1,      durationMonth ],
	    [ month,  3,  3 * durationMonth ],
	    [  year,  1,      durationYear  ]
	  ];
	
	  function tickFormat(date) {
	    return (second(date) < date ? formatMillisecond
	        : minute(date) < date ? formatSecond
	        : hour(date) < date ? formatMinute
	        : day(date) < date ? formatHour
	        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
	        : year(date) < date ? formatMonth
	        : formatYear)(date);
	  }
	
	  function tickInterval(interval, start, stop) {
	    if (interval == null) interval = 10;
	
	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval === "number") {
	      var target = Math.abs(stop - start) / interval,
	          i = d3Array.bisector(function(i) { return i[2]; }).right(tickIntervals, target),
	          step;
	      if (i === tickIntervals.length) {
	        step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);
	        interval = year;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval = i[0];
	      } else {
	        step = Math.max(d3Array.tickStep(start, stop, interval), 1);
	        interval = millisecond;
	      }
	      return interval.every(step);
	    }
	
	    return interval;
	  }
	
	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };
	
	  scale.domain = function(_) {
	    return arguments.length ? domain(Array.from(_, number$1)) : domain().map(date);
	  };
	
	  scale.ticks = function(interval) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval, t0, t1);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };
	
	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format(specifier);
	  };
	
	  scale.nice = function(interval) {
	    var d = domain();
	    return (interval = tickInterval(interval, d[0], d[d.length - 1]))
	        ? domain(nice(d, interval))
	        : scale;
	  };
	
	  scale.copy = function() {
	    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
	  };
	
	  return scale;
	}
	
	function time() {
	  return initRange.apply(calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
	}
	
	function utcTime() {
	  return initRange.apply(calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
	}
	
	function transformer$1() {
	  var x0 = 0,
	      x1 = 1,
	      t0,
	      t1,
	      k10,
	      transform,
	      interpolator = identity,
	      clamp = false,
	      unknown;
	
	  function scale(x) {
	    return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };
	
	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };
	
	  function range(interpolate) {
	    return function(_) {
	      var r0, r1;
	      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
	    };
	  }
	
	  scale.range = range(d3Interpolate.interpolate);
	
	  scale.rangeRound = range(d3Interpolate.interpolateRound);
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  return function(t) {
	    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
	    return scale;
	  };
	}
	
	function copy$1(source, target) {
	  return target
	      .domain(source.domain())
	      .interpolator(source.interpolator())
	      .clamp(source.clamp())
	      .unknown(source.unknown());
	}
	
	function sequential() {
	  var scale = linearish(transformer$1()(identity));
	
	  scale.copy = function() {
	    return copy$1(scale, sequential());
	  };
	
	  return initInterpolator.apply(scale, arguments);
	}
	
	function sequentialLog() {
	  var scale = loggish(transformer$1()).domain([1, 10]);
	
	  scale.copy = function() {
	    return copy$1(scale, sequentialLog()).base(scale.base());
	  };
	
	  return initInterpolator.apply(scale, arguments);
	}
	
	function sequentialSymlog() {
	  var scale = symlogish(transformer$1());
	
	  scale.copy = function() {
	    return copy$1(scale, sequentialSymlog()).constant(scale.constant());
	  };
	
	  return initInterpolator.apply(scale, arguments);
	}
	
	function sequentialPow() {
	  var scale = powish(transformer$1());
	
	  scale.copy = function() {
	    return copy$1(scale, sequentialPow()).exponent(scale.exponent());
	  };
	
	  return initInterpolator.apply(scale, arguments);
	}
	
	function sequentialSqrt() {
	  return sequentialPow.apply(null, arguments).exponent(0.5);
	}
	
	function sequentialQuantile() {
	  var domain = [],
	      interpolator = identity;
	
	  function scale(x) {
	    if (!isNaN(x = +x)) return interpolator((d3Array.bisect(domain, x, 1) - 1) / (domain.length - 1));
	  }
	
	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(d3Array.ascending);
	    return scale;
	  };
	
	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };
	
	  scale.range = function() {
	    return domain.map((d, i) => interpolator(i / (domain.length - 1)));
	  };
	
	  scale.quantiles = function(n) {
	    return Array.from({length: n + 1}, (_, i) => d3Array.quantile(domain, i / n));
	  };
	
	  scale.copy = function() {
	    return sequentialQuantile(interpolator).domain(domain);
	  };
	
	  return initInterpolator.apply(scale, arguments);
	}
	
	function transformer$2() {
	  var x0 = 0,
	      x1 = 0.5,
	      x2 = 1,
	      s = 1,
	      t0,
	      t1,
	      t2,
	      k10,
	      k21,
	      interpolator = identity,
	      transform,
	      clamp = false,
	      unknown;
	
	  function scale(x) {
	    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
	  }
	
	  scale.domain = function(_) {
	    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
	  };
	
	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };
	
	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };
	
	  function range(interpolate) {
	    return function(_) {
	      var r0, r1, r2;
	      return arguments.length ? ([r0, r1, r2] = _, interpolator = d3Interpolate.piecewise(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
	    };
	  }
	
	  scale.range = range(d3Interpolate.interpolate);
	
	  scale.rangeRound = range(d3Interpolate.interpolateRound);
	
	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };
	
	  return function(t) {
	    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
	    return scale;
	  };
	}
	
	function diverging() {
	  var scale = linearish(transformer$2()(identity));
	
	  scale.copy = function() {
	    return copy$1(scale, diverging());
	  };
	
	  return initInterpolator.apply(scale, arguments);
	}
	
	function divergingLog() {
	  var scale = loggish(transformer$2()).domain([0.1, 1, 10]);
	
	  scale.copy = function() {
	    return copy$1(scale, divergingLog()).base(scale.base());
	  };
	
	  return initInterpolator.apply(scale, arguments);
	}
	
	function divergingSymlog() {
	  var scale = symlogish(transformer$2());
	
	  scale.copy = function() {
	    return copy$1(scale, divergingSymlog()).constant(scale.constant());
	  };
	
	  return initInterpolator.apply(scale, arguments);
	}
	
	function divergingPow() {
	  var scale = powish(transformer$2());
	
	  scale.copy = function() {
	    return copy$1(scale, divergingPow()).exponent(scale.exponent());
	  };
	
	  return initInterpolator.apply(scale, arguments);
	}
	
	function divergingSqrt() {
	  return divergingPow.apply(null, arguments).exponent(0.5);
	}
	
	exports.scaleBand = band;
	exports.scaleDiverging = diverging;
	exports.scaleDivergingLog = divergingLog;
	exports.scaleDivergingPow = divergingPow;
	exports.scaleDivergingSqrt = divergingSqrt;
	exports.scaleDivergingSymlog = divergingSymlog;
	exports.scaleIdentity = identity$1;
	exports.scaleImplicit = implicit;
	exports.scaleLinear = linear;
	exports.scaleLog = log;
	exports.scaleOrdinal = ordinal;
	exports.scalePoint = point;
	exports.scalePow = pow;
	exports.scaleQuantile = quantile;
	exports.scaleQuantize = quantize;
	exports.scaleRadial = radial;
	exports.scaleSequential = sequential;
	exports.scaleSequentialLog = sequentialLog;
	exports.scaleSequentialPow = sequentialPow;
	exports.scaleSequentialQuantile = sequentialQuantile;
	exports.scaleSequentialSqrt = sequentialSqrt;
	exports.scaleSequentialSymlog = sequentialSymlog;
	exports.scaleSqrt = sqrt;
	exports.scaleSymlog = symlog;
	exports.scaleThreshold = threshold;
	exports.scaleTime = time;
	exports.scaleUtc = utcTime;
	exports.tickFormat = tickFormat;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	}));


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-time-format/ v2.2.3 Copyright 2019 Mike Bostock
	(function (global, factory) {
	 true ? factory(exports, __webpack_require__(16)) :
	typeof define === 'function' && define.amd ? define(['exports', 'd3-time'], factory) :
	(global = global || self, factory(global.d3 = global.d3 || {}, global.d3));
	}(this, function (exports, d3Time) { 'use strict';
	
	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}
	
	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}
	
	function newDate(y, m, d) {
	  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};
	}
	
	function formatLocale(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;
	
	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);
	
	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "f": formatMicroseconds,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "q": formatQuarter,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatSeconds,
	    "u": formatWeekdayNumberMonday,
	    "U": formatWeekNumberSunday,
	    "V": formatWeekNumberISO,
	    "w": formatWeekdayNumberSunday,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };
	
	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "f": formatUTCMicroseconds,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "q": formatUTCQuarter,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatUTCSeconds,
	    "u": formatUTCWeekdayNumberMonday,
	    "U": formatUTCWeekNumberSunday,
	    "V": formatUTCWeekNumberISO,
	    "w": formatUTCWeekdayNumberSunday,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };
	
	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "f": parseMicroseconds,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "q": parseQuarter,
	    "Q": parseUnixTimestamp,
	    "s": parseUnixTimestampSeconds,
	    "S": parseSeconds,
	    "u": parseWeekdayNumberMonday,
	    "U": parseWeekNumberSunday,
	    "V": parseWeekNumberISO,
	    "w": parseWeekdayNumberSunday,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };
	
	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);
	
	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;
	
	      if (!(date instanceof Date)) date = new Date(+date);
	
	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }
	
	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }
	
	  function newParse(specifier, Z) {
	    return function(string) {
	      var d = newDate(1900, undefined, 1),
	          i = parseSpecifier(d, specifier, string += "", 0),
	          week, day;
	      if (i != string.length) return null;
	
	      // If a UNIX timestamp is specified, return it.
	      if ("Q" in d) return new Date(d.Q);
	      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));
	
	      // If this is utcParse, never use the local timezone.
	      if (Z && !("Z" in d)) d.Z = 0;
	
	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;
	
	      // If the month was not specified, inherit from the quarter.
	      if (d.m === undefined) d.m = "q" in d ? d.q : 0;
	
	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("V" in d) {
	        if (d.V < 1 || d.V > 53) return null;
	        if (!("w" in d)) d.w = 1;
	        if ("Z" in d) {
	          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
	          week = day > 4 || day === 0 ? d3Time.utcMonday.ceil(week) : d3Time.utcMonday(week);
	          week = d3Time.utcDay.offset(week, (d.V - 1) * 7);
	          d.y = week.getUTCFullYear();
	          d.m = week.getUTCMonth();
	          d.d = week.getUTCDate() + (d.w + 6) % 7;
	        } else {
	          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
	          week = day > 4 || day === 0 ? d3Time.timeMonday.ceil(week) : d3Time.timeMonday(week);
	          week = d3Time.timeDay.offset(week, (d.V - 1) * 7);
	          d.y = week.getFullYear();
	          d.m = week.getMonth();
	          d.d = week.getDate() + (d.w + 6) % 7;
	        }
	      } else if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
	        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
	      }
	
	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }
	
	      // Otherwise, all fields are in local time.
	      return localDate(d);
	    };
	  }
	
	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;
	
	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }
	
	    return j;
	  }
	
	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }
	
	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }
	
	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }
	
	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }
	
	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }
	
	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }
	
	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }
	
	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }
	
	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }
	
	  function formatQuarter(d) {
	    return 1 + ~~(d.getMonth() / 3);
	  }
	
	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }
	
	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }
	
	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }
	
	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }
	
	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }
	
	  function formatUTCQuarter(d) {
	    return 1 + ~~(d.getUTCMonth() / 3);
	  }
	
	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", false);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier += "", true);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}
	
	var pads = {"-": "", "_": " ", "0": "0"},
	    numberRe = /^\s*\d+/, // note: ignores next directive
	    percentRe = /^%/,
	    requoteRe = /[\\^$*+?|[\]().{}]/g;
	
	function pad(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}
	
	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}
	
	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}
	
	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}
	
	function parseWeekdayNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekdayNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.u = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberISO(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.V = +n[0], i + n[0].length) : -1;
	}
	
	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}
	
	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}
	
	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}
	
	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}
	
	function parseQuarter(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
	}
	
	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}
	
	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}
	
	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}
	
	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}
	
	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}
	
	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}
	
	function parseMicroseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 6));
	  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
	}
	
	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}
	
	function parseUnixTimestamp(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.Q = +n[0], i + n[0].length) : -1;
	}
	
	function parseUnixTimestampSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.s = +n[0], i + n[0].length) : -1;
	}
	
	function formatDayOfMonth(d, p) {
	  return pad(d.getDate(), p, 2);
	}
	
	function formatHour24(d, p) {
	  return pad(d.getHours(), p, 2);
	}
	
	function formatHour12(d, p) {
	  return pad(d.getHours() % 12 || 12, p, 2);
	}
	
	function formatDayOfYear(d, p) {
	  return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
	}
	
	function formatMilliseconds(d, p) {
	  return pad(d.getMilliseconds(), p, 3);
	}
	
	function formatMicroseconds(d, p) {
	  return formatMilliseconds(d, p) + "000";
	}
	
	function formatMonthNumber(d, p) {
	  return pad(d.getMonth() + 1, p, 2);
	}
	
	function formatMinutes(d, p) {
	  return pad(d.getMinutes(), p, 2);
	}
	
	function formatSeconds(d, p) {
	  return pad(d.getSeconds(), p, 2);
	}
	
	function formatWeekdayNumberMonday(d) {
	  var day = d.getDay();
	  return day === 0 ? 7 : day;
	}
	
	function formatWeekNumberSunday(d, p) {
	  return pad(d3Time.timeSunday.count(d3Time.timeYear(d) - 1, d), p, 2);
	}
	
	function formatWeekNumberISO(d, p) {
	  var day = d.getDay();
	  d = (day >= 4 || day === 0) ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
	  return pad(d3Time.timeThursday.count(d3Time.timeYear(d), d) + (d3Time.timeYear(d).getDay() === 4), p, 2);
	}
	
	function formatWeekdayNumberSunday(d) {
	  return d.getDay();
	}
	
	function formatWeekNumberMonday(d, p) {
	  return pad(d3Time.timeMonday.count(d3Time.timeYear(d) - 1, d), p, 2);
	}
	
	function formatYear(d, p) {
	  return pad(d.getFullYear() % 100, p, 2);
	}
	
	function formatFullYear(d, p) {
	  return pad(d.getFullYear() % 10000, p, 4);
	}
	
	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad(z / 60 | 0, "0", 2)
	      + pad(z % 60, "0", 2);
	}
	
	function formatUTCDayOfMonth(d, p) {
	  return pad(d.getUTCDate(), p, 2);
	}
	
	function formatUTCHour24(d, p) {
	  return pad(d.getUTCHours(), p, 2);
	}
	
	function formatUTCHour12(d, p) {
	  return pad(d.getUTCHours() % 12 || 12, p, 2);
	}
	
	function formatUTCDayOfYear(d, p) {
	  return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
	}
	
	function formatUTCMilliseconds(d, p) {
	  return pad(d.getUTCMilliseconds(), p, 3);
	}
	
	function formatUTCMicroseconds(d, p) {
	  return formatUTCMilliseconds(d, p) + "000";
	}
	
	function formatUTCMonthNumber(d, p) {
	  return pad(d.getUTCMonth() + 1, p, 2);
	}
	
	function formatUTCMinutes(d, p) {
	  return pad(d.getUTCMinutes(), p, 2);
	}
	
	function formatUTCSeconds(d, p) {
	  return pad(d.getUTCSeconds(), p, 2);
	}
	
	function formatUTCWeekdayNumberMonday(d) {
	  var dow = d.getUTCDay();
	  return dow === 0 ? 7 : dow;
	}
	
	function formatUTCWeekNumberSunday(d, p) {
	  return pad(d3Time.utcSunday.count(d3Time.utcYear(d) - 1, d), p, 2);
	}
	
	function formatUTCWeekNumberISO(d, p) {
	  var day = d.getUTCDay();
	  d = (day >= 4 || day === 0) ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
	  return pad(d3Time.utcThursday.count(d3Time.utcYear(d), d) + (d3Time.utcYear(d).getUTCDay() === 4), p, 2);
	}
	
	function formatUTCWeekdayNumberSunday(d) {
	  return d.getUTCDay();
	}
	
	function formatUTCWeekNumberMonday(d, p) {
	  return pad(d3Time.utcMonday.count(d3Time.utcYear(d) - 1, d), p, 2);
	}
	
	function formatUTCYear(d, p) {
	  return pad(d.getUTCFullYear() % 100, p, 2);
	}
	
	function formatUTCFullYear(d, p) {
	  return pad(d.getUTCFullYear() % 10000, p, 4);
	}
	
	function formatUTCZone() {
	  return "+0000";
	}
	
	function formatLiteralPercent() {
	  return "%";
	}
	
	function formatUnixTimestamp(d) {
	  return +d;
	}
	
	function formatUnixTimestampSeconds(d) {
	  return Math.floor(+d / 1000);
	}
	
	var locale;
	
	defaultLocale({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});
	
	function defaultLocale(definition) {
	  locale = formatLocale(definition);
	  exports.timeFormat = locale.format;
	  exports.timeParse = locale.parse;
	  exports.utcFormat = locale.utcFormat;
	  exports.utcParse = locale.utcParse;
	  return locale;
	}
	
	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
	
	function formatIsoNative(date) {
	  return date.toISOString();
	}
	
	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : exports.utcFormat(isoSpecifier);
	
	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}
	
	var parseIso = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : exports.utcParse(isoSpecifier);
	
	exports.isoFormat = formatIso;
	exports.isoParse = parseIso;
	exports.timeFormatDefaultLocale = defaultLocale;
	exports.timeFormatLocale = formatLocale;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	}));


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _interopRequireDefault = __webpack_require__(24);
	
	exports.__esModule = true;
	exports.default = addClass;
	
	var _hasClass = _interopRequireDefault(__webpack_require__(64));
	
	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!(0, _hasClass.default)(element, className)) if (typeof element.className === 'string') element.className = element.className + ' ' + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + ' ' + className);
	}
	
	module.exports = exports["default"];

/***/ },
/* 64 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = hasClass;
	
	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);else return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}
	
	module.exports = exports["default"];

/***/ },
/* 65 */
/***/ function(module, exports) {

	'use strict';
	
	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}
	
	module.exports = function removeClass(element, className) {
	  if (element.classList) element.classList.remove(className);else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	function _interopDefault(ex) {
	  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
	}
	
	Object.defineProperty(exports, "__esModule", {
	  value: !0
	});
	
	var createEmotion = _interopDefault(__webpack_require__(56)), _createEmotion = createEmotion(), flush = _createEmotion.flush, hydrate = _createEmotion.hydrate, cx = _createEmotion.cx, merge = _createEmotion.merge, getRegisteredStyles = _createEmotion.getRegisteredStyles, injectGlobal = _createEmotion.injectGlobal, keyframes = _createEmotion.keyframes, css = _createEmotion.css, sheet = _createEmotion.sheet, cache = _createEmotion.cache;
	
	exports.cache = cache, exports.css = css, exports.cx = cx, exports.flush = flush, 
	exports.getRegisteredStyles = getRegisteredStyles, exports.hydrate = hydrate, exports.injectGlobal = injectGlobal, 
	exports.keyframes = keyframes, exports.merge = merge, exports.sheet = sheet;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {!function(t,e){ true?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t=t||self).TWEEN={})}(this,function(t){"use strict";function s(t){var e=u.indexOf(t);-1<e&&u.splice(e,1),u.push(t),p=0,l&&!f&&(o=c(i),f=!0)}function e(t){for(var e=0;e<u.length;e++)if(t===u[e])return u[e];return null}function F(){return f}function x(){return d}var o,r="undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:this||(void 0!==t?t:{}),n=r.requestAnimationFrame||function(t){return r.setTimeout(t,50/3)},a=r.cancelAnimationFrame||function(t){return r.clearTimeout(t)},C=function(){if("undefined"==typeof process||void 0===process.hrtime||process.versions&&void 0!==process.versions.electron){if(void 0!==r.performance&&void 0!==r.performance.now)return r.performance.now.bind(r.performance);var t=r.performance&&r.performance.timing&&r.performance.timing.navigationStart?r.performance.timing.navigationStart:Date.now();return function(){return Date.now()-t}}return function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}}(),u=[],f=!1,l=!1,h=[],c=n,p=0,y=120,d=!0,N=function(t){var e=u.indexOf(t);-1!==e&&u.splice(e,1),0===u.length&&(a(o),f=!1)},i=function t(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:C(),r=1<arguments.length?arguments[1]:void 0;if(y<=p&&d)return f=!1,p=0,a(o),!1;l&&f?o=c(t):function(){for(var t=0;t<h.length;t++)h[t]()}(),u.length||p++;for(var n=0,i=u.length;n<i;)u[n++].update(e,r),i>u.length&&n--,i=u.length;return!0},q={},v={Linear:{None:function(t){return t}},Quadratic:{In:function(t){return Math.pow(t,2)},Out:function(t){return t*(2-t)},InOut:function(t){return(t*=2)<1?.5*Math.pow(t,2):-.5*(--t*(t-2)-1)}},Cubic:{In:function(t){return Math.pow(t,3)},Out:function(t){return--t*t*t+1},InOut:function(t){return(t*=2)<1?.5*Math.pow(t,3):.5*((t-=2)*t*t+2)}},Quartic:{In:function(t){return Math.pow(t,4)},Out:function(t){return 1- --t*t*t*t},InOut:function(t){return(t*=2)<1?.5*Math.pow(t,4):-.5*((t-=2)*t*t*t-2)}},Quintic:{In:function(t){return Math.pow(t,5)},Out:function(t){return--t*t*t*t*t+1},InOut:function(t){return(t*=2)<1?.5*Math.pow(t,5):.5*((t-=2)*t*t*t*t+2)}},Sinusoidal:{In:function(t){return 1-Math.cos(t*Math.PI/2)},Out:function(t){return Math.sin(t*Math.PI/2)},InOut:function(t){return.5*(1-Math.cos(Math.PI*t))}},Exponential:{In:function(t){return 0===t?0:Math.pow(1024,t-1)},Out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))}},Circular:{In:function(t){return 1-Math.sqrt(1-t*t)},Out:function(t){return Math.sqrt(1- --t*t)},InOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},Elastic:{In:function(t){return 0===t?0:1===t?1:-Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)},Out:function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin(5*(t-.1)*Math.PI)+1},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?-.5*Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI):.5*Math.pow(2,-10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)+1}},Back:{In:function(t){return t*t*(2.70158*t-1.70158)},Out:function(t){return--t*t*(2.70158*t+1.70158)+1},InOut:function(t){var e=2.5949095;return(t*=2)<1?t*t*((1+e)*t-e)*.5:.5*((t-=2)*t*((1+e)*t+e)+2)}},Bounce:{In:function(t){return 1-v.Bounce.Out(1-t)},Out:function(t){var e=2.75,r=7.5625;return t<1/e?r*t*t:t<2/e?r*(t-=1.5/e)*t+.75:t<2.5/e?r*(t-=2.25/e)*t+.9375:r*(t-=2.625/e)*t+.984375},InOut:function(t){return t<.5?.5*v.Bounce.In(2*t):.5*v.Bounce.Out(2*t-1)+.5}},Stepped:{steps:function(e){return function(t){return(t*e|0)/e}}}};function m(t){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function g(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function b(t,e,r){return e&&g(t.prototype,e),r&&g(t,r),t}function T(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,n)}return r}function O(i){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?T(Object(o),!0).forEach(function(t){var e,r,n;e=i,n=o[r=t],r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n}):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(o)):T(Object(o)).forEach(function(t){Object.defineProperty(i,t,Object.getOwnPropertyDescriptor(o,t))})}return i}function w(t){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function k(t,e){return(k=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function j(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function A(t,e){return!e||"object"!=typeof e&&"function"!=typeof e?j(t):e}function S(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t)))return;var r=[],n=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{n||null==a.return||a.return()}finally{if(i)throw o}}return r}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var D=50/3,U="_chainedTweens",E="Callback",V="update",B="complete",G="start",z="repeat",Q="reverse",P="restart",M="STRING_PROP",R=/\s+|([A-Za-z?().,{}:""[\]#%]+)|([-+]=+)?([-+]+)?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]=?\d+)?/g;function I(t){if(t&&t.nodeType||void 0===t||"object"!==m(t))return t;if(Array.isArray(t))return[].concat(t);if("object"!==m(t))return t;var e={};for(var r in t)e[r]=I(t[r]);return e}var L=function(t){return isNaN(+t)||("+"===t[0]||"-"===t[0])&&"="===t[1]||""===t||" "===t},K=/^#([0-9a-f]{6}|[0-9a-f]{3})$/gi,W=function(t,e){var r,n,i;3===e.length&&(e=(r=e[0])+r+(n=e[1])+n+(i=e[2])+i);var o=parseInt(e,16);return"rgb("+(r=o>>16&255)+", "+(n=o>>8&255)+", "+(i=255&o)+")"};function H(t){if(t&&t.splice&&t.isString)return t;if("string"!=typeof t)return t;if("="===t.charAt(1))return t;var e=t.replace(K,W).match(R).map(function(t){return L(t)?t:+t});return e.isString=!0,e}function X(r,n,t,e){var i=t[r],o=e[r];if(i===o)return!0;if(Array.isArray(i)&&Array.isArray(o)&&i.length===o.length)for(var s=0,a=o.length;s<a;s++){var u=i[s],f=o[s];u===f||"number"==typeof u&&"number"==typeof f||X(s,n[r],i,o)}if(!("number"==typeof i&&"number"==typeof o||i&&i.splice&&i.isString&&o&&o.splice&&o.isString)){if("string"==typeof i&&Array.isArray(o)){var l=H(i),h=o.map(H);return t[r]=l,e[r]=h,!0}if("string"==typeof i||"string"==typeof o){var c=Array.isArray(i)&&i[0]===M?i:H(i),p=Array.isArray(o)&&o[0]===M?o:H(o);if(void 0===c)return;for(var y=1;y<c.length;)c[y]===p[y]&&"string"==typeof c[y-1]?(c.splice(y-1,2,c[y-1]+c[y]),p.splice(y-1,2,p[y-1]+p[y])):y++;return c[y=0]===M&&c.shift(),p[0]===M&&p.shift(),t[r]=c,e[r]=p,!0}if("object"===m(i)&&"object"===m(o)){if(Array.isArray(i)&&!i.isString)return i.map(function(t,e){return X(e,n[r],i,o)});for(var d in o)X(d,n[r],i,o);return!0}}return!1}var Y="rgba(",Z=function(t,e,r){var n=2<arguments.length&&void 0!==r?r:"rgb(";return"number"==typeof t[e]&&(t[e-1]===n||t[e-3]===n||t[e-5]===n)};function $(t,e,r,n,i,o,s){var a=s?r:r[t],u=s?n:n[t];if(void 0===u)return a;if(void 0===a||"string"==typeof a||a===u)return u;if("object"===m(a)&&"object"===m(u)){if(!a||!u)return e[t];if("object"===m(a)&&a&&a.isString&&u&&u.splice&&u.isString){for(var f="",l=0,h=a.length;l<h;l++)if(a[l]!==u[l]||"number"!=typeof a[l]||"number"==typeof u[l]){var c="number"==typeof a[l]&&"string"==typeof u[l]&&"="===u[l][1],p="number"!=typeof a[l]?a[l]:c?a[l]+parseFloat(u[l][0]+u[l].substr(2))*i:a[l]+(u[l]-a[l])*i;(Z(a,l)||Z(a,l,Y))&&(p|=0),f+=p,c&&1===o&&(a[l]=a[l]+parseFloat(u[l][0]+u[l].substr(2)))}else f+=a[l];return s||(e[t]=f),f}if(Array.isArray(a)&&a[0]!==M)for(var y=0,d=a.length;y<d;y++)a[y]!==u[y]&&"string"!=typeof e[t]&&$(y,e[t],a,u,i,o);else if("object"===m(a)&&a&&!a.isString)for(var v in a)a[v]!==u[v]&&$(v,e[t],a,u,i,o)}else if("number"==typeof a){var _="string"==typeof u;e[t]=_?a+parseFloat(u[0]+u.substr(2))*i:a+(u-a)*i,_&&1===o&&(r[t]=e[t])}else"function"==typeof u&&(e[t]=u(i));return e[t]}function J(t,e){var i=t[e],o=e.replace(nt,"").split(rt),s=o.length-1,a=Array.isArray(t),u="object"===m(t)&&!a;return u?(t[e]=null,delete t[e]):a&&t.splice(e,1),o.reduce(function(t,e,r){a&&"."!==e&&"["!==e&&(e*=1);var n="["===o[r+1];if("."===e||"["===e)return"."===e?a=!(u=!0):"["===e&&(a=!(u=!1)),t;if(void 0===t[e]){if(a||u)return t[e]=r===s?i:a||n?[]:u?{}:null,u=a=!1,t[e]}else if(void 0!==t[e])return r===s&&(t[e]=i),t[e];return t},t)}function tt(t){if("object"===m(t)&&t)for(var e in t)if(-1!==e.indexOf(".")||-1!==e.indexOf("["))J(t,e);else if("object"===m(t[e])&&t[e]){var r=t[e];for(var n in r)if(-1!==n.indexOf(".")||-1!==n.indexOf("["))J(r,n);else if("object"===m(r[n])&&r[n]){var i=r[n];for(var o in i)-1===o.indexOf(".")&&-1===o.indexOf("[")||J(i,o)}}return t}var et,rt=/([.[])/g,nt=/\]/g,it=Object.freeze({__proto__:null,FRAME_MS:D,TOO_LONG_FRAME_MS:250,CHAINED_TWEENS:U,EVENT_CALLBACK:E,EVENT_UPDATE:V,EVENT_COMPLETE:B,EVENT_START:G,EVENT_REPEAT:z,EVENT_REVERSE:Q,EVENT_PAUSE:"pause",EVENT_PLAY:"play",EVENT_RESTART:P,EVENT_STOP:"stop",EVENT_SEEK:"seek",STRING_PROP:M,NUM_REGEX:R,deepCopy:I,decomposeString:H,decompose:X,RGB:"rgb(",RGBA:Y,isRGBColor:Z,recompose:$,SET_NESTED:tt}),ot={Linear:function(t,e,r){var n=t.length-1,i=n*e,o=Math.floor(i),s=ot.Utils.Linear;return e<0?s(t[0],t[1],i,r):1<e?s(t[n],t[n-1],n-i,r):s(t[o],t[n<o+1?n:o+1],i-o,r)},Bezier:function(t,e,r){for(var n=ot.Utils.Reset(r),i=t.length-1,o=Math.pow,s=ot.Utils.Bernstein,a=Array.isArray(n),u=0;u<=i;u++)if("number"==typeof n)n+=o(1-e,i-u)*o(e,u)*t[u]*s(i,u);else if(a)for(var f=0,l=n.length;f<l;f++)"number"==typeof n[f]?n[f]+=o(1-e,i-u)*o(e,u)*t[u][f]*s(i,u):n[f]=t[u][f];else if("object"===m(n))for(var h in n)"number"==typeof n[h]?n[h]+=o(1-e,i-u)*o(e,u)*t[u][h]*s(i,u):n[h]=t[u][h];else if("string"==typeof n){for(var c="",p=t[Math.round(i*e)],y=1,d=p.length;y<d;y++)c+=p[y];return c}return n},CatmullRom:function(t,e,r){var n=t.length-1,i=n*e,o=Math.floor(i),s=ot.Utils.CatmullRom;return t[0]===t[n]?(e<0&&(o=Math.floor(i=n*(1+e))),s(t[(o-1+n)%n],t[o],t[(o+1)%n],t[(o+2)%n],i-o,r)):e<0?s(t[1],t[1],t[0],t[0],-e,r):1<e?s(t[n-1],t[n-1],t[n],t[n],(0|e)-e,r):s(t[o?o-1:0],t[o],t[n<o+1?n:o+1],t[n<o+2?n:o+2],i-o,r)},Utils:{Linear:function(t,e,r,n){if(t===e||"string"==typeof t){if(e.length&&e.splice&&e.isString){e="";for(var i=0,o=t.length;i<o;i++)e+=t[i]}return e}if("number"==typeof t)return"function"==typeof t?t(r):t+(e-t)*r;if("object"===m(t)){if(void 0!==t.length){var s="string"==typeof t[0]||t.isString;if(s||t[0]===M){for(var a="",u=s?0:1,f=t.length;u<f;u++){var l=0===r?t[u]:1!==r&&"number"==typeof t[u]?t[u]+(e[u]-t[u])*r:e[u];(0<r&&r<1&&Z(t,u)||Z(t,u,Y))&&(l|=0),a+=l}return a}if(n&&n.length&&n.splice)for(var h=0,c=n.length;h<c;h++)n[h]=ot.Utils.Linear(t[h],e[h],r,n[h])}else for(var p in n)n[p]=ot.Utils.Linear(t[p],e[p],r,n[p]);return n}},Reset:function(t){if(Array.isArray(t)){for(var e=0,r=t.length;e<r;e++)t[e]=ot.Utils.Reset(t[e]);return t}if("object"!==m(t))return"number"==typeof t?0:t;for(var n in t)t[n]=ot.Utils.Reset(t[n]);return t},Bernstein:function(t,e){var r=ot.Utils.Factorial;return r(t)/r(e)/r(t-e)},Factorial:(et=[1],function(t){var e=1;if(et[t])return et[t];for(var r=t;1<r;r--)e*=r;return et[t]=e}),CatmullRom:function(t,e,r,n,i,o){if("string"==typeof t)return e;if("number"==typeof t){var s=.5*(r-t),a=.5*(n-e),u=i*i;return(2*e-2*r+s+a)*(i*u)+(-3*e+3*r-2*s-a)*u+s*i+e}if("object"===m(t)){if(void 0!==t.length){if(t[0]===M){for(var f="",l=1,h=t.length;l<h;l++){var c="number"==typeof t[l]?ot.Utils.CatmullRom(t[l],e[l],r[l],n[l],i):n[l];(Z(t,l)||Z(t,l,Y))&&(c|=0),f+=c}return f}for(var p=0,y=o.length;p<y;p++)o[p]=ot.Utils.CatmullRom(t[p],e[p],r[p],n[p],i,o[p])}else for(var d in o)o[d]=ot.Utils.CatmullRom(t[d],e[d],r[d],n[d],i,o[d]);return o}}}},st={};function at(t,e,r){if(!t||!t.nodeType)return e;var n=t.queueID||"q_"+Date.now();t.queueID||(t.queueID=n);var i=st[n];if(i){if(i.object===e&&t===i.tween.node&&r._startTime===i.tween._startTime)N(i.tween);else if("object"===m(e)&&e&&i.object){for(var o in e)o in i.object&&(r._startTime===i.tween._startTime?delete i.object[o]:i.propNormaliseRequired=!0);Object.assign(i.object,e)}return i.object}return"object"===m(e)&&e?(st[n]={tween:r,object:e,propNormaliseRequired:!1},st[n].object):e}function ut(t,e,r){return e?t?"undefined"!=typeof window&&t===window||"undefined"!=typeof document&&t===document?[t]:"string"==typeof t?!!document.querySelectorAll&&document.querySelectorAll(t):Array.isArray(t)?t:t.nodeType?[t]:r?t:[]:null:t?"undefined"!=typeof window&&t===window||"undefined"!=typeof document&&t===document?t:"string"==typeof t?!!document.querySelector&&document.querySelector(t):Array.isArray(t)?t[0]:t.nodeType||r?t:null:null}var ft=0,lt=v.Linear.None,ht=function(){function L(t,e){return _(this,L),this.id=ft++,!t||"object"!==m(t)||e||t.nodeType?t&&(t.nodeType||t.length||"string"==typeof t)&&(t=this.node=ut(t),e=this.object=at(t,e,this)):(e=this.object=t,t=null),this._valuesEnd=null,this._valuesStart=Array.isArray(e)?[]:{},this._duration=1e3,this._easingFunction=lt,this._easingReverse=lt,this._interpolationFunction=ot.Linear,this._startTime=0,this._initTime=0,this._delayTime=0,this._repeat=0,this._r=0,this._isPlaying=!1,this._yoyo=!1,this._reversed=!1,this._onStartCallbackFired=!1,this._pausedTime=null,this._isFinite=!0,this._maxListener=15,this._chainedTweensCount=0,this._prevTime=null,this}return b(L,null,[{key:"fromTo",value:function(t,e,r,n){var i=3<arguments.length&&void 0!==n?n:{};i.quickRender=i.quickRender?i.quickRender:!r;var o=new L(t,e).to(r,i);return i.quickRender&&(o.render().update(o._startTime),o._rendered=!1,o._onStartCallbackFired=!1),o}},{key:"to",value:function(t,e,r){return L.fromTo(t,null,e,r)}},{key:"from",value:function(t,e,r){return L.fromTo(t,e,null,r)}}]),b(L,[{key:"setMaxListener",value:function(t){var e=0<arguments.length&&void 0!==t?t:15;return this._maxListener=e,this}},{key:"on",value:function(t,e){for(var r=this._maxListener,n=t+E,i=0;i<r;i++){var o=n+i;if(!this[o]){this[o]=e;break}}return this}},{key:"once",value:function(t,i){for(var o=this,e=this._maxListener,r=t+E,n=function(t){var n=r+t;if(!o[n])return o[n]=function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];i.apply(o,e),o[n]=null},"break"},s=0;s<e;s++){if("break"===n(s))break}return this}},{key:"off",value:function(t,e){for(var r=this._maxListener,n=t+E,i=0;i<r;i++){var o=n+i;this[o]===e&&(this[o]=null)}return this}},{key:"emit",value:function(t,e,r,n){var i=this._maxListener,o=t+E;if(!this[o+0])return this;for(var s=0;s<i;s++){var a=o+s;this[a]&&this[a](e,r,n)}return this}},{key:"isPlaying",value:function(){return this._isPlaying}},{key:"isStarted",value:function(){return this._onStartCallbackFired}},{key:"reverse",value:function(t){var e=this._reversed;return this._reversed=void 0!==t?t:!e,this}},{key:"reversed",value:function(){return this._reversed}},{key:"pause",value:function(){return this._isPlaying?(this._isPlaying=!1,N(this),this._pausedTime=C(),this.emit("pause",this.object)):this}},{key:"play",value:function(){return this._isPlaying?this:(this._isPlaying=!0,this._startTime+=C()-this._pausedTime,this._initTime=this._startTime,s(this),this._pausedTime=C(),this.emit("play",this.object))}},{key:"restart",value:function(){return this._repeat=this._r,this.reassignValues(),s(this),this.emit(P,this.object)}},{key:"seek",value:function(t,e){var r=this._duration,n=this._initTime,i=this._startTime,o=this._reversed,s=n+t;return this._isPlaying=!0,s<i&&n<=i&&(this._startTime-=r,this._reversed=!o),this.update(t,!1),this.emit("seek",t,this.object),e?this:this.pause()}},{key:"duration",value:function(t){return this._duration="function"==typeof t?t(this._duration):t,this}},{key:"to",value:function(t,e){var r=1<arguments.length&&void 0!==e?e:1e3;if(this._valuesEnd=t,"number"==typeof r||"function"==typeof r)this._duration="function"==typeof r?r(this._duration):r;else if("object"===m(r))for(var n in r)if("function"==typeof this[n]){var i=S(Array.isArray(r[n])?r[n]:[r[n]],4),o=i[0],s=void 0===o?null:o,a=i[1],u=void 0===a?null:a,f=i[2],l=void 0===f?null:f,h=i[3],c=void 0===h?null:h;this[n](s,u,l,c)}return this}},{key:"render",value:function(){if(this._rendered)return this;var t=this._valuesStart,e=this._valuesEnd,r=this.object,n=this.node,i=this.InitialValues;if(tt(r),tt(e),n&&n.queueID&&st[n.queueID]){var o=st[n.queueID];if(o.propNormaliseRequired&&o.tween!==this){for(var s in e)o.tween._valuesEnd[s];o.normalisedProp=!0,o.propNormaliseRequired=!1}}if(n&&i&&(r&&0!==Object.keys(r).length?e&&0!==Object.keys(e).length||(e=this._valuesEnd=i(n,r)):r=this.object=at(n,i(n,e),this)),!t.processed){for(var a in e){var u=r&&r[a]&&I(r[a]),f=e[a];if(!(q[a]&&q[a].init&&(q[a].init.call(this,u,f,a,r),void 0===u&&t[a]&&(u=t[a]),q[a].skipProcess))&&!("number"==typeof u&&isNaN(u)||null===u||null===f||!1===u||!1===f||void 0===u||void 0===f||u===f)){if(t[a]=u,Array.isArray(f))if(Array.isArray(u))f.isString&&r[a].isString&&!u.isString?u.isString=!0:X(a,r,t,e);else{f.unshift(u);for(var l=0,h=f.length;l<h;l++)"string"==typeof f[l]&&(f[l]=H(f[l]))}else X(a,r,t,e);"number"!=typeof u||"string"!=typeof f||f[1]}}t.processed=!0}return L.Renderer&&this.node&&L.Renderer.init&&(L.Renderer.init.call(this,r,t,e),this.__render=!0),this._rendered=!0,this}},{key:"start",value:function(t){return this._startTime=void 0!==t?"string"==typeof t?C()+parseFloat(t):t:C(),this._startTime+=this._delayTime,this._initTime=this._prevTime=this._startTime,this._onStartCallbackFired=!1,this._rendered=!1,this._isPlaying=!0,s(this),this}},{key:"stop",value:function(){var t=this._isPlaying,e=this._isFinite,r=this.object,n=this._startTime,i=this._duration,o=this._r,s=this._yoyo,a=this._reversed;if(!t)return this;var u=e?(o+1)%2==1:!a;return this._reversed=!1,s&&u?this.update(n):this.update(n+i),N(this),this.emit("stop",r)}},{key:"delay",value:function(t){return this._delayTime="function"==typeof t?t(this._delayTime):t,this}},{key:"chainedTweens",value:function(){if(this._chainedTweensCount=arguments.length,!this._chainedTweensCount)return this;for(var t=0,e=this._chainedTweensCount;t<e;t++)this[U+t]=arguments[t];return this}},{key:"repeat",value:function(t){return this._repeat=this._duration?"function"==typeof t?t(this._repeat):t:0,this._r=this._repeat,this._isFinite=isFinite(t),this}},{key:"reverseDelay",value:function(t){return this._reverseDelayTime="function"==typeof t?t(this._reverseDelayTime):t,this}},{key:"yoyo",value:function(t,e){return this._yoyo="function"==typeof t?t(this._yoyo):null===t?this._yoyo:t,t||(this._reversed=!1),this._easingReverse=e||null,this}},{key:"easing",value:function(t){return this._easingFunction=t,this}},{key:"interpolation",value:function(t){return"function"==typeof t&&(this._interpolationFunction=t),this}},{key:"reassignValues",value:function(t){var e=this._valuesStart,r=this.object,n=this._delayTime;for(var i in this._isPlaying=!0,this._startTime=void 0!==t?t:C(),this._startTime+=n,this._reversed=!1,s(this),e){var o=e[i];r[i]=o}return this}},{key:"update",value:function(t,e,r){var n,i,o,s=this._onStartCallbackFired,a=this._easingFunction,u=this._interpolationFunction,f=this._easingReverse,l=this._repeat,h=this._delayTime,c=this._reverseDelayTime,p=this._yoyo,y=this._reversed,d=this._startTime,v=this._prevTime,_=this._duration,m=this._valuesStart,g=this._valuesEnd,b=this.object,T=this._isFinite,O=this._isPlaying,w=this.__render,k=this._chainedTweensCount,j=0;if(_){var A=(t=void 0!==t?t:C())-v;if(this._prevTime=t,250<A&&F()&&x()&&(t-=A-D),!O||t<d&&!r)return!0;n=1<(n=(t-d)/_)?1:n,n=y?1-n:n}else n=1,l=0;if(s||(this._rendered||(this.render(),this._rendered=!0),this.emit(G,b),this._onStartCallbackFired=!0),i=y&&f||a,!b)return!0;for(o in g){var S=m[o];if(null!=S||q[o]&&q[o].update){var E=g[o],P=i[o]?i[o](n):("function"==typeof i?i:lt)(n),M=u[o]?u[o]:"function"==typeof u?u:ot.Linear;"number"==typeof E?b[o]=S+(E-S)*P:!Array.isArray(E)||E.isString||Array.isArray(S)?E&&E.update?E.update(P):"function"==typeof E?b[o]=E(P):"string"==typeof E&&"number"==typeof S?b[o]=S+parseFloat(E[0]+E.substr(2))*P:$(o,b,m,g,P,n):b[o]=M(E,P,b[o]),q[o]&&q[o].update&&q[o].update.call(this,b[o],S,E,P,n,o),j++}}if(!j)return N(this),!1;if(w&&L.Renderer&&L.Renderer.update&&L.Renderer.update.call(this,b,n),this.emit(V,b,n,t),1===n||y&&0===n){if(0<l&&0<_){if(T&&this._repeat--,p)this._reversed=!y;else for(o in g){var R=g[o];"string"==typeof R&&"number"==typeof m[o]&&(m[o]+=parseFloat(R[0]+R.substr(2)))}return this.emit(p&&!y?Q:z,b),this._startTime=y&&c?t-c:t+h,!0}if(e||(this._isPlaying=!1,N(this),ft--),this.emit(B,b),this._repeat=this._r,k)for(var I=0;I<k;I++)this[U+I].start(t+_);return!1}return!0}}]),L}(),ct=function(){function t(){_(this,t),this.totalTime=0,this.labels=[],this.offsets=[]}return b(t,[{key:"parseLabel",value:function(t,e){var r=this.offsets,n=this.labels,i=n.indexOf(t);if("string"==typeof t&&-1!==t.indexOf("=")&&!e&&-1===i){var o=t.substr(t.indexOf("=")-1,2),s=t.split(o);e=2===s.length?o+s[1]:null,t=s[0],i=n.indexOf(t)}if(-1!==i&&t){var a=r[i]||0;if("number"==typeof e)a=e;else if("string"==typeof e&&-1!==e.indexOf("=")){var u=e.charAt(0);e=Number(e.substr(2)),"+"===u||"-"===u?a+=parseFloat(u+e):"*"===u?a*=e:"/"===u?a/=e:"%"===u&&(a*=e/100)}return a}return"number"==typeof e?e:0}},{key:"addLabel",value:function(t,e){return this.labels.push(t),this.offsets.push(this.parseLabel(t,e)),this}},{key:"setLabel",value:function(t,e){var r=this.labels.indexOf(t);return-1!==r&&this.offsets.splice(r,1,this.parseLabel(t,e)),this}},{key:"eraseLabel",value:function(t){var e=this.labels.indexOf(t);return-1!==e&&(this.labels.splice(e,1),this.offsets.splice(e,1)),this}}]),t}(),pt=0,yt=function(){function r(t){var e;return _(this,r),(e=A(this,w(r).call(this)))._duration=0,e._startTime=t&&void 0!==t.startTime?t.startTime:C(),e._tweens=[],e.elapsed=0,e._id=pt++,e._defaultParams=t,e.position=new ct,e.position.addLabel("afterLast",e._duration),e.position.addLabel("afterInit",e._startTime),e._onStartCallbackFired=!1,A(e,j(e))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&k(t,e)}(r,ht),b(r,[{key:"mapTotal",value:function(t){return t.call(this,this._tweens),this}},{key:"timingOrder",value:function(t){var r=t(this._tweens.map(function(t){return t._startTime}));return this._tweens.map(function(t,e){t._startTime=r[e]}),this}},{key:"getTiming",value:function(t,e,r,n){var i=3<arguments.length&&void 0!==n?n:0;if("reverse"===t){var o=r.stagger,s=(o||0)*(e.length-1);return e.map(function(t,e){return s-(o||0)*e+i})}if("async"===t)return e.map(function(t){return i});if("sequence"===t||"delayed"===t){var a=r.stagger;return a=a||(r.duration||1e3)/(e.length-1),e.map(function(t,e){return a*e+i})}if("oneByOne"===t)return e.map(function(t){return r.duration});if("shuffle"===t){var u=r.stagger;return function(t){var e,r,n;for(n=t.length;n;--n)e=Math.floor(Math.random()*n),r=t[n-1],t[n-1]=t[e],t[e]=r;return t}(e.map(function(t,e){return(u||0)*e+i}))}var f=r.stagger;return e.map(function(t,e){return(f||0)*e+i})}},{key:"fromTo",value:function(t,e,r,n){if((t=ut(t,!0,!0))&&t.length){this._defaultParams&&(n=n?O({},this._defaultParams,{},n):this._defaultParams);for(var i,o=n.label,s="number"==typeof o?o:this.position.parseLabel(void 0!==o?o:"afterLast",null),a=this.getTiming(n.mode,t,n,s),u=0,f=t.length;u<f;u++)i=t[u],this.add(ht.fromTo(i,"function"==typeof e?e(u,t.length):"object"===m(e)&&e?O({},e):null,"function"==typeof r?r(u,t.length):r,"function"==typeof n?n(u,t.length):n),a[u])}return this.start()}},{key:"from",value:function(t,e,r){return this.fromTo(t,e,null,r)}},{key:"to",value:function(t,e,r){return this.fromTo(t,null,e,r)}},{key:"addLabel",value:function(t,e){return this.position.addLabel(t,e),this}},{key:"map",value:function(t){for(var e=0,r=this._tweens.length;e<r;e++){var n=this._tweens[e];t(n,e),this._duration=Math.max(this._duration,n._duration+n._startTime)}return this}},{key:"add",value:function(t,e){var r=this;if(Array.isArray(t))return t.map(function(t){r.add(t,e)}),this;"object"!==m(t)||t instanceof ht||(t=new ht(t.from).to(t.to,t));var n=this._defaultParams,i=this._duration;if(n)for(var o in n)"function"==typeof t[o]&&t[o](n[o]);var s="number"==typeof e?e:this.position.parseLabel(void 0!==e?e:"afterLast",null);return t._startTime=Math.max(this._startTime,t._delayTime,s),t._delayTime=s,t._isPlaying=!0,this._duration=Math.max(i,Math.max(t._startTime+t._delayTime,t._duration)),this._tweens.push(t),this.position.setLabel("afterLast",this._duration),this}},{key:"restart",value:function(){return this._startTime+=C(),s(this),this.emit(P)}},{key:"easing",value:function(e){return this.map(function(t){return t.easing(e)})}},{key:"interpolation",value:function(e){return this.map(function(t){return t.interpolation(e)})}},{key:"update",value:function(t){var e,r=this._tweens,n=this._duration,i=this._reverseDelayTime,o=this._startTime,s=this._reversed,a=this._yoyo,u=this._repeat,f=this._isFinite,l=this._isPlaying,h=this._prevTime,c=this._onStartCallbackFired,p=(t=void 0!==t?t:C())-h;if(this._prevTime=t,250<p&&F()&&x()&&(t-=p-D),!l||t<o)return!0;e=1<(e=(t-o)/n)?1:e,e=s?1-e:e,this.elapsed=e,c||(this.emit(G),this._onStartCallbackFired=!0);for(var y=t-o,d=s?n-y:y,v=0;v<r.length;)r[v].update(d),v++;if(this.emit(V,e,y),1===e||s&&0===e){if(u){for(f&&this._repeat--,this.emit(s?Q:z),a&&(this._reversed=!s,this.timingOrder(function(t){return t.reverse()})),this._startTime=s&&i?t+i:t,v=0;v<r.length;)r[v].reassignValues(t),v++;return!0}return this.emit(B),this._repeat=this._r,N(this),this._isPlaying=!1}return!0}},{key:"progress",value:function(t){return void 0!==t?this.update(t*this._duration):this.elapsed}}]),r}();t.Easing=v,t.FrameThrottle=function(t){y=1.05*(0<arguments.length&&void 0!==t?t:120)},t.Interpolation=ot,t.Interpolator=function(i,o){var s=Array.isArray(i)&&!i.isString,a="string"==typeof i?i:s?i.slice():O({},i);if(s)for(var t=0,e=i.length;t<e;t++)i[t]===o[t]&&"number"==typeof i[t]&&"number"!=typeof o[t]||X(t,a,i,o);else if("object"===m(i))for(var r in i)i[r]===o[r]&&"number"==typeof i[r]&&"number"!=typeof o[r]||X(r,a,i,o);else if("string"==typeof i){i=H(i),o=H(o);for(var n=1;n<i.length;)i[n]===o[n]&&"string"==typeof i[n-1]?(i.splice(n-1,2,i[n-1]+i[n]),o.splice(n-1,2,o[n-1]+o[n])):n++}return function(t){if(s)for(var e=0,r=i.length;e<r;e++)$(e,a,i,o,t);else if("object"===m(a))for(var n in i)$(n,a,i,o,t);else"string"==typeof a&&(a=$(0,0,i,o,t,t,!0));return a}},t.Plugins=q,t.Selector=ut,t.Timeline=yt,t.ToggleLagSmoothing=function(t){d=!(0<arguments.length&&void 0!==t)||t},t.Tween=ht,t.add=s,t.autoPlay=function(t){l=t},t.get=e,t.getAll=function(){return u},t.has=function(t){return null!==e(t)},t.isRunning=F,t.now=C,t.onRequestTick=function(t){h.push(t)},t.onTick=function(t){return u.push({update:t})},t.remove=N,t.removeAll=function(){u.length=0,a(o),f=!1},t.update=i,t.utils=it,Object.defineProperty(t,"__esModule",{value:!0})});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(17)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**!
	 * @fileOverview Kickass library to create and place poppers near their reference elements.
	 * @version 1.16.1
	 * @license
	 * Copyright (c) 2016 Federico Zivolo and contributors
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */
	(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.Popper = factory());
	}(this, (function () { 'use strict';
	
	var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';
	
	var timeoutDuration = function () {
	  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
	  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
	    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
	      return 1;
	    }
	  }
	  return 0;
	}();
	
	function microtaskDebounce(fn) {
	  var called = false;
	  return function () {
	    if (called) {
	      return;
	    }
	    called = true;
	    window.Promise.resolve().then(function () {
	      called = false;
	      fn();
	    });
	  };
	}
	
	function taskDebounce(fn) {
	  var scheduled = false;
	  return function () {
	    if (!scheduled) {
	      scheduled = true;
	      setTimeout(function () {
	        scheduled = false;
	        fn();
	      }, timeoutDuration);
	    }
	  };
	}
	
	var supportsMicroTasks = isBrowser && window.Promise;
	
	/**
	* Create a debounced version of a method, that's asynchronously deferred
	* but called in the minimum time possible.
	*
	* @method
	* @memberof Popper.Utils
	* @argument {Function} fn
	* @returns {Function}
	*/
	var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
	
	/**
	 * Check if the given variable is a function
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Any} functionToCheck - variable to check
	 * @returns {Boolean} answer to: is a function?
	 */
	function isFunction(functionToCheck) {
	  var getType = {};
	  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	}
	
	/**
	 * Get CSS computed property of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Eement} element
	 * @argument {String} property
	 */
	function getStyleComputedProperty(element, property) {
	  if (element.nodeType !== 1) {
	    return [];
	  }
	  // NOTE: 1 DOM access here
	  var window = element.ownerDocument.defaultView;
	  var css = window.getComputedStyle(element, null);
	  return property ? css[property] : css;
	}
	
	/**
	 * Returns the parentNode or the host of the element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} parent
	 */
	function getParentNode(element) {
	  if (element.nodeName === 'HTML') {
	    return element;
	  }
	  return element.parentNode || element.host;
	}
	
	/**
	 * Returns the scrolling parent of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} scroll parent
	 */
	function getScrollParent(element) {
	  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
	  if (!element) {
	    return document.body;
	  }
	
	  switch (element.nodeName) {
	    case 'HTML':
	    case 'BODY':
	      return element.ownerDocument.body;
	    case '#document':
	      return element.body;
	  }
	
	  // Firefox want us to check `-x` and `-y` variations as well
	
	  var _getStyleComputedProp = getStyleComputedProperty(element),
	      overflow = _getStyleComputedProp.overflow,
	      overflowX = _getStyleComputedProp.overflowX,
	      overflowY = _getStyleComputedProp.overflowY;
	
	  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
	    return element;
	  }
	
	  return getScrollParent(getParentNode(element));
	}
	
	/**
	 * Returns the reference node of the reference object, or the reference object itself.
	 * @method
	 * @memberof Popper.Utils
	 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
	 * @returns {Element} parent
	 */
	function getReferenceNode(reference) {
	  return reference && reference.referenceNode ? reference.referenceNode : reference;
	}
	
	var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
	var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
	
	/**
	 * Determines if the browser is Internet Explorer
	 * @method
	 * @memberof Popper.Utils
	 * @param {Number} version to check
	 * @returns {Boolean} isIE
	 */
	function isIE(version) {
	  if (version === 11) {
	    return isIE11;
	  }
	  if (version === 10) {
	    return isIE10;
	  }
	  return isIE11 || isIE10;
	}
	
	/**
	 * Returns the offset parent of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} offset parent
	 */
	function getOffsetParent(element) {
	  if (!element) {
	    return document.documentElement;
	  }
	
	  var noOffsetParent = isIE(10) ? document.body : null;
	
	  // NOTE: 1 DOM access here
	  var offsetParent = element.offsetParent || null;
	  // Skip hidden elements which don't have an offsetParent
	  while (offsetParent === noOffsetParent && element.nextElementSibling) {
	    offsetParent = (element = element.nextElementSibling).offsetParent;
	  }
	
	  var nodeName = offsetParent && offsetParent.nodeName;
	
	  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
	    return element ? element.ownerDocument.documentElement : document.documentElement;
	  }
	
	  // .offsetParent will return the closest TH, TD or TABLE in case
	  // no offsetParent is present, I hate this job...
	  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
	    return getOffsetParent(offsetParent);
	  }
	
	  return offsetParent;
	}
	
	function isOffsetContainer(element) {
	  var nodeName = element.nodeName;
	
	  if (nodeName === 'BODY') {
	    return false;
	  }
	  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
	}
	
	/**
	 * Finds the root node (document, shadowDOM root) of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} node
	 * @returns {Element} root node
	 */
	function getRoot(node) {
	  if (node.parentNode !== null) {
	    return getRoot(node.parentNode);
	  }
	
	  return node;
	}
	
	/**
	 * Finds the offset parent common to the two provided nodes
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element1
	 * @argument {Element} element2
	 * @returns {Element} common offset parent
	 */
	function findCommonOffsetParent(element1, element2) {
	  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
	  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
	    return document.documentElement;
	  }
	
	  // Here we make sure to give as "start" the element that comes first in the DOM
	  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
	  var start = order ? element1 : element2;
	  var end = order ? element2 : element1;
	
	  // Get common ancestor container
	  var range = document.createRange();
	  range.setStart(start, 0);
	  range.setEnd(end, 0);
	  var commonAncestorContainer = range.commonAncestorContainer;
	
	  // Both nodes are inside #document
	
	  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
	    if (isOffsetContainer(commonAncestorContainer)) {
	      return commonAncestorContainer;
	    }
	
	    return getOffsetParent(commonAncestorContainer);
	  }
	
	  // one of the nodes is inside shadowDOM, find which one
	  var element1root = getRoot(element1);
	  if (element1root.host) {
	    return findCommonOffsetParent(element1root.host, element2);
	  } else {
	    return findCommonOffsetParent(element1, getRoot(element2).host);
	  }
	}
	
	/**
	 * Gets the scroll value of the given element in the given side (top and left)
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @argument {String} side `top` or `left`
	 * @returns {number} amount of scrolled pixels
	 */
	function getScroll(element) {
	  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
	
	  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
	  var nodeName = element.nodeName;
	
	  if (nodeName === 'BODY' || nodeName === 'HTML') {
	    var html = element.ownerDocument.documentElement;
	    var scrollingElement = element.ownerDocument.scrollingElement || html;
	    return scrollingElement[upperSide];
	  }
	
	  return element[upperSide];
	}
	
	/*
	 * Sum or subtract the element scroll values (left and top) from a given rect object
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} rect - Rect object you want to change
	 * @param {HTMLElement} element - The element from the function reads the scroll values
	 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
	 * @return {Object} rect - The modifier rect object
	 */
	function includeScroll(rect, element) {
	  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	  var scrollTop = getScroll(element, 'top');
	  var scrollLeft = getScroll(element, 'left');
	  var modifier = subtract ? -1 : 1;
	  rect.top += scrollTop * modifier;
	  rect.bottom += scrollTop * modifier;
	  rect.left += scrollLeft * modifier;
	  rect.right += scrollLeft * modifier;
	  return rect;
	}
	
	/*
	 * Helper to detect borders of a given element
	 * @method
	 * @memberof Popper.Utils
	 * @param {CSSStyleDeclaration} styles
	 * Result of `getStyleComputedProperty` on the given element
	 * @param {String} axis - `x` or `y`
	 * @return {number} borders - The borders size of the given axis
	 */
	
	function getBordersSize(styles, axis) {
	  var sideA = axis === 'x' ? 'Left' : 'Top';
	  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
	
	  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
	}
	
	function getSize(axis, body, html, computedStyle) {
	  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
	}
	
	function getWindowSizes(document) {
	  var body = document.body;
	  var html = document.documentElement;
	  var computedStyle = isIE(10) && getComputedStyle(html);
	
	  return {
	    height: getSize('Height', body, html, computedStyle),
	    width: getSize('Width', body, html, computedStyle)
	  };
	}
	
	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	
	
	
	
	var defineProperty = function (obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};
	
	/**
	 * Given element offsets, generate an output similar to getBoundingClientRect
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Object} offsets
	 * @returns {Object} ClientRect like output
	 */
	function getClientRect(offsets) {
	  return _extends({}, offsets, {
	    right: offsets.left + offsets.width,
	    bottom: offsets.top + offsets.height
	  });
	}
	
	/**
	 * Get bounding client rect of given element
	 * @method
	 * @memberof Popper.Utils
	 * @param {HTMLElement} element
	 * @return {Object} client rect
	 */
	function getBoundingClientRect(element) {
	  var rect = {};
	
	  // IE10 10 FIX: Please, don't ask, the element isn't
	  // considered in DOM in some circumstances...
	  // This isn't reproducible in IE10 compatibility mode of IE11
	  try {
	    if (isIE(10)) {
	      rect = element.getBoundingClientRect();
	      var scrollTop = getScroll(element, 'top');
	      var scrollLeft = getScroll(element, 'left');
	      rect.top += scrollTop;
	      rect.left += scrollLeft;
	      rect.bottom += scrollTop;
	      rect.right += scrollLeft;
	    } else {
	      rect = element.getBoundingClientRect();
	    }
	  } catch (e) {}
	
	  var result = {
	    left: rect.left,
	    top: rect.top,
	    width: rect.right - rect.left,
	    height: rect.bottom - rect.top
	  };
	
	  // subtract scrollbar size from sizes
	  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
	  var width = sizes.width || element.clientWidth || result.width;
	  var height = sizes.height || element.clientHeight || result.height;
	
	  var horizScrollbar = element.offsetWidth - width;
	  var vertScrollbar = element.offsetHeight - height;
	
	  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
	  // we make this check conditional for performance reasons
	  if (horizScrollbar || vertScrollbar) {
	    var styles = getStyleComputedProperty(element);
	    horizScrollbar -= getBordersSize(styles, 'x');
	    vertScrollbar -= getBordersSize(styles, 'y');
	
	    result.width -= horizScrollbar;
	    result.height -= vertScrollbar;
	  }
	
	  return getClientRect(result);
	}
	
	function getOffsetRectRelativeToArbitraryNode(children, parent) {
	  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	  var isIE10 = isIE(10);
	  var isHTML = parent.nodeName === 'HTML';
	  var childrenRect = getBoundingClientRect(children);
	  var parentRect = getBoundingClientRect(parent);
	  var scrollParent = getScrollParent(children);
	
	  var styles = getStyleComputedProperty(parent);
	  var borderTopWidth = parseFloat(styles.borderTopWidth);
	  var borderLeftWidth = parseFloat(styles.borderLeftWidth);
	
	  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
	  if (fixedPosition && isHTML) {
	    parentRect.top = Math.max(parentRect.top, 0);
	    parentRect.left = Math.max(parentRect.left, 0);
	  }
	  var offsets = getClientRect({
	    top: childrenRect.top - parentRect.top - borderTopWidth,
	    left: childrenRect.left - parentRect.left - borderLeftWidth,
	    width: childrenRect.width,
	    height: childrenRect.height
	  });
	  offsets.marginTop = 0;
	  offsets.marginLeft = 0;
	
	  // Subtract margins of documentElement in case it's being used as parent
	  // we do this only on HTML because it's the only element that behaves
	  // differently when margins are applied to it. The margins are included in
	  // the box of the documentElement, in the other cases not.
	  if (!isIE10 && isHTML) {
	    var marginTop = parseFloat(styles.marginTop);
	    var marginLeft = parseFloat(styles.marginLeft);
	
	    offsets.top -= borderTopWidth - marginTop;
	    offsets.bottom -= borderTopWidth - marginTop;
	    offsets.left -= borderLeftWidth - marginLeft;
	    offsets.right -= borderLeftWidth - marginLeft;
	
	    // Attach marginTop and marginLeft because in some circumstances we may need them
	    offsets.marginTop = marginTop;
	    offsets.marginLeft = marginLeft;
	  }
	
	  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
	    offsets = includeScroll(offsets, parent);
	  }
	
	  return offsets;
	}
	
	function getViewportOffsetRectRelativeToArtbitraryNode(element) {
	  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  var html = element.ownerDocument.documentElement;
	  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
	  var width = Math.max(html.clientWidth, window.innerWidth || 0);
	  var height = Math.max(html.clientHeight, window.innerHeight || 0);
	
	  var scrollTop = !excludeScroll ? getScroll(html) : 0;
	  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;
	
	  var offset = {
	    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
	    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
	    width: width,
	    height: height
	  };
	
	  return getClientRect(offset);
	}
	
	/**
	 * Check if the given element is fixed or is inside a fixed parent
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @argument {Element} customContainer
	 * @returns {Boolean} answer to "isFixed?"
	 */
	function isFixed(element) {
	  var nodeName = element.nodeName;
	  if (nodeName === 'BODY' || nodeName === 'HTML') {
	    return false;
	  }
	  if (getStyleComputedProperty(element, 'position') === 'fixed') {
	    return true;
	  }
	  var parentNode = getParentNode(element);
	  if (!parentNode) {
	    return false;
	  }
	  return isFixed(parentNode);
	}
	
	/**
	 * Finds the first parent of an element that has a transformed property defined
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} first transformed parent or documentElement
	 */
	
	function getFixedPositionOffsetParent(element) {
	  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
	  if (!element || !element.parentElement || isIE()) {
	    return document.documentElement;
	  }
	  var el = element.parentElement;
	  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
	    el = el.parentElement;
	  }
	  return el || document.documentElement;
	}
	
	/**
	 * Computed the boundaries limits and return them
	 * @method
	 * @memberof Popper.Utils
	 * @param {HTMLElement} popper
	 * @param {HTMLElement} reference
	 * @param {number} padding
	 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
	 * @param {Boolean} fixedPosition - Is in fixed position mode
	 * @returns {Object} Coordinates of the boundaries
	 */
	function getBoundaries(popper, reference, padding, boundariesElement) {
	  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
	
	  // NOTE: 1 DOM access here
	
	  var boundaries = { top: 0, left: 0 };
	  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
	
	  // Handle viewport case
	  if (boundariesElement === 'viewport') {
	    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
	  } else {
	    // Handle other cases based on DOM element used as boundaries
	    var boundariesNode = void 0;
	    if (boundariesElement === 'scrollParent') {
	      boundariesNode = getScrollParent(getParentNode(reference));
	      if (boundariesNode.nodeName === 'BODY') {
	        boundariesNode = popper.ownerDocument.documentElement;
	      }
	    } else if (boundariesElement === 'window') {
	      boundariesNode = popper.ownerDocument.documentElement;
	    } else {
	      boundariesNode = boundariesElement;
	    }
	
	    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);
	
	    // In case of HTML, we need a different computation
	    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
	      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
	          height = _getWindowSizes.height,
	          width = _getWindowSizes.width;
	
	      boundaries.top += offsets.top - offsets.marginTop;
	      boundaries.bottom = height + offsets.top;
	      boundaries.left += offsets.left - offsets.marginLeft;
	      boundaries.right = width + offsets.left;
	    } else {
	      // for all the other DOM elements, this one is good
	      boundaries = offsets;
	    }
	  }
	
	  // Add paddings
	  padding = padding || 0;
	  var isPaddingNumber = typeof padding === 'number';
	  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
	  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
	  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
	  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
	
	  return boundaries;
	}
	
	function getArea(_ref) {
	  var width = _ref.width,
	      height = _ref.height;
	
	  return width * height;
	}
	
	/**
	 * Utility used to transform the `auto` placement to the placement with more
	 * available space.
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
	  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
	
	  if (placement.indexOf('auto') === -1) {
	    return placement;
	  }
	
	  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
	
	  var rects = {
	    top: {
	      width: boundaries.width,
	      height: refRect.top - boundaries.top
	    },
	    right: {
	      width: boundaries.right - refRect.right,
	      height: boundaries.height
	    },
	    bottom: {
	      width: boundaries.width,
	      height: boundaries.bottom - refRect.bottom
	    },
	    left: {
	      width: refRect.left - boundaries.left,
	      height: boundaries.height
	    }
	  };
	
	  var sortedAreas = Object.keys(rects).map(function (key) {
	    return _extends({
	      key: key
	    }, rects[key], {
	      area: getArea(rects[key])
	    });
	  }).sort(function (a, b) {
	    return b.area - a.area;
	  });
	
	  var filteredAreas = sortedAreas.filter(function (_ref2) {
	    var width = _ref2.width,
	        height = _ref2.height;
	    return width >= popper.clientWidth && height >= popper.clientHeight;
	  });
	
	  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
	
	  var variation = placement.split('-')[1];
	
	  return computedPlacement + (variation ? '-' + variation : '');
	}
	
	/**
	 * Get offsets to the reference element
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} state
	 * @param {Element} popper - the popper element
	 * @param {Element} reference - the reference element (the popper will be relative to this)
	 * @param {Element} fixedPosition - is in fixed position mode
	 * @returns {Object} An object containing the offsets which will be applied to the popper
	 */
	function getReferenceOffsets(state, popper, reference) {
	  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
	
	  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
	  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
	}
	
	/**
	 * Get the outer sizes of the given element (offset size + margins)
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Object} object containing width and height properties
	 */
	function getOuterSizes(element) {
	  var window = element.ownerDocument.defaultView;
	  var styles = window.getComputedStyle(element);
	  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
	  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
	  var result = {
	    width: element.offsetWidth + y,
	    height: element.offsetHeight + x
	  };
	  return result;
	}
	
	/**
	 * Get the opposite placement of the given one
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement
	 * @returns {String} flipped placement
	 */
	function getOppositePlacement(placement) {
	  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
	  return placement.replace(/left|right|bottom|top/g, function (matched) {
	    return hash[matched];
	  });
	}
	
	/**
	 * Get offsets to the popper
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} position - CSS position the Popper will get applied
	 * @param {HTMLElement} popper - the popper element
	 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
	 * @param {String} placement - one of the valid placement options
	 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
	 */
	function getPopperOffsets(popper, referenceOffsets, placement) {
	  placement = placement.split('-')[0];
	
	  // Get popper node sizes
	  var popperRect = getOuterSizes(popper);
	
	  // Add position, width and height to our offsets object
	  var popperOffsets = {
	    width: popperRect.width,
	    height: popperRect.height
	  };
	
	  // depending by the popper placement we have to compute its offsets slightly differently
	  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
	  var mainSide = isHoriz ? 'top' : 'left';
	  var secondarySide = isHoriz ? 'left' : 'top';
	  var measurement = isHoriz ? 'height' : 'width';
	  var secondaryMeasurement = !isHoriz ? 'height' : 'width';
	
	  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
	  if (placement === secondarySide) {
	    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
	  } else {
	    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
	  }
	
	  return popperOffsets;
	}
	
	/**
	 * Mimics the `find` method of Array
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Array} arr
	 * @argument prop
	 * @argument value
	 * @returns index or -1
	 */
	function find(arr, check) {
	  // use native find if supported
	  if (Array.prototype.find) {
	    return arr.find(check);
	  }
	
	  // use `filter` to obtain the same behavior of `find`
	  return arr.filter(check)[0];
	}
	
	/**
	 * Return the index of the matching object
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Array} arr
	 * @argument prop
	 * @argument value
	 * @returns index or -1
	 */
	function findIndex(arr, prop, value) {
	  // use native findIndex if supported
	  if (Array.prototype.findIndex) {
	    return arr.findIndex(function (cur) {
	      return cur[prop] === value;
	    });
	  }
	
	  // use `find` + `indexOf` if `findIndex` isn't supported
	  var match = find(arr, function (obj) {
	    return obj[prop] === value;
	  });
	  return arr.indexOf(match);
	}
	
	/**
	 * Loop trough the list of modifiers and run them in order,
	 * each of them will then edit the data object.
	 * @method
	 * @memberof Popper.Utils
	 * @param {dataObject} data
	 * @param {Array} modifiers
	 * @param {String} ends - Optional modifier name used as stopper
	 * @returns {dataObject}
	 */
	function runModifiers(modifiers, data, ends) {
	  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
	
	  modifiersToRun.forEach(function (modifier) {
	    if (modifier['function']) {
	      // eslint-disable-line dot-notation
	      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
	    }
	    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
	    if (modifier.enabled && isFunction(fn)) {
	      // Add properties to offsets to make them a complete clientRect object
	      // we do this before each modifier to make sure the previous one doesn't
	      // mess with these values
	      data.offsets.popper = getClientRect(data.offsets.popper);
	      data.offsets.reference = getClientRect(data.offsets.reference);
	
	      data = fn(data, modifier);
	    }
	  });
	
	  return data;
	}
	
	/**
	 * Updates the position of the popper, computing the new offsets and applying
	 * the new style.<br />
	 * Prefer `scheduleUpdate` over `update` because of performance reasons.
	 * @method
	 * @memberof Popper
	 */
	function update() {
	  // if popper is destroyed, don't perform any further update
	  if (this.state.isDestroyed) {
	    return;
	  }
	
	  var data = {
	    instance: this,
	    styles: {},
	    arrowStyles: {},
	    attributes: {},
	    flipped: false,
	    offsets: {}
	  };
	
	  // compute reference element offsets
	  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);
	
	  // compute auto placement, store placement inside the data object,
	  // modifiers will be able to edit `placement` if needed
	  // and refer to originalPlacement to know the original value
	  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);
	
	  // store the computed placement inside `originalPlacement`
	  data.originalPlacement = data.placement;
	
	  data.positionFixed = this.options.positionFixed;
	
	  // compute the popper offsets
	  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
	
	  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';
	
	  // run the modifiers
	  data = runModifiers(this.modifiers, data);
	
	  // the first `update` will call `onCreate` callback
	  // the other ones will call `onUpdate` callback
	  if (!this.state.isCreated) {
	    this.state.isCreated = true;
	    this.options.onCreate(data);
	  } else {
	    this.options.onUpdate(data);
	  }
	}
	
	/**
	 * Helper used to know if the given modifier is enabled.
	 * @method
	 * @memberof Popper.Utils
	 * @returns {Boolean}
	 */
	function isModifierEnabled(modifiers, modifierName) {
	  return modifiers.some(function (_ref) {
	    var name = _ref.name,
	        enabled = _ref.enabled;
	    return enabled && name === modifierName;
	  });
	}
	
	/**
	 * Get the prefixed supported property name
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} property (camelCase)
	 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
	 */
	function getSupportedPropertyName(property) {
	  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
	  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);
	
	  for (var i = 0; i < prefixes.length; i++) {
	    var prefix = prefixes[i];
	    var toCheck = prefix ? '' + prefix + upperProp : property;
	    if (typeof document.body.style[toCheck] !== 'undefined') {
	      return toCheck;
	    }
	  }
	  return null;
	}
	
	/**
	 * Destroys the popper.
	 * @method
	 * @memberof Popper
	 */
	function destroy() {
	  this.state.isDestroyed = true;
	
	  // touch DOM only if `applyStyle` modifier is enabled
	  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
	    this.popper.removeAttribute('x-placement');
	    this.popper.style.position = '';
	    this.popper.style.top = '';
	    this.popper.style.left = '';
	    this.popper.style.right = '';
	    this.popper.style.bottom = '';
	    this.popper.style.willChange = '';
	    this.popper.style[getSupportedPropertyName('transform')] = '';
	  }
	
	  this.disableEventListeners();
	
	  // remove the popper if user explicitly asked for the deletion on destroy
	  // do not use `remove` because IE11 doesn't support it
	  if (this.options.removeOnDestroy) {
	    this.popper.parentNode.removeChild(this.popper);
	  }
	  return this;
	}
	
	/**
	 * Get the window associated with the element
	 * @argument {Element} element
	 * @returns {Window}
	 */
	function getWindow(element) {
	  var ownerDocument = element.ownerDocument;
	  return ownerDocument ? ownerDocument.defaultView : window;
	}
	
	function attachToScrollParents(scrollParent, event, callback, scrollParents) {
	  var isBody = scrollParent.nodeName === 'BODY';
	  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
	  target.addEventListener(event, callback, { passive: true });
	
	  if (!isBody) {
	    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
	  }
	  scrollParents.push(target);
	}
	
	/**
	 * Setup needed event listeners used to update the popper position
	 * @method
	 * @memberof Popper.Utils
	 * @private
	 */
	function setupEventListeners(reference, options, state, updateBound) {
	  // Resize event listener on window
	  state.updateBound = updateBound;
	  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });
	
	  // Scroll event listener on scroll parents
	  var scrollElement = getScrollParent(reference);
	  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
	  state.scrollElement = scrollElement;
	  state.eventsEnabled = true;
	
	  return state;
	}
	
	/**
	 * It will add resize/scroll events and start recalculating
	 * position of the popper element when they are triggered.
	 * @method
	 * @memberof Popper
	 */
	function enableEventListeners() {
	  if (!this.state.eventsEnabled) {
	    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
	  }
	}
	
	/**
	 * Remove event listeners used to update the popper position
	 * @method
	 * @memberof Popper.Utils
	 * @private
	 */
	function removeEventListeners(reference, state) {
	  // Remove resize event listener on window
	  getWindow(reference).removeEventListener('resize', state.updateBound);
	
	  // Remove scroll event listener on scroll parents
	  state.scrollParents.forEach(function (target) {
	    target.removeEventListener('scroll', state.updateBound);
	  });
	
	  // Reset state
	  state.updateBound = null;
	  state.scrollParents = [];
	  state.scrollElement = null;
	  state.eventsEnabled = false;
	  return state;
	}
	
	/**
	 * It will remove resize/scroll events and won't recalculate popper position
	 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
	 * unless you call `update` method manually.
	 * @method
	 * @memberof Popper
	 */
	function disableEventListeners() {
	  if (this.state.eventsEnabled) {
	    cancelAnimationFrame(this.scheduleUpdate);
	    this.state = removeEventListeners(this.reference, this.state);
	  }
	}
	
	/**
	 * Tells if a given input is a number
	 * @method
	 * @memberof Popper.Utils
	 * @param {*} input to check
	 * @return {Boolean}
	 */
	function isNumeric(n) {
	  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
	}
	
	/**
	 * Set the style to the given popper
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element - Element to apply the style to
	 * @argument {Object} styles
	 * Object with a list of properties and values which will be applied to the element
	 */
	function setStyles(element, styles) {
	  Object.keys(styles).forEach(function (prop) {
	    var unit = '';
	    // add unit if the value is numeric and is one of the following
	    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
	      unit = 'px';
	    }
	    element.style[prop] = styles[prop] + unit;
	  });
	}
	
	/**
	 * Set the attributes to the given popper
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element - Element to apply the attributes to
	 * @argument {Object} styles
	 * Object with a list of properties and values which will be applied to the element
	 */
	function setAttributes(element, attributes) {
	  Object.keys(attributes).forEach(function (prop) {
	    var value = attributes[prop];
	    if (value !== false) {
	      element.setAttribute(prop, attributes[prop]);
	    } else {
	      element.removeAttribute(prop);
	    }
	  });
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} data.styles - List of style properties - values to apply to popper element
	 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The same data object
	 */
	function applyStyle(data) {
	  // any property present in `data.styles` will be applied to the popper,
	  // in this way we can make the 3rd party modifiers add custom styles to it
	  // Be aware, modifiers could override the properties defined in the previous
	  // lines of this modifier!
	  setStyles(data.instance.popper, data.styles);
	
	  // any property present in `data.attributes` will be applied to the popper,
	  // they will be set as HTML attributes of the element
	  setAttributes(data.instance.popper, data.attributes);
	
	  // if arrowElement is defined and arrowStyles has some properties
	  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
	    setStyles(data.arrowElement, data.arrowStyles);
	  }
	
	  return data;
	}
	
	/**
	 * Set the x-placement attribute before everything else because it could be used
	 * to add margins to the popper margins needs to be calculated to get the
	 * correct popper offsets.
	 * @method
	 * @memberof Popper.modifiers
	 * @param {HTMLElement} reference - The reference element used to position the popper
	 * @param {HTMLElement} popper - The HTML element used as popper
	 * @param {Object} options - Popper.js options
	 */
	function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
	  // compute reference element offsets
	  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);
	
	  // compute auto placement, store placement inside the data object,
	  // modifiers will be able to edit `placement` if needed
	  // and refer to originalPlacement to know the original value
	  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
	
	  popper.setAttribute('x-placement', placement);
	
	  // Apply `position` to popper before anything else because
	  // without the position applied we can't guarantee correct computations
	  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });
	
	  return options;
	}
	
	/**
	 * @function
	 * @memberof Popper.Utils
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
	 * @returns {Object} The popper's position offsets rounded
	 *
	 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
	 * good as it can be within reason.
	 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
	 *
	 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
	 * as well on High DPI screens).
	 *
	 * Firefox prefers no rounding for positioning and does not have blurriness on
	 * high DPI screens.
	 *
	 * Only horizontal placement and left/right values need to be considered.
	 */
	function getRoundedOffsets(data, shouldRound) {
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	  var round = Math.round,
	      floor = Math.floor;
	
	  var noRound = function noRound(v) {
	    return v;
	  };
	
	  var referenceWidth = round(reference.width);
	  var popperWidth = round(popper.width);
	
	  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
	  var isVariation = data.placement.indexOf('-') !== -1;
	  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
	  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
	
	  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
	  var verticalToInteger = !shouldRound ? noRound : round;
	
	  return {
	    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
	    top: verticalToInteger(popper.top),
	    bottom: verticalToInteger(popper.bottom),
	    right: horizontalToInteger(popper.right)
	  };
	}
	
	var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function computeStyle(data, options) {
	  var x = options.x,
	      y = options.y;
	  var popper = data.offsets.popper;
	
	  // Remove this legacy support in Popper.js v2
	
	  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
	    return modifier.name === 'applyStyle';
	  }).gpuAcceleration;
	  if (legacyGpuAccelerationOption !== undefined) {
	    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
	  }
	  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
	
	  var offsetParent = getOffsetParent(data.instance.popper);
	  var offsetParentRect = getBoundingClientRect(offsetParent);
	
	  // Styles
	  var styles = {
	    position: popper.position
	  };
	
	  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
	
	  var sideA = x === 'bottom' ? 'top' : 'bottom';
	  var sideB = y === 'right' ? 'left' : 'right';
	
	  // if gpuAcceleration is set to `true` and transform is supported,
	  //  we use `translate3d` to apply the position to the popper we
	  // automatically use the supported prefixed version if needed
	  var prefixedProperty = getSupportedPropertyName('transform');
	
	  // now, let's make a step back and look at this code closely (wtf?)
	  // If the content of the popper grows once it's been positioned, it
	  // may happen that the popper gets misplaced because of the new content
	  // overflowing its reference element
	  // To avoid this problem, we provide two options (x and y), which allow
	  // the consumer to define the offset origin.
	  // If we position a popper on top of a reference element, we can set
	  // `x` to `top` to make the popper grow towards its top instead of
	  // its bottom.
	  var left = void 0,
	      top = void 0;
	  if (sideA === 'bottom') {
	    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
	    // and not the bottom of the html element
	    if (offsetParent.nodeName === 'HTML') {
	      top = -offsetParent.clientHeight + offsets.bottom;
	    } else {
	      top = -offsetParentRect.height + offsets.bottom;
	    }
	  } else {
	    top = offsets.top;
	  }
	  if (sideB === 'right') {
	    if (offsetParent.nodeName === 'HTML') {
	      left = -offsetParent.clientWidth + offsets.right;
	    } else {
	      left = -offsetParentRect.width + offsets.right;
	    }
	  } else {
	    left = offsets.left;
	  }
	  if (gpuAcceleration && prefixedProperty) {
	    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
	    styles[sideA] = 0;
	    styles[sideB] = 0;
	    styles.willChange = 'transform';
	  } else {
	    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
	    var invertTop = sideA === 'bottom' ? -1 : 1;
	    var invertLeft = sideB === 'right' ? -1 : 1;
	    styles[sideA] = top * invertTop;
	    styles[sideB] = left * invertLeft;
	    styles.willChange = sideA + ', ' + sideB;
	  }
	
	  // Attributes
	  var attributes = {
	    'x-placement': data.placement
	  };
	
	  // Update `data` attributes, styles and arrowStyles
	  data.attributes = _extends({}, attributes, data.attributes);
	  data.styles = _extends({}, styles, data.styles);
	  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
	
	  return data;
	}
	
	/**
	 * Helper used to know if the given modifier depends from another one.<br />
	 * It checks if the needed modifier is listed and enabled.
	 * @method
	 * @memberof Popper.Utils
	 * @param {Array} modifiers - list of modifiers
	 * @param {String} requestingName - name of requesting modifier
	 * @param {String} requestedName - name of requested modifier
	 * @returns {Boolean}
	 */
	function isModifierRequired(modifiers, requestingName, requestedName) {
	  var requesting = find(modifiers, function (_ref) {
	    var name = _ref.name;
	    return name === requestingName;
	  });
	
	  var isRequired = !!requesting && modifiers.some(function (modifier) {
	    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
	  });
	
	  if (!isRequired) {
	    var _requesting = '`' + requestingName + '`';
	    var requested = '`' + requestedName + '`';
	    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
	  }
	  return isRequired;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function arrow(data, options) {
	  var _data$offsets$arrow;
	
	  // arrow depends on keepTogether in order to work
	  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
	    return data;
	  }
	
	  var arrowElement = options.element;
	
	  // if arrowElement is a string, suppose it's a CSS selector
	  if (typeof arrowElement === 'string') {
	    arrowElement = data.instance.popper.querySelector(arrowElement);
	
	    // if arrowElement is not found, don't run the modifier
	    if (!arrowElement) {
	      return data;
	    }
	  } else {
	    // if the arrowElement isn't a query selector we must check that the
	    // provided DOM node is child of its popper node
	    if (!data.instance.popper.contains(arrowElement)) {
	      console.warn('WARNING: `arrow.element` must be child of its popper element!');
	      return data;
	    }
	  }
	
	  var placement = data.placement.split('-')[0];
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var isVertical = ['left', 'right'].indexOf(placement) !== -1;
	
	  var len = isVertical ? 'height' : 'width';
	  var sideCapitalized = isVertical ? 'Top' : 'Left';
	  var side = sideCapitalized.toLowerCase();
	  var altSide = isVertical ? 'left' : 'top';
	  var opSide = isVertical ? 'bottom' : 'right';
	  var arrowElementSize = getOuterSizes(arrowElement)[len];
	
	  //
	  // extends keepTogether behavior making sure the popper and its
	  // reference have enough pixels in conjunction
	  //
	
	  // top/left side
	  if (reference[opSide] - arrowElementSize < popper[side]) {
	    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
	  }
	  // bottom/right side
	  if (reference[side] + arrowElementSize > popper[opSide]) {
	    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
	  }
	  data.offsets.popper = getClientRect(data.offsets.popper);
	
	  // compute center of the popper
	  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;
	
	  // Compute the sideValue using the updated popper offsets
	  // take popper margin in account because we don't have this info available
	  var css = getStyleComputedProperty(data.instance.popper);
	  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
	  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
	  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;
	
	  // prevent arrowElement from being placed not contiguously to its popper
	  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
	
	  data.arrowElement = arrowElement;
	  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
	
	  return data;
	}
	
	/**
	 * Get the opposite placement variation of the given one
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement variation
	 * @returns {String} flipped placement variation
	 */
	function getOppositeVariation(variation) {
	  if (variation === 'end') {
	    return 'start';
	  } else if (variation === 'start') {
	    return 'end';
	  }
	  return variation;
	}
	
	/**
	 * List of accepted placements to use as values of the `placement` option.<br />
	 * Valid placements are:
	 * - `auto`
	 * - `top`
	 * - `right`
	 * - `bottom`
	 * - `left`
	 *
	 * Each placement can have a variation from this list:
	 * - `-start`
	 * - `-end`
	 *
	 * Variations are interpreted easily if you think of them as the left to right
	 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
	 * is right.<br />
	 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
	 *
	 * Some valid examples are:
	 * - `top-end` (on top of reference, right aligned)
	 * - `right-start` (on right of reference, top aligned)
	 * - `bottom` (on bottom, centered)
	 * - `auto-end` (on the side with more space available, alignment depends by placement)
	 *
	 * @static
	 * @type {Array}
	 * @enum {String}
	 * @readonly
	 * @method placements
	 * @memberof Popper
	 */
	var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];
	
	// Get rid of `auto` `auto-start` and `auto-end`
	var validPlacements = placements.slice(3);
	
	/**
	 * Given an initial placement, returns all the subsequent placements
	 * clockwise (or counter-clockwise).
	 *
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement - A valid placement (it accepts variations)
	 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
	 * @returns {Array} placements including their variations
	 */
	function clockwise(placement) {
	  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  var index = validPlacements.indexOf(placement);
	  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
	  return counter ? arr.reverse() : arr;
	}
	
	var BEHAVIORS = {
	  FLIP: 'flip',
	  CLOCKWISE: 'clockwise',
	  COUNTERCLOCKWISE: 'counterclockwise'
	};
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function flip(data, options) {
	  // if `inner` modifier is enabled, we can't use the `flip` modifier
	  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
	    return data;
	  }
	
	  if (data.flipped && data.placement === data.originalPlacement) {
	    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
	    return data;
	  }
	
	  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
	
	  var placement = data.placement.split('-')[0];
	  var placementOpposite = getOppositePlacement(placement);
	  var variation = data.placement.split('-')[1] || '';
	
	  var flipOrder = [];
	
	  switch (options.behavior) {
	    case BEHAVIORS.FLIP:
	      flipOrder = [placement, placementOpposite];
	      break;
	    case BEHAVIORS.CLOCKWISE:
	      flipOrder = clockwise(placement);
	      break;
	    case BEHAVIORS.COUNTERCLOCKWISE:
	      flipOrder = clockwise(placement, true);
	      break;
	    default:
	      flipOrder = options.behavior;
	  }
	
	  flipOrder.forEach(function (step, index) {
	    if (placement !== step || flipOrder.length === index + 1) {
	      return data;
	    }
	
	    placement = data.placement.split('-')[0];
	    placementOpposite = getOppositePlacement(placement);
	
	    var popperOffsets = data.offsets.popper;
	    var refOffsets = data.offsets.reference;
	
	    // using floor because the reference offsets may contain decimals we are not going to consider here
	    var floor = Math.floor;
	    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
	
	    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
	    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
	    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
	    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
	
	    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;
	
	    // flip the variation if required
	    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
	
	    // flips variation if reference element overflows boundaries
	    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);
	
	    // flips variation if popper content overflows boundaries
	    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);
	
	    var flippedVariation = flippedVariationByRef || flippedVariationByContent;
	
	    if (overlapsRef || overflowsBoundaries || flippedVariation) {
	      // this boolean to detect any flip loop
	      data.flipped = true;
	
	      if (overlapsRef || overflowsBoundaries) {
	        placement = flipOrder[index + 1];
	      }
	
	      if (flippedVariation) {
	        variation = getOppositeVariation(variation);
	      }
	
	      data.placement = placement + (variation ? '-' + variation : '');
	
	      // this object contains `position`, we want to preserve it along with
	      // any additional property we may add in the future
	      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
	
	      data = runModifiers(data.instance.modifiers, data, 'flip');
	    }
	  });
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function keepTogether(data) {
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var placement = data.placement.split('-')[0];
	  var floor = Math.floor;
	  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
	  var side = isVertical ? 'right' : 'bottom';
	  var opSide = isVertical ? 'left' : 'top';
	  var measurement = isVertical ? 'width' : 'height';
	
	  if (popper[side] < floor(reference[opSide])) {
	    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
	  }
	  if (popper[opSide] > floor(reference[side])) {
	    data.offsets.popper[opSide] = floor(reference[side]);
	  }
	
	  return data;
	}
	
	/**
	 * Converts a string containing value + unit into a px value number
	 * @function
	 * @memberof {modifiers~offset}
	 * @private
	 * @argument {String} str - Value + unit string
	 * @argument {String} measurement - `height` or `width`
	 * @argument {Object} popperOffsets
	 * @argument {Object} referenceOffsets
	 * @returns {Number|String}
	 * Value in pixels, or original string if no values were extracted
	 */
	function toValue(str, measurement, popperOffsets, referenceOffsets) {
	  // separate value from unit
	  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
	  var value = +split[1];
	  var unit = split[2];
	
	  // If it's not a number it's an operator, I guess
	  if (!value) {
	    return str;
	  }
	
	  if (unit.indexOf('%') === 0) {
	    var element = void 0;
	    switch (unit) {
	      case '%p':
	        element = popperOffsets;
	        break;
	      case '%':
	      case '%r':
	      default:
	        element = referenceOffsets;
	    }
	
	    var rect = getClientRect(element);
	    return rect[measurement] / 100 * value;
	  } else if (unit === 'vh' || unit === 'vw') {
	    // if is a vh or vw, we calculate the size based on the viewport
	    var size = void 0;
	    if (unit === 'vh') {
	      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
	    } else {
	      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
	    }
	    return size / 100 * value;
	  } else {
	    // if is an explicit pixel unit, we get rid of the unit and keep the value
	    // if is an implicit unit, it's px, and we return just the value
	    return value;
	  }
	}
	
	/**
	 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
	 * @function
	 * @memberof {modifiers~offset}
	 * @private
	 * @argument {String} offset
	 * @argument {Object} popperOffsets
	 * @argument {Object} referenceOffsets
	 * @argument {String} basePlacement
	 * @returns {Array} a two cells array with x and y offsets in numbers
	 */
	function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
	  var offsets = [0, 0];
	
	  // Use height if placement is left or right and index is 0 otherwise use width
	  // in this way the first offset will use an axis and the second one
	  // will use the other one
	  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;
	
	  // Split the offset string to obtain a list of values and operands
	  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
	  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
	    return frag.trim();
	  });
	
	  // Detect if the offset string contains a pair of values or a single one
	  // they could be separated by comma or space
	  var divider = fragments.indexOf(find(fragments, function (frag) {
	    return frag.search(/,|\s/) !== -1;
	  }));
	
	  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
	    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
	  }
	
	  // If divider is found, we divide the list of values and operands to divide
	  // them by ofset X and Y.
	  var splitRegex = /\s*,\s*|\s+/;
	  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];
	
	  // Convert the values with units to absolute pixels to allow our computations
	  ops = ops.map(function (op, index) {
	    // Most of the units rely on the orientation of the popper
	    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
	    var mergeWithPrevious = false;
	    return op
	    // This aggregates any `+` or `-` sign that aren't considered operators
	    // e.g.: 10 + +5 => [10, +, +5]
	    .reduce(function (a, b) {
	      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
	        a[a.length - 1] = b;
	        mergeWithPrevious = true;
	        return a;
	      } else if (mergeWithPrevious) {
	        a[a.length - 1] += b;
	        mergeWithPrevious = false;
	        return a;
	      } else {
	        return a.concat(b);
	      }
	    }, [])
	    // Here we convert the string values into number values (in px)
	    .map(function (str) {
	      return toValue(str, measurement, popperOffsets, referenceOffsets);
	    });
	  });
	
	  // Loop trough the offsets arrays and execute the operations
	  ops.forEach(function (op, index) {
	    op.forEach(function (frag, index2) {
	      if (isNumeric(frag)) {
	        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
	      }
	    });
	  });
	  return offsets;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @argument {Number|String} options.offset=0
	 * The offset value as described in the modifier description
	 * @returns {Object} The data object, properly modified
	 */
	function offset(data, _ref) {
	  var offset = _ref.offset;
	  var placement = data.placement,
	      _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var basePlacement = placement.split('-')[0];
	
	  var offsets = void 0;
	  if (isNumeric(+offset)) {
	    offsets = [+offset, 0];
	  } else {
	    offsets = parseOffset(offset, popper, reference, basePlacement);
	  }
	
	  if (basePlacement === 'left') {
	    popper.top += offsets[0];
	    popper.left -= offsets[1];
	  } else if (basePlacement === 'right') {
	    popper.top += offsets[0];
	    popper.left += offsets[1];
	  } else if (basePlacement === 'top') {
	    popper.left += offsets[0];
	    popper.top -= offsets[1];
	  } else if (basePlacement === 'bottom') {
	    popper.left += offsets[0];
	    popper.top += offsets[1];
	  }
	
	  data.popper = popper;
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function preventOverflow(data, options) {
	  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);
	
	  // If offsetParent is the reference element, we really want to
	  // go one step up and use the next offsetParent as reference to
	  // avoid to make this modifier completely useless and look like broken
	  if (data.instance.reference === boundariesElement) {
	    boundariesElement = getOffsetParent(boundariesElement);
	  }
	
	  // NOTE: DOM access here
	  // resets the popper's position so that the document size can be calculated excluding
	  // the size of the popper element itself
	  var transformProp = getSupportedPropertyName('transform');
	  var popperStyles = data.instance.popper.style; // assignment to help minification
	  var top = popperStyles.top,
	      left = popperStyles.left,
	      transform = popperStyles[transformProp];
	
	  popperStyles.top = '';
	  popperStyles.left = '';
	  popperStyles[transformProp] = '';
	
	  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);
	
	  // NOTE: DOM access here
	  // restores the original style properties after the offsets have been computed
	  popperStyles.top = top;
	  popperStyles.left = left;
	  popperStyles[transformProp] = transform;
	
	  options.boundaries = boundaries;
	
	  var order = options.priority;
	  var popper = data.offsets.popper;
	
	  var check = {
	    primary: function primary(placement) {
	      var value = popper[placement];
	      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
	        value = Math.max(popper[placement], boundaries[placement]);
	      }
	      return defineProperty({}, placement, value);
	    },
	    secondary: function secondary(placement) {
	      var mainSide = placement === 'right' ? 'left' : 'top';
	      var value = popper[mainSide];
	      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
	        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
	      }
	      return defineProperty({}, mainSide, value);
	    }
	  };
	
	  order.forEach(function (placement) {
	    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
	    popper = _extends({}, popper, check[side](placement));
	  });
	
	  data.offsets.popper = popper;
	
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function shift(data) {
	  var placement = data.placement;
	  var basePlacement = placement.split('-')[0];
	  var shiftvariation = placement.split('-')[1];
	
	  // if shift shiftvariation is specified, run the modifier
	  if (shiftvariation) {
	    var _data$offsets = data.offsets,
	        reference = _data$offsets.reference,
	        popper = _data$offsets.popper;
	
	    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
	    var side = isVertical ? 'left' : 'top';
	    var measurement = isVertical ? 'width' : 'height';
	
	    var shiftOffsets = {
	      start: defineProperty({}, side, reference[side]),
	      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
	    };
	
	    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
	  }
	
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function hide(data) {
	  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
	    return data;
	  }
	
	  var refRect = data.offsets.reference;
	  var bound = find(data.instance.modifiers, function (modifier) {
	    return modifier.name === 'preventOverflow';
	  }).boundaries;
	
	  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
	    // Avoid unnecessary DOM access if visibility hasn't changed
	    if (data.hide === true) {
	      return data;
	    }
	
	    data.hide = true;
	    data.attributes['x-out-of-boundaries'] = '';
	  } else {
	    // Avoid unnecessary DOM access if visibility hasn't changed
	    if (data.hide === false) {
	      return data;
	    }
	
	    data.hide = false;
	    data.attributes['x-out-of-boundaries'] = false;
	  }
	
	  return data;
	}
	
	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function inner(data) {
	  var placement = data.placement;
	  var basePlacement = placement.split('-')[0];
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	
	  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
	
	  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
	
	  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
	
	  data.placement = getOppositePlacement(placement);
	  data.offsets.popper = getClientRect(popper);
	
	  return data;
	}
	
	/**
	 * Modifier function, each modifier can have a function of this type assigned
	 * to its `fn` property.<br />
	 * These functions will be called on each update, this means that you must
	 * make sure they are performant enough to avoid performance bottlenecks.
	 *
	 * @function ModifierFn
	 * @argument {dataObject} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {dataObject} The data object, properly modified
	 */
	
	/**
	 * Modifiers are plugins used to alter the behavior of your poppers.<br />
	 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
	 * needed by the library.
	 *
	 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
	 * All the other properties are configurations that could be tweaked.
	 * @namespace modifiers
	 */
	var modifiers = {
	  /**
	   * Modifier used to shift the popper on the start or end of its reference
	   * element.<br />
	   * It will read the variation of the `placement` property.<br />
	   * It can be one either `-end` or `-start`.
	   * @memberof modifiers
	   * @inner
	   */
	  shift: {
	    /** @prop {number} order=100 - Index used to define the order of execution */
	    order: 100,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: shift
	  },
	
	  /**
	   * The `offset` modifier can shift your popper on both its axis.
	   *
	   * It accepts the following units:
	   * - `px` or unit-less, interpreted as pixels
	   * - `%` or `%r`, percentage relative to the length of the reference element
	   * - `%p`, percentage relative to the length of the popper element
	   * - `vw`, CSS viewport width unit
	   * - `vh`, CSS viewport height unit
	   *
	   * For length is intended the main axis relative to the placement of the popper.<br />
	   * This means that if the placement is `top` or `bottom`, the length will be the
	   * `width`. In case of `left` or `right`, it will be the `height`.
	   *
	   * You can provide a single value (as `Number` or `String`), or a pair of values
	   * as `String` divided by a comma or one (or more) white spaces.<br />
	   * The latter is a deprecated method because it leads to confusion and will be
	   * removed in v2.<br />
	   * Additionally, it accepts additions and subtractions between different units.
	   * Note that multiplications and divisions aren't supported.
	   *
	   * Valid examples are:
	   * ```
	   * 10
	   * '10%'
	   * '10, 10'
	   * '10%, 10'
	   * '10 + 10%'
	   * '10 - 5vh + 3%'
	   * '-10px + 5vh, 5px - 6%'
	   * ```
	   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
	   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
	   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  offset: {
	    /** @prop {number} order=200 - Index used to define the order of execution */
	    order: 200,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: offset,
	    /** @prop {Number|String} offset=0
	     * The offset value as described in the modifier description
	     */
	    offset: 0
	  },
	
	  /**
	   * Modifier used to prevent the popper from being positioned outside the boundary.
	   *
	   * A scenario exists where the reference itself is not within the boundaries.<br />
	   * We can say it has "escaped the boundaries" — or just "escaped".<br />
	   * In this case we need to decide whether the popper should either:
	   *
	   * - detach from the reference and remain "trapped" in the boundaries, or
	   * - if it should ignore the boundary and "escape with its reference"
	   *
	   * When `escapeWithReference` is set to`true` and reference is completely
	   * outside its boundaries, the popper will overflow (or completely leave)
	   * the boundaries in order to remain attached to the edge of the reference.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  preventOverflow: {
	    /** @prop {number} order=300 - Index used to define the order of execution */
	    order: 300,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: preventOverflow,
	    /**
	     * @prop {Array} [priority=['left','right','top','bottom']]
	     * Popper will try to prevent overflow following these priorities by default,
	     * then, it could overflow on the left and on top of the `boundariesElement`
	     */
	    priority: ['left', 'right', 'top', 'bottom'],
	    /**
	     * @prop {number} padding=5
	     * Amount of pixel used to define a minimum distance between the boundaries
	     * and the popper. This makes sure the popper always has a little padding
	     * between the edges of its container
	     */
	    padding: 5,
	    /**
	     * @prop {String|HTMLElement} boundariesElement='scrollParent'
	     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
	     * `viewport` or any DOM element.
	     */
	    boundariesElement: 'scrollParent'
	  },
	
	  /**
	   * Modifier used to make sure the reference and its popper stay near each other
	   * without leaving any gap between the two. Especially useful when the arrow is
	   * enabled and you want to ensure that it points to its reference element.
	   * It cares only about the first axis. You can still have poppers with margin
	   * between the popper and its reference element.
	   * @memberof modifiers
	   * @inner
	   */
	  keepTogether: {
	    /** @prop {number} order=400 - Index used to define the order of execution */
	    order: 400,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: keepTogether
	  },
	
	  /**
	   * This modifier is used to move the `arrowElement` of the popper to make
	   * sure it is positioned between the reference element and its popper element.
	   * It will read the outer size of the `arrowElement` node to detect how many
	   * pixels of conjunction are needed.
	   *
	   * It has no effect if no `arrowElement` is provided.
	   * @memberof modifiers
	   * @inner
	   */
	  arrow: {
	    /** @prop {number} order=500 - Index used to define the order of execution */
	    order: 500,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: arrow,
	    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
	    element: '[x-arrow]'
	  },
	
	  /**
	   * Modifier used to flip the popper's placement when it starts to overlap its
	   * reference element.
	   *
	   * Requires the `preventOverflow` modifier before it in order to work.
	   *
	   * **NOTE:** this modifier will interrupt the current update cycle and will
	   * restart it if it detects the need to flip the placement.
	   * @memberof modifiers
	   * @inner
	   */
	  flip: {
	    /** @prop {number} order=600 - Index used to define the order of execution */
	    order: 600,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: flip,
	    /**
	     * @prop {String|Array} behavior='flip'
	     * The behavior used to change the popper's placement. It can be one of
	     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
	     * placements (with optional variations)
	     */
	    behavior: 'flip',
	    /**
	     * @prop {number} padding=5
	     * The popper will flip if it hits the edges of the `boundariesElement`
	     */
	    padding: 5,
	    /**
	     * @prop {String|HTMLElement} boundariesElement='viewport'
	     * The element which will define the boundaries of the popper position.
	     * The popper will never be placed outside of the defined boundaries
	     * (except if `keepTogether` is enabled)
	     */
	    boundariesElement: 'viewport',
	    /**
	     * @prop {Boolean} flipVariations=false
	     * The popper will switch placement variation between `-start` and `-end` when
	     * the reference element overlaps its boundaries.
	     *
	     * The original placement should have a set variation.
	     */
	    flipVariations: false,
	    /**
	     * @prop {Boolean} flipVariationsByContent=false
	     * The popper will switch placement variation between `-start` and `-end` when
	     * the popper element overlaps its reference boundaries.
	     *
	     * The original placement should have a set variation.
	     */
	    flipVariationsByContent: false
	  },
	
	  /**
	   * Modifier used to make the popper flow toward the inner of the reference element.
	   * By default, when this modifier is disabled, the popper will be placed outside
	   * the reference element.
	   * @memberof modifiers
	   * @inner
	   */
	  inner: {
	    /** @prop {number} order=700 - Index used to define the order of execution */
	    order: 700,
	    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
	    enabled: false,
	    /** @prop {ModifierFn} */
	    fn: inner
	  },
	
	  /**
	   * Modifier used to hide the popper when its reference element is outside of the
	   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
	   * be used to hide with a CSS selector the popper when its reference is
	   * out of boundaries.
	   *
	   * Requires the `preventOverflow` modifier before it in order to work.
	   * @memberof modifiers
	   * @inner
	   */
	  hide: {
	    /** @prop {number} order=800 - Index used to define the order of execution */
	    order: 800,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: hide
	  },
	
	  /**
	   * Computes the style that will be applied to the popper element to gets
	   * properly positioned.
	   *
	   * Note that this modifier will not touch the DOM, it just prepares the styles
	   * so that `applyStyle` modifier can apply it. This separation is useful
	   * in case you need to replace `applyStyle` with a custom implementation.
	   *
	   * This modifier has `850` as `order` value to maintain backward compatibility
	   * with previous versions of Popper.js. Expect the modifiers ordering method
	   * to change in future major versions of the library.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  computeStyle: {
	    /** @prop {number} order=850 - Index used to define the order of execution */
	    order: 850,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: computeStyle,
	    /**
	     * @prop {Boolean} gpuAcceleration=true
	     * If true, it uses the CSS 3D transformation to position the popper.
	     * Otherwise, it will use the `top` and `left` properties
	     */
	    gpuAcceleration: true,
	    /**
	     * @prop {string} [x='bottom']
	     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
	     * Change this if your popper should grow in a direction different from `bottom`
	     */
	    x: 'bottom',
	    /**
	     * @prop {string} [x='left']
	     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
	     * Change this if your popper should grow in a direction different from `right`
	     */
	    y: 'right'
	  },
	
	  /**
	   * Applies the computed styles to the popper element.
	   *
	   * All the DOM manipulations are limited to this modifier. This is useful in case
	   * you want to integrate Popper.js inside a framework or view library and you
	   * want to delegate all the DOM manipulations to it.
	   *
	   * Note that if you disable this modifier, you must make sure the popper element
	   * has its position set to `absolute` before Popper.js can do its work!
	   *
	   * Just disable this modifier and define your own to achieve the desired effect.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  applyStyle: {
	    /** @prop {number} order=900 - Index used to define the order of execution */
	    order: 900,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: applyStyle,
	    /** @prop {Function} */
	    onLoad: applyStyleOnLoad,
	    /**
	     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
	     * @prop {Boolean} gpuAcceleration=true
	     * If true, it uses the CSS 3D transformation to position the popper.
	     * Otherwise, it will use the `top` and `left` properties
	     */
	    gpuAcceleration: undefined
	  }
	};
	
	/**
	 * The `dataObject` is an object containing all the information used by Popper.js.
	 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
	 * @name dataObject
	 * @property {Object} data.instance The Popper.js instance
	 * @property {String} data.placement Placement applied to popper
	 * @property {String} data.originalPlacement Placement originally defined on init
	 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
	 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
	 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
	 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
	 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
	 * @property {Object} data.boundaries Offsets of the popper boundaries
	 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
	 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
	 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
	 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
	 */
	
	/**
	 * Default options provided to Popper.js constructor.<br />
	 * These can be overridden using the `options` argument of Popper.js.<br />
	 * To override an option, simply pass an object with the same
	 * structure of the `options` object, as the 3rd argument. For example:
	 * ```
	 * new Popper(ref, pop, {
	 *   modifiers: {
	 *     preventOverflow: { enabled: false }
	 *   }
	 * })
	 * ```
	 * @type {Object}
	 * @static
	 * @memberof Popper
	 */
	var Defaults = {
	  /**
	   * Popper's placement.
	   * @prop {Popper.placements} placement='bottom'
	   */
	  placement: 'bottom',
	
	  /**
	   * Set this to true if you want popper to position it self in 'fixed' mode
	   * @prop {Boolean} positionFixed=false
	   */
	  positionFixed: false,
	
	  /**
	   * Whether events (resize, scroll) are initially enabled.
	   * @prop {Boolean} eventsEnabled=true
	   */
	  eventsEnabled: true,
	
	  /**
	   * Set to true if you want to automatically remove the popper when
	   * you call the `destroy` method.
	   * @prop {Boolean} removeOnDestroy=false
	   */
	  removeOnDestroy: false,
	
	  /**
	   * Callback called when the popper is created.<br />
	   * By default, it is set to no-op.<br />
	   * Access Popper.js instance with `data.instance`.
	   * @prop {onCreate}
	   */
	  onCreate: function onCreate() {},
	
	  /**
	   * Callback called when the popper is updated. This callback is not called
	   * on the initialization/creation of the popper, but only on subsequent
	   * updates.<br />
	   * By default, it is set to no-op.<br />
	   * Access Popper.js instance with `data.instance`.
	   * @prop {onUpdate}
	   */
	  onUpdate: function onUpdate() {},
	
	  /**
	   * List of modifiers used to modify the offsets before they are applied to the popper.
	   * They provide most of the functionalities of Popper.js.
	   * @prop {modifiers}
	   */
	  modifiers: modifiers
	};
	
	/**
	 * @callback onCreate
	 * @param {dataObject} data
	 */
	
	/**
	 * @callback onUpdate
	 * @param {dataObject} data
	 */
	
	// Utils
	// Methods
	var Popper = function () {
	  /**
	   * Creates a new Popper.js instance.
	   * @class Popper
	   * @param {Element|referenceObject} reference - The reference element used to position the popper
	   * @param {Element} popper - The HTML / XML element used as the popper
	   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
	   * @return {Object} instance - The generated Popper.js instance
	   */
	  function Popper(reference, popper) {
	    var _this = this;
	
	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	    classCallCheck(this, Popper);
	
	    this.scheduleUpdate = function () {
	      return requestAnimationFrame(_this.update);
	    };
	
	    // make update() debounced, so that it only runs at most once-per-tick
	    this.update = debounce(this.update.bind(this));
	
	    // with {} we create a new object with the options inside it
	    this.options = _extends({}, Popper.Defaults, options);
	
	    // init state
	    this.state = {
	      isDestroyed: false,
	      isCreated: false,
	      scrollParents: []
	    };
	
	    // get reference and popper elements (allow jQuery wrappers)
	    this.reference = reference && reference.jquery ? reference[0] : reference;
	    this.popper = popper && popper.jquery ? popper[0] : popper;
	
	    // Deep merge modifiers options
	    this.options.modifiers = {};
	    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
	      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
	    });
	
	    // Refactoring modifiers' list (Object => Array)
	    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
	      return _extends({
	        name: name
	      }, _this.options.modifiers[name]);
	    })
	    // sort the modifiers by order
	    .sort(function (a, b) {
	      return a.order - b.order;
	    });
	
	    // modifiers have the ability to execute arbitrary code when Popper.js get inited
	    // such code is executed in the same order of its modifier
	    // they could add new properties to their options configuration
	    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
	    this.modifiers.forEach(function (modifierOptions) {
	      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
	        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
	      }
	    });
	
	    // fire the first update to position the popper in the right place
	    this.update();
	
	    var eventsEnabled = this.options.eventsEnabled;
	    if (eventsEnabled) {
	      // setup event listeners, they will take care of update the position in specific situations
	      this.enableEventListeners();
	    }
	
	    this.state.eventsEnabled = eventsEnabled;
	  }
	
	  // We can't use class properties because they don't get listed in the
	  // class prototype and break stuff like Sinon stubs
	
	
	  createClass(Popper, [{
	    key: 'update',
	    value: function update$$1() {
	      return update.call(this);
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy$$1() {
	      return destroy.call(this);
	    }
	  }, {
	    key: 'enableEventListeners',
	    value: function enableEventListeners$$1() {
	      return enableEventListeners.call(this);
	    }
	  }, {
	    key: 'disableEventListeners',
	    value: function disableEventListeners$$1() {
	      return disableEventListeners.call(this);
	    }
	
	    /**
	     * Schedules an update. It will run on the next UI update available.
	     * @method scheduleUpdate
	     * @memberof Popper
	     */
	
	
	    /**
	     * Collection of utilities useful when writing custom modifiers.
	     * Starting from version 1.7, this method is available only if you
	     * include `popper-utils.js` before `popper.js`.
	     *
	     * **DEPRECATION**: This way to access PopperUtils is deprecated
	     * and will be removed in v2! Use the PopperUtils module directly instead.
	     * Due to the high instability of the methods contained in Utils, we can't
	     * guarantee them to follow semver. Use them at your own risk!
	     * @static
	     * @private
	     * @type {Object}
	     * @deprecated since version 1.8
	     * @member Utils
	     * @memberof Popper
	     */
	
	  }]);
	  return Popper;
	}();
	
	/**
	 * The `referenceObject` is an object that provides an interface compatible with Popper.js
	 * and lets you use it as replacement of a real DOM node.<br />
	 * You can use this method to position a popper relatively to a set of coordinates
	 * in case you don't have a DOM node to use as reference.
	 *
	 * ```
	 * new Popper(referenceObject, popperNode);
	 * ```
	 *
	 * NB: This feature isn't supported in Internet Explorer 10.
	 * @name referenceObject
	 * @property {Function} data.getBoundingClientRect
	 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
	 * @property {number} data.clientWidth
	 * An ES6 getter that will return the width of the virtual reference element.
	 * @property {number} data.clientHeight
	 * An ES6 getter that will return the height of the virtual reference element.
	 */
	
	
	Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
	Popper.placements = placements;
	Popper.Defaults = Defaults;
	
	return Popper;
	
	})));
	//# sourceMappingURL=popper.js.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	//This file contains the ES6 extensions to the core Promises/A+ API
	
	var Promise = __webpack_require__(18);
	
	module.exports = Promise;
	
	/* Static Functions */
	
	var TRUE = valuePromise(true);
	var FALSE = valuePromise(false);
	var NULL = valuePromise(null);
	var UNDEFINED = valuePromise(undefined);
	var ZERO = valuePromise(0);
	var EMPTYSTRING = valuePromise('');
	
	function valuePromise(value) {
	  var p = new Promise(Promise._61);
	  p._81 = 1;
	  p._65 = value;
	  return p;
	}
	Promise.resolve = function (value) {
	  if (value instanceof Promise) return value;
	
	  if (value === null) return NULL;
	  if (value === undefined) return UNDEFINED;
	  if (value === true) return TRUE;
	  if (value === false) return FALSE;
	  if (value === 0) return ZERO;
	  if (value === '') return EMPTYSTRING;
	
	  if (typeof value === 'object' || typeof value === 'function') {
	    try {
	      var then = value.then;
	      if (typeof then === 'function') {
	        return new Promise(then.bind(value));
	      }
	    } catch (ex) {
	      return new Promise(function (resolve, reject) {
	        reject(ex);
	      });
	    }
	  }
	  return valuePromise(value);
	};
	
	Promise.all = function (arr) {
	  var args = Array.prototype.slice.call(arr);
	
	  return new Promise(function (resolve, reject) {
	    if (args.length === 0) return resolve([]);
	    var remaining = args.length;
	    function res(i, val) {
	      if (val && (typeof val === 'object' || typeof val === 'function')) {
	        if (val instanceof Promise && val.then === Promise.prototype.then) {
	          while (val._81 === 3) {
	            val = val._65;
	          }
	          if (val._81 === 1) return res(i, val._65);
	          if (val._81 === 2) reject(val._65);
	          val.then(function (val) {
	            res(i, val);
	          }, reject);
	          return;
	        } else {
	          var then = val.then;
	          if (typeof then === 'function') {
	            var p = new Promise(then.bind(val));
	            p.then(function (val) {
	              res(i, val);
	            }, reject);
	            return;
	          }
	        }
	      }
	      args[i] = val;
	      if (--remaining === 0) {
	        resolve(args);
	      }
	    }
	    for (var i = 0; i < args.length; i++) {
	      res(i, args[i]);
	    }
	  });
	};
	
	Promise.reject = function (value) {
	  return new Promise(function (resolve, reject) {
	    reject(value);
	  });
	};
	
	Promise.race = function (values) {
	  return new Promise(function (resolve, reject) {
	    values.forEach(function(value){
	      Promise.resolve(value).then(resolve, reject);
	    });
	  });
	};
	
	/* Prototype Methods */
	
	Promise.prototype['catch'] = function (onRejected) {
	  return this.then(null, onRejected);
	};


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Promise = __webpack_require__(18);
	
	var DEFAULT_WHITELIST = [
	  ReferenceError,
	  TypeError,
	  RangeError
	];
	
	var enabled = false;
	exports.disable = disable;
	function disable() {
	  enabled = false;
	  Promise._10 = null;
	  Promise._97 = null;
	}
	
	exports.enable = enable;
	function enable(options) {
	  options = options || {};
	  if (enabled) disable();
	  enabled = true;
	  var id = 0;
	  var displayId = 0;
	  var rejections = {};
	  Promise._10 = function (promise) {
	    if (
	      promise._81 === 2 && // IS REJECTED
	      rejections[promise._72]
	    ) {
	      if (rejections[promise._72].logged) {
	        onHandled(promise._72);
	      } else {
	        clearTimeout(rejections[promise._72].timeout);
	      }
	      delete rejections[promise._72];
	    }
	  };
	  Promise._97 = function (promise, err) {
	    if (promise._45 === 0) { // not yet handled
	      promise._72 = id++;
	      rejections[promise._72] = {
	        displayId: null,
	        error: err,
	        timeout: setTimeout(
	          onUnhandled.bind(null, promise._72),
	          // For reference errors and type errors, this almost always
	          // means the programmer made a mistake, so log them after just
	          // 100ms
	          // otherwise, wait 2 seconds to see if they get handled
	          matchWhitelist(err, DEFAULT_WHITELIST)
	            ? 100
	            : 2000
	        ),
	        logged: false
	      };
	    }
	  };
	  function onUnhandled(id) {
	    if (
	      options.allRejections ||
	      matchWhitelist(
	        rejections[id].error,
	        options.whitelist || DEFAULT_WHITELIST
	      )
	    ) {
	      rejections[id].displayId = displayId++;
	      if (options.onUnhandled) {
	        rejections[id].logged = true;
	        options.onUnhandled(
	          rejections[id].displayId,
	          rejections[id].error
	        );
	      } else {
	        rejections[id].logged = true;
	        logError(
	          rejections[id].displayId,
	          rejections[id].error
	        );
	      }
	    }
	  }
	  function onHandled(id) {
	    if (rejections[id].logged) {
	      if (options.onHandled) {
	        options.onHandled(rejections[id].displayId, rejections[id].error);
	      } else if (!rejections[id].onUnhandled) {
	        console.warn(
	          'Promise Rejection Handled (id: ' + rejections[id].displayId + '):'
	        );
	        console.warn(
	          '  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' +
	          rejections[id].displayId + '.'
	        );
	      }
	    }
	  }
	}
	
	function logError(id, error) {
	  console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
	  var errStr = (error && (error.stack || error)) + '';
	  errStr.split('\n').forEach(function (line) {
	    console.warn('  ' + line);
	  });
	}
	
	function matchWhitelist(error, list) {
	  return list.some(function (cls) {
	    return error instanceof cls;
	  });
	}

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = __webpack_require__(72);
	
	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;
	
	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,
	
	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,
	
	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };
	
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};


/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/** @license React v16.13.1
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	/*
	 Modernizr 3.0.0pre (Custom Build) | MIT
	*/
	'use strict';var aa=__webpack_require__(2),n=__webpack_require__(6),r=__webpack_require__(85);function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));
	function ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null}else throw Error(u(198));fa||(fa=!0,ha=l)}}var la=null,ma=null,na=null;
	function oa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null}var pa=null,qa={};
	function ra(){if(pa)for(var a in qa){var b=qa[a],c=pa.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!sa[c]){if(!b.extractEvents)throw Error(u(97,a));sa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(ta.hasOwnProperty(h))throw Error(u(99,h));ta[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ua(k[e],g,h);e=!0}else f.registrationName?(ua(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}
	function ua(a,b,c){if(va[a])throw Error(u(100,a));va[a]=b;wa[a]=b.eventTypes[c].dependencies}var sa=[],ta={},va={},wa={};function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!qa.hasOwnProperty(c)||qa[c]!==d){if(qa[c])throw Error(u(102,c));qa[c]=d;b=!0}}b&&ra()}var ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),za=null,Aa=null,Ba=null;
	function Ca(a){if(a=ma(a)){if("function"!==typeof za)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),za(a.stateNode,a.type,b))}}function Da(a){Aa?Ba?Ba.push(a):Ba=[a]:Aa=a}function Ea(){if(Aa){var a=Aa,b=Ba;Ba=Aa=null;Ca(a);if(b)for(a=0;a<b.length;a++)Ca(b[a])}}function Fa(a,b){return a(b)}function Ga(a,b,c,d,e){return a(b,c,d,e)}function Ha(){}var Ia=Fa,Ja=!1,Ka=!1;function La(){if(null!==Aa||null!==Ba)Ha(),Ea()}
	function Ma(a,b,c){if(Ka)return a(b,c);Ka=!0;try{return Ia(a,b,c)}finally{Ka=!1,La()}}var Na=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Oa=Object.prototype.hasOwnProperty,Pa={},Qa={};
	function Ra(a){if(Oa.call(Qa,a))return!0;if(Oa.call(Pa,a))return!1;if(Na.test(a))return Qa[a]=!0;Pa[a]=!0;return!1}function Sa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
	function Ta(a,b,c,d){if(null===b||"undefined"===typeof b||Sa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var C={};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){C[a]=new v(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];C[b]=new v(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){C[a]=new v(a,2,!1,a.toLowerCase(),null,!1)});
	["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){C[a]=new v(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){C[a]=new v(a,3,!1,a.toLowerCase(),null,!1)});
	["checked","multiple","muted","selected"].forEach(function(a){C[a]=new v(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){C[a]=new v(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){C[a]=new v(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){C[a]=new v(a,5,!1,a.toLowerCase(),null,!1)});var Ua=/[\-:]([a-z])/g;function Va(a){return a[1].toUpperCase()}
	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ua,
	Va);C[b]=new v(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!1)});
	C.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!0)});var Wa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Wa.hasOwnProperty("ReactCurrentDispatcher")||(Wa.ReactCurrentDispatcher={current:null});Wa.hasOwnProperty("ReactCurrentBatchConfig")||(Wa.ReactCurrentBatchConfig={suspense:null});
	function Xa(a,b,c,d){var e=C.hasOwnProperty(b)?C[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Ta(b,c,e,d)&&(c=null),d||null===e?Ra(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
	var Ya=/^(.*)[\\\/]/,E="function"===typeof Symbol&&Symbol.for,Za=E?Symbol.for("react.element"):60103,$a=E?Symbol.for("react.portal"):60106,ab=E?Symbol.for("react.fragment"):60107,bb=E?Symbol.for("react.strict_mode"):60108,cb=E?Symbol.for("react.profiler"):60114,db=E?Symbol.for("react.provider"):60109,eb=E?Symbol.for("react.context"):60110,fb=E?Symbol.for("react.concurrent_mode"):60111,gb=E?Symbol.for("react.forward_ref"):60112,hb=E?Symbol.for("react.suspense"):60113,ib=E?Symbol.for("react.suspense_list"):
	60120,jb=E?Symbol.for("react.memo"):60115,kb=E?Symbol.for("react.lazy"):60116,lb=E?Symbol.for("react.block"):60121,mb="function"===typeof Symbol&&Symbol.iterator;function nb(a){if(null===a||"object"!==typeof a)return null;a=mb&&a[mb]||a["@@iterator"];return"function"===typeof a?a:null}function ob(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}
	function pb(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ab:return"Fragment";case $a:return"Portal";case cb:return"Profiler";case bb:return"StrictMode";case hb:return"Suspense";case ib:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case eb:return"Context.Consumer";case db:return"Context.Provider";case gb:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":
	"ForwardRef");case jb:return pb(a.type);case lb:return pb(a.render);case kb:if(a=1===a._status?a._result:null)return pb(a)}return null}function qb(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=pb(a.type);c=null;d&&(c=pb(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ya,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}
	function rb(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function sb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
	function tb(a){var b=sb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
	null;delete a[b]}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a))}function yb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=sb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
	function Ab(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Bb(a,b){b=b.checked;null!=b&&Xa(a,"checked",b,!1)}
	function Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Db(a,b.type,c):b.hasOwnProperty("defaultValue")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
	function Eb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
	function Db(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Fb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}
	function Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
	function Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:rb(c)}}
	function Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var Mb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
	function Nb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ob(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
	var Pb,Qb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||"innerHTML"in a)a.innerHTML=b;else{Pb=Pb||document.createElement("div");Pb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
	function Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Tb={animationend:Sb("Animation","AnimationEnd"),animationiteration:Sb("Animation","AnimationIteration"),animationstart:Sb("Animation","AnimationStart"),transitionend:Sb("Transition","TransitionEnd")},Ub={},Vb={};
	ya&&(Vb=document.createElement("div").style,"AnimationEvent"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),"TransitionEvent"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}
	var Xb=Wb("animationend"),Yb=Wb("animationiteration"),Zb=Wb("animationstart"),$b=Wb("transitionend"),ac="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bc=new ("function"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}
	function dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}
	function gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===
	c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
	function ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var kc=null;
	function lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}
	function nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!ya)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a)}
	function rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}
	function sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<sa.length;k++){var l=sa[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=
	ic(h,l))}mc(h)}}function uc(a,b,c){if(!c.has(a)){switch(a){case "scroll":vc(b,"scroll",!0);break;case "focus":case "blur":vc(b,"focus",!0);vc(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":oc(a)&&vc(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===ac.indexOf(a)&&F(a,b)}c.set(a,null)}}
	var wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ic="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");
	function Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c)});Ic.forEach(function(a){uc(a,b,c)})}function Kc(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}
	function Lc(a,b){switch(a){case "focus":case "blur":Bc=null;break;case "dragenter":case "dragleave":Cc=null;break;case "mouseover":case "mouseout":Dc=null;break;case "pointerover":case "pointerout":Ec.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fc.delete(b.pointerId)}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}
	function Oc(a,b,c,d,e){switch(b){case "focus":return Bc=Mc(Bc,a,b,c,d,e),!0;case "dragenter":return Cc=Mc(Cc,a,b,c,d,e),!0;case "mouseover":return Dc=Mc(Dc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return!1}
	function Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Qc(a){if(null!==a.blockedOn)return!1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return!1}return!0}
	function Sc(a,b,c){Qc(a)&&c.delete(b)}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift()}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc)}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)))}
	function Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift()}
	var Wc={},Yc=new Map,Zc=new Map,$c=["abort","abort",Xb,"animationEnd",Yb,"animationIteration",Zb,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking",
	"seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$b,"transitionEnd","waiting","waiting"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f}}
	ad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);
	ad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);ad($c,2);for(var bd="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);
	var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1)}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function gd(a,b,c,d){Ja||Ha();var e=id,f=Ja;Ja=!0;try{Ga(e,a,b,c,d)}finally{(Ja=f)||La()}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d))}
	function id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else{var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{Ma(sc,a)}finally{qc(a)}}}}
	function Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else{var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=rc(a,d,c,b);try{Ma(sc,a)}finally{qc(a)}return null}
	var jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
	floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=["Webkit","ms","Moz","O"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a]})});function ld(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(""+b).trim():b+"px"}
	function md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ld(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
	function od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}
	function pd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=wa[b];for(var d=0;d<b.length;d++)uc(b[d],a,c)}function sd(){}
	function td(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ud(c)}}
	function wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=td(a.document)}return b}
	function yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var zd="$",Ad="/$",Bd="$?",Cd="$!",Dd=null,Ed=null;function Fd(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}
	function Gd(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd="function"===typeof setTimeout?setTimeout:void 0,Id="function"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}
	function Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--}else c===Ad&&b++}a=a.previousSibling}return null}var Ld=Math.random().toString(36).slice(2),Md="__reactInternalInstance$"+Ld,Nd="__reactEventHandlers$"+Ld,Od="__reactContainere$"+Ld;
	function tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a)}return b}a=c;c=a.parentNode}return null}function Nc(a){a=a[Md]||a[Od];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}
	function Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}
	function Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,
	b,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a)}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],"captured",a);for(b=0;b<c.length;b++)Td(c[b],"bubbled",a)}}
	function Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a))}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a)}function Xd(a){jc(a,Ud)}var Yd=null,Zd=null,$d=null;
	function ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e="value"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return!0}function ce(){return!1}
	function G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}
	n(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be)},persist:function(){this.isPersistent=be},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,
	b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
	G.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
	function fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=ya&&"CompositionEvent"in window,ke=null;ya&&"documentMode"in document&&(ke=document.documentMode);
	var le=ya&&"TextEvent"in window&&!ke,me=ya&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
	captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},pe=!1;
	function qe(a,b){switch(a){case "keyup":return-1!==ie.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function re(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var se=!1;function te(a,b){switch(a){case "compositionend":return re(b);case "keypress":if(32!==b.which)return null;pe=!0;return ne;case "textInput":return a=b.data,a===ne&&pe?null:a;default:return null}}
	function ue(a,b){if(se)return"compositionend"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return me&&"ko"!==b.locale?null:b.data;default:return null}}
	var ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case "compositionstart":var f=oe.compositionStart;break b;case "compositionend":f=oe.compositionEnd;break b;case "compositionupdate":f=oe.compositionUpdate;break b}f=void 0}else se?qe(a,c)&&(f=oe.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&"ko"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd="value"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,
	b,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!we[a.type]:"textarea"===b?!0:!1}
	var ye={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type="change";Da(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a)}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if("change"===a)return b}var Fe=!1;ya&&(Fe=oc("input")&&(!document.documentMode||9<document.documentMode));
	function Ge(){Ae&&(Ae.detachEvent("onpropertychange",He),Be=Ae=null)}function He(a){if("value"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),Ja)mc(a);else{Ja=!0;try{Fa(Ce,a)}finally{Ja=!1,La()}}}function Ie(a,b,c){"focus"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent("onpropertychange",He)):"blur"===a&&Ge()}function Je(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return De(Be)}function Ke(a,b){if("click"===a)return De(b)}function Le(a,b){if("input"===a||"change"===a)return De(b)}
	var Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else{g=Je;var h=Ie}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Db(e,"number",e.value)}},Ne=G.extend({view:null,detail:null}),
	Oe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}
	var Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?"mousemove"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
	var b=Se;Se=a.screenY;return Ue?"mousemove"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
	dependencies:["pointerout","pointerover"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===
	a){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p="mouse"}else if("pointerout"===a||"pointerover"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p="pointer";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+"leave";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+"enter";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;
	k=Rd(k);m=Rd(m)}k=null}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d)}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p)}for(p=0;p<k.length;p++)Vd(k[p],"bubbled",l);for(p=d.length;0<p--;)Vd(d[p],"captured",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e="function"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;
	function bf(a,b){if($e(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return!1;return!0}
	var cf=ya&&"documentMode"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ef=null,ff=null,gf=null,hf=!1;
	function jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;"selectionStart"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type="select",a.target=ef,Xd(a),a)}
	var kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=wa.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pd(b):window;switch(a){case "focus":if(xe(e)||"true"===e.contentEditable)ef=e,ff=b,gf=null;break;case "blur":gf=ff=ef=null;break;case "mousedown":hf=!0;break;case "contextmenu":case "mouseup":case "dragend":return hf=!1,jf(c,d);case "selectionchange":if(cf)break;
	case "keydown":case "keyup":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
	var pf={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qf={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
	116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=of(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?qf[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return"keypress"===
	a.type?of(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?of(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
	a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case "keypress":if(0===of(c))return null;case "keydown":case "keyup":a=rf;break;case "blur":case "focus":a=nf;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=
	Ve;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=sf;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case "scroll":a=Ne;break;case "wheel":a=vf;break;case "copy":case "cut":case "paste":a=mf;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=
	We;break;default:a=G}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(pa)throw Error(u(101));pa=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ra();var xf=Nc;la=Qd;ma=xf;na=Pd;xa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--)}
	function I(a,b){zf++;yf[zf]=a.current;a.current=b}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}
	function Df(){H(K);H(J)}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c)}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,pb(b)||"Unknown",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return!0}
	function Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c)}
	var If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};
	function ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a)}fg()}
	function fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null}
	function og(a){var b=jg.current;H(jg);a.type._context._currentValue=b}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null)}
	function sg(a,b){if(mg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null}}else lg=lg.next=b}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}
	function vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}
	function yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}
	function zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g))}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=
	ca,m=k):x=x.next=ca;g>l&&(l=g)}else{null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if("function"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g="function"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0}}null!==z.callback&&
	(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z))}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k}}
	function Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(u(191,d));d.call(e)}}}var Dg=Wa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}
	var Jg={isMounted:function(a){return(a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;
	c=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c)}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}
	function Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;"object"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function Mg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null)}
	function Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
	(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Og=Array.isArray;
	function Pg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}
	function Qg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}
	function Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
	2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
	c.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Tg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Za:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case $a:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||
	nb(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Za:return c.key===e?c.type===ab?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $a:return c.key===e?l(a,b,c,d):null}if(Og(c)||nb(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c)}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
	a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Za:return a=a.get(null===d.key?c:d.key)||null,d.type===ab?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $a:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||nb(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d)}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&
	m&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=nb(h);if("function"!==typeof k)throw Error(u(150));h=k.call(h);
	if(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==
	q.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ab&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Za:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ab){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,
	k.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ab?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h)}return g(a);case $a:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=
	d.sibling}d=Vg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(nb(f))return D(a,d,f,h);l&&Qg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};
	function ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a)}H($g);I($g,b)}function eh(){H($g);H(ah);H(bh)}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c))}function gh(a){ah.current===a&&(H($g),H(ah))}var M={current:0};
	function hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ih(a,b){return{responder:a,props:b}}
	var jh=Wa.ReactCurrentDispatcher,kh=Wa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return!1;return!0}
	function oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e)}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}
	function th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}
	function vh(a,b){return"function"===typeof b?b(a):b}
	function wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&
	(N.expirationTime=l,Bg(l))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}
	function xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}
	function yh(a){var b=th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return[b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}
	function Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d)}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d)}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}
	function Hh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
	function Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0)});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c()}finally{kh.suspense=d}})}
	function zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,
	d)}}
	var sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,
	b];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=
	c}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return[Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=
	wh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,
	b,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
	function Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}
	function Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c)}Oh=a;Ph=Jd(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a}
	function Wh(a){if(a!==Oh)return!1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--}else c!==zd&&c!==Cd&&c!==Bd||b++}a=a.nextSibling}Ph=null}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return!0}
	function Xh(){Ph=Oh=null;Qh=!1}var Yh=Wa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d)}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}
	function ai(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
	function ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}
	function fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b)}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
	"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
	typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p="function"===typeof m||"function"===
	typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
	x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):
	("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}
	function gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo)}
	var ii={dehydrated:null,retryTime:0};
	function ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=
	b;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=
	c}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}
	function ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b)}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}
	function mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d);if(0===(b.mode&2))b.memoizedState=
	null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}li(b,!0,c,null,f,b.lastEffect);break;case "together":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}
	function $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}var ni,oi,pi,qi;
	ni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};oi=function(){};
	pi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case "input":f=zb(g,f);d=zb(g,d);a=[];break;case "option":f=Gb(g,f);d=Gb(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Ib(g,f);d=Ib(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=sd)}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===
	h)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(va.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),
	c[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else"dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(va.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};
	qi=function(a,b,c,d){c!==d&&(b.effectTag|=4)};function ri(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}
	function si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(u(166));
	return null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(a=0;a<ac.length;a++)F(ac[a],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Ab(d,f);F("invalid",d);rd(c,"onChange");break;case "select":d._wrapperState=
	{wasMultiple:!!f.multiple};F("invalid",d);rd(c,"onChange");break;case "textarea":Jb(d,f),F("invalid",d),rd(c,"onChange")}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):va.hasOwnProperty(g)&&null!=h&&rd(c,g)}switch(e){case "input":xb(d);Eb(d,f,!0);break;case "textarea":xb(d);Lb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&
	(d.onclick=sd)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case "iframe":case "object":case "embed":F("load",
	a);h=d;break;case "video":case "audio":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case "source":F("error",a);h=d;break;case "img":case "image":case "link":F("error",a);F("load",a);h=d;break;case "form":F("reset",a);F("submit",a);h=d;break;case "details":F("toggle",a);h=d;break;case "input":Ab(a,d);h=zb(a,d);F("invalid",a);rd(c,"onChange");break;case "option":h=Gb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F("invalid",a);rd(c,"onChange");break;case "textarea":Jb(a,
	d);h=Ib(a,d);F("invalid",a);rd(c,"onChange");break;default:h=d}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];"style"===f?md(a,l):"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):"children"===f?"string"===typeof l?("textarea"!==e||""!==l)&&Rb(a,l):"number"===typeof l&&Rb(a,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(va.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&Xa(a,f,l,g))}switch(e){case "input":xb(a);Eb(a,d,!1);
	break;case "textarea":xb(a);Lb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+rb(d.value));break;case "select":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=sd)}Fd(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(u(166));
	c=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c)}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=
	e,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else{if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi))}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else{if(S!==ti||null!==a&&0!==(a.effectTag&
	64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,
	e.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=
	b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,
	b.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return{value:a,source:b,stack:qb(b)}}
	var Bi="function"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=qb(c));null!==c&&pb(c.type);b=b.value;null!==a&&1===a.tag&&pb(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ei(a,c)}}function Fi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Ei(a,c)}else b.current=null}
	function Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}
	function Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}
	function Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else{var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Cg(c,b,a)}return;
	case 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}
	function Ki(a,b,c){"function"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ei(g,h)}}a=a.next}while(a!==d)})}break;case 1:Fi(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c)}}
	function Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b)}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}
	function Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;
	if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b)}
	function Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling}
	function Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling}
	function Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=
	f,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}
	function Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?md(c,h):"dangerouslySetInnerHTML"===g?Qb(c,h):"children"===g?Rb(c,h):Xa(c,g,h,b)}switch(a){case "input":Cb(c,d);break;
	case "textarea":Kb(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?
	d=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=ld("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=
	f;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}
	var Wi="function"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b)};return c}
	function $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}
	var bj=Math.ceil,cj=Wa.ReactCurrentDispatcher,dj=Wa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return(W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}
	function Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}
	function Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)))}}
	function xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}
	function zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}
	function Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else{var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c)}a.callbackExpirationTime=
	b;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b}}}
	function Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h)}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;
	c===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=
	d;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=
	Hd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}
	function yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e)}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a)}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c)});gg()}}
	function Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg()}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg()}}
	function Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d)}c=c.return}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1}
	function Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.updateQueue=l.updateQueue,g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):(g.updateQueue=
	null,g.memoizedState=null)}var m=0!==(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else{var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var y=wg(1073741823,null);y.tag=2;xg(g,y)}g.expirationTime=1073741823;
	break a}h=void 0;g=b;var A=e.pingCache;null===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q)}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return}while(null!==p);h=Error((pb(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+qb(g))}S!==
	jj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=h;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&("function"===typeof w.getDerivedStateFromError||null!==ub&&"function"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return}while(null!==p)}X=Pj(X)}catch(Xc){b=Xc;continue}break}while(1)}
	function Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}function Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b)}function Bg(a){a>wi&&(wi=a)}function Kj(){for(;null!==X;)X=Qj(X)}function Gj(){for(;null!==X&&!Uf();)X=Qj(X)}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}
	function Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}X.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==
	a.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X))}else{b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=X.sibling;if(null!==b)return b;X=a}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}
	function Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=
	d-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,
	m=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode}t=A}h=-1===x||-1===z?null:{start:x,end:z}}else h=null}h=h||{start:0,end:0}}else h=
	null;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj()}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,"");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&("function"===typeof w?w(null):w.current=null)}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=
	-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l)}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),"selectionStart"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&
	(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,
	top:w.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc}"function"===typeof vb?vb(B):vb.current=B}}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=
	null;Vf();W=f}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;"function"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect}}
	function Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return!1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c)}}catch(d){if(null===a)throw Error(u(330));Ei(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}W=b;gg();return!0}
	function Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a)}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}
	function Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)))}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a)}var Rj;
	Rj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else{if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;
	if(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,
	b,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=
	null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ob(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);
	case 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else{if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:
	null,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,
	b,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==
	k){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=
	g}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,
	b,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}
	function Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Sh(a,b,c,d){return new Zj(a,b,c,d)}
	function bi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Xj(a){if("function"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gb)return 11;if(a===jb)return 14}return 2}
	function Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,
	firstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
	function Ug(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ab:return Wg(c.children,e,f,b);case fb:g=8;e|=7;break;case bb:g=8;e|=1;break;case cb:return a=Sh(12,c,b,e|8),a.elementType=cb,a.type=cb,a.expirationTime=f,a;case hb:return a=Sh(13,c,b,e),a.type=hb,a.elementType=hb,a.expirationTime=f,a;case ib:return a=Sh(19,c,b,e),a.elementType=ib,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case db:g=
	10;break a;case eb:g=9;break a;case gb:g=11;break a;case jb:g=14;break a;case kb:g=16;d=null;break a;case lb:g=22;break a}throw Error(u(130,null==a?a:typeof a,""));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}
	function Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
	function ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}
	function Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}
	function yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}
	function bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===
	d?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b)}
	function fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null)};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null})};
	function gk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}
	function ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a)}}bk(b,g,a,e)}else{f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a)}}Nj(function(){bk(b,g,a,e)})}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$a,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
	wc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b)}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3))};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b)}};
	za=function(a,b,c){switch(b){case "input":Cb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e)}}}break;case "textarea":Kb(a,c);break;case "select":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1)}};Fa=Mj;
	Ga=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg()}};Ha=function(){(W&(1|fj|gj))===V&&(Lj(),Dj())};Ia=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg()}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,xa,ta,Xd,function(a){jc(a,Wd)},Da,Ea,id,mc,Dj,{current:!1}]};
	(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Wa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:"16.13.1",
	rendererPackageName:"react-dom"});exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lk;exports.createPortal=kk;exports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};
	exports.flushSync=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg()}};exports.hydrate=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};exports.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};
	exports.unmountComponentAtNode=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null})}),!0):!1};exports.unstable_batchedUpdates=Mj;exports.unstable_createPortal=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
	exports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};exports.version="16.13.1";


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var React = __webpack_require__(2);
	var React__default = _interopDefault(React);
	var d3Scale = __webpack_require__(61);
	var TWEEN = __webpack_require__(67);
	var three = __webpack_require__(4);
	var threeGlowMesh = __webpack_require__(86);
	var OrbitControls = _interopDefault(__webpack_require__(87));
	var three_interaction = __webpack_require__(88);
	var tippy = _interopDefault(__webpack_require__(89));
	var ResizeObserver = _interopDefault(__webpack_require__(83));
	
	(function (ObjectName) {
	    ObjectName["Camera"] = "CAMERA";
	    ObjectName["CameraAmbientLight"] = "CAMERA_AMBIENT_LIGHT";
	    ObjectName["CameraPointLight"] = "CAMERA_POINT_LIGHT";
	    ObjectName["Globe"] = "GLOBE";
	    ObjectName["GlobeBackground"] = "GLOBE_BACKGROUND";
	    ObjectName["GlobeClouds"] = "GLOBE_CLOUDS";
	    ObjectName["GlobeGlow"] = "GLOBE_GLOW";
	    ObjectName["GlobeSphere"] = "GLOBE_SPHERE";
	    ObjectName["MarkerObjects"] = "MARKER_OBJECTS";
	    ObjectName["Scene"] = "SCENE";
	})(exports.ObjectName || (exports.ObjectName = {}));
	(function (MarkerType) {
	    MarkerType["Bar"] = "bar";
	    MarkerType["Dot"] = "dot";
	})(exports.MarkerType || (exports.MarkerType = {}));
	
	// hardcoded constants that can eventually be exposed via options
	var RADIUS = 300;
	var BACKGROUND_RADIUS_SCALE = 10;
	var CAMERA_FAR = RADIUS * 100;
	var CAMERA_FOV = 45;
	var CAMERA_NEAR = 1;
	var CAMERA_DAMPING_FACTOR = 0.1;
	var CAMERA_MAX_POLAR_ANGLE = Math.PI;
	var CAMERA_MIN_POLAR_ANGLE = 0;
	var CAMERA_MIN_DISTANCE_RADIUS_SCALE = 1.1;
	var CLOUDS_RADIUS_OFFSET = 1;
	var GLOBE_SEGMENTS = 50;
	var INITIAL_COORDINATES = [37.773972, -122.431297];
	var MARKER_DEFAULT_COLOR = 'gold';
	var MARKER_SEGMENTS = 10;
	var MARKER_UNIT_RADIUS_SCALE = 0.01;
	var MARKER_ACTIVE_ANIMATION_DURATION = 100;
	var MARKER_ACTIVE_ANIMATION_EASING_FUNCTION = [
	    'Cubic',
	    'In',
	];
	var defaultCameraOptions = {
	    autoRotateSpeed: 0.1,
	    distanceRadiusScale: 3,
	    enableAutoRotate: true,
	    enableRotate: true,
	    enableZoom: true,
	    maxDistanceRadiusScale: 4,
	    maxPolarAngle: CAMERA_MAX_POLAR_ANGLE,
	    minPolarAngle: CAMERA_MIN_POLAR_ANGLE,
	    rotateSpeed: 0.2,
	    zoomSpeed: 1,
	};
	var defaultFocusOptions = {
	    animationDuration: 1000,
	    distanceRadiusScale: 1.5,
	    easingFunction: ['Cubic', 'Out'],
	    enableDefocus: true,
	};
	var defaultGlobeOptions = {
	    backgroundTexture: 'https://raw.githubusercontent.com/chrisrzhou/react-globe/master/textures/background.png',
	    cloudsOpacity: 0.3,
	    cloudsTexture: 'https://raw.githubusercontent.com/chrisrzhou/react-globe/master/textures/clouds.png',
	    enableBackground: true,
	    enableClouds: true,
	    enableGlow: true,
	    glowCoefficient: 0.1,
	    glowColor: '#d1d1d1',
	    glowPower: 3,
	    glowRadiusScale: 0.2,
	    texture: 'https://raw.githubusercontent.com/chrisrzhou/react-globe/master/textures/globe.jpg',
	};
	var defaultLightOptions = {
	    ambientLightColor: 'white',
	    ambientLightIntensity: 0.8,
	    pointLightColor: 'white',
	    pointLightIntensity: 1,
	    pointLightPositionRadiusScales: [-2, 1, -1],
	};
	var defaultDotMarkerOptions = {
	    activeScale: 1.3,
	    enableGlow: true,
	    enableTooltip: true,
	    enterAnimationDuration: 1000,
	    enterEasingFunction: ['Linear', 'None'],
	    exitAnimationDuration: 500,
	    exitEasingFunction: ['Cubic', 'Out'],
	    getTooltipContent: function (marker) { return JSON.stringify(marker.coordinates); },
	    glowCoefficient: 0,
	    glowPower: 3,
	    glowRadiusScale: 2,
	    radiusScaleRange: [0.005, 0.02],
	    type: exports.MarkerType.Dot,
	};
	var defaultBarMarkerOptions = {
	    activeScale: 1.02,
	    enableGlow: false,
	    enableTooltip: true,
	    enterAnimationDuration: 2000,
	    enterEasingFunction: ['Linear', 'None'],
	    exitAnimationDuration: 1000,
	    exitEasingFunction: ['Cubic', 'Out'],
	    getTooltipContent: function (marker) { return JSON.stringify(marker.coordinates); },
	    glowCoefficient: 0,
	    glowPower: 3,
	    glowRadiusScale: 2,
	    offsetRadiusScale: 0,
	    radiusScaleRange: [0.2, defaultFocusOptions.distanceRadiusScale - 1],
	    type: exports.MarkerType.Bar,
	};
	var defaultMarkerOptions = defaultDotMarkerOptions;
	
	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0
	
	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.
	
	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	
	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	
	function __spreadArrays() {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	}
	
	var TOOLTIP_OFFSET = 10;
	var Tooltip = /** @class */ (function () {
	    function Tooltip(div) {
	        this.div = div;
	        this.instance = tippy(this.div, {
	            animation: 'scale',
	        });
	    }
	    Tooltip.prototype.destroy = function () {
	        this.instance.destroy();
	    };
	    Tooltip.prototype.hide = function () {
	        document.body.style.cursor = 'inherit';
	        this.div.style.position = 'fixed';
	        this.div.style.left = '0';
	        this.div.style.top = '0';
	        this.instance.hide();
	    };
	    Tooltip.prototype.show = function (clientX, clientY, content) {
	        document.body.style.cursor = 'pointer';
	        this.div.style.position = 'fixed';
	        this.div.style.left = clientX + TOOLTIP_OFFSET + "px";
	        this.div.style.top = clientY + TOOLTIP_OFFSET + "px";
	        this.instance.setContent(content);
	        this.instance.show();
	    };
	    return Tooltip;
	}());
	
	function coordinatesToPosition(coordinates, radius) {
	    var lat = coordinates[0], long = coordinates[1];
	    var phi = (lat * Math.PI) / 180;
	    var theta = ((long - 180) * Math.PI) / 180;
	    var x = -radius * Math.cos(phi) * Math.cos(theta);
	    var y = radius * Math.sin(phi);
	    var z = radius * Math.cos(phi) * Math.sin(theta);
	    return [x, y, z];
	}
	function getMarkerCoordinatesKey(marker) {
	    return marker.coordinates.toString();
	}
	function maxValue(array, callback) {
	    var maxValue = 0;
	    array.forEach(function (item) {
	        if (callback(item) > maxValue) {
	            maxValue = callback(item);
	        }
	    });
	    return maxValue;
	}
	function minValue(array, callback) {
	    var minValue = Infinity;
	    array.forEach(function (item) {
	        if (callback(item) < minValue) {
	            minValue = callback(item);
	        }
	    });
	    return minValue;
	}
	function tween(from, to, animationDuration, easingFunction, onUpdate, onEnd) {
	    new TWEEN.Tween(from)
	        .to(to, animationDuration)
	        .easing(TWEEN.Easing[easingFunction[0]][easingFunction[1]])
	        .on('update', onUpdate)
	        .on('complete', onEnd)
	        .start();
	}
	
	var emptyFunction = function () { };
	var defaultCallbacks = {
	    onClickMarker: emptyFunction,
	    onDefocus: emptyFunction,
	    onMouseOutMarker: emptyFunction,
	    onMouseOverMarker: emptyFunction,
	    onTextureLoaded: emptyFunction,
	};
	var defaultOptions = {
	    camera: defaultCameraOptions,
	    globe: defaultGlobeOptions,
	    focus: defaultFocusOptions,
	    marker: defaultMarkerOptions,
	    light: defaultLightOptions,
	};
	var Globe = /** @class */ (function () {
	    function Globe(canvas, tooltipDiv) {
	        var _this = this;
	        // create objects
	        var renderer = new three.WebGLRenderer({
	            alpha: true,
	            antialias: true,
	            canvas: canvas,
	        });
	        var camera = new three.PerspectiveCamera();
	        var cameraAmbientLight = new three.AmbientLight('white');
	        var cameraPointLight = new three.PointLight('white');
	        var globe = new three.Group();
	        var globeBackground = new three.Mesh();
	        var globeClouds = new three.Mesh();
	        var globeSphere = new three.Mesh();
	        var markerObjects = new three.Group();
	        var orbitControls = new OrbitControls(camera, renderer.domElement);
	        var scene = new three.Scene();
	        var tooltip = new Tooltip(tooltipDiv);
	        // name objects
	        camera.name = exports.ObjectName.Camera;
	        cameraAmbientLight.name = exports.ObjectName.CameraAmbientLight;
	        cameraPointLight.name = exports.ObjectName.CameraPointLight;
	        globe.name = exports.ObjectName.Globe;
	        globeBackground.name = exports.ObjectName.GlobeBackground;
	        globeClouds.name = exports.ObjectName.GlobeClouds;
	        globeSphere.name = exports.ObjectName.GlobeSphere;
	        markerObjects.name = exports.ObjectName.MarkerObjects;
	        scene.name = exports.ObjectName.Scene;
	        // add objects to scene
	        camera.add(cameraAmbientLight);
	        camera.add(cameraPointLight);
	        globe.add(globeBackground);
	        globe.add(globeClouds);
	        globe.add(globeSphere);
	        scene.add(markerObjects);
	        scene.add(camera);
	        scene.add(globe);
	        // add interactions to scene
	        new three_interaction.Interaction(renderer, scene, camera);
	        scene.on('mousemove', function (event) {
	            if (_this.isFocusing()) {
	                return;
	            }
	            if (_this.activeMarker) {
	                var activeScale = _this.options.marker.activeScale;
	                var from_1 = [activeScale, activeScale, activeScale];
	                tween(from_1, [1, 1, 1], MARKER_ACTIVE_ANIMATION_DURATION, MARKER_ACTIVE_ANIMATION_EASING_FUNCTION, function () {
	                    var _a;
	                    if (_this.activeMarkerObject) {
	                        (_a = _this.activeMarkerObject.scale).set.apply(_a, from_1);
	                    }
	                }, function () {
	                    _this.activeMarker = undefined;
	                    _this.activeMarkerObject = undefined;
	                });
	                _this.callbacks.onMouseOutMarker(_this.activeMarker, _this.activeMarkerObject, event.data.originalEvent);
	                _this.tooltip.hide();
	            }
	        });
	        scene.on('click', function (event) {
	            if (_this.isFocusing()) {
	                return;
	            }
	            if (_this.options.focus.enableDefocus && _this.preFocusPosition) {
	                _this.callbacks.onDefocus(_this.focus, event.data.originalEvent);
	                _this.updateFocus(undefined, _this.options.focus);
	            }
	        });
	        // assign values to class variables
	        this.activeMarker = undefined;
	        this.activeMarkerObject = undefined;
	        this.animationFrameId = undefined;
	        this.callbacks = defaultCallbacks;
	        this.camera = camera;
	        this.focus = undefined;
	        this.globe = globe;
	        this.isFrozen = false;
	        this.markerObjects = markerObjects;
	        this.options = defaultOptions;
	        this.orbitControls = orbitControls;
	        this.preFocusPosition = undefined;
	        this.renderer = renderer;
	        this.scene = scene;
	        this.tooltip = tooltip;
	        // update objects
	        this.updateCallbacks();
	        this.updateCamera();
	        this.updateFocus();
	        this.updateGlobe({
	            enableBackground: false,
	            enableClouds: false,
	        });
	        this.updateLights();
	        this.updateMarkers();
	        this.updateSize();
	    }
	    Globe.prototype.animate = function () {
	        this.render();
	        this.animationFrameId = requestAnimationFrame(this.animate.bind(this));
	    };
	    // TODO: expose a way to customize animating clouds in every axis
	    Globe.prototype.animateClouds = function () {
	        var globeClouds = this.getObjectByName(exports.ObjectName.GlobeClouds);
	        ['x', 'y', 'z'].forEach(function (axis) {
	            globeClouds.rotation[axis] += Math.random() / 10000;
	        });
	    };
	    // For each animation, update the focus and focusOptions provided by the animation over an array of timeouts
	    Globe.prototype.applyAnimations = function (animations) {
	        var _this = this;
	        var currentFocus = this.focus;
	        var currentFocusOptions = this.options.focus;
	        var wait = 0;
	        var timeouts = [];
	        animations.forEach(function (animation) {
	            var animationDuration = animation.animationDuration, coordinates = animation.coordinates, distanceRadiusScale = animation.distanceRadiusScale, easingFunction = animation.easingFunction;
	            var timeout = setTimeout(function () {
	                _this.updateFocus(coordinates, {
	                    animationDuration: animationDuration,
	                    distanceRadiusScale: distanceRadiusScale,
	                    easingFunction: easingFunction,
	                }, true);
	            }, wait);
	            timeouts.push(timeout);
	            wait += animationDuration;
	        });
	        // return cleanup function
	        return function () {
	            timeouts.forEach(function (timeout) {
	                clearTimeout(timeout);
	            });
	            _this.updateFocus(currentFocus, currentFocusOptions);
	        };
	    };
	    Globe.prototype.destroy = function () {
	        cancelAnimationFrame(this.animationFrameId);
	        this.tooltip.destroy();
	    };
	    Globe.prototype.enableOrbitControls = function (enabled, autoRotate) {
	        if (autoRotate === void 0) { autoRotate = enabled; }
	        this.orbitControls.enabled = enabled;
	        this.orbitControls.autoRotate = autoRotate;
	    };
	    Globe.prototype.freeze = function () {
	        this.isFrozen = true;
	        this.enableOrbitControls(false);
	        cancelAnimationFrame(this.animationFrameId);
	    };
	    Globe.prototype.getObjectByName = function (name) {
	        return this.scene.getObjectByName(name);
	    };
	    Globe.prototype.isFocusing = function () {
	        return !this.orbitControls.enabled;
	    };
	    Globe.prototype.render = function () {
	        this.renderer.sortObjects = false;
	        this.renderer.render(this.scene, this.camera);
	        this.animateClouds();
	        this.orbitControls.update();
	        TWEEN.update();
	    };
	    Globe.prototype.updateCallbacks = function (callbacks) {
	        var _this = this;
	        if (callbacks === void 0) { callbacks = {}; }
	        Object.keys(defaultCallbacks).forEach(function (key) {
	            _this.callbacks[key] = callbacks[key] || defaultCallbacks[key];
	        });
	    };
	    Globe.prototype.updateCamera = function (initialCoordinates, cameraOptions) {
	        if (initialCoordinates === void 0) { initialCoordinates = INITIAL_COORDINATES; }
	        if (cameraOptions === void 0) { cameraOptions = {}; }
	        this.updateOptions(cameraOptions, 'camera');
	        var _a = this.options.camera, autoRotateSpeed = _a.autoRotateSpeed, distanceRadiusScale = _a.distanceRadiusScale, enableAutoRotate = _a.enableAutoRotate, enableRotate = _a.enableRotate, enableZoom = _a.enableZoom, maxDistanceRadiusScale = _a.maxDistanceRadiusScale, maxPolarAngle = _a.maxPolarAngle, minPolarAngle = _a.minPolarAngle, rotateSpeed = _a.rotateSpeed, zoomSpeed = _a.zoomSpeed;
	        if (this.initialCoordinates !== initialCoordinates) {
	            var _b = coordinatesToPosition(initialCoordinates, RADIUS * distanceRadiusScale), x = _b[0], y = _b[1], z = _b[2];
	            this.camera.position.set(x, y, z);
	            this.initialCoordinates = initialCoordinates;
	        }
	        this.camera.far = CAMERA_FAR;
	        this.camera.fov = CAMERA_FOV;
	        this.camera.near = CAMERA_NEAR;
	        this.orbitControls.autoRotate = enableAutoRotate;
	        this.orbitControls.autoRotateSpeed = autoRotateSpeed;
	        this.orbitControls.dampingFactor = CAMERA_DAMPING_FACTOR;
	        this.orbitControls.enableDamping = true;
	        this.orbitControls.enablePan = false;
	        this.orbitControls.enableRotate = enableRotate;
	        this.orbitControls.enableZoom = enableZoom;
	        this.orbitControls.maxDistance = RADIUS * maxDistanceRadiusScale;
	        this.orbitControls.maxPolarAngle = maxPolarAngle;
	        this.orbitControls.minDistance = RADIUS * CAMERA_MIN_DISTANCE_RADIUS_SCALE;
	        this.orbitControls.minPolarAngle = minPolarAngle;
	        this.orbitControls.rotateSpeed = rotateSpeed;
	        this.orbitControls.zoomSpeed = zoomSpeed;
	    };
	    Globe.prototype.updateFocus = function (focus, focusOptions, autoDefocus) {
	        var _this = this;
	        if (focusOptions === void 0) { focusOptions = {}; }
	        if (autoDefocus === void 0) { autoDefocus = false; }
	        this.updateOptions(focusOptions, 'focus');
	        this.focus = focus;
	        var _a = this.options.focus, animationDuration = _a.animationDuration, distanceRadiusScale = _a.distanceRadiusScale, easingFunction = _a.easingFunction;
	        if (this.isFrozen) {
	            return;
	        }
	        if (this.focus) {
	            // disable orbit controls when focused
	            var from_2 = [
	                this.camera.position.x,
	                this.camera.position.y,
	                this.camera.position.z,
	            ];
	            var to = coordinatesToPosition(this.focus, RADIUS * distanceRadiusScale);
	            this.preFocusPosition = this.preFocusPosition || __spreadArrays(from_2);
	            tween(from_2, to, animationDuration, easingFunction, function () {
	                var _a;
	                _this.enableOrbitControls(false);
	                (_a = _this.camera.position).set.apply(_a, from_2);
	            }, function () {
	                if (autoDefocus) {
	                    _this.focus = undefined;
	                    _this.preFocusPosition = undefined;
	                }
	                _this.enableOrbitControls(true, autoDefocus);
	            });
	        }
	        else {
	            if (this.preFocusPosition) {
	                var from_3 = [
	                    this.camera.position.x,
	                    this.camera.position.y,
	                    this.camera.position.z,
	                ];
	                var to = this.preFocusPosition;
	                tween(from_3, to, animationDuration, easingFunction, function () {
	                    var _a;
	                    _this.enableOrbitControls(false);
	                    (_a = _this.camera.position).set.apply(_a, from_3);
	                }, function () {
	                    _this.preFocusPosition = undefined;
	                    _this.enableOrbitControls(true);
	                });
	            }
	        }
	    };
	    Globe.prototype.updateGlobe = function (globeOptions) {
	        var _this = this;
	        if (globeOptions === void 0) { globeOptions = {}; }
	        this.updateOptions(globeOptions, 'globe');
	        var _a = this.options.globe, backgroundTexture = _a.backgroundTexture, cloudsOpacity = _a.cloudsOpacity, cloudsTexture = _a.cloudsTexture, enableBackground = _a.enableBackground, enableClouds = _a.enableClouds, enableGlow = _a.enableGlow, glowColor = _a.glowColor, glowCoefficient = _a.glowCoefficient, glowPower = _a.glowPower, glowRadiusScale = _a.glowRadiusScale, texture = _a.texture;
	        var globeBackground = this.getObjectByName(exports.ObjectName.GlobeBackground);
	        var globeClouds = this.getObjectByName(exports.ObjectName.GlobeClouds);
	        var globeSphere = this.getObjectByName(exports.ObjectName.GlobeSphere);
	        new three.TextureLoader().load(texture, function (map) {
	            globeSphere.geometry = new three.SphereGeometry(RADIUS, GLOBE_SEGMENTS, GLOBE_SEGMENTS);
	            globeSphere.material = new three.MeshLambertMaterial({
	                map: map,
	            });
	            if (enableGlow) {
	                globeSphere.remove(_this.getObjectByName(exports.ObjectName.GlobeGlow));
	                var globeGlow = threeGlowMesh.createGlowMesh(globeSphere.geometry, {
	                    backside: true,
	                    color: glowColor,
	                    coefficient: glowCoefficient,
	                    power: glowPower,
	                    size: RADIUS * glowRadiusScale,
	                });
	                globeGlow.name = exports.ObjectName.GlobeGlow;
	                globeSphere.add(globeGlow);
	            }
	            _this.callbacks.onTextureLoaded();
	        });
	        if (enableBackground) {
	            new three.TextureLoader().load(backgroundTexture, function (map) {
	                globeBackground.geometry = new three.SphereGeometry(RADIUS * BACKGROUND_RADIUS_SCALE, GLOBE_SEGMENTS, GLOBE_SEGMENTS);
	                globeBackground.material = new three.MeshBasicMaterial({
	                    map: map,
	                    side: three.BackSide,
	                });
	            });
	        }
	        if (enableClouds) {
	            new three.TextureLoader().load(cloudsTexture, function (map) {
	                globeClouds.geometry = new three.SphereGeometry(RADIUS + CLOUDS_RADIUS_OFFSET, GLOBE_SEGMENTS, GLOBE_SEGMENTS);
	                globeClouds.material = new three.MeshLambertMaterial({
	                    map: map,
	                    transparent: true,
	                });
	                globeClouds.material.opacity = cloudsOpacity;
	            });
	        }
	    };
	    Globe.prototype.updateLights = function (lightOptions) {
	        if (lightOptions === void 0) { lightOptions = {}; }
	        this.updateOptions(lightOptions, 'light');
	        var _a = this.options.light, ambientLightColor = _a.ambientLightColor, ambientLightIntensity = _a.ambientLightIntensity, pointLightColor = _a.pointLightColor, pointLightIntensity = _a.pointLightIntensity, pointLightPositionRadiusScales = _a.pointLightPositionRadiusScales;
	        var cameraAmbientLight = this.getObjectByName(exports.ObjectName.CameraAmbientLight);
	        var cameraPointLight = this.getObjectByName(exports.ObjectName.CameraPointLight);
	        cameraAmbientLight.color = new three.Color(ambientLightColor);
	        cameraAmbientLight.intensity = ambientLightIntensity;
	        cameraPointLight.color = new three.Color(pointLightColor);
	        cameraPointLight.intensity = pointLightIntensity;
	        cameraPointLight.position.set(RADIUS * pointLightPositionRadiusScales[0], RADIUS * pointLightPositionRadiusScales[1], RADIUS * pointLightPositionRadiusScales[2]);
	    };
	    Globe.prototype.updateMarkers = function (markers, markerOptions) {
	        var _this = this;
	        if (markers === void 0) { markers = []; }
	        if (markerOptions === void 0) { markerOptions = {}; }
	        this.updateOptions(markerOptions, 'marker');
	        var _a = this.options.marker, activeScale = _a.activeScale, enableGlow = _a.enableGlow, enableTooltip = _a.enableTooltip, enterAnimationDuration = _a.enterAnimationDuration, enterEasingFunction = _a.enterEasingFunction, exitAnimationDuration = _a.exitAnimationDuration, exitEasingFunction = _a.exitEasingFunction, getTooltipContent = _a.getTooltipContent, glowCoefficient = _a.glowCoefficient, glowPower = _a.glowPower, glowRadiusScale = _a.glowRadiusScale, offsetRadiusScale = _a.offsetRadiusScale, radiusScaleRange = _a.radiusScaleRange, renderer = _a.renderer, type = _a.type;
	        var unitRadius = RADIUS * MARKER_UNIT_RADIUS_SCALE;
	        var sizeScale = d3Scale.scaleLinear()
	            .domain([
	            minValue(markers, function (marker) { return marker.value; }),
	            maxValue(markers, function (marker) { return marker.value; }),
	        ])
	            .range([RADIUS * radiusScaleRange[0], RADIUS * radiusScaleRange[1]]);
	        var markerCoordinatesKeys = new Set(markers.map(getMarkerCoordinatesKey));
	        var markerObjectNames = new Set(this.markerObjects.children.map(function (markerObject) { return markerObject.name; }));
	        markers.forEach(function (marker) {
	            var _a;
	            var coordinates = marker.coordinates, value = marker.value;
	            var markerCoordinatesKey = getMarkerCoordinatesKey(marker);
	            var size = sizeScale(value);
	            var markerObject;
	            // create new marker objects
	            if (!markerObjectNames.has(markerCoordinatesKey)) {
	                if (renderer !== undefined) {
	                    markerObject = renderer(marker);
	                }
	                else {
	                    var color_1 = marker.color || MARKER_DEFAULT_COLOR;
	                    var from_4 = { size: 0 };
	                    var to = { size: size };
	                    var mesh_1 = new three.Mesh();
	                    tween(from_4, to, enterAnimationDuration, enterEasingFunction, function () {
	                        switch (type) {
	                            case exports.MarkerType.Bar:
	                                mesh_1.geometry = new three.BoxGeometry(unitRadius, unitRadius, from_4.size);
	                                mesh_1.material = new three.MeshLambertMaterial({
	                                    color: color_1,
	                                });
	                                break;
	                            case exports.MarkerType.Dot:
	                            default:
	                                mesh_1.geometry = new three.SphereGeometry(from_4.size, MARKER_SEGMENTS, MARKER_SEGMENTS);
	                                mesh_1.material = new three.MeshBasicMaterial({ color: color_1 });
	                                if (enableGlow) {
	                                    // add glow
	                                    var glowMesh = threeGlowMesh.createGlowMesh(mesh_1.geometry.clone(), {
	                                        backside: false,
	                                        color: color_1,
	                                        coefficient: glowCoefficient,
	                                        power: glowPower,
	                                        size: from_4.size * glowRadiusScale,
	                                    });
	                                    mesh_1.children = [];
	                                    mesh_1.add(glowMesh);
	                                }
	                        }
	                    });
	                    markerObject = mesh_1;
	                }
	                // place markers
	                var heightOffset = 0;
	                if (offsetRadiusScale !== undefined) {
	                    heightOffset = RADIUS * offsetRadiusScale;
	                }
	                else {
	                    if (type === exports.MarkerType.Dot) {
	                        heightOffset = (size * (1 + glowRadiusScale)) / 2;
	                    }
	                    else {
	                        heightOffset = 0;
	                    }
	                }
	                var position = coordinatesToPosition(coordinates, RADIUS + heightOffset);
	                (_a = markerObject.position).set.apply(_a, position);
	                markerObject.lookAt(new three.Vector3(0, 0, 0));
	                markerObject.name = markerCoordinatesKey;
	                _this.markerObjects.add(markerObject);
	            }
	            // update existing marker objects
	            markerObject = _this.markerObjects.getObjectByName(markerCoordinatesKey);
	            var handleClick = function (event) {
	                event.stopPropagation();
	                _this.updateFocus(marker.coordinates);
	                _this.callbacks.onClickMarker(marker, markerObject, event.data.originalEvent);
	            };
	            markerObject.on('click', handleClick.bind(_this));
	            markerObject.on('touchstart', handleClick.bind(_this));
	            markerObject.on('mousemove', function (event) {
	                if (_this.isFocusing()) {
	                    _this.tooltip.hide();
	                    return;
	                }
	                event.stopPropagation();
	                var from = markerObject.scale.toArray();
	                tween(from, [activeScale, activeScale, activeScale], MARKER_ACTIVE_ANIMATION_DURATION, MARKER_ACTIVE_ANIMATION_EASING_FUNCTION, function () {
	                    var _a;
	                    if (markerObject) {
	                        (_a = markerObject.scale).set.apply(_a, from);
	                    }
	                });
	                var originalEvent = event.data.originalEvent;
	                _this.activeMarker = marker;
	                _this.activeMarkerObject = markerObject;
	                _this.callbacks.onMouseOverMarker(marker, markerObject, originalEvent);
	                if (enableTooltip) {
	                    _this.tooltip.show(originalEvent.clientX, originalEvent.clientY, getTooltipContent(marker));
	                }
	            });
	        });
	        // remove marker objects that are stale
	        var markerObjectsToRemove = this.markerObjects.children.filter(function (markerObject) { return !markerCoordinatesKeys.has(markerObject.name); });
	        markerObjectsToRemove.forEach(function (markerObject) {
	            var from = markerObject.scale.toArray();
	            tween(from, [0, 0, 0], exitAnimationDuration, exitEasingFunction, function () {
	                var _a;
	                if (markerObject) {
	                    (_a = markerObject.scale).set.apply(_a, from);
	                }
	            }, function () {
	                _this.markerObjects.remove(markerObject);
	            });
	        });
	    };
	    Globe.prototype.updateOptions = function (options, key) {
	        var _a;
	        this.options = __assign(__assign({}, defaultOptions), (_a = {}, _a[key] = __assign(__assign({}, defaultOptions[key]), options), _a));
	    };
	    Globe.prototype.updateSize = function (size) {
	        if (size) {
	            var width = size[0], height = size[1];
	            this.renderer.setSize(width, height);
	            this.camera.aspect = width / height;
	        }
	        this.camera.updateProjectionMatrix();
	    };
	    Globe.prototype.unfreeze = function () {
	        if (this.isFrozen) {
	            this.isFrozen = false;
	            this.enableOrbitControls(true);
	            this.animate();
	        }
	    };
	    return Globe;
	}());
	
	function useResize(mountRef, initialSize) {
	    var _a = React.useState([0, 0]), size = _a[0], setSize = _a[1];
	    React.useEffect(function () {
	        var mount = mountRef.current;
	        // update initial size
	        var width = 0;
	        var height = 0;
	        if (initialSize) {
	            // Use initialSize if it is provided
	            width = initialSize[0], height = initialSize[1];
	        }
	        else {
	            // Use parentElement size if resized has not updated
	            width = mount.offsetWidth;
	            height = mount.offsetHeight;
	        }
	        setSize([width, height]);
	        // update resize using a resize observer
	        var resizeObserver = new ResizeObserver(function (entries) {
	            if (!entries || !entries.length) {
	                return;
	            }
	            if (initialSize === undefined) {
	                var _a = entries[0].contentRect, width_1 = _a.width, height_1 = _a.height;
	                setSize([width_1, height_1]);
	            }
	        });
	        resizeObserver.observe(mount);
	        return function () {
	            resizeObserver.unobserve(mount);
	        };
	    }, [initialSize, mountRef]);
	    return size;
	}
	
	function ReactGlobe(_a) {
	    var animations = _a.animations, cameraOptions = _a.cameraOptions, focus = _a.focus, focusOptions = _a.focusOptions, globeOptions = _a.globeOptions, lightOptions = _a.lightOptions, initialCoordinates = _a.initialCoordinates, markers = _a.markers, markerOptions = _a.markerOptions, onClickMarker = _a.onClickMarker, onDefocus = _a.onDefocus, onMouseOutMarker = _a.onMouseOutMarker, onMouseOverMarker = _a.onMouseOverMarker, onGetGlobeInstance = _a.onGetGlobeInstance, onTextureLoaded = _a.onTextureLoaded, initialSize = _a.size;
	    var canvasRef = React.useRef();
	    var globeInstanceRef = React.useRef();
	    var mountRef = React.useRef();
	    var tooltipRef = React.useRef();
	    var size = useResize(mountRef, initialSize);
	    // init
	    React.useEffect(function () {
	        var mount = mountRef.current;
	        var globeInstance = new Globe(canvasRef.current, tooltipRef.current);
	        mount.appendChild(globeInstance.renderer.domElement);
	        globeInstance.animate();
	        globeInstanceRef.current = globeInstance;
	        onGetGlobeInstance && onGetGlobeInstance(globeInstance);
	        return function () {
	            mount.removeChild(globeInstance.renderer.domElement);
	            globeInstance.destroy();
	        };
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    // update callbacks
	    React.useEffect(function () {
	        globeInstanceRef.current.updateCallbacks({
	            onClickMarker: onClickMarker,
	            onDefocus: onDefocus,
	            onMouseOutMarker: onMouseOutMarker,
	            onMouseOverMarker: onMouseOverMarker,
	            onTextureLoaded: onTextureLoaded,
	        });
	    }, [
	        onClickMarker,
	        onDefocus,
	        onMouseOutMarker,
	        onMouseOverMarker,
	        onTextureLoaded,
	    ]);
	    // update camera
	    React.useEffect(function () {
	        globeInstanceRef.current.updateCamera(initialCoordinates, cameraOptions);
	    }, [cameraOptions, initialCoordinates]);
	    // update focus
	    React.useEffect(function () {
	        globeInstanceRef.current.updateFocus(focus, focusOptions);
	    }, [focus, focusOptions]);
	    // update globe
	    React.useEffect(function () {
	        globeInstanceRef.current.updateGlobe(globeOptions);
	    }, [globeOptions]);
	    // update lights
	    React.useEffect(function () {
	        globeInstanceRef.current.updateLights(lightOptions);
	    }, [lightOptions]);
	    // update markers
	    React.useEffect(function () {
	        globeInstanceRef.current.updateMarkers(markers, markerOptions);
	    }, [markerOptions, markers]);
	    // apply animations
	    React.useEffect(function () {
	        return globeInstanceRef.current.applyAnimations(animations);
	    }, [animations]);
	    // resize
	    React.useEffect(function () {
	        globeInstanceRef.current.updateSize(size);
	    }, [size]);
	    return (React__default.createElement("div", { ref: mountRef, style: { height: '100%', width: '100%' } },
	        React__default.createElement("canvas", { ref: canvasRef, style: { display: 'block' } }),
	        React__default.createElement("div", { ref: tooltipRef })));
	}
	ReactGlobe.defaultProps = {
	    animations: [],
	    cameraOptions: defaultCameraOptions,
	    focusOptions: defaultFocusOptions,
	    globeOptions: defaultGlobeOptions,
	    lightOptions: defaultLightOptions,
	    initialCoordinates: INITIAL_COORDINATES,
	    markers: [],
	    markerOptions: defaultMarkerOptions,
	};
	
	exports.BACKGROUND_RADIUS_SCALE = BACKGROUND_RADIUS_SCALE;
	exports.CAMERA_DAMPING_FACTOR = CAMERA_DAMPING_FACTOR;
	exports.CAMERA_FAR = CAMERA_FAR;
	exports.CAMERA_FOV = CAMERA_FOV;
	exports.CAMERA_MAX_POLAR_ANGLE = CAMERA_MAX_POLAR_ANGLE;
	exports.CAMERA_MIN_DISTANCE_RADIUS_SCALE = CAMERA_MIN_DISTANCE_RADIUS_SCALE;
	exports.CAMERA_MIN_POLAR_ANGLE = CAMERA_MIN_POLAR_ANGLE;
	exports.CAMERA_NEAR = CAMERA_NEAR;
	exports.CLOUDS_RADIUS_OFFSET = CLOUDS_RADIUS_OFFSET;
	exports.GLOBE_SEGMENTS = GLOBE_SEGMENTS;
	exports.Globe = Globe;
	exports.INITIAL_COORDINATES = INITIAL_COORDINATES;
	exports.MARKER_ACTIVE_ANIMATION_DURATION = MARKER_ACTIVE_ANIMATION_DURATION;
	exports.MARKER_ACTIVE_ANIMATION_EASING_FUNCTION = MARKER_ACTIVE_ANIMATION_EASING_FUNCTION;
	exports.MARKER_DEFAULT_COLOR = MARKER_DEFAULT_COLOR;
	exports.MARKER_SEGMENTS = MARKER_SEGMENTS;
	exports.MARKER_UNIT_RADIUS_SCALE = MARKER_UNIT_RADIUS_SCALE;
	exports.RADIUS = RADIUS;
	exports.Tooltip = Tooltip;
	exports.coordinatesToPosition = coordinatesToPosition;
	exports.default = ReactGlobe;
	exports.defaultBarMarkerOptions = defaultBarMarkerOptions;
	exports.defaultCameraOptions = defaultCameraOptions;
	exports.defaultDotMarkerOptions = defaultDotMarkerOptions;
	exports.defaultFocusOptions = defaultFocusOptions;
	exports.defaultGlobeOptions = defaultGlobeOptions;
	exports.defaultLightOptions = defaultLightOptions;
	exports.defaultMarkerOptions = defaultMarkerOptions;
	exports.getMarkerCoordinatesKey = getMarkerCoordinatesKey;
	exports.maxValue = maxValue;
	exports.minValue = minValue;
	exports.tween = tween;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	
	var _react = _interopRequireWildcard(__webpack_require__(2));
	
	var _propTypes = _interopRequireDefault(__webpack_require__(3));
	
	var _reactTransitionGroup = __webpack_require__(80);
	
	var _emotion = __webpack_require__(5);
	
	var _Spinner = _interopRequireDefault(__webpack_require__(76));
	
	var _styles = _interopRequireDefault(__webpack_require__(77));
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
	
	function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
	
	function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }
	
	function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }
	
	function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }
	
	function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
	
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
	
	function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }
	
	function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }
	
	function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
	
	function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var LoadingOverlayWrapper =
	/*#__PURE__*/
	function (_Component) {
	  _inherits(LoadingOverlayWrapper, _Component);
	
	  function LoadingOverlayWrapper(props) {
	    var _this;
	
	    _classCallCheck(this, LoadingOverlayWrapper);
	
	    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoadingOverlayWrapper).call(this, props));
	
	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "getStyles", function (key, providedState) {
	      var base = _styles.default[key](providedState, _this.props);
	
	      var custom = _this.props.styles[key];
	      if (!custom) return base;
	      return typeof custom === 'function' ? custom(base, _this.props) : custom;
	    });
	
	    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "cx", function (names) {
	      var arr = Array.isArray(names) ? names : [names];
	
	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      return _emotion.cx.apply(void 0, _toConsumableArray(arr.map(function (name) {
	        return name ? "".concat(_this.props.classNamePrefix).concat(name) : '';
	      })).concat(args));
	    });
	
	    _this.wrapper = _react.default.createRef();
	    _this.state = {
	      overflowCSS: {}
	    };
	    return _this;
	  }
	
	  _createClass(LoadingOverlayWrapper, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var wrapperStyle = window.getComputedStyle(this.wrapper.current);
	      var overflowCSS = ['overflow', 'overflowX', 'overflowY'].reduce(function (m, i) {
	        if (wrapperStyle[i] !== 'visible') m[i] = 'hidden';
	        return m;
	      }, {});
	      this.setState({
	        overflowCSS: overflowCSS
	      });
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var active = this.props.active;
	      if (active) this.wrapper.current.scrollTop = 0;
	    }
	    /**
	     * Return an emotion css object for a given element key
	     * If a custom style was provided via props, run it with
	     * the base css obj.
	     */
	
	  }, {
	    key: "render",
	    value: function render() {
	      var _this2 = this;
	
	      var overflowCSS = this.state.overflowCSS;
	      var _this$props = this.props,
	          children = _this$props.children,
	          className = _this$props.className,
	          onClick = _this$props.onClick,
	          active = _this$props.active,
	          fadeSpeed = _this$props.fadeSpeed,
	          spinner = _this$props.spinner,
	          text = _this$props.text;
	      return _react.default.createElement("div", {
	        "data-testid": "wrapper",
	        ref: this.wrapper,
	        className: this.cx(['wrapper', active && 'wrapper--active'], (0, _emotion.css)(this.getStyles('wrapper', active ? overflowCSS : {})), className)
	      }, _react.default.createElement(_reactTransitionGroup.CSSTransition, {
	        in: active,
	        classNames: "_loading-overlay-transition",
	        timeout: fadeSpeed,
	        unmountOnExit: true
	      }, function (state) {
	        return _react.default.createElement("div", {
	          "data-testid": "overlay",
	          className: _this2.cx('overlay', (0, _emotion.css)(_this2.getStyles('overlay', state))),
	          onClick: onClick
	        }, _react.default.createElement("div", {
	          className: _this2.cx('content', (0, _emotion.css)(_this2.getStyles('content')))
	        }, spinner && (typeof spinner === 'boolean' ? _react.default.createElement(_Spinner.default, {
	          cx: _this2.cx,
	          getStyles: _this2.getStyles
	        }) : spinner), text));
	      }), children);
	    }
	  }]);
	
	  return LoadingOverlayWrapper;
	}(_react.Component);
	
	LoadingOverlayWrapper.propTypes = {
	  active: _propTypes.default.bool,
	  fadeSpeed: _propTypes.default.number,
	  onClick: _propTypes.default.func,
	  className: _propTypes.default.string,
	  classNamePrefix: _propTypes.default.string,
	  spinner: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.node]),
	  text: _propTypes.default.node,
	  styles: _propTypes.default.shape({
	    content: _propTypes.default.function,
	    overlay: _propTypes.default.function,
	    spinner: _propTypes.default.function,
	    wrapper: _propTypes.default.function
	  })
	};
	LoadingOverlayWrapper.defaultProps = {
	  classNamePrefix: '_loading_overlay_',
	  fadeSpeed: 500,
	  styles: {}
	};
	var _default = LoadingOverlayWrapper;
	exports.default = _default;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	
	var _react = _interopRequireDefault(__webpack_require__(2));
	
	var _propTypes = _interopRequireDefault(__webpack_require__(3));
	
	var _emotion = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Spinner = function Spinner(_ref) {
	  var getStyles = _ref.getStyles,
	      cx = _ref.cx;
	  return _react.default.createElement("div", {
	    className: cx('spinner', (0, _emotion.css)(getStyles('spinner')))
	  }, _react.default.createElement("svg", {
	    viewBox: "25 25 50 50"
	  }, _react.default.createElement("circle", {
	    cx: "50",
	    cy: "50",
	    r: "20",
	    fill: "none",
	    strokeWidth: "2",
	    strokeMiterlimit: "10"
	  })));
	};
	
	Spinner.propTypes = {
	  getStyles: _propTypes.default.func.isRequired,
	  cx: _propTypes.default.func.isRequired
	};
	var _default = Spinner;
	exports.default = _default;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	
	var _emotion = __webpack_require__(5);
	
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _templateObject2() {
	  var data = _taggedTemplateLiteral(["\n  0% {\n    stroke-dasharray: 1,200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -124px;\n  }\n"]);
	
	  _templateObject2 = function _templateObject2() {
	    return data;
	  };
	
	  return data;
	}
	
	function _templateObject() {
	  var data = _taggedTemplateLiteral(["\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n"]);
	
	  _templateObject = function _templateObject() {
	    return data;
	  };
	
	  return data;
	}
	
	function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
	
	var rotate360 = (0, _emotion.keyframes)(_templateObject());
	var spinnerDash = (0, _emotion.keyframes)(_templateObject2());
	var _default = {
	  wrapper: function wrapper(state) {
	    return _objectSpread({
	      position: 'relative'
	    }, state);
	  },
	  overlay: function overlay(state, props) {
	    return {
	      position: 'absolute',
	      height: '100%',
	      width: '100%',
	      top: '0px',
	      left: '0px',
	      display: 'flex',
	      textAlign: 'center',
	      fontSize: '1.2em',
	      color: '#FFF',
	      background: 'rgba(0, 0, 0, 0.7)',
	      zIndex: 800,
	      transition: "opacity ".concat(props.fadeSpeed, "ms ease-in"),
	      opacity: state === 'entering' || state === 'entered' ? 1 : 0
	    };
	  },
	  content: function content() {
	    return {
	      margin: 'auto'
	    };
	  },
	  spinner: function spinner(state) {
	    return {
	      position: 'relative',
	      margin: '0px auto 10px auto',
	      width: '50px',
	      maxHeight: '100%',
	      '&:before': {
	        content: '""',
	        display: 'block',
	        paddingTop: '100%'
	      },
	      '& svg': {
	        animation: "".concat(rotate360, " 2s linear infinite"),
	        height: '100%',
	        transformOrigin: 'center center',
	        width: '100%',
	        position: 'absolute',
	        top: '0',
	        bottom: '0',
	        left: '0',
	        right: '0',
	        margin: 'auto',
	        '& circle': {
	          animation: "".concat(spinnerDash, " 1.5s ease-in-out infinite"),
	          strokeDasharray: '1,200',
	          strokeDashoffset: 0,
	          strokeLinecap: 'round',
	          stroke: '#FFF'
	        }
	      }
	    };
	  }
	};
	exports.default = _default;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = void 0;
	
	var PropTypes = _interopRequireWildcard(__webpack_require__(3));
	
	var _addClass = _interopRequireDefault(__webpack_require__(63));
	
	var _removeClass = _interopRequireDefault(__webpack_require__(65));
	
	var _react = _interopRequireDefault(__webpack_require__(2));
	
	var _Transition = _interopRequireDefault(__webpack_require__(20));
	
	var _PropTypes = __webpack_require__(22);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }
	
	function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
	
	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
	
	var addClass = function addClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _addClass.default)(node, c);
	  });
	};
	
	var removeClass = function removeClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return (0, _removeClass.default)(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
	 * using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity: 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**.
	 */
	
	
	var CSSTransition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(CSSTransition, _React$Component);
	
	  function CSSTransition() {
	    var _this;
	
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	
	    _this.onEnter = function (node, appearing) {
	      var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
	          className = _this$getClassNames.className;
	
	      _this.removeClasses(node, 'exit');
	
	      addClass(node, className);
	
	      if (_this.props.onEnter) {
	        _this.props.onEnter(node, appearing);
	      }
	    };
	
	    _this.onEntering = function (node, appearing) {
	      var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
	          activeClassName = _this$getClassNames2.activeClassName;
	
	      _this.reflowAndAddClass(node, activeClassName);
	
	      if (_this.props.onEntering) {
	        _this.props.onEntering(node, appearing);
	      }
	    };
	
	    _this.onEntered = function (node, appearing) {
	      var appearClassName = _this.getClassNames('appear').doneClassName;
	
	      var enterClassName = _this.getClassNames('enter').doneClassName;
	
	      var doneClassName = appearing ? appearClassName + " " + enterClassName : enterClassName;
	
	      _this.removeClasses(node, appearing ? 'appear' : 'enter');
	
	      addClass(node, doneClassName);
	
	      if (_this.props.onEntered) {
	        _this.props.onEntered(node, appearing);
	      }
	    };
	
	    _this.onExit = function (node) {
	      var _this$getClassNames3 = _this.getClassNames('exit'),
	          className = _this$getClassNames3.className;
	
	      _this.removeClasses(node, 'appear');
	
	      _this.removeClasses(node, 'enter');
	
	      addClass(node, className);
	
	      if (_this.props.onExit) {
	        _this.props.onExit(node);
	      }
	    };
	
	    _this.onExiting = function (node) {
	      var _this$getClassNames4 = _this.getClassNames('exit'),
	          activeClassName = _this$getClassNames4.activeClassName;
	
	      _this.reflowAndAddClass(node, activeClassName);
	
	      if (_this.props.onExiting) {
	        _this.props.onExiting(node);
	      }
	    };
	
	    _this.onExited = function (node) {
	      var _this$getClassNames5 = _this.getClassNames('exit'),
	          doneClassName = _this$getClassNames5.doneClassName;
	
	      _this.removeClasses(node, 'exit');
	
	      addClass(node, doneClassName);
	
	      if (_this.props.onExited) {
	        _this.props.onExited(node);
	      }
	    };
	
	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + '-' : '';
	      var className = isStringClassNames ? prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? className + '-active' : classNames[type + 'Active'];
	      var doneClassName = isStringClassNames ? className + '-done' : classNames[type + 'Done'];
	      return {
	        className: className,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };
	
	    return _this;
	  }
	
	  var _proto = CSSTransition.prototype;
	
	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$getClassNames6 = this.getClassNames(type),
	        className = _this$getClassNames6.className,
	        activeClassName = _this$getClassNames6.activeClassName,
	        doneClassName = _this$getClassNames6.doneClassName;
	
	    className && removeClass(node, className);
	    activeClassName && removeClass(node, activeClassName);
	    doneClassName && removeClass(node, doneClassName);
	  };
	
	  _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
	    // This is for to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.
	    if (className) {
	      /* eslint-disable no-unused-expressions */
	      node && node.scrollTop;
	      /* eslint-enable no-unused-expressions */
	
	      addClass(node, className);
	    }
	  };
	
	  _proto.render = function render() {
	    var props = _extends({}, this.props);
	
	    delete props.classNames;
	    return _react.default.createElement(_Transition.default, _extends({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };
	
	  return CSSTransition;
	}(_react.default.Component);
	
	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes =  false ? _extends({}, _Transition.default.propTypes, {
	  /**
	   * The animation classNames applied to the component as it enters, exits or
	   * has finished the transition. A single name can be provided and it will be
	   * suffixed for each stage: e.g.
	   *
	   * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
	   * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,
	   * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.
	   *
	   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
	   * This allows you to define different behavior for when appearing is done and
	   * when regular entering is done, using selectors like
	   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
	   * epic entrance animation when element first appears in the DOM using
	   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
	   * simply use `fade-enter-done` for defining both cases.
	   *
	   * Each individual classNames can also be specified independently like:
	   *
	   * ```js
	   * classNames={{
	   *  appear: 'my-appear',
	   *  appearActive: 'my-active-appear',
	   *  appearDone: 'my-done-appear',
	   *  enter: 'my-enter',
	   *  enterActive: 'my-active-enter',
	   *  enterDone: 'my-done-enter',
	   *  exit: 'my-exit',
	   *  exitActive: 'my-active-exit',
	   *  exitDone: 'my-done-exit',
	   * }}
	   * ```
	   *
	   * If you want to set these classes using CSS Modules:
	   *
	   * ```js
	   * import styles from './styles.css';
	   * ```
	   *
	   * you might want to use camelCase in your CSS file, that way could simply
	   * spread them instead of listing them one by one:
	   *
	   * ```js
	   * classNames={{ ...styles }}
	   * ```
	   *
	   * @type {string | {
	   *  appear?: string,
	   *  appearActive?: string,
	   *  appearDone?: string,
	   *  enter?: string,
	   *  enterActive?: string,
	   *  enterDone?: string,
	   *  exit?: string,
	   *  exitActive?: string,
	   *  exitDone?: string,
	   * }}
	   */
	  classNames: _PropTypes.classNamesShape,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEnter: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'enter-active' or
	   * 'appear-active' class is applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or
	   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntered: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExit: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExiting: PropTypes.func,
	
	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' classes
	   * are **removed** and the `exit-done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExited: PropTypes.func
	}) : {};
	var _default = CSSTransition;
	exports.default = _default;
	module.exports = exports["default"];

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = void 0;
	
	var _propTypes = _interopRequireDefault(__webpack_require__(3));
	
	var _react = _interopRequireDefault(__webpack_require__(2));
	
	var _reactDom = __webpack_require__(7);
	
	var _TransitionGroup = _interopRequireDefault(__webpack_require__(21));
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
	
	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
	
	/**
	 * The `<ReplaceTransition>` component is a specialized `Transition` component
	 * that animates between two children.
	 *
	 * ```jsx
	 * <ReplaceTransition in>
	 *   <Fade><div>I appear first</div></Fade>
	 *   <Fade><div>I replace the above</div></Fade>
	 * </ReplaceTransition>
	 * ```
	 */
	var ReplaceTransition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose(ReplaceTransition, _React$Component);
	
	  function ReplaceTransition() {
	    var _this;
	
	    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
	      _args[_key] = arguments[_key];
	    }
	
	    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
	
	    _this.handleEnter = function () {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }
	
	      return _this.handleLifecycle('onEnter', 0, args);
	    };
	
	    _this.handleEntering = function () {
	      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }
	
	      return _this.handleLifecycle('onEntering', 0, args);
	    };
	
	    _this.handleEntered = function () {
	      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }
	
	      return _this.handleLifecycle('onEntered', 0, args);
	    };
	
	    _this.handleExit = function () {
	      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
	        args[_key5] = arguments[_key5];
	      }
	
	      return _this.handleLifecycle('onExit', 1, args);
	    };
	
	    _this.handleExiting = function () {
	      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
	        args[_key6] = arguments[_key6];
	      }
	
	      return _this.handleLifecycle('onExiting', 1, args);
	    };
	
	    _this.handleExited = function () {
	      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
	        args[_key7] = arguments[_key7];
	      }
	
	      return _this.handleLifecycle('onExited', 1, args);
	    };
	
	    return _this;
	  }
	
	  var _proto = ReplaceTransition.prototype;
	
	  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
	    var _child$props;
	
	    var children = this.props.children;
	
	    var child = _react.default.Children.toArray(children)[idx];
	
	    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
	    if (this.props[handler]) this.props[handler]((0, _reactDom.findDOMNode)(this));
	  };
	
	  _proto.render = function render() {
	    var _this$props = this.props,
	        children = _this$props.children,
	        inProp = _this$props.in,
	        props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
	
	    var _React$Children$toArr = _react.default.Children.toArray(children),
	        first = _React$Children$toArr[0],
	        second = _React$Children$toArr[1];
	
	    delete props.onEnter;
	    delete props.onEntering;
	    delete props.onEntered;
	    delete props.onExit;
	    delete props.onExiting;
	    delete props.onExited;
	    return _react.default.createElement(_TransitionGroup.default, props, inProp ? _react.default.cloneElement(first, {
	      key: 'first',
	      onEnter: this.handleEnter,
	      onEntering: this.handleEntering,
	      onEntered: this.handleEntered
	    }) : _react.default.cloneElement(second, {
	      key: 'second',
	      onEnter: this.handleExit,
	      onEntering: this.handleExiting,
	      onEntered: this.handleExited
	    }));
	  };
	
	  return ReplaceTransition;
	}(_react.default.Component);
	
	ReplaceTransition.propTypes =  false ? {
	  in: _propTypes.default.bool.isRequired,
	  children: function children(props, propName) {
	    if (_react.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
	    return null;
	  }
	} : {};
	var _default = ReplaceTransition;
	exports.default = _default;
	module.exports = exports["default"];

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _CSSTransition = _interopRequireDefault(__webpack_require__(78));
	
	var _ReplaceTransition = _interopRequireDefault(__webpack_require__(79));
	
	var _TransitionGroup = _interopRequireDefault(__webpack_require__(21));
	
	var _Transition = _interopRequireDefault(__webpack_require__(20));
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	module.exports = {
	  Transition: _Transition.default,
	  TransitionGroup: _TransitionGroup.default,
	  ReplaceTransition: _ReplaceTransition.default,
	  CSSTransition: _CSSTransition.default
	};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;
	exports.getInitialChildMapping = getInitialChildMapping;
	exports.getNextChildMapping = getNextChildMapping;
	
	var _react = __webpack_require__(2);
	
	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
	  };
	
	  var result = Object.create(null);
	  if (children) _react.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */
	
	
	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};
	
	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	
	
	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];
	
	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }
	
	  var i;
	  var childMapping = {};
	
	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }
	
	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`
	
	
	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }
	
	  return childMapping;
	}
	
	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}
	
	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return (0, _react.cloneElement)(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!(0, _react.isValidElement)(child)) return;
	    var hasPrev = key in prevChildMapping;
	    var hasNext = key in nextChildMapping;
	    var prevChild = prevChildMapping[key];
	    var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)
	
	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = (0, _react.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = (0, _react.cloneElement)(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = (0, _react.cloneElement)(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/** @license React v16.13.1
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';var l=__webpack_require__(6),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):
	60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
	var D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};
	function G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
	function M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}
	function N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}
	function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}
	function T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=
	0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}
	function aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a))}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}
	var ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};
	exports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;
	exports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,
	key:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;
	exports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};
	exports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version="16.13.1";


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ResizeObserver = factory());
	}(this, (function () { 'use strict';
	
	    /**
	     * A collection of shims that provide minimal functionality of the ES6 collections.
	     *
	     * These implementations are not meant to be used outside of the ResizeObserver
	     * modules as they cover only a limited range of use cases.
	     */
	    /* eslint-disable require-jsdoc, valid-jsdoc */
	    var MapShim = (function () {
	        if (typeof Map !== 'undefined') {
	            return Map;
	        }
	        /**
	         * Returns index in provided array that matches the specified key.
	         *
	         * @param {Array<Array>} arr
	         * @param {*} key
	         * @returns {number}
	         */
	        function getIndex(arr, key) {
	            var result = -1;
	            arr.some(function (entry, index) {
	                if (entry[0] === key) {
	                    result = index;
	                    return true;
	                }
	                return false;
	            });
	            return result;
	        }
	        return /** @class */ (function () {
	            function class_1() {
	                this.__entries__ = [];
	            }
	            Object.defineProperty(class_1.prototype, "size", {
	                /**
	                 * @returns {boolean}
	                 */
	                get: function () {
	                    return this.__entries__.length;
	                },
	                enumerable: true,
	                configurable: true
	            });
	            /**
	             * @param {*} key
	             * @returns {*}
	             */
	            class_1.prototype.get = function (key) {
	                var index = getIndex(this.__entries__, key);
	                var entry = this.__entries__[index];
	                return entry && entry[1];
	            };
	            /**
	             * @param {*} key
	             * @param {*} value
	             * @returns {void}
	             */
	            class_1.prototype.set = function (key, value) {
	                var index = getIndex(this.__entries__, key);
	                if (~index) {
	                    this.__entries__[index][1] = value;
	                }
	                else {
	                    this.__entries__.push([key, value]);
	                }
	            };
	            /**
	             * @param {*} key
	             * @returns {void}
	             */
	            class_1.prototype.delete = function (key) {
	                var entries = this.__entries__;
	                var index = getIndex(entries, key);
	                if (~index) {
	                    entries.splice(index, 1);
	                }
	            };
	            /**
	             * @param {*} key
	             * @returns {void}
	             */
	            class_1.prototype.has = function (key) {
	                return !!~getIndex(this.__entries__, key);
	            };
	            /**
	             * @returns {void}
	             */
	            class_1.prototype.clear = function () {
	                this.__entries__.splice(0);
	            };
	            /**
	             * @param {Function} callback
	             * @param {*} [ctx=null]
	             * @returns {void}
	             */
	            class_1.prototype.forEach = function (callback, ctx) {
	                if (ctx === void 0) { ctx = null; }
	                for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
	                    var entry = _a[_i];
	                    callback.call(ctx, entry[1], entry[0]);
	                }
	            };
	            return class_1;
	        }());
	    })();
	
	    /**
	     * Detects whether window and document objects are available in current environment.
	     */
	    var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;
	
	    // Returns global object of a current environment.
	    var global$1 = (function () {
	        if (typeof global !== 'undefined' && global.Math === Math) {
	            return global;
	        }
	        if (typeof self !== 'undefined' && self.Math === Math) {
	            return self;
	        }
	        if (typeof window !== 'undefined' && window.Math === Math) {
	            return window;
	        }
	        // eslint-disable-next-line no-new-func
	        return Function('return this')();
	    })();
	
	    /**
	     * A shim for the requestAnimationFrame which falls back to the setTimeout if
	     * first one is not supported.
	     *
	     * @returns {number} Requests' identifier.
	     */
	    var requestAnimationFrame$1 = (function () {
	        if (typeof requestAnimationFrame === 'function') {
	            // It's required to use a bounded function because IE sometimes throws
	            // an "Invalid calling object" error if rAF is invoked without the global
	            // object on the left hand side.
	            return requestAnimationFrame.bind(global$1);
	        }
	        return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
	    })();
	
	    // Defines minimum timeout before adding a trailing call.
	    var trailingTimeout = 2;
	    /**
	     * Creates a wrapper function which ensures that provided callback will be
	     * invoked only once during the specified delay period.
	     *
	     * @param {Function} callback - Function to be invoked after the delay period.
	     * @param {number} delay - Delay after which to invoke callback.
	     * @returns {Function}
	     */
	    function throttle (callback, delay) {
	        var leadingCall = false, trailingCall = false, lastCallTime = 0;
	        /**
	         * Invokes the original callback function and schedules new invocation if
	         * the "proxy" was called during current request.
	         *
	         * @returns {void}
	         */
	        function resolvePending() {
	            if (leadingCall) {
	                leadingCall = false;
	                callback();
	            }
	            if (trailingCall) {
	                proxy();
	            }
	        }
	        /**
	         * Callback invoked after the specified delay. It will further postpone
	         * invocation of the original function delegating it to the
	         * requestAnimationFrame.
	         *
	         * @returns {void}
	         */
	        function timeoutCallback() {
	            requestAnimationFrame$1(resolvePending);
	        }
	        /**
	         * Schedules invocation of the original function.
	         *
	         * @returns {void}
	         */
	        function proxy() {
	            var timeStamp = Date.now();
	            if (leadingCall) {
	                // Reject immediately following calls.
	                if (timeStamp - lastCallTime < trailingTimeout) {
	                    return;
	                }
	                // Schedule new call to be in invoked when the pending one is resolved.
	                // This is important for "transitions" which never actually start
	                // immediately so there is a chance that we might miss one if change
	                // happens amids the pending invocation.
	                trailingCall = true;
	            }
	            else {
	                leadingCall = true;
	                trailingCall = false;
	                setTimeout(timeoutCallback, delay);
	            }
	            lastCallTime = timeStamp;
	        }
	        return proxy;
	    }
	
	    // Minimum delay before invoking the update of observers.
	    var REFRESH_DELAY = 20;
	    // A list of substrings of CSS properties used to find transition events that
	    // might affect dimensions of observed elements.
	    var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
	    // Check if MutationObserver is available.
	    var mutationObserverSupported = typeof MutationObserver !== 'undefined';
	    /**
	     * Singleton controller class which handles updates of ResizeObserver instances.
	     */
	    var ResizeObserverController = /** @class */ (function () {
	        /**
	         * Creates a new instance of ResizeObserverController.
	         *
	         * @private
	         */
	        function ResizeObserverController() {
	            /**
	             * Indicates whether DOM listeners have been added.
	             *
	             * @private {boolean}
	             */
	            this.connected_ = false;
	            /**
	             * Tells that controller has subscribed for Mutation Events.
	             *
	             * @private {boolean}
	             */
	            this.mutationEventsAdded_ = false;
	            /**
	             * Keeps reference to the instance of MutationObserver.
	             *
	             * @private {MutationObserver}
	             */
	            this.mutationsObserver_ = null;
	            /**
	             * A list of connected observers.
	             *
	             * @private {Array<ResizeObserverSPI>}
	             */
	            this.observers_ = [];
	            this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
	            this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
	        }
	        /**
	         * Adds observer to observers list.
	         *
	         * @param {ResizeObserverSPI} observer - Observer to be added.
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.addObserver = function (observer) {
	            if (!~this.observers_.indexOf(observer)) {
	                this.observers_.push(observer);
	            }
	            // Add listeners if they haven't been added yet.
	            if (!this.connected_) {
	                this.connect_();
	            }
	        };
	        /**
	         * Removes observer from observers list.
	         *
	         * @param {ResizeObserverSPI} observer - Observer to be removed.
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.removeObserver = function (observer) {
	            var observers = this.observers_;
	            var index = observers.indexOf(observer);
	            // Remove observer if it's present in registry.
	            if (~index) {
	                observers.splice(index, 1);
	            }
	            // Remove listeners if controller has no connected observers.
	            if (!observers.length && this.connected_) {
	                this.disconnect_();
	            }
	        };
	        /**
	         * Invokes the update of observers. It will continue running updates insofar
	         * it detects changes.
	         *
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.refresh = function () {
	            var changesDetected = this.updateObservers_();
	            // Continue running updates if changes have been detected as there might
	            // be future ones caused by CSS transitions.
	            if (changesDetected) {
	                this.refresh();
	            }
	        };
	        /**
	         * Updates every observer from observers list and notifies them of queued
	         * entries.
	         *
	         * @private
	         * @returns {boolean} Returns "true" if any observer has detected changes in
	         *      dimensions of it's elements.
	         */
	        ResizeObserverController.prototype.updateObservers_ = function () {
	            // Collect observers that have active observations.
	            var activeObservers = this.observers_.filter(function (observer) {
	                return observer.gatherActive(), observer.hasActive();
	            });
	            // Deliver notifications in a separate cycle in order to avoid any
	            // collisions between observers, e.g. when multiple instances of
	            // ResizeObserver are tracking the same element and the callback of one
	            // of them changes content dimensions of the observed target. Sometimes
	            // this may result in notifications being blocked for the rest of observers.
	            activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
	            return activeObservers.length > 0;
	        };
	        /**
	         * Initializes DOM listeners.
	         *
	         * @private
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.connect_ = function () {
	            // Do nothing if running in a non-browser environment or if listeners
	            // have been already added.
	            if (!isBrowser || this.connected_) {
	                return;
	            }
	            // Subscription to the "Transitionend" event is used as a workaround for
	            // delayed transitions. This way it's possible to capture at least the
	            // final state of an element.
	            document.addEventListener('transitionend', this.onTransitionEnd_);
	            window.addEventListener('resize', this.refresh);
	            if (mutationObserverSupported) {
	                this.mutationsObserver_ = new MutationObserver(this.refresh);
	                this.mutationsObserver_.observe(document, {
	                    attributes: true,
	                    childList: true,
	                    characterData: true,
	                    subtree: true
	                });
	            }
	            else {
	                document.addEventListener('DOMSubtreeModified', this.refresh);
	                this.mutationEventsAdded_ = true;
	            }
	            this.connected_ = true;
	        };
	        /**
	         * Removes DOM listeners.
	         *
	         * @private
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.disconnect_ = function () {
	            // Do nothing if running in a non-browser environment or if listeners
	            // have been already removed.
	            if (!isBrowser || !this.connected_) {
	                return;
	            }
	            document.removeEventListener('transitionend', this.onTransitionEnd_);
	            window.removeEventListener('resize', this.refresh);
	            if (this.mutationsObserver_) {
	                this.mutationsObserver_.disconnect();
	            }
	            if (this.mutationEventsAdded_) {
	                document.removeEventListener('DOMSubtreeModified', this.refresh);
	            }
	            this.mutationsObserver_ = null;
	            this.mutationEventsAdded_ = false;
	            this.connected_ = false;
	        };
	        /**
	         * "Transitionend" event handler.
	         *
	         * @private
	         * @param {TransitionEvent} event
	         * @returns {void}
	         */
	        ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
	            var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
	            // Detect whether transition may affect dimensions of an element.
	            var isReflowProperty = transitionKeys.some(function (key) {
	                return !!~propertyName.indexOf(key);
	            });
	            if (isReflowProperty) {
	                this.refresh();
	            }
	        };
	        /**
	         * Returns instance of the ResizeObserverController.
	         *
	         * @returns {ResizeObserverController}
	         */
	        ResizeObserverController.getInstance = function () {
	            if (!this.instance_) {
	                this.instance_ = new ResizeObserverController();
	            }
	            return this.instance_;
	        };
	        /**
	         * Holds reference to the controller's instance.
	         *
	         * @private {ResizeObserverController}
	         */
	        ResizeObserverController.instance_ = null;
	        return ResizeObserverController;
	    }());
	
	    /**
	     * Defines non-writable/enumerable properties of the provided target object.
	     *
	     * @param {Object} target - Object for which to define properties.
	     * @param {Object} props - Properties to be defined.
	     * @returns {Object} Target object.
	     */
	    var defineConfigurable = (function (target, props) {
	        for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
	            var key = _a[_i];
	            Object.defineProperty(target, key, {
	                value: props[key],
	                enumerable: false,
	                writable: false,
	                configurable: true
	            });
	        }
	        return target;
	    });
	
	    /**
	     * Returns the global object associated with provided element.
	     *
	     * @param {Object} target
	     * @returns {Object}
	     */
	    var getWindowOf = (function (target) {
	        // Assume that the element is an instance of Node, which means that it
	        // has the "ownerDocument" property from which we can retrieve a
	        // corresponding global object.
	        var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
	        // Return the local global object if it's not possible extract one from
	        // provided element.
	        return ownerGlobal || global$1;
	    });
	
	    // Placeholder of an empty content rectangle.
	    var emptyRect = createRectInit(0, 0, 0, 0);
	    /**
	     * Converts provided string to a number.
	     *
	     * @param {number|string} value
	     * @returns {number}
	     */
	    function toFloat(value) {
	        return parseFloat(value) || 0;
	    }
	    /**
	     * Extracts borders size from provided styles.
	     *
	     * @param {CSSStyleDeclaration} styles
	     * @param {...string} positions - Borders positions (top, right, ...)
	     * @returns {number}
	     */
	    function getBordersSize(styles) {
	        var positions = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            positions[_i - 1] = arguments[_i];
	        }
	        return positions.reduce(function (size, position) {
	            var value = styles['border-' + position + '-width'];
	            return size + toFloat(value);
	        }, 0);
	    }
	    /**
	     * Extracts paddings sizes from provided styles.
	     *
	     * @param {CSSStyleDeclaration} styles
	     * @returns {Object} Paddings box.
	     */
	    function getPaddings(styles) {
	        var positions = ['top', 'right', 'bottom', 'left'];
	        var paddings = {};
	        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
	            var position = positions_1[_i];
	            var value = styles['padding-' + position];
	            paddings[position] = toFloat(value);
	        }
	        return paddings;
	    }
	    /**
	     * Calculates content rectangle of provided SVG element.
	     *
	     * @param {SVGGraphicsElement} target - Element content rectangle of which needs
	     *      to be calculated.
	     * @returns {DOMRectInit}
	     */
	    function getSVGContentRect(target) {
	        var bbox = target.getBBox();
	        return createRectInit(0, 0, bbox.width, bbox.height);
	    }
	    /**
	     * Calculates content rectangle of provided HTMLElement.
	     *
	     * @param {HTMLElement} target - Element for which to calculate the content rectangle.
	     * @returns {DOMRectInit}
	     */
	    function getHTMLElementContentRect(target) {
	        // Client width & height properties can't be
	        // used exclusively as they provide rounded values.
	        var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
	        // By this condition we can catch all non-replaced inline, hidden and
	        // detached elements. Though elements with width & height properties less
	        // than 0.5 will be discarded as well.
	        //
	        // Without it we would need to implement separate methods for each of
	        // those cases and it's not possible to perform a precise and performance
	        // effective test for hidden elements. E.g. even jQuery's ':visible' filter
	        // gives wrong results for elements with width & height less than 0.5.
	        if (!clientWidth && !clientHeight) {
	            return emptyRect;
	        }
	        var styles = getWindowOf(target).getComputedStyle(target);
	        var paddings = getPaddings(styles);
	        var horizPad = paddings.left + paddings.right;
	        var vertPad = paddings.top + paddings.bottom;
	        // Computed styles of width & height are being used because they are the
	        // only dimensions available to JS that contain non-rounded values. It could
	        // be possible to utilize the getBoundingClientRect if only it's data wasn't
	        // affected by CSS transformations let alone paddings, borders and scroll bars.
	        var width = toFloat(styles.width), height = toFloat(styles.height);
	        // Width & height include paddings and borders when the 'border-box' box
	        // model is applied (except for IE).
	        if (styles.boxSizing === 'border-box') {
	            // Following conditions are required to handle Internet Explorer which
	            // doesn't include paddings and borders to computed CSS dimensions.
	            //
	            // We can say that if CSS dimensions + paddings are equal to the "client"
	            // properties then it's either IE, and thus we don't need to subtract
	            // anything, or an element merely doesn't have paddings/borders styles.
	            if (Math.round(width + horizPad) !== clientWidth) {
	                width -= getBordersSize(styles, 'left', 'right') + horizPad;
	            }
	            if (Math.round(height + vertPad) !== clientHeight) {
	                height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
	            }
	        }
	        // Following steps can't be applied to the document's root element as its
	        // client[Width/Height] properties represent viewport area of the window.
	        // Besides, it's as well not necessary as the <html> itself neither has
	        // rendered scroll bars nor it can be clipped.
	        if (!isDocumentElement(target)) {
	            // In some browsers (only in Firefox, actually) CSS width & height
	            // include scroll bars size which can be removed at this step as scroll
	            // bars are the only difference between rounded dimensions + paddings
	            // and "client" properties, though that is not always true in Chrome.
	            var vertScrollbar = Math.round(width + horizPad) - clientWidth;
	            var horizScrollbar = Math.round(height + vertPad) - clientHeight;
	            // Chrome has a rather weird rounding of "client" properties.
	            // E.g. for an element with content width of 314.2px it sometimes gives
	            // the client width of 315px and for the width of 314.7px it may give
	            // 314px. And it doesn't happen all the time. So just ignore this delta
	            // as a non-relevant.
	            if (Math.abs(vertScrollbar) !== 1) {
	                width -= vertScrollbar;
	            }
	            if (Math.abs(horizScrollbar) !== 1) {
	                height -= horizScrollbar;
	            }
	        }
	        return createRectInit(paddings.left, paddings.top, width, height);
	    }
	    /**
	     * Checks whether provided element is an instance of the SVGGraphicsElement.
	     *
	     * @param {Element} target - Element to be checked.
	     * @returns {boolean}
	     */
	    var isSVGGraphicsElement = (function () {
	        // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
	        // interface.
	        if (typeof SVGGraphicsElement !== 'undefined') {
	            return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
	        }
	        // If it's so, then check that element is at least an instance of the
	        // SVGElement and that it has the "getBBox" method.
	        // eslint-disable-next-line no-extra-parens
	        return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
	            typeof target.getBBox === 'function'); };
	    })();
	    /**
	     * Checks whether provided element is a document element (<html>).
	     *
	     * @param {Element} target - Element to be checked.
	     * @returns {boolean}
	     */
	    function isDocumentElement(target) {
	        return target === getWindowOf(target).document.documentElement;
	    }
	    /**
	     * Calculates an appropriate content rectangle for provided html or svg element.
	     *
	     * @param {Element} target - Element content rectangle of which needs to be calculated.
	     * @returns {DOMRectInit}
	     */
	    function getContentRect(target) {
	        if (!isBrowser) {
	            return emptyRect;
	        }
	        if (isSVGGraphicsElement(target)) {
	            return getSVGContentRect(target);
	        }
	        return getHTMLElementContentRect(target);
	    }
	    /**
	     * Creates rectangle with an interface of the DOMRectReadOnly.
	     * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
	     *
	     * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
	     * @returns {DOMRectReadOnly}
	     */
	    function createReadOnlyRect(_a) {
	        var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
	        // If DOMRectReadOnly is available use it as a prototype for the rectangle.
	        var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
	        var rect = Object.create(Constr.prototype);
	        // Rectangle's properties are not writable and non-enumerable.
	        defineConfigurable(rect, {
	            x: x, y: y, width: width, height: height,
	            top: y,
	            right: x + width,
	            bottom: height + y,
	            left: x
	        });
	        return rect;
	    }
	    /**
	     * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
	     * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
	     *
	     * @param {number} x - X coordinate.
	     * @param {number} y - Y coordinate.
	     * @param {number} width - Rectangle's width.
	     * @param {number} height - Rectangle's height.
	     * @returns {DOMRectInit}
	     */
	    function createRectInit(x, y, width, height) {
	        return { x: x, y: y, width: width, height: height };
	    }
	
	    /**
	     * Class that is responsible for computations of the content rectangle of
	     * provided DOM element and for keeping track of it's changes.
	     */
	    var ResizeObservation = /** @class */ (function () {
	        /**
	         * Creates an instance of ResizeObservation.
	         *
	         * @param {Element} target - Element to be observed.
	         */
	        function ResizeObservation(target) {
	            /**
	             * Broadcasted width of content rectangle.
	             *
	             * @type {number}
	             */
	            this.broadcastWidth = 0;
	            /**
	             * Broadcasted height of content rectangle.
	             *
	             * @type {number}
	             */
	            this.broadcastHeight = 0;
	            /**
	             * Reference to the last observed content rectangle.
	             *
	             * @private {DOMRectInit}
	             */
	            this.contentRect_ = createRectInit(0, 0, 0, 0);
	            this.target = target;
	        }
	        /**
	         * Updates content rectangle and tells whether it's width or height properties
	         * have changed since the last broadcast.
	         *
	         * @returns {boolean}
	         */
	        ResizeObservation.prototype.isActive = function () {
	            var rect = getContentRect(this.target);
	            this.contentRect_ = rect;
	            return (rect.width !== this.broadcastWidth ||
	                rect.height !== this.broadcastHeight);
	        };
	        /**
	         * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
	         * from the corresponding properties of the last observed content rectangle.
	         *
	         * @returns {DOMRectInit} Last observed content rectangle.
	         */
	        ResizeObservation.prototype.broadcastRect = function () {
	            var rect = this.contentRect_;
	            this.broadcastWidth = rect.width;
	            this.broadcastHeight = rect.height;
	            return rect;
	        };
	        return ResizeObservation;
	    }());
	
	    var ResizeObserverEntry = /** @class */ (function () {
	        /**
	         * Creates an instance of ResizeObserverEntry.
	         *
	         * @param {Element} target - Element that is being observed.
	         * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
	         */
	        function ResizeObserverEntry(target, rectInit) {
	            var contentRect = createReadOnlyRect(rectInit);
	            // According to the specification following properties are not writable
	            // and are also not enumerable in the native implementation.
	            //
	            // Property accessors are not being used as they'd require to define a
	            // private WeakMap storage which may cause memory leaks in browsers that
	            // don't support this type of collections.
	            defineConfigurable(this, { target: target, contentRect: contentRect });
	        }
	        return ResizeObserverEntry;
	    }());
	
	    var ResizeObserverSPI = /** @class */ (function () {
	        /**
	         * Creates a new instance of ResizeObserver.
	         *
	         * @param {ResizeObserverCallback} callback - Callback function that is invoked
	         *      when one of the observed elements changes it's content dimensions.
	         * @param {ResizeObserverController} controller - Controller instance which
	         *      is responsible for the updates of observer.
	         * @param {ResizeObserver} callbackCtx - Reference to the public
	         *      ResizeObserver instance which will be passed to callback function.
	         */
	        function ResizeObserverSPI(callback, controller, callbackCtx) {
	            /**
	             * Collection of resize observations that have detected changes in dimensions
	             * of elements.
	             *
	             * @private {Array<ResizeObservation>}
	             */
	            this.activeObservations_ = [];
	            /**
	             * Registry of the ResizeObservation instances.
	             *
	             * @private {Map<Element, ResizeObservation>}
	             */
	            this.observations_ = new MapShim();
	            if (typeof callback !== 'function') {
	                throw new TypeError('The callback provided as parameter 1 is not a function.');
	            }
	            this.callback_ = callback;
	            this.controller_ = controller;
	            this.callbackCtx_ = callbackCtx;
	        }
	        /**
	         * Starts observing provided element.
	         *
	         * @param {Element} target - Element to be observed.
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.observe = function (target) {
	            if (!arguments.length) {
	                throw new TypeError('1 argument required, but only 0 present.');
	            }
	            // Do nothing if current environment doesn't have the Element interface.
	            if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	                return;
	            }
	            if (!(target instanceof getWindowOf(target).Element)) {
	                throw new TypeError('parameter 1 is not of type "Element".');
	            }
	            var observations = this.observations_;
	            // Do nothing if element is already being observed.
	            if (observations.has(target)) {
	                return;
	            }
	            observations.set(target, new ResizeObservation(target));
	            this.controller_.addObserver(this);
	            // Force the update of observations.
	            this.controller_.refresh();
	        };
	        /**
	         * Stops observing provided element.
	         *
	         * @param {Element} target - Element to stop observing.
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.unobserve = function (target) {
	            if (!arguments.length) {
	                throw new TypeError('1 argument required, but only 0 present.');
	            }
	            // Do nothing if current environment doesn't have the Element interface.
	            if (typeof Element === 'undefined' || !(Element instanceof Object)) {
	                return;
	            }
	            if (!(target instanceof getWindowOf(target).Element)) {
	                throw new TypeError('parameter 1 is not of type "Element".');
	            }
	            var observations = this.observations_;
	            // Do nothing if element is not being observed.
	            if (!observations.has(target)) {
	                return;
	            }
	            observations.delete(target);
	            if (!observations.size) {
	                this.controller_.removeObserver(this);
	            }
	        };
	        /**
	         * Stops observing all elements.
	         *
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.disconnect = function () {
	            this.clearActive();
	            this.observations_.clear();
	            this.controller_.removeObserver(this);
	        };
	        /**
	         * Collects observation instances the associated element of which has changed
	         * it's content rectangle.
	         *
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.gatherActive = function () {
	            var _this = this;
	            this.clearActive();
	            this.observations_.forEach(function (observation) {
	                if (observation.isActive()) {
	                    _this.activeObservations_.push(observation);
	                }
	            });
	        };
	        /**
	         * Invokes initial callback function with a list of ResizeObserverEntry
	         * instances collected from active resize observations.
	         *
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.broadcastActive = function () {
	            // Do nothing if observer doesn't have active observations.
	            if (!this.hasActive()) {
	                return;
	            }
	            var ctx = this.callbackCtx_;
	            // Create ResizeObserverEntry instance for every active observation.
	            var entries = this.activeObservations_.map(function (observation) {
	                return new ResizeObserverEntry(observation.target, observation.broadcastRect());
	            });
	            this.callback_.call(ctx, entries, ctx);
	            this.clearActive();
	        };
	        /**
	         * Clears the collection of active observations.
	         *
	         * @returns {void}
	         */
	        ResizeObserverSPI.prototype.clearActive = function () {
	            this.activeObservations_.splice(0);
	        };
	        /**
	         * Tells whether observer has active observations.
	         *
	         * @returns {boolean}
	         */
	        ResizeObserverSPI.prototype.hasActive = function () {
	            return this.activeObservations_.length > 0;
	        };
	        return ResizeObserverSPI;
	    }());
	
	    // Registry of internal observers. If WeakMap is not available use current shim
	    // for the Map collection as it has all required methods and because WeakMap
	    // can't be fully polyfilled anyway.
	    var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
	    /**
	     * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
	     * exposing only those methods and properties that are defined in the spec.
	     */
	    var ResizeObserver = /** @class */ (function () {
	        /**
	         * Creates a new instance of ResizeObserver.
	         *
	         * @param {ResizeObserverCallback} callback - Callback that is invoked when
	         *      dimensions of the observed elements change.
	         */
	        function ResizeObserver(callback) {
	            if (!(this instanceof ResizeObserver)) {
	                throw new TypeError('Cannot call a class as a function.');
	            }
	            if (!arguments.length) {
	                throw new TypeError('1 argument required, but only 0 present.');
	            }
	            var controller = ResizeObserverController.getInstance();
	            var observer = new ResizeObserverSPI(callback, controller, this);
	            observers.set(this, observer);
	        }
	        return ResizeObserver;
	    }());
	    // Expose public methods of ResizeObserver.
	    [
	        'observe',
	        'unobserve',
	        'disconnect'
	    ].forEach(function (method) {
	        ResizeObserver.prototype[method] = function () {
	            var _a;
	            return (_a = observers.get(this))[method].apply(_a, arguments);
	        };
	    });
	
	    var index = (function () {
	        // Export existing implementation if available.
	        if (typeof global$1.ResizeObserver !== 'undefined') {
	            return global$1.ResizeObserver;
	        }
	        return ResizeObserver;
	    })();
	
	    return index;
	
	})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 84 */
/***/ function(module, exports) {

	/** @license React v0.19.1
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';var f,g,h,k,l;
	if("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,
	y=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===
	typeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=
	function(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}
	function M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;
	function V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}
	function X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}
	function Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};
	exports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};
	exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};
	exports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	if (true) {
	  module.exports = __webpack_require__(84);
	} else {
	  module.exports = require('./cjs/scheduler.development.js');
	}


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var three = __webpack_require__(4);
	
	var fragmentShader = "\nuniform vec3 color;\nuniform float coefficient;\nuniform float power;\nvarying vec3 vVertexNormal;\nvarying vec3 vVertexWorldPosition;\nvoid main() {\n  vec3 worldCameraToVertex = vVertexWorldPosition - cameraPosition;\n  vec3 viewCameraToVertex\t= (viewMatrix * vec4(worldCameraToVertex, 0.0)).xyz;\n  viewCameraToVertex = normalize(viewCameraToVertex);\n  float intensity\t= pow(\n    coefficient + dot(vVertexNormal, viewCameraToVertex),\n    power\n  );\n  gl_FragColor = vec4(color, intensity);\n}";
	var vertexShader = "\nvarying vec3 vVertexWorldPosition;\nvarying vec3 vVertexNormal;\nvoid main() {\n  vVertexNormal\t= normalize(normalMatrix * normal);\n  vVertexWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n  gl_Position\t= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n";
	// Based off: http://stemkoski.blogspot.fr/2013/07/shaders-in-threejs-glow-and-halo.html
	function createGlowMaterial(coefficient, color, power) {
	    return new three.ShaderMaterial({
	        depthWrite: false,
	        fragmentShader: fragmentShader,
	        transparent: true,
	        uniforms: {
	            coefficient: {
	                type: 'f',
	                value: coefficient,
	            },
	            color: {
	                type: 'c',
	                value: new three.Color(color),
	            },
	            power: {
	                type: 'f',
	                value: power,
	            },
	        },
	        vertexShader: vertexShader,
	    });
	}
	function createGlowGeometry(geometry, size) {
	    // gather vertexNormals from geometry.faces
	    var glowGeometry = geometry.clone();
	    var vertexNormals = new Array(glowGeometry.vertices.length);
	    glowGeometry.faces.forEach(function (face) {
	        if (face instanceof three.Face3) {
	            vertexNormals[face.a] = face.vertexNormals[0];
	            vertexNormals[face.b] = face.vertexNormals[1];
	            vertexNormals[face.c] = face.vertexNormals[2];
	        }
	        else {
	            console.error('Face needs to be an instance of THREE.Face3.');
	        }
	    });
	    // modify the vertices according to vertexNormal
	    glowGeometry.vertices.forEach(function (vertex, i) {
	        var _a = vertexNormals[i], x = _a.x, y = _a.y, z = _a.z;
	        vertex.x += x * size;
	        vertex.y += y * size;
	        vertex.z += z * size;
	    });
	    return glowGeometry;
	}
	var defaultOptions = {
	    backside: true,
	    coefficient: 0.5,
	    color: 'gold',
	    size: 2,
	    power: 1,
	};
	function createGlowMesh(geometry, options) {
	    if (options === void 0) { options = defaultOptions; }
	    var backside = options.backside, coefficient = options.coefficient, color = options.color, size = options.size, power = options.power;
	    var glowGeometry = createGlowGeometry(geometry, size);
	    var glowMaterial = createGlowMaterial(coefficient, color, power);
	    if (backside) {
	        glowMaterial.side = three.BackSide;
	    }
	    return new three.Mesh(glowGeometry, glowMaterial);
	}
	
	exports.createGlowGeometry = createGlowGeometry;
	exports.createGlowMaterial = createGlowMaterial;
	exports.createGlowMesh = createGlowMesh;
	exports.defaultOptions = defaultOptions;


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* three-orbitcontrols addendum */ var THREE = __webpack_require__(4);
	/**
	 * @author qiao / https://github.com/qiao
	 * @author mrdoob / http://mrdoob.com
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author erich666 / http://erichaines.com
	 * @author ScieCode / http://github.com/sciecode
	 */
	
	// This set of controls performs orbiting, dollying (zooming), and panning.
	// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
	//
	//    Orbit - left mouse / touch: one-finger move
	//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
	//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move
	
	THREE.OrbitControls = function ( object, domElement ) {
	
		if ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter "domElement" is now mandatory.' );
		if ( domElement === document ) console.error( 'THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.' );
	
		this.object = object;
		this.domElement = domElement;
	
		// Set to false to disable this control
		this.enabled = true;
	
		// "target" sets the location of focus, where the object orbits around
		this.target = new THREE.Vector3();
	
		// How far you can dolly in and out ( PerspectiveCamera only )
		this.minDistance = 0;
		this.maxDistance = Infinity;
	
		// How far you can zoom in and out ( OrthographicCamera only )
		this.minZoom = 0;
		this.maxZoom = Infinity;
	
		// How far you can orbit vertically, upper and lower limits.
		// Range is 0 to Math.PI radians.
		this.minPolarAngle = 0; // radians
		this.maxPolarAngle = Math.PI; // radians
	
		// How far you can orbit horizontally, upper and lower limits.
		// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
		this.minAzimuthAngle = - Infinity; // radians
		this.maxAzimuthAngle = Infinity; // radians
	
		// Set to true to enable damping (inertia)
		// If damping is enabled, you must call controls.update() in your animation loop
		this.enableDamping = false;
		this.dampingFactor = 0.05;
	
		// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
		// Set to false to disable zooming
		this.enableZoom = true;
		this.zoomSpeed = 1.0;
	
		// Set to false to disable rotating
		this.enableRotate = true;
		this.rotateSpeed = 1.0;
	
		// Set to false to disable panning
		this.enablePan = true;
		this.panSpeed = 1.0;
		this.screenSpacePanning = false; // if true, pan in screen-space
		this.keyPanSpeed = 7.0;	// pixels moved per arrow key push
	
		// Set to true to automatically rotate around the target
		// If auto-rotate is enabled, you must call controls.update() in your animation loop
		this.autoRotate = false;
		this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60
	
		// Set to false to disable use of the keys
		this.enableKeys = true;
	
		// The four arrow keys
		this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };
	
		// Mouse buttons
		this.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };
	
		// Touch fingers
		this.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };
	
		// for reset
		this.target0 = this.target.clone();
		this.position0 = this.object.position.clone();
		this.zoom0 = this.object.zoom;
	
		//
		// public methods
		//
	
		this.getPolarAngle = function () {
	
			return spherical.phi;
	
		};
	
		this.getAzimuthalAngle = function () {
	
			return spherical.theta;
	
		};
	
		this.saveState = function () {
	
			scope.target0.copy( scope.target );
			scope.position0.copy( scope.object.position );
			scope.zoom0 = scope.object.zoom;
	
		};
	
		this.reset = function () {
	
			scope.target.copy( scope.target0 );
			scope.object.position.copy( scope.position0 );
			scope.object.zoom = scope.zoom0;
	
			scope.object.updateProjectionMatrix();
			scope.dispatchEvent( changeEvent );
	
			scope.update();
	
			state = STATE.NONE;
	
		};
	
		// this method is exposed, but perhaps it would be better if we can make it private...
		this.update = function () {
	
			var offset = new THREE.Vector3();
	
			// so camera.up is the orbit axis
			var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
			var quatInverse = quat.clone().inverse();
	
			var lastPosition = new THREE.Vector3();
			var lastQuaternion = new THREE.Quaternion();
	
			return function update() {
	
				var position = scope.object.position;
	
				offset.copy( position ).sub( scope.target );
	
				// rotate offset to "y-axis-is-up" space
				offset.applyQuaternion( quat );
	
				// angle from z-axis around y-axis
				spherical.setFromVector3( offset );
	
				if ( scope.autoRotate && state === STATE.NONE ) {
	
					rotateLeft( getAutoRotationAngle() );
	
				}
	
				if ( scope.enableDamping ) {
	
					spherical.theta += sphericalDelta.theta * scope.dampingFactor;
					spherical.phi += sphericalDelta.phi * scope.dampingFactor;
	
				} else {
	
					spherical.theta += sphericalDelta.theta;
					spherical.phi += sphericalDelta.phi;
	
				}
	
				// restrict theta to be between desired limits
				spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );
	
				// restrict phi to be between desired limits
				spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );
	
				spherical.makeSafe();
	
	
				spherical.radius *= scale;
	
				// restrict radius to be between desired limits
				spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );
	
				// move target to panned location
	
				if ( scope.enableDamping === true ) {
	
					scope.target.addScaledVector( panOffset, scope.dampingFactor );
	
				} else {
	
					scope.target.add( panOffset );
	
				}
	
				offset.setFromSpherical( spherical );
	
				// rotate offset back to "camera-up-vector-is-up" space
				offset.applyQuaternion( quatInverse );
	
				position.copy( scope.target ).add( offset );
	
				scope.object.lookAt( scope.target );
	
				if ( scope.enableDamping === true ) {
	
					sphericalDelta.theta *= ( 1 - scope.dampingFactor );
					sphericalDelta.phi *= ( 1 - scope.dampingFactor );
	
					panOffset.multiplyScalar( 1 - scope.dampingFactor );
	
				} else {
	
					sphericalDelta.set( 0, 0, 0 );
	
					panOffset.set( 0, 0, 0 );
	
				}
	
				scale = 1;
	
				// update condition is:
				// min(camera displacement, camera rotation in radians)^2 > EPS
				// using small-angle approximation cos(x/2) = 1 - x^2 / 8
	
				if ( zoomChanged ||
					lastPosition.distanceToSquared( scope.object.position ) > EPS ||
					8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {
	
					scope.dispatchEvent( changeEvent );
	
					lastPosition.copy( scope.object.position );
					lastQuaternion.copy( scope.object.quaternion );
					zoomChanged = false;
	
					return true;
	
				}
	
				return false;
	
			};
	
		}();
	
		this.dispose = function () {
	
			scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
			scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
			scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );
	
			scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
			scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
			scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );
	
			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );
	
			scope.domElement.removeEventListener( 'keydown', onKeyDown, false );
	
			//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?
	
		};
	
		//
		// internals
		//
	
		var scope = this;
	
		var changeEvent = { type: 'change' };
		var startEvent = { type: 'start' };
		var endEvent = { type: 'end' };
	
		var STATE = {
			NONE: - 1,
			ROTATE: 0,
			DOLLY: 1,
			PAN: 2,
			TOUCH_ROTATE: 3,
			TOUCH_PAN: 4,
			TOUCH_DOLLY_PAN: 5,
			TOUCH_DOLLY_ROTATE: 6
		};
	
		var state = STATE.NONE;
	
		var EPS = 0.000001;
	
		// current position in spherical coordinates
		var spherical = new THREE.Spherical();
		var sphericalDelta = new THREE.Spherical();
	
		var scale = 1;
		var panOffset = new THREE.Vector3();
		var zoomChanged = false;
	
		var rotateStart = new THREE.Vector2();
		var rotateEnd = new THREE.Vector2();
		var rotateDelta = new THREE.Vector2();
	
		var panStart = new THREE.Vector2();
		var panEnd = new THREE.Vector2();
		var panDelta = new THREE.Vector2();
	
		var dollyStart = new THREE.Vector2();
		var dollyEnd = new THREE.Vector2();
		var dollyDelta = new THREE.Vector2();
	
		function getAutoRotationAngle() {
	
			return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
	
		}
	
		function getZoomScale() {
	
			return Math.pow( 0.95, scope.zoomSpeed );
	
		}
	
		function rotateLeft( angle ) {
	
			sphericalDelta.theta -= angle;
	
		}
	
		function rotateUp( angle ) {
	
			sphericalDelta.phi -= angle;
	
		}
	
		var panLeft = function () {
	
			var v = new THREE.Vector3();
	
			return function panLeft( distance, objectMatrix ) {
	
				v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
				v.multiplyScalar( - distance );
	
				panOffset.add( v );
	
			};
	
		}();
	
		var panUp = function () {
	
			var v = new THREE.Vector3();
	
			return function panUp( distance, objectMatrix ) {
	
				if ( scope.screenSpacePanning === true ) {
	
					v.setFromMatrixColumn( objectMatrix, 1 );
	
				} else {
	
					v.setFromMatrixColumn( objectMatrix, 0 );
					v.crossVectors( scope.object.up, v );
	
				}
	
				v.multiplyScalar( distance );
	
				panOffset.add( v );
	
			};
	
		}();
	
		// deltaX and deltaY are in pixels; right and down are positive
		var pan = function () {
	
			var offset = new THREE.Vector3();
	
			return function pan( deltaX, deltaY ) {
	
				var element = scope.domElement;
	
				if ( scope.object.isPerspectiveCamera ) {
	
					// perspective
					var position = scope.object.position;
					offset.copy( position ).sub( scope.target );
					var targetDistance = offset.length();
	
					// half of the fov is center to top of screen
					targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );
	
					// we use only clientHeight here so aspect ratio does not distort speed
					panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
					panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );
	
				} else if ( scope.object.isOrthographicCamera ) {
	
					// orthographic
					panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
					panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );
	
				} else {
	
					// camera neither orthographic nor perspective
					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
					scope.enablePan = false;
	
				}
	
			};
	
		}();
	
		function dollyIn( dollyScale ) {
	
			if ( scope.object.isPerspectiveCamera ) {
	
				scale /= dollyScale;
	
			} else if ( scope.object.isOrthographicCamera ) {
	
				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;
	
			} else {
	
				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;
	
			}
	
		}
	
		function dollyOut( dollyScale ) {
	
			if ( scope.object.isPerspectiveCamera ) {
	
				scale *= dollyScale;
	
			} else if ( scope.object.isOrthographicCamera ) {
	
				scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
				scope.object.updateProjectionMatrix();
				zoomChanged = true;
	
			} else {
	
				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
				scope.enableZoom = false;
	
			}
	
		}
	
		//
		// event callbacks - update the object state
		//
	
		function handleMouseDownRotate( event ) {
	
			rotateStart.set( event.clientX, event.clientY );
	
		}
	
		function handleMouseDownDolly( event ) {
	
			dollyStart.set( event.clientX, event.clientY );
	
		}
	
		function handleMouseDownPan( event ) {
	
			panStart.set( event.clientX, event.clientY );
	
		}
	
		function handleMouseMoveRotate( event ) {
	
			rotateEnd.set( event.clientX, event.clientY );
	
			rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );
	
			var element = scope.domElement;
	
			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height
	
			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );
	
			rotateStart.copy( rotateEnd );
	
			scope.update();
	
		}
	
		function handleMouseMoveDolly( event ) {
	
			dollyEnd.set( event.clientX, event.clientY );
	
			dollyDelta.subVectors( dollyEnd, dollyStart );
	
			if ( dollyDelta.y > 0 ) {
	
				dollyIn( getZoomScale() );
	
			} else if ( dollyDelta.y < 0 ) {
	
				dollyOut( getZoomScale() );
	
			}
	
			dollyStart.copy( dollyEnd );
	
			scope.update();
	
		}
	
		function handleMouseMovePan( event ) {
	
			panEnd.set( event.clientX, event.clientY );
	
			panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );
	
			pan( panDelta.x, panDelta.y );
	
			panStart.copy( panEnd );
	
			scope.update();
	
		}
	
		function handleMouseUp( /*event*/ ) {
	
			// no-op
	
		}
	
		function handleMouseWheel( event ) {
	
			if ( event.deltaY < 0 ) {
	
				dollyOut( getZoomScale() );
	
			} else if ( event.deltaY > 0 ) {
	
				dollyIn( getZoomScale() );
	
			}
	
			scope.update();
	
		}
	
		function handleKeyDown( event ) {
	
			var needsUpdate = false;
	
			switch ( event.keyCode ) {
	
				case scope.keys.UP:
					pan( 0, scope.keyPanSpeed );
					needsUpdate = true;
					break;
	
				case scope.keys.BOTTOM:
					pan( 0, - scope.keyPanSpeed );
					needsUpdate = true;
					break;
	
				case scope.keys.LEFT:
					pan( scope.keyPanSpeed, 0 );
					needsUpdate = true;
					break;
	
				case scope.keys.RIGHT:
					pan( - scope.keyPanSpeed, 0 );
					needsUpdate = true;
					break;
	
			}
	
			if ( needsUpdate ) {
	
				// prevent the browser from scrolling on cursor keys
				event.preventDefault();
	
				scope.update();
	
			}
	
	
		}
	
		function handleTouchStartRotate( event ) {
	
			if ( event.touches.length == 1 ) {
	
				rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
	
			} else {
	
				var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
				var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );
	
				rotateStart.set( x, y );
	
			}
	
		}
	
		function handleTouchStartPan( event ) {
	
			if ( event.touches.length == 1 ) {
	
				panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
	
			} else {
	
				var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
				var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );
	
				panStart.set( x, y );
	
			}
	
		}
	
		function handleTouchStartDolly( event ) {
	
			var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
			var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
	
			var distance = Math.sqrt( dx * dx + dy * dy );
	
			dollyStart.set( 0, distance );
	
		}
	
		function handleTouchStartDollyPan( event ) {
	
			if ( scope.enableZoom ) handleTouchStartDolly( event );
	
			if ( scope.enablePan ) handleTouchStartPan( event );
	
		}
	
		function handleTouchStartDollyRotate( event ) {
	
			if ( scope.enableZoom ) handleTouchStartDolly( event );
	
			if ( scope.enableRotate ) handleTouchStartRotate( event );
	
		}
	
		function handleTouchMoveRotate( event ) {
	
			if ( event.touches.length == 1 ) {
	
				rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
	
			} else {
	
				var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
				var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );
	
				rotateEnd.set( x, y );
	
			}
	
			rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );
	
			var element = scope.domElement;
	
			rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height
	
			rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );
	
			rotateStart.copy( rotateEnd );
	
		}
	
		function handleTouchMovePan( event ) {
	
			if ( event.touches.length == 1 ) {
	
				panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
	
			} else {
	
				var x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );
				var y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );
	
				panEnd.set( x, y );
	
			}
	
			panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );
	
			pan( panDelta.x, panDelta.y );
	
			panStart.copy( panEnd );
	
		}
	
		function handleTouchMoveDolly( event ) {
	
			var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
			var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;
	
			var distance = Math.sqrt( dx * dx + dy * dy );
	
			dollyEnd.set( 0, distance );
	
			dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );
	
			dollyIn( dollyDelta.y );
	
			dollyStart.copy( dollyEnd );
	
		}
	
		function handleTouchMoveDollyPan( event ) {
	
			if ( scope.enableZoom ) handleTouchMoveDolly( event );
	
			if ( scope.enablePan ) handleTouchMovePan( event );
	
		}
	
		function handleTouchMoveDollyRotate( event ) {
	
			if ( scope.enableZoom ) handleTouchMoveDolly( event );
	
			if ( scope.enableRotate ) handleTouchMoveRotate( event );
	
		}
	
		function handleTouchEnd( /*event*/ ) {
	
			// no-op
	
		}
	
		//
		// event handlers - FSM: listen for events and reset state
		//
	
		function onMouseDown( event ) {
	
			if ( scope.enabled === false ) return;
	
			// Prevent the browser from scrolling.
	
			event.preventDefault();
	
			// Manually set the focus since calling preventDefault above
			// prevents the browser from setting it automatically.
	
			scope.domElement.focus ? scope.domElement.focus() : window.focus();
	
			switch ( event.button ) {
	
				case 0:
	
					switch ( scope.mouseButtons.LEFT ) {
	
						case THREE.MOUSE.ROTATE:
	
							if ( event.ctrlKey || event.metaKey || event.shiftKey ) {
	
								if ( scope.enablePan === false ) return;
	
								handleMouseDownPan( event );
	
								state = STATE.PAN;
	
							} else {
	
								if ( scope.enableRotate === false ) return;
	
								handleMouseDownRotate( event );
	
								state = STATE.ROTATE;
	
							}
	
							break;
	
						case THREE.MOUSE.PAN:
	
							if ( event.ctrlKey || event.metaKey || event.shiftKey ) {
	
								if ( scope.enableRotate === false ) return;
	
								handleMouseDownRotate( event );
	
								state = STATE.ROTATE;
	
							} else {
	
								if ( scope.enablePan === false ) return;
	
								handleMouseDownPan( event );
	
								state = STATE.PAN;
	
							}
	
							break;
	
						default:
	
							state = STATE.NONE;
	
					}
	
					break;
	
	
				case 1:
	
					switch ( scope.mouseButtons.MIDDLE ) {
	
						case THREE.MOUSE.DOLLY:
	
							if ( scope.enableZoom === false ) return;
	
							handleMouseDownDolly( event );
	
							state = STATE.DOLLY;
	
							break;
	
	
						default:
	
							state = STATE.NONE;
	
					}
	
					break;
	
				case 2:
	
					switch ( scope.mouseButtons.RIGHT ) {
	
						case THREE.MOUSE.ROTATE:
	
							if ( scope.enableRotate === false ) return;
	
							handleMouseDownRotate( event );
	
							state = STATE.ROTATE;
	
							break;
	
						case THREE.MOUSE.PAN:
	
							if ( scope.enablePan === false ) return;
	
							handleMouseDownPan( event );
	
							state = STATE.PAN;
	
							break;
	
						default:
	
							state = STATE.NONE;
	
					}
	
					break;
	
			}
	
			if ( state !== STATE.NONE ) {
	
				document.addEventListener( 'mousemove', onMouseMove, false );
				document.addEventListener( 'mouseup', onMouseUp, false );
	
				scope.dispatchEvent( startEvent );
	
			}
	
		}
	
		function onMouseMove( event ) {
	
			if ( scope.enabled === false ) return;
	
			event.preventDefault();
	
			switch ( state ) {
	
				case STATE.ROTATE:
	
					if ( scope.enableRotate === false ) return;
	
					handleMouseMoveRotate( event );
	
					break;
	
				case STATE.DOLLY:
	
					if ( scope.enableZoom === false ) return;
	
					handleMouseMoveDolly( event );
	
					break;
	
				case STATE.PAN:
	
					if ( scope.enablePan === false ) return;
	
					handleMouseMovePan( event );
	
					break;
	
			}
	
		}
	
		function onMouseUp( event ) {
	
			if ( scope.enabled === false ) return;
	
			handleMouseUp( event );
	
			document.removeEventListener( 'mousemove', onMouseMove, false );
			document.removeEventListener( 'mouseup', onMouseUp, false );
	
			scope.dispatchEvent( endEvent );
	
			state = STATE.NONE;
	
		}
	
		function onMouseWheel( event ) {
	
			if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;
	
			event.preventDefault();
			event.stopPropagation();
	
			scope.dispatchEvent( startEvent );
	
			handleMouseWheel( event );
	
			scope.dispatchEvent( endEvent );
	
		}
	
		function onKeyDown( event ) {
	
			if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;
	
			handleKeyDown( event );
	
		}
	
		function onTouchStart( event ) {
	
			if ( scope.enabled === false ) return;
	
			event.preventDefault();
	
			switch ( event.touches.length ) {
	
				case 1:
	
					switch ( scope.touches.ONE ) {
	
						case THREE.TOUCH.ROTATE:
	
							if ( scope.enableRotate === false ) return;
	
							handleTouchStartRotate( event );
	
							state = STATE.TOUCH_ROTATE;
	
							break;
	
						case THREE.TOUCH.PAN:
	
							if ( scope.enablePan === false ) return;
	
							handleTouchStartPan( event );
	
							state = STATE.TOUCH_PAN;
	
							break;
	
						default:
	
							state = STATE.NONE;
	
					}
	
					break;
	
				case 2:
	
					switch ( scope.touches.TWO ) {
	
						case THREE.TOUCH.DOLLY_PAN:
	
							if ( scope.enableZoom === false && scope.enablePan === false ) return;
	
							handleTouchStartDollyPan( event );
	
							state = STATE.TOUCH_DOLLY_PAN;
	
							break;
	
						case THREE.TOUCH.DOLLY_ROTATE:
	
							if ( scope.enableZoom === false && scope.enableRotate === false ) return;
	
							handleTouchStartDollyRotate( event );
	
							state = STATE.TOUCH_DOLLY_ROTATE;
	
							break;
	
						default:
	
							state = STATE.NONE;
	
					}
	
					break;
	
				default:
	
					state = STATE.NONE;
	
			}
	
			if ( state !== STATE.NONE ) {
	
				scope.dispatchEvent( startEvent );
	
			}
	
		}
	
		function onTouchMove( event ) {
	
			if ( scope.enabled === false ) return;
	
			event.preventDefault();
			event.stopPropagation();
	
			switch ( state ) {
	
				case STATE.TOUCH_ROTATE:
	
					if ( scope.enableRotate === false ) return;
	
					handleTouchMoveRotate( event );
	
					scope.update();
	
					break;
	
				case STATE.TOUCH_PAN:
	
					if ( scope.enablePan === false ) return;
	
					handleTouchMovePan( event );
	
					scope.update();
	
					break;
	
				case STATE.TOUCH_DOLLY_PAN:
	
					if ( scope.enableZoom === false && scope.enablePan === false ) return;
	
					handleTouchMoveDollyPan( event );
	
					scope.update();
	
					break;
	
				case STATE.TOUCH_DOLLY_ROTATE:
	
					if ( scope.enableZoom === false && scope.enableRotate === false ) return;
	
					handleTouchMoveDollyRotate( event );
	
					scope.update();
	
					break;
	
				default:
	
					state = STATE.NONE;
	
			}
	
		}
	
		function onTouchEnd( event ) {
	
			if ( scope.enabled === false ) return;
	
			handleTouchEnd( event );
	
			scope.dispatchEvent( endEvent );
	
			state = STATE.NONE;
	
		}
	
		function onContextMenu( event ) {
	
			if ( scope.enabled === false ) return;
	
			event.preventDefault();
	
		}
	
		//
	
		scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );
	
		scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
		scope.domElement.addEventListener( 'wheel', onMouseWheel, false );
	
		scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
		scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
		scope.domElement.addEventListener( 'touchmove', onTouchMove, false );
	
		scope.domElement.addEventListener( 'keydown', onKeyDown, false );
	
		// make sure element can receive keys.
	
		if ( scope.domElement.tabIndex === - 1 ) {
	
			scope.domElement.tabIndex = 0;
	
		}
	
		// force an update at start
	
		this.update();
	
	};
	
	THREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
	THREE.OrbitControls.prototype.constructor = THREE.OrbitControls;
	
	
	// This set of controls performs orbiting, dollying (zooming), and panning.
	// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
	// This is very similar to OrbitControls, another set of touch behavior
	//
	//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate
	//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
	//    Pan - left mouse, or arrow keys / touch: one-finger move
	
	THREE.MapControls = function ( object, domElement ) {
	
		THREE.OrbitControls.call( this, object, domElement );
	
		this.mouseButtons.LEFT = THREE.MOUSE.PAN;
		this.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;
	
		this.touches.ONE = THREE.TOUCH.PAN;
		this.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;
	
	};
	
	THREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );
	THREE.MapControls.prototype.constructor = THREE.MapControls;
	/* three-orbitcontrols addendum */ module.exports = exports.default = THREE.OrbitControls;


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(4)) :
		typeof define === 'function' && define.amd ? define(['exports', 'three'], factory) :
		(factory((global.THREE = global.THREE || {}),global.THREE));
	}(this, (function (exports,three) { 'use strict';
	
	/**
	 * get variable type
	 * @param {*} val a variable which you want to get the type
	 * @return {String} variable-type
	 */
	function _rt(val) {
	  return Object.prototype.toString.call(val);
	}
	
	/**
	 * Utils tool box
	 *
	 * @namespace Utils
	 */
	var Utils = {
	  /**
	   * determine whether it is a `Function`
	   *
	   * @static
	   * @method
	   * @memberof Utils
	   * @param {*} variable a variable which you want to determine
	   * @return {Boolean} type result
	   */
	  isFunction: function () {
	    var ks = _rt(function () {});
	    return function (variable) {
	      return _rt(variable) === ks;
	    };
	  }(),
	
	  /**
	   * determine whether it is a `undefined`
	   *
	   * @static
	   * @method
	   * @memberof Utils
	   * @param {*} variable a variable which you want to determine
	   * @return {Boolean} type result
	   */
	  isUndefined: function isUndefined(variable) {
	    return typeof variable === 'undefined';
	  }
	};
	
	/**
	 * proxy `addEventListener` function
	 *
	 * @param {String} type event type, evnet name
	 * @param {Function} fn callback
	 * @return {this} this
	 */
	three.EventDispatcher.prototype.on = function (type, fn) {
	  if (!Utils.isFunction(fn)) return;
	  if (this instanceof three.Object3D) this.interactive = true;
	  this.addEventListener(type, fn);
	  return this;
	};
	
	/**
	 * proxy `removeEventListener` function
	 *
	 * @param {String} type event type, evnet name
	 * @param {Function} fn callback, which you had bind before
	 * @return {this} this
	 */
	three.EventDispatcher.prototype.off = function (type, fn) {
	  this.removeEventListener(type, fn);
	  return this;
	};
	
	/**
	 * binding a once event, just emit once time
	 *
	 * @param {String} type event type, evnet name
	 * @param {Function} fn callback
	 * @return {this} this
	 */
	three.EventDispatcher.prototype.once = function (type, fn) {
	  var _this = this;
	
	  if (!Utils.isFunction(fn)) return;
	  var cb = function cb(ev) {
	    fn(ev);
	    _this.off(type, cb);
	  };
	  this.on(type, cb);
	  return this;
	};
	
	/**
	 * emit a event
	 *
	 * @param {String} type event type, evnet name
	 * @return {this} this
	 */
	three.EventDispatcher.prototype.emit = function (type) {
	  if (this._listeners === undefined || Utils.isUndefined(this._listeners[type])) return;
	  var cbs = this._listeners[type] || [];
	  var cache = cbs.slice(0);
	
	  for (var _len = arguments.length, argument = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    argument[_key - 1] = arguments[_key];
	  }
	
	  for (var i = 0; i < cache.length; i++) {
	    cache[i].apply(this, argument);
	  }
	  return this;
	};
	
	/**
	 * whether displayObject is interactively
	 */
	three.Object3D.prototype.interactive = false;
	
	/**
	 * whether displayObject's children is interactively
	 */
	three.Object3D.prototype.interactiveChildren = true;
	
	/**
	 * whether displayObject had touchstart
	 * @private
	 */
	three.Object3D.prototype.started = false;
	
	/**
	 * tracked event cache, like: touchend、mouseout、pointerout which decided by primary-event
	 */
	Object.defineProperty(three.Object3D.prototype, 'trackedPointers', {
	  get: function get() {
	    if (!this._trackedPointers) this._trackedPointers = {};
	    return this._trackedPointers;
	  }
	});
	
	/**
	 * dispatch a raycast
	 *
	 * @param {Raycaster} raycaster Raycaster object, get from THREE.Raycaster
	 * @return {Object|Boolean} had pass hit-test
	 */
	three.Object3D.prototype.raycastTest = function (raycaster) {
	  var result = [];
	  this.raycast(raycaster, result);
	
	  if (result.length > 0) {
	    return result[0];
	  }
	
	  return false;
	};
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};
	
	
	
	
	
	
	
	
	
	
	
	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	
	
	
	
	
	
	
	
	var inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }
	
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};
	
	
	
	
	
	
	
	
	
	
	
	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};
	
	/**
	 * Holds all information related to an Interaction event
	 *
	 * @class
	 */
	
	var InteractionData = function () {
	  /**
	   * InteractionData constructor
	   */
	  function InteractionData() {
	    classCallCheck(this, InteractionData);
	
	    /**
	     * This point stores the global coords of where the touch/mouse event happened
	     *
	     * @member {Vector2}
	     */
	    this.global = new three.Vector2();
	
	    /**
	     * The target DisplayObject that was interacted with
	     *
	     * @member {Object3D}
	     */
	    this.target = null;
	
	    /**
	     * When passed to an event handler, this will be the original DOM Event that was captured
	     *
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent
	     * @member {MouseEvent|TouchEvent|PointerEvent}
	     */
	    this.originalEvent = null;
	
	    /**
	     * Unique identifier for this interaction
	     *
	     * @member {number}
	     */
	    this.identifier = null;
	
	    /**
	     * Indicates whether or not the pointer device that created the event is the primary pointer.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary
	     * @type {Boolean}
	     */
	    this.isPrimary = false;
	
	    /**
	     * Indicates which button was pressed on the mouse or pointer device to trigger the event.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button
	     * @type {number}
	     */
	    this.button = 0;
	
	    /**
	     * Indicates which buttons are pressed on the mouse or pointer device when the event is triggered.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons
	     * @type {number}
	     */
	    this.buttons = 0;
	
	    /**
	     * The width of the pointer's contact along the x-axis, measured in CSS pixels.
	     * radiusX of TouchEvents will be represented by this value.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width
	     * @type {number}
	     */
	    this.width = 0;
	
	    /**
	     * The height of the pointer's contact along the y-axis, measured in CSS pixels.
	     * radiusY of TouchEvents will be represented by this value.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height
	     * @type {number}
	     */
	    this.height = 0;
	
	    /**
	     * The angle, in degrees, between the pointer device and the screen.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX
	     * @type {number}
	     */
	    this.tiltX = 0;
	
	    /**
	     * The angle, in degrees, between the pointer device and the screen.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY
	     * @type {number}
	     */
	    this.tiltY = 0;
	
	    /**
	     * The type of pointer that triggered the event.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType
	     * @type {string}
	     */
	    this.pointerType = null;
	
	    /**
	     * Pressure applied by the pointing device during the event. A Touch's force property
	     * will be represented by this value.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure
	     * @type {number}
	     */
	    this.pressure = 0;
	
	    /**
	     * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.
	     * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle
	     * @type {number}
	     */
	    this.rotationAngle = 0;
	
	    /**
	     * Twist of a stylus pointer.
	     * @see https://w3c.github.io/pointerevents/#pointerevent-interface
	     * @type {number}
	     */
	    this.twist = 0;
	
	    /**
	     * Barrel pressure on a stylus pointer.
	     * @see https://w3c.github.io/pointerevents/#pointerevent-interface
	     * @type {number}
	     */
	    this.tangentialPressure = 0;
	  }
	
	  /**
	   * The unique identifier of the pointer. It will be the same as `identifier`.
	   * @readonly
	   * @member {number}
	   * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId
	   */
	
	
	  createClass(InteractionData, [{
	    key: '_copyEvent',
	
	
	    /**
	     * Copies properties from normalized event data.
	     *
	     * @param {Touch|MouseEvent|PointerEvent} event The normalized event data
	     * @private
	     */
	    value: function _copyEvent(event) {
	      // isPrimary should only change on touchstart/pointerdown, so we don't want to overwrite
	      // it with "false" on later events when our shim for it on touch events might not be
	      // accurate
	      if (event.isPrimary) {
	        this.isPrimary = true;
	      }
	      this.button = event.button;
	      this.buttons = event.buttons;
	      this.width = event.width;
	      this.height = event.height;
	      this.tiltX = event.tiltX;
	      this.tiltY = event.tiltY;
	      this.pointerType = event.pointerType;
	      this.pressure = event.pressure;
	      this.rotationAngle = event.rotationAngle;
	      this.twist = event.twist || 0;
	      this.tangentialPressure = event.tangentialPressure || 0;
	    }
	
	    /**
	     * Resets the data for pooling.
	     *
	     * @private
	     */
	
	  }, {
	    key: '_reset',
	    value: function _reset() {
	      // isPrimary is the only property that we really need to reset - everything else is
	      // guaranteed to be overwritten
	      this.isPrimary = false;
	    }
	  }, {
	    key: 'pointerId',
	    get: function get$$1() {
	      return this.identifier;
	    }
	  }]);
	  return InteractionData;
	}();
	
	/**
	 * Event class that mimics native DOM events.
	 *
	 * @class
	 */
	var InteractionEvent = function () {
	  /**
	   * InteractionEvent constructor
	   */
	  function InteractionEvent() {
	    classCallCheck(this, InteractionEvent);
	
	    /**
	     * Whether this event will continue propagating in the tree
	     *
	     * @member {boolean}
	     */
	    this.stopped = false;
	
	    /**
	     * The object which caused this event to be dispatched.
	     *
	     * @member {Object3D}
	     */
	    this.target = null;
	
	    /**
	     * The object whose event listener’s callback is currently being invoked.
	     *
	     * @member {Object3D}
	     */
	    this.currentTarget = null;
	
	    /**
	     * Type of the event
	     *
	     * @member {string}
	     */
	    this.type = null;
	
	    /**
	     * InteractionData related to this event
	     *
	     * @member {InteractionData}
	     */
	    this.data = null;
	
	    /**
	     * ray caster detial from 3d-mesh
	     *
	     * @member {Intersects}
	     */
	    this.intersects = [];
	  }
	
	  /**
	   * Prevents event from reaching any objects other than the current object.
	   *
	   */
	
	
	  createClass(InteractionEvent, [{
	    key: "stopPropagation",
	    value: function stopPropagation() {
	      this.stopped = true;
	    }
	
	    /**
	     * Resets the event.
	     *
	     * @private
	     */
	
	  }, {
	    key: "_reset",
	    value: function _reset() {
	      this.stopped = false;
	      this.currentTarget = null;
	      this.target = null;
	      this.intersects = [];
	    }
	  }]);
	  return InteractionEvent;
	}();
	
	/**
	 * DisplayObjects with the `trackedPointers` property use this class to track interactions
	 *
	 * @class
	 * @private
	 */
	var InteractionTrackingData = function () {
	  /**
	   * @param {number} pointerId - Unique pointer id of the event
	   */
	  function InteractionTrackingData(pointerId) {
	    classCallCheck(this, InteractionTrackingData);
	
	    this._pointerId = pointerId;
	    this._flags = InteractionTrackingData.FLAGS.NONE;
	  }
	
	  /**
	   *
	   * @private
	   * @param {number} flag - The interaction flag to set
	   * @param {boolean} yn - Should the flag be set or unset
	   */
	
	
	  createClass(InteractionTrackingData, [{
	    key: "_doSet",
	    value: function _doSet(flag, yn) {
	      if (yn) {
	        this._flags = this._flags | flag;
	      } else {
	        this._flags = this._flags & ~flag;
	      }
	    }
	
	    /**
	     * Unique pointer id of the event
	     *
	     * @readonly
	     * @member {number}
	     */
	
	  }, {
	    key: "pointerId",
	    get: function get$$1() {
	      return this._pointerId;
	    }
	
	    /**
	     * State of the tracking data, expressed as bit flags
	     *
	     * @member {number}
	     */
	
	  }, {
	    key: "flags",
	    get: function get$$1() {
	      return this._flags;
	    }
	
	    /**
	     * Set the flags for the tracking data
	     *
	     * @param {number} flags - Flags to set
	     */
	    ,
	    set: function set$$1(flags) {
	      this._flags = flags;
	    }
	
	    /**
	     * Is the tracked event inactive (not over or down)?
	     *
	     * @member {number}
	     */
	
	  }, {
	    key: "none",
	    get: function get$$1() {
	      return this._flags === this.constructor.FLAGS.NONE;
	    }
	
	    /**
	     * Is the tracked event over the DisplayObject?
	     *
	     * @member {boolean}
	     */
	
	  }, {
	    key: "over",
	    get: function get$$1() {
	      return (this._flags & this.constructor.FLAGS.OVER) !== 0;
	    }
	
	    /**
	     * Set the over flag
	     *
	     * @param {boolean} yn - Is the event over?
	     */
	    ,
	    set: function set$$1(yn) {
	      this._doSet(this.constructor.FLAGS.OVER, yn);
	    }
	
	    /**
	     * Did the right mouse button come down in the DisplayObject?
	     *
	     * @member {boolean}
	     */
	
	  }, {
	    key: "rightDown",
	    get: function get$$1() {
	      return (this._flags & this.constructor.FLAGS.RIGHT_DOWN) !== 0;
	    }
	
	    /**
	     * Set the right down flag
	     *
	     * @param {boolean} yn - Is the right mouse button down?
	     */
	    ,
	    set: function set$$1(yn) {
	      this._doSet(this.constructor.FLAGS.RIGHT_DOWN, yn);
	    }
	
	    /**
	     * Did the left mouse button come down in the DisplayObject?
	     *
	     * @member {boolean}
	     */
	
	  }, {
	    key: "leftDown",
	    get: function get$$1() {
	      return (this._flags & this.constructor.FLAGS.LEFT_DOWN) !== 0;
	    }
	
	    /**
	     * Set the left down flag
	     *
	     * @param {boolean} yn - Is the left mouse button down?
	     */
	    ,
	    set: function set$$1(yn) {
	      this._doSet(this.constructor.FLAGS.LEFT_DOWN, yn);
	    }
	  }]);
	  return InteractionTrackingData;
	}();
	
	InteractionTrackingData.FLAGS = Object.freeze({
	  NONE: 0,
	  OVER: 1 << 0,
	  LEFT_DOWN: 1 << 1,
	  RIGHT_DOWN: 1 << 2
	});
	
	var MOUSE_POINTER_ID = 'MOUSE';
	
	// helpers for hitTest() - only used inside hitTest()
	var hitTestEvent = {
	  target: null,
	  data: {
	    global: null
	  }
	};
	
	/**
	 * The interaction manager deals with mouse, touch and pointer events. Any DisplayObject can be interactive
	 * if its interactive parameter is set to true
	 * This manager also supports multitouch.
	 *
	 * reference to [pixi.js](http://www.pixijs.com/) impl
	 *
	 * @private
	 * @class
	 * @extends EventDispatcher
	 */
	
	var InteractionManager = function (_EventDispatcher) {
	  inherits(InteractionManager, _EventDispatcher);
	
	  /**
	   * @param {WebGLRenderer} renderer - A reference to the current renderer
	   * @param {Scene} scene - A reference to the current scene
	   * @param {Camera} camera - A reference to the current camera
	   * @param {Object} [options] - The options for the manager.
	   * @param {Boolean} [options.autoPreventDefault=false] - Should the manager automatically prevent default browser actions.
	   * @param {Boolean} [options.autoAttach=true] - Should the manager automatically attach target element.
	   * @param {Number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.
	   */
	  function InteractionManager(renderer, scene, camera, options) {
	    classCallCheck(this, InteractionManager);
	
	    var _this = possibleConstructorReturn(this, (InteractionManager.__proto__ || Object.getPrototypeOf(InteractionManager)).call(this));
	
	    options = options || {};
	
	    /**
	     * The renderer this interaction manager works for.
	     *
	     * @member {WebGLRenderer}
	     */
	    _this.renderer = renderer;
	
	    /**
	     * The renderer this interaction manager works for.
	     *
	     * @member {Scene}
	     */
	    _this.scene = scene;
	
	    /**
	     * The renderer this interaction manager works for.
	     *
	     * @member {Camera}
	     */
	    _this.camera = camera;
	
	    /**
	     * Should default browser actions automatically be prevented.
	     * Does not apply to pointer events for backwards compatibility
	     * preventDefault on pointer events stops mouse events from firing
	     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.
	     *
	     * @member {boolean}
	     * @default false
	     */
	    _this.autoPreventDefault = options.autoPreventDefault || false;
	
	    /**
	     * Frequency in milliseconds that the mousemove, moveover & mouseout interaction events will be checked.
	     *
	     * @member {number}
	     * @default 10
	     */
	    _this.interactionFrequency = options.interactionFrequency || 10;
	
	    /**
	     * The mouse data
	     *
	     * @member {InteractionData}
	     */
	    _this.mouse = new InteractionData();
	    _this.mouse.identifier = MOUSE_POINTER_ID;
	
	    // setting the mouse to start off far off screen will mean that mouse over does
	    //  not get called before we even move the mouse.
	    _this.mouse.global.set(-999999);
	
	    /**
	     * Actively tracked InteractionData
	     *
	     * @private
	     * @member {Object.<number,InteractionData>}
	     */
	    _this.activeInteractionData = {};
	    _this.activeInteractionData[MOUSE_POINTER_ID] = _this.mouse;
	
	    /**
	     * Pool of unused InteractionData
	     *
	     * @private
	     * @member {InteractionData[]}
	     */
	    _this.interactionDataPool = [];
	
	    /**
	     * An event data object to handle all the event tracking/dispatching
	     *
	     * @member {object}
	     */
	    _this.eventData = new InteractionEvent();
	
	    /**
	     * The DOM element to bind to.
	     *
	     * @private
	     * @member {HTMLElement}
	     */
	    _this.interactionDOMElement = null;
	
	    /**
	     * This property determines if mousemove and touchmove events are fired only when the cursor
	     * is over the object.
	     * Setting to true will make things work more in line with how the DOM verison works.
	     * Setting to false can make things easier for things like dragging
	     * It is currently set to false as this is how three.js used to work.
	     *
	     * @member {boolean}
	     * @default true
	     */
	    _this.moveWhenInside = true;
	
	    /**
	     * Have events been attached to the dom element?
	     *
	     * @private
	     * @member {boolean}
	     */
	    _this.eventsAdded = false;
	
	    /**
	     * Is the mouse hovering over the renderer?
	     *
	     * @private
	     * @member {boolean}
	     */
	    _this.mouseOverRenderer = false;
	
	    /**
	     * Does the device support touch events
	     * https://www.w3.org/TR/touch-events/
	     *
	     * @readonly
	     * @member {boolean}
	     */
	    _this.supportsTouchEvents = 'ontouchstart' in window;
	
	    /**
	     * Does the device support pointer events
	     * https://www.w3.org/Submission/pointer-events/
	     *
	     * @readonly
	     * @member {boolean}
	     */
	    _this.supportsPointerEvents = !!window.PointerEvent;
	
	    // this will make it so that you don't have to call bind all the time
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onClick = _this.onClick.bind(_this);
	    _this.processClick = _this.processClick.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerUp = _this.onPointerUp.bind(_this);
	    _this.processPointerUp = _this.processPointerUp.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerCancel = _this.onPointerCancel.bind(_this);
	    _this.processPointerCancel = _this.processPointerCancel.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerDown = _this.onPointerDown.bind(_this);
	    _this.processPointerDown = _this.processPointerDown.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerMove = _this.onPointerMove.bind(_this);
	    _this.processPointerMove = _this.processPointerMove.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerOut = _this.onPointerOut.bind(_this);
	    _this.processPointerOverOut = _this.processPointerOverOut.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerOver = _this.onPointerOver.bind(_this);
	
	    /**
	     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor
	     * values, objects are handled as dictionaries of CSS values for interactionDOMElement,
	     * and functions are called instead of changing the CSS.
	     * Default CSS cursor values are provided for 'default' and 'pointer' modes.
	     * @member {Object.<string, (string|Function|Object.<string, string>)>}
	     */
	    _this.cursorStyles = {
	      default: 'inherit',
	      pointer: 'pointer'
	    };
	
	    /**
	     * The mode of the cursor that is being used.
	     * The value of this is a key from the cursorStyles dictionary.
	     *
	     * @member {string}
	     */
	    _this.currentCursorMode = null;
	
	    /**
	     * Internal cached let.
	     *
	     * @private
	     * @member {string}
	     */
	    _this.cursor = null;
	
	    /**
	     * ray caster, for survey intersects from 3d-scene
	     *
	     * @private
	     * @member {Raycaster}
	     */
	    _this.raycaster = new three.Raycaster();
	
	    /**
	     * snippet time
	     *
	     * @private
	     * @member {Number}
	     */
	    _this._deltaTime = 0;
	
	    _this.setTargetElement(_this.renderer.domElement);
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display
	     * object.
	     *
	     * @event InteractionManager#mousedown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	     * on the display object.
	     *
	     * @event InteractionManager#rightdown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is released over the display
	     * object.
	     *
	     * @event InteractionManager#mouseup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is released
	     * over the display object.
	     *
	     * @event InteractionManager#rightup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on
	     * the display object.
	     *
	     * @event InteractionManager#click
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	     * and released on the display object.
	     *
	     * @event InteractionManager#rightclick
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is released outside the
	     * display object that initially registered a
	     * [mousedown]{@link InteractionManager#event:mousedown}.
	     *
	     * @event InteractionManager#mouseupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is released
	     * outside the display object that initially registered a
	     * [rightdown]{@link InteractionManager#event:rightdown}.
	     *
	     * @event InteractionManager#rightupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved while over the display object
	     *
	     * @event InteractionManager#mousemove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved onto the display object
	     *
	     * @event InteractionManager#mouseover
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved off the display object
	     *
	     * @event InteractionManager#mouseout
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is pressed on the display object.
	     *
	     * @event InteractionManager#pointerdown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is released over the display object.
	     *
	     * @event InteractionManager#pointerup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when the operating system cancels a pointer event
	     *
	     * @event InteractionManager#pointercancel
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is pressed and released on the display object.
	     *
	     * @event InteractionManager#pointertap
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is released outside the display object that initially
	     * registered a [pointerdown]{@link InteractionManager#event:pointerdown}.
	     *
	     * @event InteractionManager#pointerupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved while over the display object
	     *
	     * @event InteractionManager#pointermove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved onto the display object
	     *
	     * @event InteractionManager#pointerover
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved off the display object
	     *
	     * @event InteractionManager#pointerout
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is placed on the display object.
	     *
	     * @event InteractionManager#touchstart
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is removed from the display object.
	     *
	     * @event InteractionManager#touchend
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when the operating system cancels a touch
	     *
	     * @event InteractionManager#touchcancel
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is placed and removed from the display object.
	     *
	     * @event InteractionManager#tap
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is removed outside of the display object that initially
	     * registered a [touchstart]{@link InteractionManager#event:touchstart}.
	     *
	     * @event InteractionManager#touchendoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is moved along the display object.
	     *
	     * @event InteractionManager#touchmove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.
	     * object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mousedown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	     * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#rightdown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is released over the display
	     * object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mouseup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is released
	     * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#rightup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on
	     * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#click
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	     * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#rightclick
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is released outside the
	     * display object that initially registered a
	     * [mousedown]{@link Object3D#event:mousedown}.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mouseupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is released
	     * outside the display object that initially registered a
	     * [rightdown]{@link Object3D#event:rightdown}.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#rightupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved while over the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mousemove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved onto the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mouseover
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved off the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mouseout
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is pressed on the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerdown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is released over the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when the operating system cancels a pointer event.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointercancel
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is pressed and released on the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointertap
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is released outside the display object that initially
	     * registered a [pointerdown]{@link Object3D#event:pointerdown}.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved while over the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointermove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved onto the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerover
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved off the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerout
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is placed on the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchstart
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is removed from the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchend
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when the operating system cancels a touch.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchcancel
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is placed and removed from the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#tap
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is removed outside of the display object that initially
	     * registered a [touchstart]{@link Object3D#event:touchstart}.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchendoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is moved along the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchmove
	     * @param {InteractionEvent} event - Interaction event
	     */
	    return _this;
	  }
	
	  /**
	   * Hit tests a point against the display tree, returning the first interactive object that is hit.
	   *
	   * @param {Point} globalPoint - A point to hit test with, in global space.
	   * @param {Object3D} [root] - The root display object to start from. If omitted, defaults
	   * to the last rendered root of the associated renderer.
	   * @return {Object3D} The hit display object, if any.
	   */
	
	
	  createClass(InteractionManager, [{
	    key: 'hitTest',
	    value: function hitTest(globalPoint, root) {
	      // clear the target for our hit test
	      hitTestEvent.target = null;
	      // assign the global point
	      hitTestEvent.data.global = globalPoint;
	      // ensure safety of the root
	      if (!root) {
	        root = this.scene;
	      }
	      // run the hit test
	      this.processInteractive(hitTestEvent, root, null, true);
	      // return our found object - it'll be null if we didn't hit anything
	
	      return hitTestEvent.target;
	    }
	
	    /**
	     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have
	     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate
	     * another DOM element to receive those events.
	     *
	     * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.
	     */
	
	  }, {
	    key: 'setTargetElement',
	    value: function setTargetElement(element) {
	      this.removeEvents();
	
	      this.interactionDOMElement = element;
	
	      this.addEvents();
	    }
	
	    /**
	     * Registers all the DOM events
	     *
	     * @private
	     */
	
	  }, {
	    key: 'addEvents',
	    value: function addEvents() {
	      if (!this.interactionDOMElement || this.eventsAdded) {
	        return;
	      }
	
	      this.emit('addevents');
	
	      this.interactionDOMElement.addEventListener('click', this.onClick, true);
	
	      if (window.navigator.msPointerEnabled) {
	        this.interactionDOMElement.style['-ms-content-zooming'] = 'none';
	        this.interactionDOMElement.style['-ms-touch-action'] = 'none';
	      } else if (this.supportsPointerEvents) {
	        this.interactionDOMElement.style['touch-action'] = 'none';
	      }
	
	      /**
	       * These events are added first, so that if pointer events are normalised, they are fired
	       * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd
	       */
	      if (this.supportsPointerEvents) {
	        window.document.addEventListener('pointermove', this.onPointerMove, true);
	        this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);
	        // pointerout is fired in addition to pointerup (for touch events) and pointercancel
	        // we already handle those, so for the purposes of what we do in onPointerOut, we only
	        // care about the pointerleave event
	        this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);
	        this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);
	        window.addEventListener('pointercancel', this.onPointerCancel, true);
	        window.addEventListener('pointerup', this.onPointerUp, true);
	      } else {
	        window.document.addEventListener('mousemove', this.onPointerMove, true);
	        this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);
	        this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);
	        this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);
	        window.addEventListener('mouseup', this.onPointerUp, true);
	      }
	
	      // always look directly for touch events so that we can provide original data
	      // In a future version we should change this to being just a fallback and rely solely on
	      // PointerEvents whenever available
	      if (this.supportsTouchEvents) {
	        this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);
	        this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);
	        this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);
	        this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);
	      }
	
	      this.eventsAdded = true;
	    }
	
	    /**
	     * Removes all the DOM events that were previously registered
	     *
	     * @private
	     */
	
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	      if (!this.interactionDOMElement) {
	        return;
	      }
	
	      this.emit('removeevents');
	
	      this.interactionDOMElement.removeEventListener('click', this.onClick, true);
	
	      if (window.navigator.msPointerEnabled) {
	        this.interactionDOMElement.style['-ms-content-zooming'] = '';
	        this.interactionDOMElement.style['-ms-touch-action'] = '';
	      } else if (this.supportsPointerEvents) {
	        this.interactionDOMElement.style['touch-action'] = '';
	      }
	
	      if (this.supportsPointerEvents) {
	        window.document.removeEventListener('pointermove', this.onPointerMove, true);
	        this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);
	        this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);
	        this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);
	        window.removeEventListener('pointercancel', this.onPointerCancel, true);
	        window.removeEventListener('pointerup', this.onPointerUp, true);
	      } else {
	        window.document.removeEventListener('mousemove', this.onPointerMove, true);
	        this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);
	        this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);
	        this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);
	        window.removeEventListener('mouseup', this.onPointerUp, true);
	      }
	
	      if (this.supportsTouchEvents) {
	        this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);
	        this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);
	        this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);
	        this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);
	      }
	
	      this.interactionDOMElement = null;
	
	      this.eventsAdded = false;
	    }
	
	    /**
	     * Updates the state of interactive objects.
	     * Invoked by a throttled ticker.
	     *
	     * @param {number} deltaTime - time delta since last tick
	     */
	
	  }, {
	    key: 'update',
	    value: function update(_ref) {
	      var snippet = _ref.snippet;
	
	      this._deltaTime += snippet;
	
	      if (this._deltaTime < this.interactionFrequency) {
	        return;
	      }
	
	      this._deltaTime = 0;
	
	      if (!this.interactionDOMElement) {
	        return;
	      }
	
	      // if the user move the mouse this check has already been done using the mouse move!
	      if (this.didMove) {
	        this.didMove = false;
	
	        return;
	      }
	
	      this.cursor = null;
	
	      // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,
	      // but there was a scenario of a display object moving under a static mouse cursor.
	      // In this case, mouseover and mouseevents would not pass the flag test in triggerEvent function
	      for (var k in this.activeInteractionData) {
	        // eslint-disable-next-line no-prototype-builtins
	        if (this.activeInteractionData.hasOwnProperty(k)) {
	          var interactionData = this.activeInteractionData[k];
	
	          if (interactionData.originalEvent && interactionData.pointerType !== 'touch') {
	            var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, interactionData.originalEvent, interactionData);
	
	            this.processInteractive(interactionEvent, this.scene, this.processPointerOverOut, true);
	          }
	        }
	      }
	
	      this.setCursorMode(this.cursor);
	
	      // TODO
	    }
	
	    /**
	     * Sets the current cursor mode, handling any callbacks or CSS style changes.
	     *
	     * @param {string} mode - cursor mode, a key from the cursorStyles dictionary
	     */
	
	  }, {
	    key: 'setCursorMode',
	    value: function setCursorMode(mode) {
	      mode = mode || 'default';
	      // if the mode didn't actually change, bail early
	      if (this.currentCursorMode === mode) {
	        return;
	      }
	      this.currentCursorMode = mode;
	      var style = this.cursorStyles[mode];
	
	      // only do things if there is a cursor style for it
	      if (style) {
	        switch (typeof style === 'undefined' ? 'undefined' : _typeof(style)) {
	          case 'string':
	            // string styles are handled as cursor CSS
	            this.interactionDOMElement.style.cursor = style;
	            break;
	          case 'function':
	            // functions are just called, and passed the cursor mode
	            style(mode);
	            break;
	          case 'object':
	            // if it is an object, assume that it is a dictionary of CSS styles,
	            // apply it to the interactionDOMElement
	            Object.assign(this.interactionDOMElement.style, style);
	            break;
	          default:
	            break;
	        }
	      } else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {
	        // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry
	        // for the mode, then assume that the dev wants it to be CSS for the cursor.
	        this.interactionDOMElement.style.cursor = mode;
	      }
	    }
	
	    /**
	     * Dispatches an event on the display object that was interacted with
	     *
	     * @param {Object3D} displayObject - the display object in question
	     * @param {string} eventString - the name of the event (e.g, mousedown)
	     * @param {object} eventData - the event data object
	     * @private
	     */
	
	  }, {
	    key: 'triggerEvent',
	    value: function triggerEvent(displayObject, eventString, eventData) {
	      if (!eventData.stopped) {
	        eventData.currentTarget = displayObject;
	        eventData.type = eventString;
	
	        displayObject.emit(eventString, eventData);
	
	        if (displayObject[eventString]) {
	          displayObject[eventString](eventData);
	        }
	      }
	    }
	
	    /**
	     * This function is provides a neat way of crawling through the scene graph and running a
	     * specified function on all interactive objects it finds. It will also take care of hit
	     * testing the interactive objects and passes the hit across in the function.
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - event containing the point that
	     *  is tested for collision
	     * @param {Object3D} displayObject - the displayObject
	     *  that will be hit test (recursively crawls its children)
	     * @param {Function} [func] - the function that will be called on each interactive object. The
	     *  interactionEvent, displayObject and hit will be passed to the function
	     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point
	     * @param {boolean} [interactive] - Whether the displayObject is interactive
	     * @return {boolean} returns true if the displayObject hit the point
	     */
	
	  }, {
	    key: 'processInteractive',
	    value: function processInteractive(interactionEvent, displayObject, func, hitTest, interactive) {
	      if (!displayObject || !displayObject.visible) {
	        return false;
	      }
	
	      // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^
	      //
	      // This function will now loop through all objects and then only hit test the objects it HAS
	      // to, not all of them. MUCH faster..
	      // An object will be hit test if the following is true:
	      //
	      // 1: It is interactive.
	      // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.
	      //
	      // As another little optimisation once an interactive object has been hit we can carry on
	      // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests
	      // A final optimisation is that an object is not hit test directly if a child has already been hit.
	
	      interactive = displayObject.interactive || interactive;
	
	      var hit = false;
	      var interactiveParent = interactive;
	
	      if (displayObject.interactiveChildren && displayObject.children) {
	        var children = displayObject.children;
	
	        for (var i = children.length - 1; i >= 0; i--) {
	          var child = children[i];
	
	          // time to get recursive.. if this function will return if something is hit..
	          var childHit = this.processInteractive(interactionEvent, child, func, hitTest, interactiveParent);
	
	          if (childHit) {
	            // its a good idea to check if a child has lost its parent.
	            // this means it has been removed whilst looping so its best
	            if (!child.parent) {
	              continue;
	            }
	
	            // we no longer need to hit test any more objects in this container as we we
	            // now know the parent has been hit
	            interactiveParent = false;
	
	            // If the child is interactive , that means that the object hit was actually
	            // interactive and not just the child of an interactive object.
	            // This means we no longer need to hit test anything else. We still need to run
	            // through all objects, but we don't need to perform any hit tests.
	
	            if (childHit) {
	              if (interactionEvent.target) {
	                hitTest = false;
	              }
	              hit = true;
	            }
	          }
	        }
	      }
	
	      // no point running this if the item is not interactive or does not have an interactive parent.
	      if (interactive) {
	        // if we are hit testing (as in we have no hit any objects yet)
	        // We also don't need to worry about hit testing if once of the displayObjects children
	        // has already been hit - but only if it was interactive, otherwise we need to keep
	        // looking for an interactive child, just in case we hit one
	        if (hitTest && !interactionEvent.target) {
	          if (interactionEvent.intersects[0] && interactionEvent.intersects[0].object === displayObject) {
	            hit = true;
	          }
	        }
	
	        if (displayObject.interactive) {
	          if (hit && !interactionEvent.target) {
	            interactionEvent.data.target = interactionEvent.target = displayObject;
	          }
	
	          if (func) {
	            func(interactionEvent, displayObject, !!hit);
	          }
	        }
	      }
	
	      return hit;
	    }
	
	    /**
	     * Is called when the click is pressed down on the renderer element
	     *
	     * @private
	     * @param {MouseEvent} originalEvent - The DOM event of a click being pressed down
	     */
	
	  }, {
	    key: 'onClick',
	    value: function onClick(originalEvent) {
	      if (originalEvent.type !== 'click') return;
	
	      var events = this.normalizeToPointerData(originalEvent);
	
	      if (this.autoPreventDefault && events[0].isNormalized) {
	        originalEvent.preventDefault();
	      }
	
	      var interactionData = this.getInteractionDataForPointerId(events[0]);
	
	      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, events[0], interactionData);
	
	      interactionEvent.data.originalEvent = originalEvent;
	
	      this.processInteractive(interactionEvent, this.scene, this.processClick, true);
	
	      this.emit('click', interactionEvent);
	    }
	
	    /**
	     * Processes the result of the click check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processClick',
	    value: function processClick(interactionEvent, displayObject, hit) {
	      if (hit) {
	        this.triggerEvent(displayObject, 'click', interactionEvent);
	      }
	    }
	
	    /**
	     * Is called when the pointer button is pressed down on the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down
	     */
	
	  }, {
	    key: 'onPointerDown',
	    value: function onPointerDown(originalEvent) {
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;
	
	      var events = this.normalizeToPointerData(originalEvent);
	
	      /**
	       * No need to prevent default on natural pointer events, as there are no side effects
	       * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,
	       * so still need to be prevented.
	       */
	
	      // Guaranteed that there will be at least one event in events, and all events must have the same pointer type
	
	      if (this.autoPreventDefault && events[0].isNormalized) {
	        originalEvent.preventDefault();
	      }
	
	      var eventLen = events.length;
	
	      for (var i = 0; i < eventLen; i++) {
	        var event = events[i];
	
	        var interactionData = this.getInteractionDataForPointerId(event);
	
	        var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	        interactionEvent.data.originalEvent = originalEvent;
	
	        this.processInteractive(interactionEvent, this.scene, this.processPointerDown, true);
	
	        this.emit('pointerdown', interactionEvent);
	        if (event.pointerType === 'touch') {
	          this.emit('touchstart', interactionEvent);
	        } else if (event.pointerType === 'mouse' || event.pointerType === 'pen') {
	          var isRightButton = event.button === 2;
	
	          this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);
	        }
	      }
	    }
	
	    /**
	     * Processes the result of the pointer down check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processPointerDown',
	    value: function processPointerDown(interactionEvent, displayObject, hit) {
	      var data = interactionEvent.data;
	      var id = interactionEvent.data.identifier;
	
	      if (hit) {
	        if (!displayObject.trackedPointers[id]) {
	          displayObject.trackedPointers[id] = new InteractionTrackingData(id);
	        }
	        this.triggerEvent(displayObject, 'pointerdown', interactionEvent);
	
	        if (data.pointerType === 'touch') {
	          displayObject.started = true;
	          this.triggerEvent(displayObject, 'touchstart', interactionEvent);
	        } else if (data.pointerType === 'mouse' || data.pointerType === 'pen') {
	          var isRightButton = data.button === 2;
	
	          if (isRightButton) {
	            displayObject.trackedPointers[id].rightDown = true;
	          } else {
	            displayObject.trackedPointers[id].leftDown = true;
	          }
	
	          this.triggerEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);
	        }
	      }
	    }
	
	    /**
	     * Is called when the pointer button is released on the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released
	     * @param {boolean} cancelled - true if the pointer is cancelled
	     * @param {Function} func - Function passed to {@link processInteractive}
	     */
	
	  }, {
	    key: 'onPointerComplete',
	    value: function onPointerComplete(originalEvent, cancelled, func) {
	      var events = this.normalizeToPointerData(originalEvent);
	
	      var eventLen = events.length;
	
	      // if the event wasn't targeting our canvas, then consider it to be pointerupoutside
	      // in all cases (unless it was a pointercancel)
	      var eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';
	
	      for (var i = 0; i < eventLen; i++) {
	        var event = events[i];
	
	        var interactionData = this.getInteractionDataForPointerId(event);
	
	        var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	        interactionEvent.data.originalEvent = originalEvent;
	
	        // perform hit testing for events targeting our canvas or cancel events
	        this.processInteractive(interactionEvent, this.scene, func, cancelled || !eventAppend);
	
	        this.emit(cancelled ? 'pointercancel' : 'pointerup' + eventAppend, interactionEvent);
	
	        if (event.pointerType === 'mouse' || event.pointerType === 'pen') {
	          var isRightButton = event.button === 2;
	
	          this.emit(isRightButton ? 'rightup' + eventAppend : 'mouseup' + eventAppend, interactionEvent);
	        } else if (event.pointerType === 'touch') {
	          this.emit(cancelled ? 'touchcancel' : 'touchend' + eventAppend, interactionEvent);
	          this.releaseInteractionDataForPointerId(event.pointerId, interactionData);
	        }
	      }
	    }
	
	    /**
	     * Is called when the pointer button is cancelled
	     *
	     * @private
	     * @param {PointerEvent} event - The DOM event of a pointer button being released
	     */
	
	  }, {
	    key: 'onPointerCancel',
	    value: function onPointerCancel(event) {
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && event.pointerType === 'touch') return;
	
	      this.onPointerComplete(event, true, this.processPointerCancel);
	    }
	
	    /**
	     * Processes the result of the pointer cancel check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     */
	
	  }, {
	    key: 'processPointerCancel',
	    value: function processPointerCancel(interactionEvent, displayObject) {
	      var data = interactionEvent.data;
	
	      var id = interactionEvent.data.identifier;
	
	      if (displayObject.trackedPointers[id] !== undefined) {
	        delete displayObject.trackedPointers[id];
	        this.triggerEvent(displayObject, 'pointercancel', interactionEvent);
	
	        if (data.pointerType === 'touch') {
	          this.triggerEvent(displayObject, 'touchcancel', interactionEvent);
	        }
	      }
	    }
	
	    /**
	     * Is called when the pointer button is released on the renderer element
	     *
	     * @private
	     * @param {PointerEvent} event - The DOM event of a pointer button being released
	     */
	
	  }, {
	    key: 'onPointerUp',
	    value: function onPointerUp(event) {
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && event.pointerType === 'touch') return;
	
	      this.onPointerComplete(event, false, this.processPointerUp);
	    }
	
	    /**
	     * Processes the result of the pointer up check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processPointerUp',
	    value: function processPointerUp(interactionEvent, displayObject, hit) {
	      var data = interactionEvent.data;
	
	      var id = interactionEvent.data.identifier;
	
	      var trackingData = displayObject.trackedPointers[id];
	
	      var isTouch = data.pointerType === 'touch';
	
	      var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';
	
	      // Mouse only
	      if (isMouse) {
	        var isRightButton = data.button === 2;
	
	        var flags = InteractionTrackingData.FLAGS;
	
	        var test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;
	
	        var isDown = trackingData !== undefined && trackingData.flags & test;
	
	        if (hit) {
	          this.triggerEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);
	
	          if (isDown) {
	            this.triggerEvent(displayObject, isRightButton ? 'rightclick' : 'leftclick', interactionEvent);
	          }
	        } else if (isDown) {
	          this.triggerEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);
	        }
	        // update the down state of the tracking data
	        if (trackingData) {
	          if (isRightButton) {
	            trackingData.rightDown = false;
	          } else {
	            trackingData.leftDown = false;
	          }
	        }
	      }
	
	      // Pointers and Touches, and Mouse
	      if (isTouch && displayObject.started) {
	        displayObject.started = false;
	        this.triggerEvent(displayObject, 'touchend', interactionEvent);
	      }
	      if (hit) {
	        this.triggerEvent(displayObject, 'pointerup', interactionEvent);
	
	        if (trackingData) {
	          this.triggerEvent(displayObject, 'pointertap', interactionEvent);
	          if (isTouch) {
	            this.triggerEvent(displayObject, 'tap', interactionEvent);
	            // touches are no longer over (if they ever were) when we get the touchend
	            // so we should ensure that we don't keep pretending that they are
	            trackingData.over = false;
	          }
	        }
	      } else if (trackingData) {
	        this.triggerEvent(displayObject, 'pointerupoutside', interactionEvent);
	        if (isTouch) this.triggerEvent(displayObject, 'touchendoutside', interactionEvent);
	      }
	      // Only remove the tracking data if there is no over/down state still associated with it
	      if (trackingData && trackingData.none) {
	        delete displayObject.trackedPointers[id];
	      }
	    }
	
	    /**
	     * Is called when the pointer moves across the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer moving
	     */
	
	  }, {
	    key: 'onPointerMove',
	    value: function onPointerMove(originalEvent) {
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;
	
	      var events = this.normalizeToPointerData(originalEvent);
	
	      if (events[0].pointerType === 'mouse') {
	        this.didMove = true;
	
	        this.cursor = null;
	      }
	
	      var eventLen = events.length;
	
	      for (var i = 0; i < eventLen; i++) {
	        var event = events[i];
	
	        var interactionData = this.getInteractionDataForPointerId(event);
	
	        var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	        interactionEvent.data.originalEvent = originalEvent;
	
	        var interactive = event.pointerType === 'touch' ? this.moveWhenInside : true;
	
	        this.processInteractive(interactionEvent, this.scene, this.processPointerMove, interactive);
	        this.emit('pointermove', interactionEvent);
	        if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);
	        if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);
	      }
	
	      if (events[0].pointerType === 'mouse') {
	        this.setCursorMode(this.cursor);
	
	        // TODO BUG for parents interactive object (border order issue)
	      }
	    }
	
	    /**
	     * Processes the result of the pointer move check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processPointerMove',
	    value: function processPointerMove(interactionEvent, displayObject, hit) {
	      var data = interactionEvent.data;
	
	      var isTouch = data.pointerType === 'touch';
	
	      var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';
	
	      if (isMouse) {
	        this.processPointerOverOut(interactionEvent, displayObject, hit);
	      }
	
	      if (isTouch && displayObject.started) this.triggerEvent(displayObject, 'touchmove', interactionEvent);
	      if (!this.moveWhenInside || hit) {
	        this.triggerEvent(displayObject, 'pointermove', interactionEvent);
	        if (isMouse) this.triggerEvent(displayObject, 'mousemove', interactionEvent);
	      }
	    }
	
	    /**
	     * Is called when the pointer is moved out of the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out
	     */
	
	  }, {
	    key: 'onPointerOut',
	    value: function onPointerOut(originalEvent) {
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;
	
	      var events = this.normalizeToPointerData(originalEvent);
	
	      // Only mouse and pointer can call onPointerOut, so events will always be length 1
	      var event = events[0];
	
	      if (event.pointerType === 'mouse') {
	        this.mouseOverRenderer = false;
	        this.setCursorMode(null);
	      }
	
	      var interactionData = this.getInteractionDataForPointerId(event);
	
	      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	      interactionEvent.data.originalEvent = event;
	
	      this.processInteractive(interactionEvent, this.scene, this.processPointerOverOut, false);
	
	      this.emit('pointerout', interactionEvent);
	      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {
	        this.emit('mouseout', interactionEvent);
	      } else {
	        // we can get touchleave events after touchend, so we want to make sure we don't
	        // introduce memory leaks
	        this.releaseInteractionDataForPointerId(interactionData.identifier);
	      }
	    }
	
	    /**
	     * Processes the result of the pointer over/out check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processPointerOverOut',
	    value: function processPointerOverOut(interactionEvent, displayObject, hit) {
	      var data = interactionEvent.data;
	
	      var id = interactionEvent.data.identifier;
	
	      var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';
	
	      var trackingData = displayObject.trackedPointers[id];
	
	      // if we just moused over the display object, then we need to track that state
	      if (hit && !trackingData) {
	        trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);
	      }
	
	      if (trackingData === undefined) return;
	
	      if (hit && this.mouseOverRenderer) {
	        if (!trackingData.over) {
	          trackingData.over = true;
	          this.triggerEvent(displayObject, 'pointerover', interactionEvent);
	          if (isMouse) {
	            this.triggerEvent(displayObject, 'mouseover', interactionEvent);
	          }
	        }
	
	        // only change the cursor if it has not already been changed (by something deeper in the
	        // display tree)
	        if (isMouse && this.cursor === null) {
	          this.cursor = displayObject.cursor;
	        }
	      } else if (trackingData.over) {
	        trackingData.over = false;
	        this.triggerEvent(displayObject, 'pointerout', this.eventData);
	        if (isMouse) {
	          this.triggerEvent(displayObject, 'mouseout', interactionEvent);
	        }
	        // if there is no mouse down information for the pointer, then it is safe to delete
	        if (trackingData.none) {
	          delete displayObject.trackedPointers[id];
	        }
	      }
	    }
	
	    /**
	     * Is called when the pointer is moved into the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view
	     */
	
	  }, {
	    key: 'onPointerOver',
	    value: function onPointerOver(originalEvent) {
	      var events = this.normalizeToPointerData(originalEvent);
	
	      // Only mouse and pointer can call onPointerOver, so events will always be length 1
	      var event = events[0];
	
	      var interactionData = this.getInteractionDataForPointerId(event);
	
	      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	      interactionEvent.data.originalEvent = event;
	
	      if (event.pointerType === 'mouse') {
	        this.mouseOverRenderer = true;
	      }
	
	      this.emit('pointerover', interactionEvent);
	      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {
	        this.emit('mouseover', interactionEvent);
	      }
	    }
	
	    /**
	     * Get InteractionData for a given pointerId. Store that data as well
	     *
	     * @private
	     * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData
	     * @return {InteractionData} - Interaction data for the given pointer identifier
	     */
	
	  }, {
	    key: 'getInteractionDataForPointerId',
	    value: function getInteractionDataForPointerId(event) {
	      var pointerId = event.pointerId;
	
	      var interactionData = void 0;
	
	      if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse') {
	        interactionData = this.mouse;
	      } else if (this.activeInteractionData[pointerId]) {
	        interactionData = this.activeInteractionData[pointerId];
	      } else {
	        interactionData = this.interactionDataPool.pop() || new InteractionData();
	        interactionData.identifier = pointerId;
	        this.activeInteractionData[pointerId] = interactionData;
	      }
	      // copy properties from the event, so that we can make sure that touch/pointer specific
	      // data is available
	      interactionData._copyEvent(event);
	
	      return interactionData;
	    }
	
	    /**
	     * Return unused InteractionData to the pool, for a given pointerId
	     *
	     * @private
	     * @param {number} pointerId - Identifier from a pointer event
	     */
	
	  }, {
	    key: 'releaseInteractionDataForPointerId',
	    value: function releaseInteractionDataForPointerId(pointerId) {
	      var interactionData = this.activeInteractionData[pointerId];
	
	      if (interactionData) {
	        delete this.activeInteractionData[pointerId];
	        interactionData._reset();
	        this.interactionDataPool.push(interactionData);
	      }
	    }
	
	    /**
	     * Maps x and y coords from a DOM object and maps them correctly to the three.js view. The
	     * resulting value is stored in the point. This takes into account the fact that the DOM
	     * element could be scaled and positioned anywhere on the screen.
	     *
	     * @param  {Vector2} point - the point that the result will be stored in
	     * @param  {number} x - the x coord of the position to map
	     * @param  {number} y - the y coord of the position to map
	     */
	
	  }, {
	    key: 'mapPositionToPoint',
	    value: function mapPositionToPoint(point, x, y) {
	      var rect = void 0;
	
	      // IE 11 fix
	      if (!this.interactionDOMElement.parentElement) {
	        rect = {
	          x: 0,
	          y: 0,
	          left: 0,
	          top: 0,
	          width: 0,
	          height: 0
	        };
	      } else {
	        rect = this.interactionDOMElement.getBoundingClientRect();
	      }
	
	      point.x = (x - rect.left) / rect.width * 2 - 1;
	      point.y = -((y - rect.top) / rect.height) * 2 + 1;
	    }
	
	    /**
	     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The event to be configured
	     * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent
	     * @param {InteractionData} interactionData - The InteractionData that will be paired
	     *        with the InteractionEvent
	     * @return {InteractionEvent} the interaction event that was passed in
	     */
	
	  }, {
	    key: 'configureInteractionEventForDOMEvent',
	    value: function configureInteractionEventForDOMEvent(interactionEvent, pointerEvent, interactionData) {
	      interactionEvent.data = interactionData;
	
	      this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);
	
	      this.raycaster.setFromCamera(interactionData.global, this.camera);
	
	      // Not really sure why this is happening, but it's how a previous version handled things TODO: there should be remove
	      if (pointerEvent.pointerType === 'touch') {
	        pointerEvent.globalX = interactionData.global.x;
	        pointerEvent.globalY = interactionData.global.y;
	      }
	
	      interactionData.originalEvent = pointerEvent;
	      interactionEvent._reset();
	      interactionEvent.intersects = this.raycaster.intersectObjects(this.scene.children, true);
	
	      return interactionEvent;
	    }
	
	    /**
	     * Ensures that the original event object contains all data that a regular pointer event would have
	     *
	     * @private
	     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event
	     * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer
	     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches
	     */
	
	  }, {
	    key: 'normalizeToPointerData',
	    value: function normalizeToPointerData(event) {
	      var normalizedEvents = [];
	
	      if (this.supportsTouchEvents && event instanceof TouchEvent) {
	        for (var i = 0, li = event.changedTouches.length; i < li; i++) {
	          var touch = event.changedTouches[i];
	
	          if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;
	          if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;
	          if (typeof touch.isPrimary === 'undefined') {
	            touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';
	          }
	          if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;
	          if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;
	          if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;
	          if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;
	          if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';
	          if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;
	          if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;
	          touch.twist = 0;
	          touch.tangentialPressure = 0;
	          // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven
	          // support, and the fill ins are not quite the same
	          // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top
	          // left is not 0,0 on the page
	          if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;
	          if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;
	
	          // mark the touch as normalized, just so that we know we did it
	          touch.isNormalized = true;
	
	          normalizedEvents.push(touch);
	        }
	      } else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent))) {
	        if (typeof event.isPrimary === 'undefined') event.isPrimary = true;
	        if (typeof event.width === 'undefined') event.width = 1;
	        if (typeof event.height === 'undefined') event.height = 1;
	        if (typeof event.tiltX === 'undefined') event.tiltX = 0;
	        if (typeof event.tiltY === 'undefined') event.tiltY = 0;
	        if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';
	        if (typeof event.pointerId === 'undefined') event.pointerId = MOUSE_POINTER_ID;
	        if (typeof event.pressure === 'undefined') event.pressure = 0.5;
	        event.twist = 0;
	        event.tangentialPressure = 0;
	
	        // mark the mouse event as normalized, just so that we know we did it
	        event.isNormalized = true;
	
	        normalizedEvents.push(event);
	      } else {
	        normalizedEvents.push(event);
	      }
	
	      return normalizedEvents;
	    }
	
	    /**
	     * Destroys the interaction manager
	     *
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.removeEvents();
	
	      this.removeAllListeners();
	
	      this.renderer = null;
	
	      this.mouse = null;
	
	      this.eventData = null;
	
	      this.interactionDOMElement = null;
	
	      this.onPointerDown = null;
	      this.processPointerDown = null;
	
	      this.onPointerUp = null;
	      this.processPointerUp = null;
	
	      this.onPointerCancel = null;
	      this.processPointerCancel = null;
	
	      this.onPointerMove = null;
	      this.processPointerMove = null;
	
	      this.onPointerOut = null;
	      this.processPointerOverOut = null;
	
	      this.onPointerOver = null;
	
	      this._tempPoint = null;
	    }
	  }]);
	  return InteractionManager;
	}(three.EventDispatcher);
	
	var MOUSE_POINTER_ID$1 = 'MOUSE';
	
	// helpers for hitTest() - only used inside hitTest()
	var hitTestEvent$1 = {
	  target: null,
	  data: {
	    global: null
	  }
	};
	
	/**
	 * The interaction manager deals with mouse, touch and pointer events. Any DisplayObject can be interactive
	 * if its interactive parameter is set to true
	 * This manager also supports multitouch.
	 *
	 * reference to [pixi.js](http://www.pixijs.com/) impl
	 *
	 * @private
	 * @class
	 * @extends EventDispatcher
	 */
	
	var InteractionLayer = function (_EventDispatcher) {
	  inherits(InteractionLayer, _EventDispatcher);
	
	  /**
	   * @param {WebGLRenderer} renderer - A reference to the current renderer
	   * @param {Object} [options] - The options for the manager.
	   * @param {Boolean} [options.autoPreventDefault=false] - Should the manager automatically prevent default browser actions.
	   * @param {Boolean} [options.autoAttach=true] - Should the manager automatically attach target element.
	   * @param {Number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.
	   */
	  function InteractionLayer(renderer, options) {
	    classCallCheck(this, InteractionLayer);
	
	    var _this = possibleConstructorReturn(this, (InteractionLayer.__proto__ || Object.getPrototypeOf(InteractionLayer)).call(this));
	
	    options = options || {};
	
	    /**
	     * The renderer this interaction manager works for.
	     *
	     * @member {WebGLRenderer}
	     */
	    _this.renderer = renderer;
	
	    /**
	     * The renderer this interaction manager works for.
	     *
	     * @member {Layer}
	     */
	    _this.layer = null;
	
	    /**
	     * The renderer this interaction manager works for.
	     *
	     * @member {Scene}
	     */
	    // this.scene = scene;
	
	    /**
	     * The renderer this interaction manager works for.
	     *
	     * @member {Camera}
	     */
	    // this.camera = camera;
	
	    /**
	     * Should default browser actions automatically be prevented.
	     * Does not apply to pointer events for backwards compatibility
	     * preventDefault on pointer events stops mouse events from firing
	     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.
	     *
	     * @member {boolean}
	     * @default false
	     */
	    _this.autoPreventDefault = options.autoPreventDefault || false;
	
	    /**
	     * Frequency in milliseconds that the mousemove, moveover & mouseout interaction events will be checked.
	     *
	     * @member {number}
	     * @default 10
	     */
	    _this.interactionFrequency = options.interactionFrequency || 10;
	
	    /**
	     * The mouse data
	     *
	     * @member {InteractionData}
	     */
	    _this.mouse = new InteractionData();
	    _this.mouse.identifier = MOUSE_POINTER_ID$1;
	
	    // setting the mouse to start off far off screen will mean that mouse over does
	    //  not get called before we even move the mouse.
	    _this.mouse.global.set(-999999);
	
	    /**
	     * Actively tracked InteractionData
	     *
	     * @private
	     * @member {Object.<number,InteractionData>}
	     */
	    _this.activeInteractionData = {};
	    _this.activeInteractionData[MOUSE_POINTER_ID$1] = _this.mouse;
	
	    /**
	     * Pool of unused InteractionData
	     *
	     * @private
	     * @member {InteractionData[]}
	     */
	    _this.interactionDataPool = [];
	
	    /**
	     * An event data object to handle all the event tracking/dispatching
	     *
	     * @member {object}
	     */
	    _this.eventData = new InteractionEvent();
	
	    /**
	     * The DOM element to bind to.
	     *
	     * @private
	     * @member {HTMLElement}
	     */
	    _this.interactionDOMElement = null;
	
	    /**
	     * This property determines if mousemove and touchmove events are fired only when the cursor
	     * is over the object.
	     * Setting to true will make things work more in line with how the DOM verison works.
	     * Setting to false can make things easier for things like dragging
	     * It is currently set to false as this is how three.js used to work.
	     *
	     * @member {boolean}
	     * @default true
	     */
	    _this.moveWhenInside = true;
	
	    /**
	     * Have events been attached to the dom element?
	     *
	     * @private
	     * @member {boolean}
	     */
	    _this.eventsAdded = false;
	
	    /**
	     * Is the mouse hovering over the renderer?
	     *
	     * @private
	     * @member {boolean}
	     */
	    _this.mouseOverRenderer = false;
	
	    /**
	     * Does the device support touch events
	     * https://www.w3.org/TR/touch-events/
	     *
	     * @readonly
	     * @member {boolean}
	     */
	    _this.supportsTouchEvents = 'ontouchstart' in window;
	
	    /**
	     * Does the device support pointer events
	     * https://www.w3.org/Submission/pointer-events/
	     *
	     * @readonly
	     * @member {boolean}
	     */
	    _this.supportsPointerEvents = !!window.PointerEvent;
	
	    // this will make it so that you don't have to call bind all the time
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onClick = _this.onClick.bind(_this);
	    _this.processClick = _this.processClick.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerUp = _this.onPointerUp.bind(_this);
	    _this.processPointerUp = _this.processPointerUp.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerCancel = _this.onPointerCancel.bind(_this);
	    _this.processPointerCancel = _this.processPointerCancel.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerDown = _this.onPointerDown.bind(_this);
	    _this.processPointerDown = _this.processPointerDown.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerMove = _this.onPointerMove.bind(_this);
	    _this.processPointerMove = _this.processPointerMove.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerOut = _this.onPointerOut.bind(_this);
	    _this.processPointerOverOut = _this.processPointerOverOut.bind(_this);
	
	    /**
	     * @private
	     * @member {Function}
	     */
	    _this.onPointerOver = _this.onPointerOver.bind(_this);
	
	    /**
	     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor
	     * values, objects are handled as dictionaries of CSS values for interactionDOMElement,
	     * and functions are called instead of changing the CSS.
	     * Default CSS cursor values are provided for 'default' and 'pointer' modes.
	     * @member {Object.<string, (string|Function|Object.<string, string>)>}
	     */
	    _this.cursorStyles = {
	      default: 'inherit',
	      pointer: 'pointer'
	    };
	
	    /**
	     * The mode of the cursor that is being used.
	     * The value of this is a key from the cursorStyles dictionary.
	     *
	     * @member {string}
	     */
	    _this.currentCursorMode = null;
	
	    /**
	     * Internal cached let.
	     *
	     * @private
	     * @member {string}
	     */
	    _this.cursor = null;
	
	    /**
	     * ray caster, for survey intersects from 3d-scene
	     *
	     * @private
	     * @member {Raycaster}
	     */
	    _this.raycaster = new three.Raycaster();
	
	    /**
	     * snippet time
	     *
	     * @private
	     * @member {Number}
	     */
	    _this._deltaTime = 0;
	
	    _this.setTargetElement(_this.renderer.domElement);
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display
	     * object.
	     *
	     * @event InteractionLayer#mousedown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	     * on the display object.
	     *
	     * @event InteractionLayer#rightdown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is released over the display
	     * object.
	     *
	     * @event InteractionLayer#mouseup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is released
	     * over the display object.
	     *
	     * @event InteractionLayer#rightup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on
	     * the display object.
	     *
	     * @event InteractionLayer#click
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	     * and released on the display object.
	     *
	     * @event InteractionLayer#rightclick
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is released outside the
	     * display object that initially registered a
	     * [mousedown]{@link InteractionLayer#event:mousedown}.
	     *
	     * @event InteractionLayer#mouseupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is released
	     * outside the display object that initially registered a
	     * [rightdown]{@link InteractionLayer#event:rightdown}.
	     *
	     * @event InteractionLayer#rightupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved while over the display object
	     *
	     * @event InteractionLayer#mousemove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved onto the display object
	     *
	     * @event InteractionLayer#mouseover
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved off the display object
	     *
	     * @event InteractionLayer#mouseout
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is pressed on the display object.
	     *
	     * @event InteractionLayer#pointerdown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is released over the display object.
	     *
	     * @event InteractionLayer#pointerup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when the operating system cancels a pointer event
	     *
	     * @event InteractionLayer#pointercancel
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is pressed and released on the display object.
	     *
	     * @event InteractionLayer#pointertap
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is released outside the display object that initially
	     * registered a [pointerdown]{@link InteractionLayer#event:pointerdown}.
	     *
	     * @event InteractionLayer#pointerupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved while over the display object
	     *
	     * @event InteractionLayer#pointermove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved onto the display object
	     *
	     * @event InteractionLayer#pointerover
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved off the display object
	     *
	     * @event InteractionLayer#pointerout
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is placed on the display object.
	     *
	     * @event InteractionLayer#touchstart
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is removed from the display object.
	     *
	     * @event InteractionLayer#touchend
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when the operating system cancels a touch
	     *
	     * @event InteractionLayer#touchcancel
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is placed and removed from the display object.
	     *
	     * @event InteractionLayer#tap
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is removed outside of the display object that initially
	     * registered a [touchstart]{@link InteractionLayer#event:touchstart}.
	     *
	     * @event InteractionLayer#touchendoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is moved along the display object.
	     *
	     * @event InteractionLayer#touchmove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.
	     * object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mousedown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	     * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#rightdown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is released over the display
	     * object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mouseup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is released
	     * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#rightup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on
	     * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#click
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed
	     * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#rightclick
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button (usually a mouse left-button) is released outside the
	     * display object that initially registered a
	     * [mousedown]{@link Object3D#event:mousedown}.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mouseupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device secondary button (usually a mouse right-button) is released
	     * outside the display object that initially registered a
	     * [rightdown]{@link Object3D#event:rightdown}.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#rightupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved while over the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mousemove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved onto the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mouseover
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device (usually a mouse) is moved off the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#mouseout
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is pressed on the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerdown
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is released over the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerup
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when the operating system cancels a pointer event.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointercancel
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is pressed and released on the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointertap
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device button is released outside the display object that initially
	     * registered a [pointerdown]{@link Object3D#event:pointerdown}.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerupoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved while over the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointermove
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved onto the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerover
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a pointer device is moved off the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#pointerout
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is placed on the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchstart
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is removed from the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchend
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when the operating system cancels a touch.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchcancel
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is placed and removed from the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#tap
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is removed outside of the display object that initially
	     * registered a [touchstart]{@link Object3D#event:touchstart}.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchendoutside
	     * @param {InteractionEvent} event - Interaction event
	     */
	
	    /**
	     * Fired when a touch point is moved along the display object.
	     * DisplayObject's `interactive` property must be set to `true` to fire event.
	     *
	     * @event Object3D#touchmove
	     * @param {InteractionEvent} event - Interaction event
	     */
	    return _this;
	  }
	
	  /**
	   * @return {boolean}
	   */
	
	
	  createClass(InteractionLayer, [{
	    key: 'isAble',
	    value: function isAble() {
	      return this.layer && this.layer.interactive;
	    }
	
	    /**
	     * set layer
	     * @param {Layer} layer layer
	     */
	
	  }, {
	    key: 'setLayer',
	    value: function setLayer(layer) {
	      this.layer = layer;
	    }
	
	    /**
	     * Hit tests a point against the display tree, returning the first interactive object that is hit.
	     *
	     * @param {Point} globalPoint - A point to hit test with, in global space.
	     * @param {Object3D} [root] - The root display object to start from. If omitted, defaults
	     * to the last rendered root of the associated renderer.
	     * @return {Object3D} The hit display object, if any.
	     */
	
	  }, {
	    key: 'hitTest',
	    value: function hitTest(globalPoint, root) {
	      if (!this.isAble()) return null;
	      // clear the target for our hit test
	      hitTestEvent$1.target = null;
	      // assign the global point
	      hitTestEvent$1.data.global = globalPoint;
	      // ensure safety of the root
	      if (!root) {
	        root = this.layer.scene;
	      }
	      // run the hit test
	      this.processInteractive(hitTestEvent$1, root, null, true);
	      // return our found object - it'll be null if we didn't hit anything
	
	      return hitTestEvent$1.target;
	    }
	
	    /**
	     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have
	     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to deletegate
	     * another DOM element to receive those events.
	     *
	     * @param {HTMLCanvasElement} element - the DOM element which will receive mouse and touch events.
	     */
	
	  }, {
	    key: 'setTargetElement',
	    value: function setTargetElement(element) {
	      this.removeEvents();
	
	      this.interactionDOMElement = element;
	
	      this.addEvents();
	    }
	
	    /**
	     * Registers all the DOM events
	     *
	     * @private
	     */
	
	  }, {
	    key: 'addEvents',
	    value: function addEvents() {
	      if (!this.interactionDOMElement || this.eventsAdded) {
	        return;
	      }
	
	      this.emit('addevents');
	
	      this.interactionDOMElement.addEventListener('click', this.onClick, true);
	
	      if (window.navigator.msPointerEnabled) {
	        this.interactionDOMElement.style['-ms-content-zooming'] = 'none';
	        this.interactionDOMElement.style['-ms-touch-action'] = 'none';
	      } else if (this.supportsPointerEvents) {
	        this.interactionDOMElement.style['touch-action'] = 'none';
	      }
	
	      /**
	       * These events are added first, so that if pointer events are normalised, they are fired
	       * in the same order as non-normalised events. ie. pointer event 1st, mouse / touch 2nd
	       */
	      if (this.supportsPointerEvents) {
	        window.document.addEventListener('pointermove', this.onPointerMove, true);
	        this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);
	        // pointerout is fired in addition to pointerup (for touch events) and pointercancel
	        // we already handle those, so for the purposes of what we do in onPointerOut, we only
	        // care about the pointerleave event
	        this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);
	        this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);
	        window.addEventListener('pointercancel', this.onPointerCancel, true);
	        window.addEventListener('pointerup', this.onPointerUp, true);
	      } else {
	        window.document.addEventListener('mousemove', this.onPointerMove, true);
	        this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);
	        this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);
	        this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);
	        window.addEventListener('mouseup', this.onPointerUp, true);
	      }
	
	      // always look directly for touch events so that we can provide original data
	      // In a future version we should change this to being just a fallback and rely solely on
	      // PointerEvents whenever available
	      if (this.supportsTouchEvents) {
	        this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);
	        this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);
	        this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);
	        this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);
	      }
	
	      this.eventsAdded = true;
	    }
	
	    /**
	     * Removes all the DOM events that were previously registered
	     *
	     * @private
	     */
	
	  }, {
	    key: 'removeEvents',
	    value: function removeEvents() {
	      if (!this.interactionDOMElement) {
	        return;
	      }
	
	      this.emit('removeevents');
	
	      this.interactionDOMElement.removeEventListener('click', this.onClick, true);
	
	      if (window.navigator.msPointerEnabled) {
	        this.interactionDOMElement.style['-ms-content-zooming'] = '';
	        this.interactionDOMElement.style['-ms-touch-action'] = '';
	      } else if (this.supportsPointerEvents) {
	        this.interactionDOMElement.style['touch-action'] = '';
	      }
	
	      if (this.supportsPointerEvents) {
	        window.document.removeEventListener('pointermove', this.onPointerMove, true);
	        this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);
	        this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);
	        this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);
	        window.removeEventListener('pointercancel', this.onPointerCancel, true);
	        window.removeEventListener('pointerup', this.onPointerUp, true);
	      } else {
	        window.document.removeEventListener('mousemove', this.onPointerMove, true);
	        this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);
	        this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);
	        this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);
	        window.removeEventListener('mouseup', this.onPointerUp, true);
	      }
	
	      if (this.supportsTouchEvents) {
	        this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);
	        this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);
	        this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);
	        this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);
	      }
	
	      this.interactionDOMElement = null;
	
	      this.eventsAdded = false;
	    }
	
	    /**
	     * Updates the state of interactive objects.
	     * Invoked by a throttled ticker.
	     *
	     * @param {number} deltaTime - time delta since last tick
	     */
	
	  }, {
	    key: 'update',
	    value: function update(_ref) {
	      var snippet = _ref.snippet;
	
	      if (!this.isAble()) return;
	      this._deltaTime += snippet;
	
	      if (this._deltaTime < this.interactionFrequency) {
	        return;
	      }
	
	      this._deltaTime = 0;
	
	      if (!this.interactionDOMElement) {
	        return;
	      }
	
	      // if the user move the mouse this check has already been done using the mouse move!
	      if (this.didMove) {
	        this.didMove = false;
	
	        return;
	      }
	
	      this.cursor = null;
	
	      // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,
	      // but there was a scenario of a display object moving under a static mouse cursor.
	      // In this case, mouseover and mouseevents would not pass the flag test in triggerEvent function
	      for (var k in this.activeInteractionData) {
	        // eslint-disable-next-line no-prototype-builtins
	        if (this.activeInteractionData.hasOwnProperty(k)) {
	          var interactionData = this.activeInteractionData[k];
	
	          if (interactionData.originalEvent && interactionData.pointerType !== 'touch') {
	            var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, interactionData.originalEvent, interactionData);
	
	            this.processInteractive(interactionEvent, this.layer.scene, this.processPointerOverOut, true);
	          }
	        }
	      }
	
	      this.setCursorMode(this.cursor);
	
	      // TODO
	    }
	
	    /**
	     * Sets the current cursor mode, handling any callbacks or CSS style changes.
	     *
	     * @param {string} mode - cursor mode, a key from the cursorStyles dictionary
	     */
	
	  }, {
	    key: 'setCursorMode',
	    value: function setCursorMode(mode) {
	      mode = mode || 'default';
	      // if the mode didn't actually change, bail early
	      if (this.currentCursorMode === mode) {
	        return;
	      }
	      this.currentCursorMode = mode;
	      var style = this.cursorStyles[mode];
	
	      // only do things if there is a cursor style for it
	      if (style) {
	        switch (typeof style === 'undefined' ? 'undefined' : _typeof(style)) {
	          case 'string':
	            // string styles are handled as cursor CSS
	            this.interactionDOMElement.style.cursor = style;
	            break;
	          case 'function':
	            // functions are just called, and passed the cursor mode
	            style(mode);
	            break;
	          case 'object':
	            // if it is an object, assume that it is a dictionary of CSS styles,
	            // apply it to the interactionDOMElement
	            Object.assign(this.interactionDOMElement.style, style);
	            break;
	          default:
	            break;
	        }
	      } else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {
	        // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry
	        // for the mode, then assume that the dev wants it to be CSS for the cursor.
	        this.interactionDOMElement.style.cursor = mode;
	      }
	    }
	
	    /**
	     * Dispatches an event on the display object that was interacted with
	     *
	     * @param {Object3D} displayObject - the display object in question
	     * @param {string} eventString - the name of the event (e.g, mousedown)
	     * @param {object} eventData - the event data object
	     * @private
	     */
	
	  }, {
	    key: 'triggerEvent',
	    value: function triggerEvent(displayObject, eventString, eventData) {
	      if (!eventData.stopped) {
	        eventData.currentTarget = displayObject;
	        eventData.type = eventString;
	
	        displayObject.emit(eventString, eventData);
	
	        if (displayObject[eventString]) {
	          displayObject[eventString](eventData);
	        }
	      }
	    }
	
	    /**
	     * This function is provides a neat way of crawling through the scene graph and running a
	     * specified function on all interactive objects it finds. It will also take care of hit
	     * testing the interactive objects and passes the hit across in the function.
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - event containing the point that
	     *  is tested for collision
	     * @param {Object3D} displayObject - the displayObject
	     *  that will be hit test (recursively crawls its children)
	     * @param {Function} [func] - the function that will be called on each interactive object. The
	     *  interactionEvent, displayObject and hit will be passed to the function
	     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point
	     * @param {boolean} [interactive] - Whether the displayObject is interactive
	     * @return {boolean} returns true if the displayObject hit the point
	     */
	
	  }, {
	    key: 'processInteractive',
	    value: function processInteractive(interactionEvent, displayObject, func, hitTest, interactive) {
	      if (!displayObject || !displayObject.visible) {
	        return false;
	      }
	
	      // Took a little while to rework this function correctly! But now it is done and nice and optimised. ^_^
	      //
	      // This function will now loop through all objects and then only hit test the objects it HAS
	      // to, not all of them. MUCH faster..
	      // An object will be hit test if the following is true:
	      //
	      // 1: It is interactive.
	      // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.
	      //
	      // As another little optimisation once an interactive object has been hit we can carry on
	      // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests
	      // A final optimisation is that an object is not hit test directly if a child has already been hit.
	
	      interactive = displayObject.interactive || interactive;
	
	      var hit = false;
	      var interactiveParent = interactive;
	
	      if (displayObject.interactiveChildren && displayObject.children) {
	        var children = displayObject.children;
	
	        for (var i = children.length - 1; i >= 0; i--) {
	          var child = children[i];
	
	          // time to get recursive.. if this function will return if something is hit..
	          var childHit = this.processInteractive(interactionEvent, child, func, hitTest, interactiveParent);
	
	          if (childHit) {
	            // its a good idea to check if a child has lost its parent.
	            // this means it has been removed whilst looping so its best
	            if (!child.parent) {
	              continue;
	            }
	
	            // we no longer need to hit test any more objects in this container as we we
	            // now know the parent has been hit
	            interactiveParent = false;
	
	            // If the child is interactive , that means that the object hit was actually
	            // interactive and not just the child of an interactive object.
	            // This means we no longer need to hit test anything else. We still need to run
	            // through all objects, but we don't need to perform any hit tests.
	
	            if (childHit) {
	              if (interactionEvent.target) {
	                hitTest = false;
	              }
	              hit = true;
	            }
	          }
	        }
	      }
	
	      // no point running this if the item is not interactive or does not have an interactive parent.
	      if (interactive) {
	        // if we are hit testing (as in we have no hit any objects yet)
	        // We also don't need to worry about hit testing if once of the displayObjects children
	        // has already been hit - but only if it was interactive, otherwise we need to keep
	        // looking for an interactive child, just in case we hit one
	        if (hitTest && !interactionEvent.target) {
	          if (interactionEvent.intersects[0] && interactionEvent.intersects[0].object === displayObject) {
	            hit = true;
	          }
	        }
	
	        if (displayObject.interactive) {
	          if (hit && !interactionEvent.target) {
	            interactionEvent.data.target = interactionEvent.target = displayObject;
	          }
	
	          if (func) {
	            func(interactionEvent, displayObject, !!hit);
	          }
	        }
	      }
	
	      return hit;
	    }
	
	    /**
	     * Is called when the click is pressed down on the renderer element
	     *
	     * @private
	     * @param {MouseEvent} originalEvent - The DOM event of a click being pressed down
	     */
	
	  }, {
	    key: 'onClick',
	    value: function onClick(originalEvent) {
	      if (!this.isAble()) return;
	      if (originalEvent.type !== 'click') return;
	
	      var events = this.normalizeToPointerData(originalEvent);
	
	      if (this.autoPreventDefault && events[0].isNormalized) {
	        originalEvent.preventDefault();
	      }
	
	      var interactionData = this.getInteractionDataForPointerId(events[0]);
	
	      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, events[0], interactionData);
	
	      interactionEvent.data.originalEvent = originalEvent;
	
	      this.processInteractive(interactionEvent, this.layer.scene, this.processClick, true);
	
	      this.emit('click', interactionEvent);
	    }
	
	    /**
	     * Processes the result of the click check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processClick',
	    value: function processClick(interactionEvent, displayObject, hit) {
	      if (hit) {
	        this.triggerEvent(displayObject, 'click', interactionEvent);
	      }
	    }
	
	    /**
	     * Is called when the pointer button is pressed down on the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down
	     */
	
	  }, {
	    key: 'onPointerDown',
	    value: function onPointerDown(originalEvent) {
	      if (!this.isAble()) return;
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;
	
	      var events = this.normalizeToPointerData(originalEvent);
	
	      /**
	       * No need to prevent default on natural pointer events, as there are no side effects
	       * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,
	       * so still need to be prevented.
	       */
	
	      // Guaranteed that there will be at least one event in events, and all events must have the same pointer type
	
	      if (this.autoPreventDefault && events[0].isNormalized) {
	        originalEvent.preventDefault();
	      }
	
	      var eventLen = events.length;
	
	      for (var i = 0; i < eventLen; i++) {
	        var event = events[i];
	
	        var interactionData = this.getInteractionDataForPointerId(event);
	
	        var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	        interactionEvent.data.originalEvent = originalEvent;
	
	        this.processInteractive(interactionEvent, this.layer.scene, this.processPointerDown, true);
	
	        this.emit('pointerdown', interactionEvent);
	        if (event.pointerType === 'touch') {
	          this.emit('touchstart', interactionEvent);
	        } else if (event.pointerType === 'mouse' || event.pointerType === 'pen') {
	          var isRightButton = event.button === 2;
	
	          this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);
	        }
	      }
	    }
	
	    /**
	     * Processes the result of the pointer down check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processPointerDown',
	    value: function processPointerDown(interactionEvent, displayObject, hit) {
	      var data = interactionEvent.data;
	      var id = interactionEvent.data.identifier;
	
	      if (hit) {
	        if (!displayObject.trackedPointers[id]) {
	          displayObject.trackedPointers[id] = new InteractionTrackingData(id);
	        }
	        this.triggerEvent(displayObject, 'pointerdown', interactionEvent);
	
	        if (data.pointerType === 'touch') {
	          displayObject.started = true;
	          this.triggerEvent(displayObject, 'touchstart', interactionEvent);
	        } else if (data.pointerType === 'mouse' || data.pointerType === 'pen') {
	          var isRightButton = data.button === 2;
	
	          if (isRightButton) {
	            displayObject.trackedPointers[id].rightDown = true;
	          } else {
	            displayObject.trackedPointers[id].leftDown = true;
	          }
	
	          this.triggerEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);
	        }
	      }
	    }
	
	    /**
	     * Is called when the pointer button is released on the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released
	     * @param {boolean} cancelled - true if the pointer is cancelled
	     * @param {Function} func - Function passed to {@link processInteractive}
	     */
	
	  }, {
	    key: 'onPointerComplete',
	    value: function onPointerComplete(originalEvent, cancelled, func) {
	      var events = this.normalizeToPointerData(originalEvent);
	
	      var eventLen = events.length;
	
	      // if the event wasn't targeting our canvas, then consider it to be pointerupoutside
	      // in all cases (unless it was a pointercancel)
	      var eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';
	
	      for (var i = 0; i < eventLen; i++) {
	        var event = events[i];
	
	        var interactionData = this.getInteractionDataForPointerId(event);
	
	        var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	        interactionEvent.data.originalEvent = originalEvent;
	
	        // perform hit testing for events targeting our canvas or cancel events
	        this.processInteractive(interactionEvent, this.layer.scene, func, cancelled || !eventAppend);
	
	        this.emit(cancelled ? 'pointercancel' : 'pointerup' + eventAppend, interactionEvent);
	
	        if (event.pointerType === 'mouse' || event.pointerType === 'pen') {
	          var isRightButton = event.button === 2;
	
	          this.emit(isRightButton ? 'rightup' + eventAppend : 'mouseup' + eventAppend, interactionEvent);
	        } else if (event.pointerType === 'touch') {
	          this.emit(cancelled ? 'touchcancel' : 'touchend' + eventAppend, interactionEvent);
	          this.releaseInteractionDataForPointerId(event.pointerId, interactionData);
	        }
	      }
	    }
	
	    /**
	     * Is called when the pointer button is cancelled
	     *
	     * @private
	     * @param {PointerEvent} event - The DOM event of a pointer button being released
	     */
	
	  }, {
	    key: 'onPointerCancel',
	    value: function onPointerCancel(event) {
	      if (!this.isAble()) return;
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && event.pointerType === 'touch') return;
	
	      this.onPointerComplete(event, true, this.processPointerCancel);
	    }
	
	    /**
	     * Processes the result of the pointer cancel check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     */
	
	  }, {
	    key: 'processPointerCancel',
	    value: function processPointerCancel(interactionEvent, displayObject) {
	      var data = interactionEvent.data;
	
	      var id = interactionEvent.data.identifier;
	
	      if (displayObject.trackedPointers[id] !== undefined) {
	        delete displayObject.trackedPointers[id];
	        this.triggerEvent(displayObject, 'pointercancel', interactionEvent);
	
	        if (data.pointerType === 'touch') {
	          this.triggerEvent(displayObject, 'touchcancel', interactionEvent);
	        }
	      }
	    }
	
	    /**
	     * Is called when the pointer button is released on the renderer element
	     *
	     * @private
	     * @param {PointerEvent} event - The DOM event of a pointer button being released
	     */
	
	  }, {
	    key: 'onPointerUp',
	    value: function onPointerUp(event) {
	      if (!this.isAble()) return;
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && event.pointerType === 'touch') return;
	
	      this.onPointerComplete(event, false, this.processPointerUp);
	    }
	
	    /**
	     * Processes the result of the pointer up check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processPointerUp',
	    value: function processPointerUp(interactionEvent, displayObject, hit) {
	      var data = interactionEvent.data;
	
	      var id = interactionEvent.data.identifier;
	
	      var trackingData = displayObject.trackedPointers[id];
	
	      var isTouch = data.pointerType === 'touch';
	
	      var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';
	
	      // Mouse only
	      if (isMouse) {
	        var isRightButton = data.button === 2;
	
	        var flags = InteractionTrackingData.FLAGS;
	
	        var test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;
	
	        var isDown = trackingData !== undefined && trackingData.flags & test;
	
	        if (hit) {
	          this.triggerEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);
	
	          if (isDown) {
	            this.triggerEvent(displayObject, isRightButton ? 'rightclick' : 'leftclick', interactionEvent);
	          }
	        } else if (isDown) {
	          this.triggerEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);
	        }
	        // update the down state of the tracking data
	        if (trackingData) {
	          if (isRightButton) {
	            trackingData.rightDown = false;
	          } else {
	            trackingData.leftDown = false;
	          }
	        }
	      }
	
	      // Pointers and Touches, and Mouse
	      if (isTouch && displayObject.started) {
	        displayObject.started = false;
	        this.triggerEvent(displayObject, 'touchend', interactionEvent);
	      }
	      if (hit) {
	        this.triggerEvent(displayObject, 'pointerup', interactionEvent);
	
	        if (trackingData) {
	          this.triggerEvent(displayObject, 'pointertap', interactionEvent);
	          if (isTouch) {
	            this.triggerEvent(displayObject, 'tap', interactionEvent);
	            // touches are no longer over (if they ever were) when we get the touchend
	            // so we should ensure that we don't keep pretending that they are
	            trackingData.over = false;
	          }
	        }
	      } else if (trackingData) {
	        this.triggerEvent(displayObject, 'pointerupoutside', interactionEvent);
	        if (isTouch) this.triggerEvent(displayObject, 'touchendoutside', interactionEvent);
	      }
	      // Only remove the tracking data if there is no over/down state still associated with it
	      if (trackingData && trackingData.none) {
	        delete displayObject.trackedPointers[id];
	      }
	    }
	
	    /**
	     * Is called when the pointer moves across the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer moving
	     */
	
	  }, {
	    key: 'onPointerMove',
	    value: function onPointerMove(originalEvent) {
	      if (!this.isAble()) return;
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;
	
	      var events = this.normalizeToPointerData(originalEvent);
	
	      if (events[0].pointerType === 'mouse') {
	        this.didMove = true;
	
	        this.cursor = null;
	      }
	
	      var eventLen = events.length;
	
	      for (var i = 0; i < eventLen; i++) {
	        var event = events[i];
	
	        var interactionData = this.getInteractionDataForPointerId(event);
	
	        var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	        interactionEvent.data.originalEvent = originalEvent;
	
	        var interactive = event.pointerType === 'touch' ? this.moveWhenInside : true;
	
	        this.processInteractive(interactionEvent, this.layer.scene, this.processPointerMove, interactive);
	        this.emit('pointermove', interactionEvent);
	        if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);
	        if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);
	      }
	
	      if (events[0].pointerType === 'mouse') {
	        this.setCursorMode(this.cursor);
	
	        // TODO BUG for parents interactive object (border order issue)
	      }
	    }
	
	    /**
	     * Processes the result of the pointer move check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processPointerMove',
	    value: function processPointerMove(interactionEvent, displayObject, hit) {
	      var data = interactionEvent.data;
	
	      var isTouch = data.pointerType === 'touch';
	
	      var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';
	
	      if (isMouse) {
	        this.processPointerOverOut(interactionEvent, displayObject, hit);
	      }
	
	      if (isTouch && displayObject.started) this.triggerEvent(displayObject, 'touchmove', interactionEvent);
	      if (!this.moveWhenInside || hit) {
	        this.triggerEvent(displayObject, 'pointermove', interactionEvent);
	        if (isMouse) this.triggerEvent(displayObject, 'mousemove', interactionEvent);
	      }
	    }
	
	    /**
	     * Is called when the pointer is moved out of the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out
	     */
	
	  }, {
	    key: 'onPointerOut',
	    value: function onPointerOut(originalEvent) {
	      if (!this.isAble()) return;
	      // if we support touch events, then only use those for touch events, not pointer events
	      if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;
	
	      var events = this.normalizeToPointerData(originalEvent);
	
	      // Only mouse and pointer can call onPointerOut, so events will always be length 1
	      var event = events[0];
	
	      if (event.pointerType === 'mouse') {
	        this.mouseOverRenderer = false;
	        this.setCursorMode(null);
	      }
	
	      var interactionData = this.getInteractionDataForPointerId(event);
	
	      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	      interactionEvent.data.originalEvent = event;
	
	      this.processInteractive(interactionEvent, this.layer.scene, this.processPointerOverOut, false);
	
	      this.emit('pointerout', interactionEvent);
	      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {
	        this.emit('mouseout', interactionEvent);
	      } else {
	        // we can get touchleave events after touchend, so we want to make sure we don't
	        // introduce memory leaks
	        this.releaseInteractionDataForPointerId(interactionData.identifier);
	      }
	    }
	
	    /**
	     * Processes the result of the pointer over/out check and dispatches the event if need be
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The interaction event wrapping the DOM event
	     * @param {Object3D} displayObject - The display object that was tested
	     * @param {boolean} hit - the result of the hit test on the display object
	     */
	
	  }, {
	    key: 'processPointerOverOut',
	    value: function processPointerOverOut(interactionEvent, displayObject, hit) {
	      var data = interactionEvent.data;
	
	      var id = interactionEvent.data.identifier;
	
	      var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';
	
	      var trackingData = displayObject.trackedPointers[id];
	
	      // if we just moused over the display object, then we need to track that state
	      if (hit && !trackingData) {
	        trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);
	      }
	
	      if (trackingData === undefined) return;
	
	      if (hit && this.mouseOverRenderer) {
	        if (!trackingData.over) {
	          trackingData.over = true;
	          this.triggerEvent(displayObject, 'pointerover', interactionEvent);
	          if (isMouse) {
	            this.triggerEvent(displayObject, 'mouseover', interactionEvent);
	          }
	        }
	
	        // only change the cursor if it has not already been changed (by something deeper in the
	        // display tree)
	        if (isMouse && this.cursor === null) {
	          this.cursor = displayObject.cursor;
	        }
	      } else if (trackingData.over) {
	        trackingData.over = false;
	        this.triggerEvent(displayObject, 'pointerout', this.eventData);
	        if (isMouse) {
	          this.triggerEvent(displayObject, 'mouseout', interactionEvent);
	        }
	        // if there is no mouse down information for the pointer, then it is safe to delete
	        if (trackingData.none) {
	          delete displayObject.trackedPointers[id];
	        }
	      }
	    }
	
	    /**
	     * Is called when the pointer is moved into the renderer element
	     *
	     * @private
	     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view
	     */
	
	  }, {
	    key: 'onPointerOver',
	    value: function onPointerOver(originalEvent) {
	      if (!this.isAble()) return;
	      var events = this.normalizeToPointerData(originalEvent);
	
	      // Only mouse and pointer can call onPointerOver, so events will always be length 1
	      var event = events[0];
	
	      var interactionData = this.getInteractionDataForPointerId(event);
	
	      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);
	
	      interactionEvent.data.originalEvent = event;
	
	      if (event.pointerType === 'mouse') {
	        this.mouseOverRenderer = true;
	      }
	
	      this.emit('pointerover', interactionEvent);
	      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {
	        this.emit('mouseover', interactionEvent);
	      }
	    }
	
	    /**
	     * Get InteractionData for a given pointerId. Store that data as well
	     *
	     * @private
	     * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData
	     * @return {InteractionData} - Interaction data for the given pointer identifier
	     */
	
	  }, {
	    key: 'getInteractionDataForPointerId',
	    value: function getInteractionDataForPointerId(event) {
	      var pointerId = event.pointerId;
	
	      var interactionData = void 0;
	
	      if (pointerId === MOUSE_POINTER_ID$1 || event.pointerType === 'mouse') {
	        interactionData = this.mouse;
	      } else if (this.activeInteractionData[pointerId]) {
	        interactionData = this.activeInteractionData[pointerId];
	      } else {
	        interactionData = this.interactionDataPool.pop() || new InteractionData();
	        interactionData.identifier = pointerId;
	        this.activeInteractionData[pointerId] = interactionData;
	      }
	      // copy properties from the event, so that we can make sure that touch/pointer specific
	      // data is available
	      interactionData._copyEvent(event);
	
	      return interactionData;
	    }
	
	    /**
	     * Return unused InteractionData to the pool, for a given pointerId
	     *
	     * @private
	     * @param {number} pointerId - Identifier from a pointer event
	     */
	
	  }, {
	    key: 'releaseInteractionDataForPointerId',
	    value: function releaseInteractionDataForPointerId(pointerId) {
	      var interactionData = this.activeInteractionData[pointerId];
	
	      if (interactionData) {
	        delete this.activeInteractionData[pointerId];
	        interactionData._reset();
	        this.interactionDataPool.push(interactionData);
	      }
	    }
	
	    /**
	     * Maps x and y coords from a DOM object and maps them correctly to the three.js view. The
	     * resulting value is stored in the point. This takes into account the fact that the DOM
	     * element could be scaled and positioned anywhere on the screen.
	     *
	     * @param  {Vector2} point - the point that the result will be stored in
	     * @param  {number} x - the x coord of the position to map
	     * @param  {number} y - the y coord of the position to map
	     */
	
	  }, {
	    key: 'mapPositionToPoint',
	    value: function mapPositionToPoint(point, x, y) {
	      var rect = void 0;
	
	      // IE 11 fix
	      if (!this.interactionDOMElement.parentElement) {
	        rect = {
	          x: 0,
	          y: 0,
	          left: 0,
	          top: 0,
	          width: 0,
	          height: 0
	        };
	      } else {
	        rect = this.interactionDOMElement.getBoundingClientRect();
	      }
	
	      point.x = (x - rect.left) / rect.width * 2 - 1;
	      point.y = -((y - rect.top) / rect.height) * 2 + 1;
	    }
	
	    /**
	     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData
	     *
	     * @private
	     * @param {InteractionEvent} interactionEvent - The event to be configured
	     * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent
	     * @param {InteractionData} interactionData - The InteractionData that will be paired
	     *        with the InteractionEvent
	     * @return {InteractionEvent} the interaction event that was passed in
	     */
	
	  }, {
	    key: 'configureInteractionEventForDOMEvent',
	    value: function configureInteractionEventForDOMEvent(interactionEvent, pointerEvent, interactionData) {
	      interactionEvent.data = interactionData;
	
	      this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);
	
	      if (this.layer && this.layer.interactive) this.raycaster.setFromCamera(interactionData.global, this.layer.camera);
	
	      // Not really sure why this is happening, but it's how a previous version handled things TODO: there should be remove
	      if (pointerEvent.pointerType === 'touch') {
	        pointerEvent.globalX = interactionData.global.x;
	        pointerEvent.globalY = interactionData.global.y;
	      }
	
	      interactionData.originalEvent = pointerEvent;
	      interactionEvent._reset();
	      interactionEvent.intersects = this.raycaster.intersectObjects(this.scene.children, true);
	
	      return interactionEvent;
	    }
	
	    /**
	     * Ensures that the original event object contains all data that a regular pointer event would have
	     *
	     * @private
	     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event
	     * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer
	     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches
	     */
	
	  }, {
	    key: 'normalizeToPointerData',
	    value: function normalizeToPointerData(event) {
	      var normalizedEvents = [];
	
	      if (this.supportsTouchEvents && event instanceof TouchEvent) {
	        for (var i = 0, li = event.changedTouches.length; i < li; i++) {
	          var touch = event.changedTouches[i];
	
	          if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;
	          if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;
	          if (typeof touch.isPrimary === 'undefined') {
	            touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';
	          }
	          if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;
	          if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;
	          if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;
	          if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;
	          if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';
	          if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;
	          if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;
	          touch.twist = 0;
	          touch.tangentialPressure = 0;
	          // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven
	          // support, and the fill ins are not quite the same
	          // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top
	          // left is not 0,0 on the page
	          if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;
	          if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;
	
	          // mark the touch as normalized, just so that we know we did it
	          touch.isNormalized = true;
	
	          normalizedEvents.push(touch);
	        }
	      } else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent))) {
	        if (typeof event.isPrimary === 'undefined') event.isPrimary = true;
	        if (typeof event.width === 'undefined') event.width = 1;
	        if (typeof event.height === 'undefined') event.height = 1;
	        if (typeof event.tiltX === 'undefined') event.tiltX = 0;
	        if (typeof event.tiltY === 'undefined') event.tiltY = 0;
	        if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';
	        if (typeof event.pointerId === 'undefined') event.pointerId = MOUSE_POINTER_ID$1;
	        if (typeof event.pressure === 'undefined') event.pressure = 0.5;
	        event.twist = 0;
	        event.tangentialPressure = 0;
	
	        // mark the mouse event as normalized, just so that we know we did it
	        event.isNormalized = true;
	
	        normalizedEvents.push(event);
	      } else {
	        normalizedEvents.push(event);
	      }
	
	      return normalizedEvents;
	    }
	
	    /**
	     * Destroys the interaction manager
	     *
	     */
	
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.removeEvents();
	
	      this.removeAllListeners();
	
	      this.renderer = null;
	
	      this.mouse = null;
	
	      this.eventData = null;
	
	      this.interactionDOMElement = null;
	
	      this.onPointerDown = null;
	      this.processPointerDown = null;
	
	      this.onPointerUp = null;
	      this.processPointerUp = null;
	
	      this.onPointerCancel = null;
	      this.processPointerCancel = null;
	
	      this.onPointerMove = null;
	      this.processPointerMove = null;
	
	      this.onPointerOut = null;
	      this.processPointerOverOut = null;
	
	      this.onPointerOver = null;
	
	      this._tempPoint = null;
	    }
	  }]);
	  return InteractionLayer;
	}(three.EventDispatcher);
	
	(function () {
	  var lastTime = 0;
	  var vendors = ['ms', 'moz', 'webkit', 'o'];
	  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
	    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
	    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
	  }
	
	  if (!window.requestAnimationFrame) {
	    window.requestAnimationFrame = function (callback) {
	      var currTime = new Date().getTime();
	      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	      var id = window.setTimeout(function () {
	        callback(currTime + timeToCall);
	      }, timeToCall);
	      lastTime = currTime + timeToCall;
	      return id;
	    };
	  }
	
	  if (!window.cancelAnimationFrame) {
	    window.cancelAnimationFrame = function (id) {
	      clearTimeout(id);
	    };
	  }
	
	  window.RAF = window.requestAnimationFrame;
	  window.CAF = window.cancelAnimationFrame;
	})();
	
	/**
	 * @extends EventDispatcher
	 */
	
	var Ticker = function (_EventDispatcher) {
	  inherits(Ticker, _EventDispatcher);
	
	  /**
	   *
	   */
	  function Ticker() {
	    classCallCheck(this, Ticker);
	
	    var _this = possibleConstructorReturn(this, (Ticker.__proto__ || Object.getPrototypeOf(Ticker)).call(this));
	
	    _this.timer = null;
	    _this.started = false;
	
	    /**
	     * pre-time cache
	     *
	     * @member {Number}
	     * @private
	     */
	    _this.pt = 0;
	
	    /**
	     * how long the time through, at this tick
	     *
	     * @member {Number}
	     * @private
	     */
	    _this.snippet = 0;
	
	    _this.start();
	    return _this;
	  }
	
	  /**
	   * start tick loop
	   */
	
	
	  createClass(Ticker, [{
	    key: 'start',
	    value: function start() {
	      var _this2 = this;
	
	      if (this.started) return;
	      var loop = function loop() {
	        _this2.timeline();
	        _this2.emit('tick', { snippet: _this2.snippet });
	        _this2.timer = RAF(loop);
	      };
	      loop();
	    }
	
	    /**
	     * stop tick loop
	     */
	
	  }, {
	    key: 'stop',
	    value: function stop() {
	      CAF(this.timer);
	      this.started = false;
	    }
	
	    /**
	     * get timeline snippet
	     *
	     * @private
	     */
	
	  }, {
	    key: 'timeline',
	    value: function timeline() {
	      this.snippet = Date.now() - this.pt;
	      if (this.pt === 0 || this.snippet > 200) {
	        this.pt = Date.now();
	        this.snippet = Date.now() - this.pt;
	      }
	
	      this.pt += this.snippet;
	    }
	  }]);
	  return Ticker;
	}(three.EventDispatcher);
	
	/**
	 * The interaction manager deals with mouse, touch and pointer events. Any DisplayObject can be interactive
	 * if its interactive parameter is set to true
	 * This manager also supports multitouch.
	 *
	 * reference to [pixi.js](http://www.pixijs.com/) impl
	 *
	 * @example
	 * import { Scene, PerspectiveCamera, WebGLRenderer, Mesh, BoxGeometry, MeshBasicMaterial } from 'three';
	 * import { Interaction } from 'three.interaction';
	 * const renderer = new WebGLRenderer({ canvas: canvasElement });
	 * const scene = new Scene();
	 * const camera = new PerspectiveCamera(60, width / height, 0.1, 100);
	 *
	 * const interaction = new Interaction(renderer, scene, camera);
	 * // then you can bind every interaction event with any mesh which you had `add` into `scene` before
	 * const cube = new Mesh(
	 *   new BoxGeometry(1, 1, 1),
	 *   new MeshBasicMaterial({ color: 0xffffff }),
	 * );
	 * scene.add(cube);
	 * cube.on('touchstart', ev => {
	 *   console.log(ev);
	 * });
	 *
	 * cube.on('mousedown', ev => {
	 *   console.log(ev);
	 * });
	 *
	 * cube.on('pointerdown', ev => {
	 *   console.log(ev);
	 * });
	 * // and so on ...
	 *
	 * // you can also listen on parent-node or any display-tree node,
	 * // source event will bubble up along with display-tree.
	 * // you can stop the bubble-up by invoke ev.stopPropagation function.
	 * scene.on('touchstart', ev => {
	 *   console.log(ev);
	 * })
	 *
	 * @class
	 * @extends InteractionManager
	 */
	
	var Interaction = function (_InteractionManager) {
	  inherits(Interaction, _InteractionManager);
	
	  /**
	   * @param {WebGLRenderer} renderer - A reference to the current renderer
	   * @param {Scene} scene - A reference to the current scene
	   * @param {Camera} camera - A reference to the current camera
	   * @param {Object} [options] - The options for the manager.
	   * @param {Boolean} [options.autoPreventDefault=false] - Should the manager automatically prevent default browser actions.
	   * @param {Boolean} [options.autoAttach=false] - Should the manager automatically attach target element.
	   * @param {Number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.
	   */
	  function Interaction(renderer, scene, camera, options) {
	    classCallCheck(this, Interaction);
	
	    options = Object.assign({ autoAttach: false }, options);
	
	    /**
	     * a ticker
	     *
	     * @private
	     * @member {Ticker}
	     */
	    var _this = possibleConstructorReturn(this, (Interaction.__proto__ || Object.getPrototypeOf(Interaction)).call(this, renderer, scene, camera, options));
	
	    _this.ticker = new Ticker();
	
	    /**
	     * update for some over event
	     *
	     * @private
	     */
	    _this.update = _this.update.bind(_this);
	
	    _this.on('addevents', function () {
	      _this.ticker.on('tick', _this.update);
	    });
	
	    _this.on('removeevents', function () {
	      _this.ticker.off('tick', _this.update);
	    });
	
	    _this.setTargetElement(_this.renderer.domElement);
	    return _this;
	  }
	
	  return Interaction;
	}(InteractionManager);
	
	exports.InteractionManager = InteractionManager;
	exports.InteractionLayer = InteractionLayer;
	exports.Interaction = Interaction;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));
	//# sourceMappingURL=three.interaction.js.map


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**!
	* tippy.js v4.3.5
	* (c) 2017-2019 atomiks
	* MIT License
	*/
	(function (global, factory) {
	   true ? module.exports = factory(__webpack_require__(68)) :
	  typeof define === 'function' && define.amd ? define(['popper.js'], factory) :
	  (global = global || self, global.tippy = factory(global.Popper));
	}(this, function (Popper) { 'use strict';
	
	  Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;
	
	  var css = ".tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{transition-timing-function:cubic-bezier(.165,.84,.44,1);max-width:calc(100% - 8px);pointer-events:none;outline:0}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-7px;bottom:-6.5px;-webkit-transform-origin:50% 0;transform-origin:50% 0;margin:0 3px}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;bottom:-7px;margin:0 3px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 25%;transform-origin:0 25%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-55%);transform:scale(1) translate(-50%,-55%)}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%,-45%);transform:scale(.2) translate(-50%,-45%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(-10px);transform:perspective(700px) translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(60deg);transform:perspective(700px) rotateX(60deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=top] [data-animation=scale]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px) scale(.5);transform:translateY(-10px) scale(.5)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%;margin:0 3px}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:8px solid #333;border-right:8px solid transparent;border-left:8px solid transparent;top:-7px;margin:0 3px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -50%;transform-origin:0 -50%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-45%);transform:scale(1) translate(-50%,-45%)}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-50%);transform:scale(.2) translate(-50%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateY(10px);transform:perspective(700px) translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateX(-60deg);transform:perspective(700px) rotateX(-60deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=scale]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px) scale(.5);transform:translateY(10px) scale(.5)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:50% 0 0 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-12px;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%;margin:3px 0}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;right:-7px;margin:3px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-75%,-50%);transform:scale(.2) translate(-75%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(-10px);transform:perspective(700px) translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(-60deg);transform:perspective(700px) rotateY(-60deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=left] [data-animation=scale]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px) scale(.5);transform:translateX(-10px) scale(.5)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 50% 50% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-12px;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%;margin:3px 0}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:8px solid #333;border-top:8px solid transparent;border-bottom:8px solid transparent;left:-7px;margin:3px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-50% 0;transform-origin:-50% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(1) translate(-50%,-50%);transform:scale(1) translate(-50%,-50%)}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(.2) translate(-25%,-50%);transform:scale(.2) translate(-25%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{-webkit-transform:perspective(700px) translateX(10px);transform:perspective(700px) translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:perspective(700px) rotateY(60deg);transform:perspective(700px) rotateY(60deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0}.tippy-popper[x-placement^=right] [data-animation=scale]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px) scale(.5);transform:translateX(10px) scale(.5)}.tippy-tooltip{position:relative;color:#fff;border-radius:.25rem;font-size:.875rem;padding:.3125rem .5625rem;line-height:1.4;text-align:center;background-color:#333}.tippy-tooltip[data-size=small]{padding:.1875rem .375rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.375rem .75rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:initial}.tippy-tooltip[data-interactive],.tippy-tooltip[data-interactive] .tippy-roundarrow path{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-tooltip[data-inertia][data-state=hidden]{transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:18px;height:7px;fill:#333;pointer-events:none}.tippy-backdrop{position:absolute;background-color:#333;border-radius:50%;width:calc(110% + 2rem);left:50%;top:50%;z-index:-1;transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:\"\";float:left;padding-top:100%}.tippy-backdrop+.tippy-content{transition-property:opacity;will-change:opacity}.tippy-backdrop+.tippy-content[data-state=hidden]{opacity:0}";
	
	  function _extends() {
	    _extends = Object.assign || function (target) {
	      for (var i = 1; i < arguments.length; i++) {
	        var source = arguments[i];
	
	        for (var key in source) {
	          if (Object.prototype.hasOwnProperty.call(source, key)) {
	            target[key] = source[key];
	          }
	        }
	      }
	
	      return target;
	    };
	
	    return _extends.apply(this, arguments);
	  }
	
	  var version = "4.3.5";
	
	  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
	  var ua = isBrowser ? navigator.userAgent : '';
	  var isIE = /MSIE |Trident\//.test(ua);
	  var isUCBrowser = /UCBrowser\//.test(ua);
	  var isIOS = isBrowser && /iPhone|iPad|iPod/.test(navigator.platform) && !window.MSStream;
	
	  var defaultProps = {
	    a11y: true,
	    allowHTML: true,
	    animateFill: true,
	    animation: 'shift-away',
	    appendTo: function appendTo() {
	      return document.body;
	    },
	    aria: 'describedby',
	    arrow: false,
	    arrowType: 'sharp',
	    boundary: 'scrollParent',
	    content: '',
	    delay: 0,
	    distance: 10,
	    duration: [325, 275],
	    flip: true,
	    flipBehavior: 'flip',
	    flipOnUpdate: false,
	    followCursor: false,
	    hideOnClick: true,
	    ignoreAttributes: false,
	    inertia: false,
	    interactive: false,
	    interactiveBorder: 2,
	    interactiveDebounce: 0,
	    lazy: true,
	    maxWidth: 350,
	    multiple: false,
	    offset: 0,
	    onHidden: function onHidden() {},
	    onHide: function onHide() {},
	    onMount: function onMount() {},
	    onShow: function onShow() {},
	    onShown: function onShown() {},
	    onTrigger: function onTrigger() {},
	    placement: 'top',
	    popperOptions: {},
	    role: 'tooltip',
	    showOnInit: false,
	    size: 'regular',
	    sticky: false,
	    target: '',
	    theme: 'dark',
	    touch: true,
	    touchHold: false,
	    trigger: 'mouseenter focus',
	    triggerTarget: null,
	    updateDuration: 0,
	    wait: null,
	    zIndex: 9999
	    /**
	     * If the set() method encounters one of these, the popperInstance must be
	     * recreated
	     */
	
	  };
	  var POPPER_INSTANCE_DEPENDENCIES = ['arrow', 'arrowType', 'boundary', 'distance', 'flip', 'flipBehavior', 'flipOnUpdate', 'offset', 'placement', 'popperOptions'];
	
	  var elementProto = isBrowser ? Element.prototype : {};
	  var matches = elementProto.matches || elementProto.matchesSelector || elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector || elementProto.msMatchesSelector;
	  /**
	   * Ponyfill for Array.from - converts iterable values to an array
	   */
	
	  function arrayFrom(value) {
	    return [].slice.call(value);
	  }
	  /**
	   * Ponyfill for Element.prototype.closest
	   */
	
	  function closest(element, selector) {
	    return closestCallback(element, function (el) {
	      return matches.call(el, selector);
	    });
	  }
	  /**
	   * Works like Element.prototype.closest, but uses a callback instead
	   */
	
	  function closestCallback(element, callback) {
	    while (element) {
	      if (callback(element)) {
	        return element;
	      }
	
	      element = element.parentElement;
	    }
	
	    return null;
	  }
	
	  // Passive event listener config
	  var PASSIVE = {
	    passive: true // Popper `preventOverflow` padding
	
	  };
	  var PADDING = 4; // Popper attributes
	  // In Popper v2 these will be `data-*` instead of `x-*` to adhere to HTML5 spec
	
	  var PLACEMENT_ATTRIBUTE = 'x-placement';
	  var OUT_OF_BOUNDARIES_ATTRIBUTE = 'x-out-of-boundaries'; // Classes
	
	  var IOS_CLASS = "tippy-iOS";
	  var ACTIVE_CLASS = "tippy-active";
	  var POPPER_CLASS = "tippy-popper";
	  var TOOLTIP_CLASS = "tippy-tooltip";
	  var CONTENT_CLASS = "tippy-content";
	  var BACKDROP_CLASS = "tippy-backdrop";
	  var ARROW_CLASS = "tippy-arrow";
	  var ROUND_ARROW_CLASS = "tippy-roundarrow"; // Selectors
	
	  var POPPER_SELECTOR = ".".concat(POPPER_CLASS);
	  var TOOLTIP_SELECTOR = ".".concat(TOOLTIP_CLASS);
	  var CONTENT_SELECTOR = ".".concat(CONTENT_CLASS);
	  var BACKDROP_SELECTOR = ".".concat(BACKDROP_CLASS);
	  var ARROW_SELECTOR = ".".concat(ARROW_CLASS);
	  var ROUND_ARROW_SELECTOR = ".".concat(ROUND_ARROW_CLASS);
	
	  var isUsingTouch = false;
	  function onDocumentTouch() {
	    if (isUsingTouch) {
	      return;
	    }
	
	    isUsingTouch = true;
	
	    if (isIOS) {
	      document.body.classList.add(IOS_CLASS);
	    }
	
	    if (window.performance) {
	      document.addEventListener('mousemove', onDocumentMouseMove);
	    }
	  }
	  var lastMouseMoveTime = 0;
	  function onDocumentMouseMove() {
	    var now = performance.now(); // Chrome 60+ is 1 mousemove per animation frame, use 20ms time difference
	
	    if (now - lastMouseMoveTime < 20) {
	      isUsingTouch = false;
	      document.removeEventListener('mousemove', onDocumentMouseMove);
	
	      if (!isIOS) {
	        document.body.classList.remove(IOS_CLASS);
	      }
	    }
	
	    lastMouseMoveTime = now;
	  }
	  function onWindowBlur() {
	    var _document = document,
	        activeElement = _document.activeElement;
	
	    if (activeElement && activeElement.blur && activeElement._tippy) {
	      activeElement.blur();
	    }
	  }
	  /**
	   * Adds the needed global event listeners
	   */
	
	  function bindGlobalEventListeners() {
	    document.addEventListener('touchstart', onDocumentTouch, PASSIVE);
	    window.addEventListener('blur', onWindowBlur);
	  }
	
	  var keys = Object.keys(defaultProps);
	  /**
	   * Returns an object of optional props from data-tippy-* attributes
	   */
	
	  function getDataAttributeOptions(reference) {
	    return keys.reduce(function (acc, key) {
	      var valueAsString = (reference.getAttribute("data-tippy-".concat(key)) || '').trim();
	
	      if (!valueAsString) {
	        return acc;
	      }
	
	      if (key === 'content') {
	        acc[key] = valueAsString;
	      } else {
	        try {
	          acc[key] = JSON.parse(valueAsString);
	        } catch (e) {
	          acc[key] = valueAsString;
	        }
	      }
	
	      return acc;
	    }, {});
	  }
	  /**
	   * Polyfills the virtual reference (plain object) with Element.prototype props
	   * Mutating because DOM elements are mutated, adds `_tippy` property
	   */
	
	  function polyfillElementPrototypeProperties(virtualReference) {
	    var polyfills = {
	      isVirtual: true,
	      attributes: virtualReference.attributes || {},
	      contains: function contains() {},
	      setAttribute: function setAttribute(key, value) {
	        virtualReference.attributes[key] = value;
	      },
	      getAttribute: function getAttribute(key) {
	        return virtualReference.attributes[key];
	      },
	      removeAttribute: function removeAttribute(key) {
	        delete virtualReference.attributes[key];
	      },
	      hasAttribute: function hasAttribute(key) {
	        return key in virtualReference.attributes;
	      },
	      addEventListener: function addEventListener() {},
	      removeEventListener: function removeEventListener() {},
	      classList: {
	        classNames: {},
	        add: function add(key) {
	          virtualReference.classList.classNames[key] = true;
	        },
	        remove: function remove(key) {
	          delete virtualReference.classList.classNames[key];
	        },
	        contains: function contains(key) {
	          return key in virtualReference.classList.classNames;
	        }
	      }
	    };
	
	    for (var key in polyfills) {
	      virtualReference[key] = polyfills[key];
	    }
	  }
	
	  /**
	   * Determines if a value is a "bare" virtual element (before mutations done
	   * by `polyfillElementPrototypeProperties()`). JSDOM elements show up as
	   * [object Object], we can check if the value is "element-like" if it has
	   * `addEventListener`
	   */
	
	  function isBareVirtualElement(value) {
	    return {}.toString.call(value) === '[object Object]' && !value.addEventListener;
	  }
	  /**
	   * Determines if the value is a reference element
	   */
	
	  function isReferenceElement(value) {
	    return !!value._tippy && !matches.call(value, POPPER_SELECTOR);
	  }
	  /**
	   * Safe .hasOwnProperty check, for prototype-less objects
	   */
	
	  function hasOwnProperty(obj, key) {
	    return {}.hasOwnProperty.call(obj, key);
	  }
	  /**
	   * Returns an array of elements based on the value
	   */
	
	  function getArrayOfElements(value) {
	    if (isSingular(value)) {
	      // TODO: VirtualReference is not compatible to type Element
	      return [value];
	    }
	
	    if (value instanceof NodeList) {
	      return arrayFrom(value);
	    }
	
	    if (Array.isArray(value)) {
	      return value;
	    }
	
	    try {
	      return arrayFrom(document.querySelectorAll(value));
	    } catch (e) {
	      return [];
	    }
	  }
	  /**
	   * Returns a value at a given index depending on if it's an array or number
	   */
	
	  function getValue(value, index, defaultValue) {
	    if (Array.isArray(value)) {
	      var v = value[index];
	      return v == null ? defaultValue : v;
	    }
	
	    return value;
	  }
	  /**
	   * Debounce utility. To avoid bloating bundle size, we're only passing 1
	   * argument here, a more generic function would pass all arguments. Only
	   * `onMouseMove` uses this which takes the event object for now.
	   */
	
	  function debounce(fn, ms) {
	    // Avoid wrapping in `setTimeout` if ms is 0 anyway
	    if (ms === 0) {
	      return fn;
	    }
	
	    var timeout;
	    return function (arg) {
	      clearTimeout(timeout);
	      timeout = setTimeout(function () {
	        fn(arg);
	      }, ms);
	    };
	  }
	  /**
	   * Prevents errors from being thrown while accessing nested modifier objects
	   * in `popperOptions`
	   */
	
	  function getModifier(obj, key) {
	    return obj && obj.modifiers && obj.modifiers[key];
	  }
	  /**
	   * Determines if an array or string includes a value
	   */
	
	  function includes(a, b) {
	    return a.indexOf(b) > -1;
	  }
	  /**
	   * Determines if the value is a real element
	   */
	
	  function isRealElement(value) {
	    return value instanceof Element;
	  }
	  /**
	   * Determines if the value is singular-like
	   */
	
	  function isSingular(value) {
	    return !!(value && hasOwnProperty(value, 'isVirtual')) || isRealElement(value);
	  }
	  /**
	   * Firefox extensions don't allow setting .innerHTML directly, this will trick it
	   */
	
	  function innerHTML() {
	    return 'innerHTML';
	  }
	  /**
	   * Evaluates a function if one, or returns the value
	   */
	
	  function invokeWithArgsOrReturn(value, args) {
	    return typeof value === 'function' ? value.apply(null, args) : value;
	  }
	  /**
	   * Sets a popperInstance `flip` modifier's enabled state
	   */
	
	  function setFlipModifierEnabled(modifiers, value) {
	    modifiers.filter(function (m) {
	      return m.name === 'flip';
	    })[0].enabled = value;
	  }
	  /**
	   * Determines if an element can receive focus
	   * Always returns true for virtual objects
	   */
	
	  function canReceiveFocus(element) {
	    return isRealElement(element) ? matches.call(element, 'a[href],area[href],button,details,input,textarea,select,iframe,[tabindex]') && !element.hasAttribute('disabled') : true;
	  }
	  /**
	   * Returns a new `div` element
	   */
	
	  function div() {
	    return document.createElement('div');
	  }
	  /**
	   * Applies a transition duration to a list of elements
	   */
	
	  function setTransitionDuration(els, value) {
	    els.forEach(function (el) {
	      if (el) {
	        el.style.transitionDuration = "".concat(value, "ms");
	      }
	    });
	  }
	  /**
	   * Sets the visibility state to elements so they can begin to transition
	   */
	
	  function setVisibilityState(els, state) {
	    els.forEach(function (el) {
	      if (el) {
	        el.setAttribute('data-state', state);
	      }
	    });
	  }
	  /**
	   * Evaluates the props object by merging data attributes and
	   * disabling conflicting options where necessary
	   */
	
	  function evaluateProps(reference, props) {
	    var out = _extends({}, props, {
	      content: invokeWithArgsOrReturn(props.content, [reference])
	    }, props.ignoreAttributes ? {} : getDataAttributeOptions(reference));
	
	    if (out.arrow || isUCBrowser) {
	      out.animateFill = false;
	    }
	
	    return out;
	  }
	  /**
	   * Validates an object of options with the valid default props object
	   */
	
	  function validateOptions(options, defaultProps) {
	    Object.keys(options).forEach(function (option) {
	      if (!hasOwnProperty(defaultProps, option)) {
	        throw new Error("[tippy]: `".concat(option, "` is not a valid option"));
	      }
	    });
	  }
	
	  /**
	   * Sets the innerHTML of an element
	   */
	
	  function setInnerHTML(element, html) {
	    element[innerHTML()] = isRealElement(html) ? html[innerHTML()] : html;
	  }
	  /**
	   * Sets the content of a tooltip
	   */
	
	  function setContent(contentEl, props) {
	    if (isRealElement(props.content)) {
	      setInnerHTML(contentEl, '');
	      contentEl.appendChild(props.content);
	    } else if (typeof props.content !== 'function') {
	      var key = props.allowHTML ? 'innerHTML' : 'textContent';
	      contentEl[key] = props.content;
	    }
	  }
	  /**
	   * Returns the child elements of a popper element
	   */
	
	  function getChildren(popper) {
	    return {
	      tooltip: popper.querySelector(TOOLTIP_SELECTOR),
	      backdrop: popper.querySelector(BACKDROP_SELECTOR),
	      content: popper.querySelector(CONTENT_SELECTOR),
	      arrow: popper.querySelector(ARROW_SELECTOR) || popper.querySelector(ROUND_ARROW_SELECTOR)
	    };
	  }
	  /**
	   * Adds `data-inertia` attribute
	   */
	
	  function addInertia(tooltip) {
	    tooltip.setAttribute('data-inertia', '');
	  }
	  /**
	   * Removes `data-inertia` attribute
	   */
	
	  function removeInertia(tooltip) {
	    tooltip.removeAttribute('data-inertia');
	  }
	  /**
	   * Creates an arrow element and returns it
	   */
	
	  function createArrowElement(arrowType) {
	    var arrow = div();
	
	    if (arrowType === 'round') {
	      arrow.className = ROUND_ARROW_CLASS;
	      setInnerHTML(arrow, '<svg viewBox="0 0 18 7" xmlns="http://www.w3.org/2000/svg"><path d="M0 7s2.021-.015 5.253-4.218C6.584 1.051 7.797.007 9 0c1.203-.007 2.416 1.035 3.761 2.782C16.012 7.005 18 7 18 7H0z"/></svg>');
	    } else {
	      arrow.className = ARROW_CLASS;
	    }
	
	    return arrow;
	  }
	  /**
	   * Creates a backdrop element and returns it
	   */
	
	  function createBackdropElement() {
	    var backdrop = div();
	    backdrop.className = BACKDROP_CLASS;
	    backdrop.setAttribute('data-state', 'hidden');
	    return backdrop;
	  }
	  /**
	   * Adds interactive-related attributes
	   */
	
	  function addInteractive(popper, tooltip) {
	    popper.setAttribute('tabindex', '-1');
	    tooltip.setAttribute('data-interactive', '');
	  }
	  /**
	   * Removes interactive-related attributes
	   */
	
	  function removeInteractive(popper, tooltip) {
	    popper.removeAttribute('tabindex');
	    tooltip.removeAttribute('data-interactive');
	  }
	  /**
	   * Add/remove transitionend listener from tooltip
	   */
	
	  function updateTransitionEndListener(tooltip, action, listener) {
	    // UC Browser hasn't adopted the `transitionend` event despite supporting
	    // unprefixed transitions...
	    var eventName = isUCBrowser && document.body.style.webkitTransition !== undefined ? 'webkitTransitionEnd' : 'transitionend';
	    tooltip[action + 'EventListener'](eventName, listener);
	  }
	  /**
	   * Returns the popper's placement, ignoring shifting (top-start, etc)
	   */
	
	  function getBasicPlacement(popper) {
	    var fullPlacement = popper.getAttribute(PLACEMENT_ATTRIBUTE);
	    return fullPlacement ? fullPlacement.split('-')[0] : '';
	  }
	  /**
	   * Triggers reflow
	   */
	
	  function reflow(popper) {
	    void popper.offsetHeight;
	  }
	  /**
	   * Adds/removes theme from tooltip's classList
	   */
	
	  function updateTheme(tooltip, action, theme) {
	    theme.split(' ').forEach(function (themeName) {
	      tooltip.classList[action](themeName + '-theme');
	    });
	  }
	  /**
	   * Constructs the popper element and returns it
	   */
	
	  function createPopperElement(id, props) {
	    var popper = div();
	    popper.className = POPPER_CLASS;
	    popper.id = "tippy-".concat(id);
	    popper.style.zIndex = '' + props.zIndex;
	    popper.style.position = 'absolute';
	    popper.style.top = '0';
	    popper.style.left = '0';
	
	    if (props.role) {
	      popper.setAttribute('role', props.role);
	    }
	
	    var tooltip = div();
	    tooltip.className = TOOLTIP_CLASS;
	    tooltip.style.maxWidth = props.maxWidth + (typeof props.maxWidth === 'number' ? 'px' : '');
	    tooltip.setAttribute('data-size', props.size);
	    tooltip.setAttribute('data-animation', props.animation);
	    tooltip.setAttribute('data-state', 'hidden');
	    updateTheme(tooltip, 'add', props.theme);
	    var content = div();
	    content.className = CONTENT_CLASS;
	    content.setAttribute('data-state', 'hidden');
	
	    if (props.interactive) {
	      addInteractive(popper, tooltip);
	    }
	
	    if (props.arrow) {
	      tooltip.appendChild(createArrowElement(props.arrowType));
	    }
	
	    if (props.animateFill) {
	      tooltip.appendChild(createBackdropElement());
	      tooltip.setAttribute('data-animatefill', '');
	    }
	
	    if (props.inertia) {
	      addInertia(tooltip);
	    }
	
	    setContent(content, props);
	    tooltip.appendChild(content);
	    popper.appendChild(tooltip);
	    return popper;
	  }
	  /**
	   * Updates the popper element based on the new props
	   */
	
	  function updatePopperElement(popper, prevProps, nextProps) {
	    var _getChildren = getChildren(popper),
	        tooltip = _getChildren.tooltip,
	        content = _getChildren.content,
	        backdrop = _getChildren.backdrop,
	        arrow = _getChildren.arrow;
	
	    popper.style.zIndex = '' + nextProps.zIndex;
	    tooltip.setAttribute('data-size', nextProps.size);
	    tooltip.setAttribute('data-animation', nextProps.animation);
	    tooltip.style.maxWidth = nextProps.maxWidth + (typeof nextProps.maxWidth === 'number' ? 'px' : '');
	
	    if (nextProps.role) {
	      popper.setAttribute('role', nextProps.role);
	    } else {
	      popper.removeAttribute('role');
	    }
	
	    if (prevProps.content !== nextProps.content) {
	      setContent(content, nextProps);
	    } // animateFill
	
	
	    if (!prevProps.animateFill && nextProps.animateFill) {
	      tooltip.appendChild(createBackdropElement());
	      tooltip.setAttribute('data-animatefill', '');
	    } else if (prevProps.animateFill && !nextProps.animateFill) {
	      tooltip.removeChild(backdrop);
	      tooltip.removeAttribute('data-animatefill');
	    } // arrow
	
	
	    if (!prevProps.arrow && nextProps.arrow) {
	      tooltip.appendChild(createArrowElement(nextProps.arrowType));
	    } else if (prevProps.arrow && !nextProps.arrow) {
	      tooltip.removeChild(arrow);
	    } // arrowType
	
	
	    if (prevProps.arrow && nextProps.arrow && prevProps.arrowType !== nextProps.arrowType) {
	      tooltip.replaceChild(createArrowElement(nextProps.arrowType), arrow);
	    } // interactive
	
	
	    if (!prevProps.interactive && nextProps.interactive) {
	      addInteractive(popper, tooltip);
	    } else if (prevProps.interactive && !nextProps.interactive) {
	      removeInteractive(popper, tooltip);
	    } // inertia
	
	
	    if (!prevProps.inertia && nextProps.inertia) {
	      addInertia(tooltip);
	    } else if (prevProps.inertia && !nextProps.inertia) {
	      removeInertia(tooltip);
	    } // theme
	
	
	    if (prevProps.theme !== nextProps.theme) {
	      updateTheme(tooltip, 'remove', prevProps.theme);
	      updateTheme(tooltip, 'add', nextProps.theme);
	    }
	  }
	  /**
	   * Hides all visible poppers on the document
	   */
	
	  function hideAll() {
	    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        excludedReferenceOrInstance = _ref.exclude,
	        duration = _ref.duration;
	
	    arrayFrom(document.querySelectorAll(POPPER_SELECTOR)).forEach(function (popper) {
	      var instance = popper._tippy;
	
	      if (instance) {
	        var isExcluded = false;
	
	        if (excludedReferenceOrInstance) {
	          isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : popper === excludedReferenceOrInstance.popper;
	        }
	
	        if (!isExcluded) {
	          instance.hide(duration);
	        }
	      }
	    });
	  }
	  /**
	   * Determines if the mouse cursor is outside of the popper's interactive border
	   * region
	   */
	
	  function isCursorOutsideInteractiveBorder(popperPlacement, popperRect, event, props) {
	    if (!popperPlacement) {
	      return true;
	    }
	
	    var x = event.clientX,
	        y = event.clientY;
	    var interactiveBorder = props.interactiveBorder,
	        distance = props.distance;
	    var exceedsTop = popperRect.top - y > (popperPlacement === 'top' ? interactiveBorder + distance : interactiveBorder);
	    var exceedsBottom = y - popperRect.bottom > (popperPlacement === 'bottom' ? interactiveBorder + distance : interactiveBorder);
	    var exceedsLeft = popperRect.left - x > (popperPlacement === 'left' ? interactiveBorder + distance : interactiveBorder);
	    var exceedsRight = x - popperRect.right > (popperPlacement === 'right' ? interactiveBorder + distance : interactiveBorder);
	    return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
	  }
	  /**
	   * Returns the distance offset, taking into account the default offset due to
	   * the transform: translate() rule (10px) in CSS
	   */
	
	  function getOffsetDistanceInPx(distance) {
	    return -(distance - 10) + 'px';
	  }
	
	  var idCounter = 1; // Workaround for IE11's lack of new MouseEvent constructor
	
	  var mouseMoveListeners = [];
	  /**
	   * Creates and returns a Tippy object. We're using a closure pattern instead of
	   * a class so that the exposed object API is clean without private members
	   * prefixed with `_`.
	   */
	
	  function createTippy(reference, collectionProps) {
	    var props = evaluateProps(reference, collectionProps); // If the reference shouldn't have multiple tippys, return null early
	
	    if (!props.multiple && reference._tippy) {
	      return null;
	    }
	    /* ======================= 🔒 Private members 🔒 ======================= */
	
	
	    var lastTriggerEventType;
	    var lastMouseMoveEvent;
	    var showTimeoutId;
	    var hideTimeoutId;
	    var scheduleHideAnimationFrameId;
	    var isScheduledToShow = false;
	    var isBeingDestroyed = false;
	    var previousPlacement;
	    var wasVisibleDuringPreviousUpdate = false;
	    var hasMountCallbackRun = false;
	    var currentMountCallback;
	    var currentTransitionEndListener;
	    var listeners = [];
	    var currentComputedPadding;
	    var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
	    /* ======================= 🔑 Public members 🔑 ======================= */
	
	    var id = idCounter++;
	    var popper = createPopperElement(id, props);
	    var popperChildren = getChildren(popper);
	    var popperInstance = null;
	    var state = {
	      // Is the instance currently enabled?
	      isEnabled: true,
	      // Is the tippy currently showing and not transitioning out?
	      isVisible: false,
	      // Has the instance been destroyed?
	      isDestroyed: false,
	      // Is the tippy currently mounted to the DOM?
	      isMounted: false,
	      // Has the tippy finished transitioning in?
	      isShown: false
	    };
	    var instance = {
	      // properties
	      id: id,
	      reference: reference,
	      popper: popper,
	      popperChildren: popperChildren,
	      popperInstance: popperInstance,
	      props: props,
	      state: state,
	      // methods
	      clearDelayTimeouts: clearDelayTimeouts,
	      set: set,
	      setContent: setContent,
	      show: show,
	      hide: hide,
	      enable: enable,
	      disable: disable,
	      destroy: destroy
	      /* ==================== Initial instance mutations =================== */
	
	    };
	    reference._tippy = instance;
	    popper._tippy = instance;
	    addTriggersToReference();
	
	    if (!props.lazy) {
	      createPopperInstance();
	    }
	
	    if (props.showOnInit) {
	      scheduleShow();
	    } // Ensure the event listeners target can receive focus
	
	
	    if (props.a11y && !props.target && !canReceiveFocus(getEventListenersTarget())) {
	      getEventListenersTarget().setAttribute('tabindex', '0');
	    } // Prevent a tippy with a delay from hiding if the cursor left then returned
	    // before it started hiding
	
	
	    popper.addEventListener('mouseenter', function (event) {
	      if (instance.props.interactive && instance.state.isVisible && lastTriggerEventType === 'mouseenter') {
	        // We don't want props.onTrigger() to be called here, since the `event`
	        // object is not related to the reference element
	        scheduleShow(event, true);
	      }
	    });
	    popper.addEventListener('mouseleave', function () {
	      if (instance.props.interactive && lastTriggerEventType === 'mouseenter') {
	        document.addEventListener('mousemove', debouncedOnMouseMove);
	      }
	    });
	    return instance;
	    /* ======================= 🔒 Private methods 🔒 ======================= */
	
	    /**
	     * Removes the follow cursor listener
	     */
	
	    function removeFollowCursorListener() {
	      document.removeEventListener('mousemove', positionVirtualReferenceNearCursor);
	    }
	    /**
	     * Cleans up interactive mouse listeners
	     */
	
	
	    function cleanupInteractiveMouseListeners() {
	      document.body.removeEventListener('mouseleave', scheduleHide);
	      document.removeEventListener('mousemove', debouncedOnMouseMove);
	      mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
	        return listener !== debouncedOnMouseMove;
	      });
	    }
	    /**
	     * Returns correct target used for event listeners
	     */
	
	
	    function getEventListenersTarget() {
	      return instance.props.triggerTarget || reference;
	    }
	    /**
	     * Adds the document click event listener for the instance
	     */
	
	
	    function addDocumentClickListener() {
	      document.addEventListener('click', onDocumentClick, true);
	    }
	    /**
	     * Removes the document click event listener for the instance
	     */
	
	
	    function removeDocumentClickListener() {
	      document.removeEventListener('click', onDocumentClick, true);
	    }
	    /**
	     * Returns transitionable inner elements used in show/hide methods
	     */
	
	
	    function getTransitionableElements() {
	      return [instance.popperChildren.tooltip, instance.popperChildren.backdrop, instance.popperChildren.content];
	    }
	    /**
	     * Determines if the instance is in `followCursor` mode.
	     * NOTE: in v5, touch devices will use `initial` behavior no matter the value.
	     */
	
	
	    function getIsInLooseFollowCursorMode() {
	      var followCursor = instance.props.followCursor;
	      return followCursor && lastTriggerEventType !== 'focus' || isUsingTouch && followCursor === 'initial';
	    }
	    /**
	     * Updates the tooltip's position on each animation frame
	     */
	
	
	    function makeSticky() {
	      setTransitionDuration([popper], isIE ? 0 : instance.props.updateDuration);
	      var prevRefRect = reference.getBoundingClientRect();
	
	      function updatePosition() {
	        var currentRefRect = reference.getBoundingClientRect(); // Only schedule an update if the reference rect has changed
	
	        if (prevRefRect.top !== currentRefRect.top || prevRefRect.right !== currentRefRect.right || prevRefRect.bottom !== currentRefRect.bottom || prevRefRect.left !== currentRefRect.left) {
	          instance.popperInstance.scheduleUpdate();
	        }
	
	        prevRefRect = currentRefRect;
	
	        if (instance.state.isMounted) {
	          requestAnimationFrame(updatePosition);
	        }
	      }
	
	      updatePosition();
	    }
	    /**
	     * Invokes a callback once the tooltip has fully transitioned out
	     */
	
	
	    function onTransitionedOut(duration, callback) {
	      onTransitionEnd(duration, function () {
	        if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
	          callback();
	        }
	      });
	    }
	    /**
	     * Invokes a callback once the tooltip has fully transitioned in
	     */
	
	
	    function onTransitionedIn(duration, callback) {
	      onTransitionEnd(duration, callback);
	    }
	    /**
	     * Invokes a callback once the tooltip's CSS transition ends
	     */
	
	
	    function onTransitionEnd(duration, callback) {
	      var tooltip = instance.popperChildren.tooltip;
	      /**
	       * Listener added as the `transitionend` handler
	       */
	
	      function listener(event) {
	        if (event.target === tooltip) {
	          updateTransitionEndListener(tooltip, 'remove', listener);
	          callback();
	        }
	      } // Make callback synchronous if duration is 0
	      // `transitionend` won't fire otherwise
	
	
	      if (duration === 0) {
	        return callback();
	      }
	
	      updateTransitionEndListener(tooltip, 'remove', currentTransitionEndListener);
	      updateTransitionEndListener(tooltip, 'add', listener);
	      currentTransitionEndListener = listener;
	    }
	    /**
	     * Adds an event listener to the reference and stores it in `listeners`
	     */
	
	
	    function on(eventType, handler) {
	      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	      getEventListenersTarget().addEventListener(eventType, handler, options);
	      listeners.push({
	        eventType: eventType,
	        handler: handler,
	        options: options
	      });
	    }
	    /**
	     * Adds event listeners to the reference based on the `trigger` prop
	     */
	
	
	    function addTriggersToReference() {
	      if (instance.props.touchHold && !instance.props.target) {
	        on('touchstart', onTrigger, PASSIVE);
	        on('touchend', onMouseLeave, PASSIVE);
	      }
	
	      instance.props.trigger.trim().split(' ').forEach(function (eventType) {
	        if (eventType === 'manual') {
	          return;
	        } // Non-delegates
	
	
	        if (!instance.props.target) {
	          on(eventType, onTrigger);
	
	          switch (eventType) {
	            case 'mouseenter':
	              on('mouseleave', onMouseLeave);
	              break;
	
	            case 'focus':
	              on(isIE ? 'focusout' : 'blur', onBlur);
	              break;
	          }
	        } else {
	          // Delegates
	          switch (eventType) {
	            case 'mouseenter':
	              on('mouseover', onDelegateShow);
	              on('mouseout', onDelegateHide);
	              break;
	
	            case 'focus':
	              on('focusin', onDelegateShow);
	              on('focusout', onDelegateHide);
	              break;
	
	            case 'click':
	              on(eventType, onDelegateShow);
	              break;
	          }
	        }
	      });
	    }
	    /**
	     * Removes event listeners from the reference
	     */
	
	
	    function removeTriggersFromReference() {
	      listeners.forEach(function (_ref) {
	        var eventType = _ref.eventType,
	            handler = _ref.handler,
	            options = _ref.options;
	        getEventListenersTarget().removeEventListener(eventType, handler, options);
	      });
	      listeners = [];
	    }
	    /**
	     * Positions the virtual reference near the cursor
	     */
	
	
	    function positionVirtualReferenceNearCursor(event) {
	      var _lastMouseMoveEvent = lastMouseMoveEvent = event,
	          x = _lastMouseMoveEvent.clientX,
	          y = _lastMouseMoveEvent.clientY; // Gets set once popperInstance `onCreate` has been called
	
	
	      if (!currentComputedPadding) {
	        return;
	      } // If the instance is interactive, avoid updating the position unless it's
	      // over the reference element
	
	
	      var isCursorOverReference = closestCallback(event.target, function (el) {
	        return el === reference;
	      });
	      var rect = reference.getBoundingClientRect();
	      var followCursor = instance.props.followCursor;
	      var isHorizontal = followCursor === 'horizontal';
	      var isVertical = followCursor === 'vertical'; // The virtual reference needs some size to prevent itself from overflowing
	
	      var isVerticalPlacement = includes(['top', 'bottom'], getBasicPlacement(popper));
	      var fullPlacement = popper.getAttribute(PLACEMENT_ATTRIBUTE);
	      var isVariation = fullPlacement ? !!fullPlacement.split('-')[1] : false;
	      var size = isVerticalPlacement ? popper.offsetWidth : popper.offsetHeight;
	      var halfSize = size / 2;
	      var verticalIncrease = isVerticalPlacement ? 0 : isVariation ? size : halfSize;
	      var horizontalIncrease = isVerticalPlacement ? isVariation ? size : halfSize : 0;
	
	      if (isCursorOverReference || !instance.props.interactive) {
	        instance.popperInstance.reference = _extends({}, instance.popperInstance.reference, {
	          // This will exist in next Popper.js feature release to fix #532
	          // @ts-ignore
	          referenceNode: reference,
	          // These `client` values don't get used by Popper.js if they are 0
	          clientWidth: 0,
	          clientHeight: 0,
	          getBoundingClientRect: function getBoundingClientRect() {
	            return {
	              width: isVerticalPlacement ? size : 0,
	              height: isVerticalPlacement ? 0 : size,
	              top: (isHorizontal ? rect.top : y) - verticalIncrease,
	              bottom: (isHorizontal ? rect.bottom : y) + verticalIncrease,
	              left: (isVertical ? rect.left : x) - horizontalIncrease,
	              right: (isVertical ? rect.right : x) + horizontalIncrease
	            };
	          }
	        });
	        instance.popperInstance.update();
	      }
	
	      if (followCursor === 'initial' && instance.state.isVisible) {
	        removeFollowCursorListener();
	      }
	    }
	    /**
	     * Creates the tippy instance for a delegate when it's been triggered
	     */
	
	
	    function createDelegateChildTippy(event) {
	      if (event) {
	        var targetEl = closest(event.target, instance.props.target);
	
	        if (targetEl && !targetEl._tippy) {
	          createTippy(targetEl, _extends({}, instance.props, {
	            content: invokeWithArgsOrReturn(collectionProps.content, [targetEl]),
	            appendTo: collectionProps.appendTo,
	            target: '',
	            showOnInit: true
	          }));
	        }
	      }
	    }
	    /**
	     * Event listener invoked upon trigger
	     */
	
	
	    function onTrigger(event) {
	      if (!instance.state.isEnabled || isEventListenerStopped(event)) {
	        return;
	      }
	
	      if (!instance.state.isVisible) {
	        lastTriggerEventType = event.type;
	
	        if (event instanceof MouseEvent) {
	          lastMouseMoveEvent = event; // If scrolling, `mouseenter` events can be fired if the cursor lands
	          // over a new target, but `mousemove` events don't get fired. This
	          // causes interactive tooltips to get stuck open until the cursor is
	          // moved
	
	          mouseMoveListeners.forEach(function (listener) {
	            return listener(event);
	          });
	        }
	      } // Toggle show/hide when clicking click-triggered tooltips
	
	
	      if (event.type === 'click' && instance.props.hideOnClick !== false && instance.state.isVisible) {
	        scheduleHide();
	      } else {
	        scheduleShow(event);
	      }
	    }
	    /**
	     * Event listener used for interactive tooltips to detect when they should
	     * hide
	     */
	
	
	    function onMouseMove(event) {
	      var isCursorOverPopper = closest(event.target, POPPER_SELECTOR) === popper;
	      var isCursorOverReference = closestCallback(event.target, function (el) {
	        return el === reference;
	      });
	
	      if (isCursorOverPopper || isCursorOverReference) {
	        return;
	      }
	
	      if (isCursorOutsideInteractiveBorder(getBasicPlacement(popper), popper.getBoundingClientRect(), event, instance.props)) {
	        cleanupInteractiveMouseListeners();
	        scheduleHide();
	      }
	    }
	    /**
	     * Event listener invoked upon mouseleave
	     */
	
	
	    function onMouseLeave(event) {
	      if (isEventListenerStopped(event)) {
	        return;
	      }
	
	      if (instance.props.interactive) {
	        document.body.addEventListener('mouseleave', scheduleHide);
	        document.addEventListener('mousemove', debouncedOnMouseMove);
	        mouseMoveListeners.push(debouncedOnMouseMove);
	        return;
	      }
	
	      scheduleHide();
	    }
	    /**
	     * Event listener invoked upon blur
	     */
	
	
	    function onBlur(event) {
	      if (event.target !== getEventListenersTarget()) {
	        return;
	      }
	
	      if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
	        return;
	      }
	
	      scheduleHide();
	    }
	    /**
	     * Event listener invoked when a child target is triggered
	     */
	
	
	    function onDelegateShow(event) {
	      if (closest(event.target, instance.props.target)) {
	        scheduleShow(event);
	      }
	    }
	    /**
	     * Event listener invoked when a child target should hide
	     */
	
	
	    function onDelegateHide(event) {
	      if (closest(event.target, instance.props.target)) {
	        scheduleHide();
	      }
	    }
	    /**
	     * Determines if an event listener should stop further execution due to the
	     * `touchHold` option
	     */
	
	
	    function isEventListenerStopped(event) {
	      var supportsTouch = 'ontouchstart' in window;
	      var isTouchEvent = includes(event.type, 'touch');
	      var touchHold = instance.props.touchHold;
	      return supportsTouch && isUsingTouch && touchHold && !isTouchEvent || isUsingTouch && !touchHold && isTouchEvent;
	    }
	    /**
	     * Runs the mount callback
	     */
	
	
	    function runMountCallback() {
	      if (!hasMountCallbackRun && currentMountCallback) {
	        hasMountCallbackRun = true;
	        reflow(popper);
	        currentMountCallback();
	      }
	    }
	    /**
	     * Creates the popper instance for the instance
	     */
	
	
	    function createPopperInstance() {
	      var popperOptions = instance.props.popperOptions;
	      var _instance$popperChild = instance.popperChildren,
	          tooltip = _instance$popperChild.tooltip,
	          arrow = _instance$popperChild.arrow;
	      var preventOverflowModifier = getModifier(popperOptions, 'preventOverflow');
	
	      function applyMutations(data) {
	        if (instance.props.flip && !instance.props.flipOnUpdate) {
	          if (data.flipped) {
	            instance.popperInstance.options.placement = data.placement;
	          }
	
	          setFlipModifierEnabled(instance.popperInstance.modifiers, false);
	        } // Apply all of the popper's attributes to the tootip node as well.
	        // Allows users to avoid using the .tippy-popper selector for themes.
	
	
	        tooltip.setAttribute(PLACEMENT_ATTRIBUTE, data.placement);
	
	        if (data.attributes[OUT_OF_BOUNDARIES_ATTRIBUTE] !== false) {
	          tooltip.setAttribute(OUT_OF_BOUNDARIES_ATTRIBUTE, '');
	        } else {
	          tooltip.removeAttribute(OUT_OF_BOUNDARIES_ATTRIBUTE);
	        } // Prevents a transition when changing placements (while tippy is visible)
	        // for scroll/resize updates
	
	
	        if (previousPlacement && previousPlacement !== data.placement && wasVisibleDuringPreviousUpdate) {
	          tooltip.style.transition = 'none';
	          requestAnimationFrame(function () {
	            tooltip.style.transition = '';
	          });
	        }
	
	        previousPlacement = data.placement;
	        wasVisibleDuringPreviousUpdate = instance.state.isVisible;
	        var basicPlacement = getBasicPlacement(popper);
	        var styles = tooltip.style; // Account for the `distance` offset
	
	        styles.top = styles.bottom = styles.left = styles.right = '';
	        styles[basicPlacement] = getOffsetDistanceInPx(instance.props.distance);
	        var padding = preventOverflowModifier && preventOverflowModifier.padding !== undefined ? preventOverflowModifier.padding : PADDING;
	        var isPaddingNumber = typeof padding === 'number';
	
	        var computedPadding = _extends({
	          top: isPaddingNumber ? padding : padding.top,
	          bottom: isPaddingNumber ? padding : padding.bottom,
	          left: isPaddingNumber ? padding : padding.left,
	          right: isPaddingNumber ? padding : padding.right
	        }, !isPaddingNumber && padding);
	
	        computedPadding[basicPlacement] = isPaddingNumber ? padding + instance.props.distance : (padding[basicPlacement] || 0) + instance.props.distance;
	        instance.popperInstance.modifiers.filter(function (m) {
	          return m.name === 'preventOverflow';
	        })[0].padding = computedPadding;
	        currentComputedPadding = computedPadding;
	      }
	
	      var config = _extends({
	        eventsEnabled: false,
	        placement: instance.props.placement
	      }, popperOptions, {
	        modifiers: _extends({}, popperOptions ? popperOptions.modifiers : {}, {
	          preventOverflow: _extends({
	            boundariesElement: instance.props.boundary,
	            padding: PADDING
	          }, preventOverflowModifier),
	          arrow: _extends({
	            element: arrow,
	            enabled: !!arrow
	          }, getModifier(popperOptions, 'arrow')),
	          flip: _extends({
	            enabled: instance.props.flip,
	            // The tooltip is offset by 10px from the popper in CSS,
	            // we need to account for its distance
	            padding: instance.props.distance + PADDING,
	            behavior: instance.props.flipBehavior
	          }, getModifier(popperOptions, 'flip')),
	          offset: _extends({
	            offset: instance.props.offset
	          }, getModifier(popperOptions, 'offset'))
	        }),
	        onCreate: function onCreate(data) {
	          applyMutations(data);
	          runMountCallback();
	
	          if (popperOptions && popperOptions.onCreate) {
	            popperOptions.onCreate(data);
	          }
	        },
	        onUpdate: function onUpdate(data) {
	          applyMutations(data);
	          runMountCallback();
	
	          if (popperOptions && popperOptions.onUpdate) {
	            popperOptions.onUpdate(data);
	          }
	        }
	      });
	
	      instance.popperInstance = new Popper(reference, popper, config);
	    }
	    /**
	     * Mounts the tooltip to the DOM
	     */
	
	
	    function mount() {
	      hasMountCallbackRun = false;
	      var isInLooseFollowCursorMode = getIsInLooseFollowCursorMode();
	
	      if (instance.popperInstance) {
	        setFlipModifierEnabled(instance.popperInstance.modifiers, instance.props.flip);
	
	        if (!isInLooseFollowCursorMode) {
	          instance.popperInstance.reference = reference;
	          instance.popperInstance.enableEventListeners();
	        }
	
	        instance.popperInstance.scheduleUpdate();
	      } else {
	        createPopperInstance();
	
	        if (!isInLooseFollowCursorMode) {
	          instance.popperInstance.enableEventListeners();
	        }
	      }
	
	      var appendTo = instance.props.appendTo;
	      var parentNode = appendTo === 'parent' ? reference.parentNode : invokeWithArgsOrReturn(appendTo, [reference]);
	
	      if (!parentNode.contains(popper)) {
	        parentNode.appendChild(popper);
	        instance.props.onMount(instance);
	        instance.state.isMounted = true;
	      }
	    }
	    /**
	     * Setup before show() is invoked (delays, etc.)
	     */
	
	
	    function scheduleShow(event, shouldAvoidCallingOnTrigger) {
	      clearDelayTimeouts();
	
	      if (instance.state.isVisible) {
	        return;
	      } // Is a delegate, create an instance for the child target
	
	
	      if (instance.props.target) {
	        return createDelegateChildTippy(event);
	      }
	
	      isScheduledToShow = true;
	
	      if (event && !shouldAvoidCallingOnTrigger) {
	        instance.props.onTrigger(instance, event);
	      }
	
	      if (instance.props.wait) {
	        return instance.props.wait(instance, event);
	      } // If the tooltip has a delay, we need to be listening to the mousemove as
	      // soon as the trigger event is fired, so that it's in the correct position
	      // upon mount.
	      // Edge case: if the tooltip is still mounted, but then scheduleShow() is
	      // called, it causes a jump.
	
	
	      if (getIsInLooseFollowCursorMode() && !instance.state.isMounted) {
	        if (!instance.popperInstance) {
	          createPopperInstance();
	        }
	
	        document.addEventListener('mousemove', positionVirtualReferenceNearCursor);
	      }
	
	      addDocumentClickListener();
	      var delay = getValue(instance.props.delay, 0, defaultProps.delay);
	
	      if (delay) {
	        showTimeoutId = setTimeout(function () {
	          show();
	        }, delay);
	      } else {
	        show();
	      }
	    }
	    /**
	     * Setup before hide() is invoked (delays, etc.)
	     */
	
	
	    function scheduleHide() {
	      clearDelayTimeouts();
	
	      if (!instance.state.isVisible) {
	        removeFollowCursorListener();
	        removeDocumentClickListener();
	        return;
	      }
	
	      isScheduledToShow = false;
	      var delay = getValue(instance.props.delay, 1, defaultProps.delay);
	
	      if (delay) {
	        hideTimeoutId = setTimeout(function () {
	          if (instance.state.isVisible) {
	            hide();
	          }
	        }, delay);
	      } else {
	        // Fixes a `transitionend` problem when it fires 1 frame too
	        // late sometimes, we don't want hide() to be called.
	        scheduleHideAnimationFrameId = requestAnimationFrame(function () {
	          hide();
	        });
	      }
	    }
	    /**
	     * Listener to handle clicks on the document to determine if the
	     * instance should hide
	     */
	
	
	    function onDocumentClick(event) {
	      // Clicked on interactive popper
	      if (instance.props.interactive && popper.contains(event.target)) {
	        return;
	      } // Clicked on the event listeners target
	
	
	      if (getEventListenersTarget().contains(event.target)) {
	        if (isUsingTouch) {
	          return;
	        }
	
	        if (instance.state.isVisible && includes(instance.props.trigger, 'click')) {
	          return;
	        }
	      }
	
	      if (instance.props.hideOnClick === true) {
	        clearDelayTimeouts();
	        hide();
	      }
	    }
	    /* ======================= 🔑 Public methods 🔑 ======================= */
	
	    /**
	     * Enables the instance to allow it to show or hide
	     */
	
	
	    function enable() {
	      instance.state.isEnabled = true;
	    }
	    /**
	     * Disables the instance to disallow it to show or hide
	     */
	
	
	    function disable() {
	      instance.state.isEnabled = false;
	    }
	    /**
	     * Clears pending timeouts related to the `delay` prop if any
	     */
	
	
	    function clearDelayTimeouts() {
	      clearTimeout(showTimeoutId);
	      clearTimeout(hideTimeoutId);
	      cancelAnimationFrame(scheduleHideAnimationFrameId);
	    }
	    /**
	     * Sets new props for the instance and redraws the tooltip
	     */
	
	
	    function set(options) {
	      // Backwards-compatible after TypeScript change
	      options = options || {};
	      validateOptions(options, defaultProps);
	      removeTriggersFromReference();
	      var prevProps = instance.props;
	      var nextProps = evaluateProps(reference, _extends({}, instance.props, {}, options, {
	        ignoreAttributes: true
	      }));
	      nextProps.ignoreAttributes = hasOwnProperty(options, 'ignoreAttributes') ? options.ignoreAttributes || false : prevProps.ignoreAttributes;
	      instance.props = nextProps;
	      addTriggersToReference();
	      cleanupInteractiveMouseListeners();
	      debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
	      updatePopperElement(popper, prevProps, nextProps);
	      instance.popperChildren = getChildren(popper);
	
	      if (instance.popperInstance) {
	        if (POPPER_INSTANCE_DEPENDENCIES.some(function (prop) {
	          return hasOwnProperty(options, prop) && options[prop] !== prevProps[prop];
	        })) {
	          instance.popperInstance.destroy();
	          createPopperInstance();
	
	          if (instance.state.isVisible) {
	            instance.popperInstance.enableEventListeners();
	          }
	
	          if (instance.props.followCursor && lastMouseMoveEvent) {
	            positionVirtualReferenceNearCursor(lastMouseMoveEvent);
	          }
	        } else {
	          instance.popperInstance.update();
	        }
	      }
	    }
	    /**
	     * Shortcut for .set({ content: newContent })
	     */
	
	
	    function setContent(content) {
	      set({
	        content: content
	      });
	    }
	    /**
	     * Shows the tooltip
	     */
	
	
	    function show() {
	      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getValue(instance.props.duration, 0, defaultProps.duration[1]);
	
	      if (instance.state.isDestroyed || !instance.state.isEnabled || isUsingTouch && !instance.props.touch) {
	        return;
	      } // Standardize `disabled` behavior across browsers.
	      // Firefox allows events on disabled elements, but Chrome doesn't.
	      // Using a wrapper element (i.e. <span>) is recommended.
	
	
	      if (getEventListenersTarget().hasAttribute('disabled')) {
	        return;
	      }
	
	      if (instance.props.onShow(instance) === false) {
	        return;
	      }
	
	      addDocumentClickListener();
	      popper.style.visibility = 'visible';
	      instance.state.isVisible = true;
	
	      if (instance.props.interactive) {
	        getEventListenersTarget().classList.add(ACTIVE_CLASS);
	      } // Prevent a transition if the popper is at the opposite placement
	
	
	      var transitionableElements = getTransitionableElements();
	      setTransitionDuration(transitionableElements.concat(popper), 0);
	
	      currentMountCallback = function currentMountCallback() {
	        if (!instance.state.isVisible) {
	          return;
	        }
	
	        var isInLooseFollowCursorMode = getIsInLooseFollowCursorMode();
	
	        if (isInLooseFollowCursorMode && lastMouseMoveEvent) {
	          positionVirtualReferenceNearCursor(lastMouseMoveEvent);
	        } else if (!isInLooseFollowCursorMode) {
	          // Double update will apply correct mutations
	          instance.popperInstance.update();
	        }
	
	        if (instance.popperChildren.backdrop) {
	          instance.popperChildren.content.style.transitionDelay = Math.round(duration / 12) + 'ms';
	        }
	
	        if (instance.props.sticky) {
	          makeSticky();
	        }
	
	        setTransitionDuration([popper], instance.props.updateDuration);
	        setTransitionDuration(transitionableElements, duration);
	        setVisibilityState(transitionableElements, 'visible');
	        onTransitionedIn(duration, function () {
	          if (instance.props.aria) {
	            getEventListenersTarget().setAttribute("aria-".concat(instance.props.aria), popper.id);
	          }
	
	          instance.props.onShown(instance);
	          instance.state.isShown = true;
	        });
	      };
	
	      mount();
	    }
	    /**
	     * Hides the tooltip
	     */
	
	
	    function hide() {
	      var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getValue(instance.props.duration, 1, defaultProps.duration[1]);
	
	      if (instance.state.isDestroyed || !instance.state.isEnabled && !isBeingDestroyed) {
	        return;
	      }
	
	      if (instance.props.onHide(instance) === false && !isBeingDestroyed) {
	        return;
	      }
	
	      removeDocumentClickListener();
	      popper.style.visibility = 'hidden';
	      instance.state.isVisible = false;
	      instance.state.isShown = false;
	      wasVisibleDuringPreviousUpdate = false;
	
	      if (instance.props.interactive) {
	        getEventListenersTarget().classList.remove(ACTIVE_CLASS);
	      }
	
	      var transitionableElements = getTransitionableElements();
	      setTransitionDuration(transitionableElements, duration);
	      setVisibilityState(transitionableElements, 'hidden');
	      onTransitionedOut(duration, function () {
	        if (!isScheduledToShow) {
	          removeFollowCursorListener();
	        }
	
	        if (instance.props.aria) {
	          getEventListenersTarget().removeAttribute("aria-".concat(instance.props.aria));
	        }
	
	        instance.popperInstance.disableEventListeners();
	        instance.popperInstance.options.placement = instance.props.placement;
	        popper.parentNode.removeChild(popper);
	        instance.props.onHidden(instance);
	        instance.state.isMounted = false;
	      });
	    }
	    /**
	     * Destroys the tooltip
	     */
	
	
	    function destroy(destroyTargetInstances) {
	      if (instance.state.isDestroyed) {
	        return;
	      }
	
	      isBeingDestroyed = true; // If the popper is currently mounted to the DOM, we want to ensure it gets
	      // hidden and unmounted instantly upon destruction
	
	      if (instance.state.isMounted) {
	        hide(0);
	      }
	
	      removeTriggersFromReference();
	      delete reference._tippy;
	      var target = instance.props.target;
	
	      if (target && destroyTargetInstances && isRealElement(reference)) {
	        arrayFrom(reference.querySelectorAll(target)).forEach(function (child) {
	          if (child._tippy) {
	            child._tippy.destroy();
	          }
	        });
	      }
	
	      if (instance.popperInstance) {
	        instance.popperInstance.destroy();
	      }
	
	      isBeingDestroyed = false;
	      instance.state.isDestroyed = true;
	    }
	  }
	
	  /**
	   * Groups an array of instances by taking control of their props during
	   * certain lifecycles.
	   */
	  function group(instances) {
	    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        _ref$delay = _ref.delay,
	        delay = _ref$delay === void 0 ? instances[0].props.delay : _ref$delay,
	        _ref$duration = _ref.duration,
	        duration = _ref$duration === void 0 ? 0 : _ref$duration;
	
	    var isAnyTippyOpen = false;
	    instances.forEach(function (instance) {
	      if (instance._originalProps) {
	        instance.set(instance._originalProps);
	      } else {
	        instance._originalProps = _extends({}, instance.props);
	      }
	    });
	
	    function setIsAnyTippyOpen(value) {
	      isAnyTippyOpen = value;
	      updateInstances();
	    }
	
	    function onShow(instance) {
	      instance._originalProps.onShow(instance);
	
	      instances.forEach(function (instance) {
	        instance.set({
	          duration: duration
	        });
	
	        if (instance.state.isVisible) {
	          instance.hide();
	        }
	      });
	      setIsAnyTippyOpen(true);
	    }
	
	    function onHide(instance) {
	      instance._originalProps.onHide(instance);
	
	      setIsAnyTippyOpen(false);
	    }
	
	    function onShown(instance) {
	      instance._originalProps.onShown(instance);
	
	      instance.set({
	        duration: instance._originalProps.duration
	      });
	    }
	
	    function updateInstances() {
	      instances.forEach(function (instance) {
	        instance.set({
	          onShow: onShow,
	          onShown: onShown,
	          onHide: onHide,
	          delay: isAnyTippyOpen ? [0, Array.isArray(delay) ? delay[1] : delay] : delay,
	          duration: isAnyTippyOpen ? duration : instance._originalProps.duration
	        });
	      });
	    }
	
	    updateInstances();
	  }
	
	  var globalEventListenersBound = false;
	  /**
	   * Exported module
	   */
	
	  function tippy(targets, options) {
	    validateOptions(options || {}, defaultProps);
	
	    if (!globalEventListenersBound) {
	      bindGlobalEventListeners();
	      globalEventListenersBound = true;
	    }
	
	    var props = _extends({}, defaultProps, {}, options); // If they are specifying a virtual positioning reference, we need to polyfill
	    // some native DOM props
	
	
	    if (isBareVirtualElement(targets)) {
	      polyfillElementPrototypeProperties(targets);
	    }
	
	    var instances = getArrayOfElements(targets).reduce(function (acc, reference) {
	      var instance = reference && createTippy(reference, props);
	
	      if (instance) {
	        acc.push(instance);
	      }
	
	      return acc;
	    }, []);
	    return isSingular(targets) ? instances[0] : instances;
	  }
	  /**
	   * Static props
	   */
	
	
	  tippy.version = version;
	  tippy.defaults = defaultProps;
	  /**
	   * Static methods
	   */
	
	  tippy.setDefaults = function (partialDefaults) {
	    Object.keys(partialDefaults).forEach(function (key) {
	      // @ts-ignore
	      defaultProps[key] = partialDefaults[key];
	    });
	  };
	
	  tippy.hideAll = hideAll;
	  tippy.group = group;
	  /**
	   * Auto-init tooltips for elements with a `data-tippy="..."` attribute
	   */
	
	  function autoInit() {
	    arrayFrom(document.querySelectorAll('[data-tippy]')).forEach(function (el) {
	      var content = el.getAttribute('data-tippy');
	
	      if (content) {
	        tippy(el, {
	          content: content
	        });
	      }
	    });
	  }
	
	  if (isBrowser) {
	    setTimeout(autoInit);
	  }
	
	  /**
	   * Injects a string of CSS styles to a style node in <head>
	   */
	
	  function injectCSS(css) {
	    if (isBrowser) {
	      var style = document.createElement('style');
	      style.type = 'text/css';
	      style.textContent = css;
	      style.setAttribute('data-tippy-stylesheet', '');
	      var head = document.head;
	      var firstStyleOrLinkTag = head.querySelector('style,link');
	
	      if (firstStyleOrLinkTag) {
	        head.insertBefore(style, firstStyleOrLinkTag);
	      } else {
	        head.appendChild(style);
	      }
	    }
	  }
	
	  injectCSS(css);
	
	  return tippy;
	
	}));
	//# sourceMappingURL=index.all.js.map


/***/ },
/* 90 */
/***/ function(module, exports) {

	(function(self) {
	  'use strict';
	
	  if (self.fetch) {
	    return
	  }
	
	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }
	
	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ]
	
	    var isDataView = function(obj) {
	      return obj && DataView.prototype.isPrototypeOf(obj)
	    }
	
	    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    }
	  }
	
	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }
	
	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }
	
	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }
	
	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }
	
	    return iterator
	  }
	
	  function Headers(headers) {
	    this.map = {}
	
	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }
	
	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var oldValue = this.map[name]
	    this.map[name] = oldValue ? oldValue+','+value : value
	  }
	
	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }
	
	  Headers.prototype.get = function(name) {
	    name = normalizeName(name)
	    return this.has(name) ? this.map[name] : null
	  }
	
	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }
	
	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value)
	  }
	
	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this)
	      }
	    }
	  }
	
	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }
	
	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }
	
	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }
	
	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }
	
	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsArrayBuffer(blob)
	    return promise
	  }
	
	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsText(blob)
	    return promise
	  }
	
	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf)
	    var chars = new Array(view.length)
	
	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i])
	    }
	    return chars.join('')
	  }
	
	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength)
	      view.set(new Uint8Array(buf))
	      return view.buffer
	    }
	  }
	
	  function Body() {
	    this.bodyUsed = false
	
	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (!body) {
	        this._bodyText = ''
	      } else if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer)
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer])
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body)
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }
	
	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }
	
	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }
	
	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      }
	    }
	
	    this.text = function() {
	      var rejected = consumed(this)
	      if (rejected) {
	        return rejected
	      }
	
	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    }
	
	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }
	
	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }
	
	    return this
	  }
	
	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
	
	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }
	
	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	
	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = String(input)
	    }
	
	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null
	
	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }
	
	  Request.prototype.clone = function() {
	    return new Request(this, { body: this._bodyInit })
	  }
	
	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }
	
	  function parseHeaders(rawHeaders) {
	    var headers = new Headers()
	    rawHeaders.split(/\r?\n/).forEach(function(line) {
	      var parts = line.split(':')
	      var key = parts.shift().trim()
	      if (key) {
	        var value = parts.join(':').trim()
	        headers.append(key, value)
	      }
	    })
	    return headers
	  }
	
	  Body.call(Request.prototype)
	
	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }
	
	    this.type = 'default'
	    this.status = 'status' in options ? options.status : 200
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = 'statusText' in options ? options.statusText : 'OK'
	    this.headers = new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }
	
	  Body.call(Response.prototype)
	
	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }
	
	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }
	
	  var redirectStatuses = [301, 302, 303, 307, 308]
	
	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }
	
	    return new Response(null, {status: status, headers: {location: url}})
	  }
	
	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response
	
	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init)
	      var xhr = new XMLHttpRequest()
	
	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        }
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }
	
	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.open(request.method, request.url, true)
	
	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }
	
	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }
	
	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })
	
	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ }
/******/ ]);
//# sourceMappingURL=main.1e21c8eb.js.map